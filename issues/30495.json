{
  "type": "issue",
  "issue": {
    "id": 2421632791,
    "node_id": "I_kwDOABII586QVy8X",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30495",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30495/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30495/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30495/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/30495",
    "number": 30495,
    "state": "open",
    "state_reason": null,
    "title": "Faster way to get block with prevouts in JSON-RPC",
    "body": "I often need to process the whole blockchain (or a large part of it) using an external script/program, for which I need blocks with prevout information included. However, the only current way to get that is `getblock <hash> 3`, which includes a lot of potentially unnecessary data and is quite slow, mainly (based on my experiments) because of `UniValue` overhead and descriptor inferring.\r\n\r\nI benchmarked current master, retrieving 1000 blocks sequentially starting at block 840000, with different `verbosity` parameters:\r\n\r\n|benchmark|result|\r\n|-|-|\r\n|getblock (verbosity=0)|16.189s ± 1.165s|\r\n|getblock (verbosity=1)|31.975s ± 1.014s|\r\n|getblock (verbosity=2)|352.487s ± 1.636s|\r\n|getblock (verbosity=3)|473.375s ± 2.280s|\r\n\r\nAs you can see, verbosity=3 is around 30 times slower than verbosity=0. It seems obvious that a faster way of getting blocks with prevout information is feasible.\r\n\r\nPotential solutions that come to mind:\r\n- Creating a new RPC call for undo data, say `getblockundo`. This would be perfect for my needs, but it would require making the undo data serialization format non-internal (not sure if this would be a problem, as IIRC it hasn't changed in many years).\r\n- Creating a new verbosity level for `getblock` that would only provide the minimum amount of data necessary (i.e. no addresses, descriptors, ASM scripts, TXIDs/WTXIDs etc.) while still providing prevouts. This would be better than nothing but would still leave a lot of performance on the table because of `UniValue` overhead.",
    "user": {
      "login": "vostrnad",
      "id": 43024885,
      "node_id": "MDQ6VXNlcjQzMDI0ODg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vostrnad",
      "html_url": "https://github.com/vostrnad",
      "followers_url": "https://api.github.com/users/vostrnad/followers",
      "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
      "organizations_url": "https://api.github.com/users/vostrnad/orgs",
      "repos_url": "https://api.github.com/users/vostrnad/repos",
      "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/vostrnad/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "NONE",
    "locked": false,
    "comments": 0,
    "created_at": "2024-07-21T22:48:36Z",
    "updated_at": "2024-07-21T22:48:36Z"
  },
  "events": []
}