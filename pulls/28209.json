{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
    "id": 1461246047,
    "node_id": "PR_kwDOABII585XGNhf",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28209",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28209.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28209.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
    "number": 28209,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "fuzz: a target for the block index database",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This introduces a small fuzz target for `CBlockTreeDB` which asserts a few invariants by using an in-memory LevelDb.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2023-08-03T10:50:36Z",
    "updated_at": "2024-05-30T11:29:15Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "95c71abaab6e4bef0306d7b2fcc7f5668be5d0c9",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "darosior:fuzz_block_index",
      "ref": "fuzz_block_index",
      "sha": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 168868367,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjg4NjgzNjc=",
        "name": "bitcoin",
        "full_name": "darosior/bitcoin",
        "owner": {
          "login": "darosior",
          "id": 22457751,
          "node_id": "MDQ6VXNlcjIyNDU3NzUx",
          "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/darosior",
          "html_url": "https://github.com/darosior",
          "followers_url": "https://api.github.com/users/darosior/followers",
          "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
          "organizations_url": "https://api.github.com/users/darosior/orgs",
          "repos_url": "https://api.github.com/users/darosior/repos",
          "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/darosior/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/darosior/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/darosior/bitcoin",
        "archive_url": "https://api.github.com/repos/darosior/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/darosior/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/darosior/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/darosior/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/darosior/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/darosior/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/darosior/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/darosior/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/darosior/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/darosior/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/darosior/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/darosior/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/darosior/bitcoin/events",
        "forks_url": "https://api.github.com/repos/darosior/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/darosior/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/darosior/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/darosior/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/darosior/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/darosior/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/darosior/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/darosior/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/darosior/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/darosior/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/darosior/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/darosior/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/darosior/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/darosior/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/darosior/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/darosior/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:darosior/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/darosior/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/darosior/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/darosior/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/darosior/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/darosior/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/darosior/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/darosior/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/darosior/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/darosior/bitcoin/hooks",
        "svn_url": "https://github.com/darosior/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 242108,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-30T10:57:06Z",
        "created_at": "2019-02-02T19:20:27Z",
        "updated_at": "2023-11-07T12:50:46Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "10164916f712bd3c92f0b3ac329ba2e1209746fe",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35438,
        "stargazers_count": 76587,
        "watchers_count": 76587,
        "size": 259994,
        "default_branch": "master",
        "open_issues_count": 689,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-30T11:36:13Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-05-30T11:36:29Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 134,
    "deletions": 0,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 35,
    "comments": 11
  },
  "events": [
    {
      "event": "commented",
      "id": 1663764798,
      "node_id": "IC_kwDOABII585jKwk-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663764798",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T10:50:39Z",
      "updated_at": "2024-05-30T11:29:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28209).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-2088000201) |\n| Concept ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1560871534), [dergoegge](https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1663851387) |\n| Stale ACK | [brunoerg](https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1804183397), [jamesob](https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1806749752) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1663764798",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "labeled",
      "id": 9997541256,
      "node_id": "LE_lADOABII585tXQ8MzwAAAAJT5l-I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9997541256",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T10:50:40Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "review_requested",
      "id": 9997548397,
      "node_id": "RRE_lADOABII585tXQ8MzwAAAAJT5ntt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9997548397",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T10:51:25Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1560871534,
      "node_id": "PRR_kwDOABII585dCQJu",
      "url": null,
      "actor": null,
      "commit_id": "8f26ab29a944feedcb05deda7ab08fecdf5cdd91",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, left two nits",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1560871534",
      "submitted_at": "2023-08-03T11:34:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9998079079,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAJT7pRn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9998079079",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T11:49:28Z"
    },
    {
      "event": "commented",
      "id": 1663841536,
      "node_id": "IC_kwDOABII585jLDUA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663841536",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T11:49:42Z",
      "updated_at": "2023-08-03T11:49:42Z",
      "author_association": "MEMBER",
      "body": "Thanks, addressed your comments.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1663841536",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "commented",
      "id": 1663851387,
      "node_id": "IC_kwDOABII585jLFt7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663851387",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T11:57:14Z",
      "updated_at": "2023-08-03T11:57:14Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1663851387",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "commented",
      "id": 1664327227,
      "node_id": "IC_kwDOABII585jM547",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664327227",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T16:58:57Z",
      "updated_at": "2023-08-03T16:58:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1664327227",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "reviewed",
      "id": 1561543849,
      "node_id": "PRR_kwDOABII585dE0Sp",
      "url": null,
      "actor": null,
      "commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1561543849",
      "submitted_at": "2023-08-03T17:18:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10007341419,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAJUe-lr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10007341419",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-04T09:24:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10007481760,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAJUfg2g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10007481760",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-04T09:40:28Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-04T12:31:17Z",
      "updated_at": "2023-08-04T12:31:17Z",
      "source": {
        "issue": {
          "id": 1836664702,
          "node_id": "PR_kwDOABII585XMXKB",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28216",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28216/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28216/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28216/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28216",
          "number": 28216,
          "state": "open",
          "state_reason": null,
          "title": "fuzz: a new target for the coins database",
          "body": "Similarly to #28209, this introduces a fuzz target for `CCoinsViewDb` by using an in-memory LevelDB. We reuse the body of the existing fuzz target for `coins_view`.",
          "user": {
            "login": "darosior",
            "id": 22457751,
            "node_id": "MDQ6VXNlcjIyNDU3NzUx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/darosior",
            "html_url": "https://github.com/darosior",
            "followers_url": "https://api.github.com/users/darosior/followers",
            "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
            "organizations_url": "https://api.github.com/users/darosior/orgs",
            "repos_url": "https://api.github.com/users/darosior/repos",
            "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/darosior/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28216",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28216",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28216.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28216.patch"
          },
          "created_at": "2023-08-04T12:31:16Z",
          "updated_at": "2024-05-30T11:32:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10095841037,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAJZwk8N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10095841037",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T10:43:40Z"
    },
    {
      "event": "labeled",
      "id": 10099041950,
      "node_id": "LE_lADOABII585tXQ8MzwAAAAJZ8yae",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10099041950",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T16:30:56Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10116888221,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAJbA3ad",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10116888221",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T09:11:36Z"
    },
    {
      "event": "commented",
      "id": 1681920298,
      "node_id": "IC_kwDOABII585kQBEq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1681920298",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T09:11:51Z",
      "updated_at": "2023-08-17T09:11:51Z",
      "author_association": "MEMBER",
      "body": "Rebased on master to fix the macOS CI.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1681920298",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "unlabeled",
      "id": 10117909719,
      "node_id": "UNLE_lADOABII585tXQ8MzwAAAAJbEwzX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10117909719",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T10:42:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10288996640,
      "node_id": "LE_lADOABII585tXQ8MzwAAAAJlRaEg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10288996640",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T23:45:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1707716605,
      "node_id": "IC_kwDOABII585lya_9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1707716605",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T05:58:02Z",
      "updated_at": "2023-09-06T05:58:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needs rebase if still relevant",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1707716605",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10305815614,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAJmRkQ-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10305815614",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-07T10:46:24Z"
    },
    {
      "event": "commented",
      "id": 1709930259,
      "node_id": "IC_kwDOABII585l63cT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1709930259",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-07T10:46:33Z",
      "updated_at": "2023-09-07T10:46:33Z",
      "author_association": "MEMBER",
      "body": "Ok @DrahtBot. Done.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1709930259",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "mentioned",
      "id": 10305817023,
      "node_id": "MEE_lADOABII585tXQ8MzwAAAAJmRkm_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10305817023",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-07T10:46:33Z"
    },
    {
      "event": "subscribed",
      "id": 10305817043,
      "node_id": "SE_lADOABII585tXQ8MzwAAAAJmRknT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10305817043",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-07T10:46:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10315732700,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAJm3Zbc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10315732700",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-08T09:10:07Z"
    },
    {
      "event": "unlabeled",
      "id": 10327163551,
      "node_id": "UNLE_lADOABII585tXQ8MzwAAAAJnjAKf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10327163551",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-10T19:49:26Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10446536303,
      "node_id": "LE_lADOABII585tXQ8MzwAAAAJuqX5v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10446536303",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-22T11:50:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 10467349948,
      "node_id": "UNLE_lADOABII585tXQ8MzwAAAAJv5xW8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10467349948",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-25T20:42:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11362064978,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAKlO1pS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11362064978",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-31T15:34:12Z"
    },
    {
      "event": "commented",
      "id": 1872976767,
      "node_id": "IC_kwDOABII585vo1t_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1872976767",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-31T15:34:15Z",
      "updated_at": "2023-12-31T15:34:15Z",
      "author_association": "MEMBER",
      "body": "Added a `MakeNoLogFileContext` at init to avoid the ever-increasing memory usage due to log messages.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1872976767",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "labeled",
      "id": 11362136707,
      "node_id": "LE_lADOABII585tXQ8MzwAAAAKlPHKD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11362136707",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-31T16:25:19Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11369296408,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAKlqbIY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11369296408",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T11:10:48Z"
    },
    {
      "event": "unlabeled",
      "id": 11369770883,
      "node_id": "UNLE_lADOABII585tXQ8MzwAAAAKlsO-D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11369770883",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T12:18:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1875575611,
      "node_id": "IC_kwDOABII585vywM7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1875575611",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-03T15:45:09Z",
      "updated_at": "2024-01-03T15:45:09Z",
      "author_association": "MEMBER",
      "body": "Coverage for `block_index`: https://dergoegge.github.io/bitcoin-coverage/pr28209/fuzz.coverage/index.html",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1875575611",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "reviewed",
      "id": 1802937872,
      "node_id": "PRR_kwDOABII585rdqYQ",
      "url": null,
      "actor": null,
      "commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1802937872",
      "submitted_at": "2024-01-03T19:17:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "reviewed",
      "id": 1804173544,
      "node_id": "PRR_kwDOABII585riYDo",
      "url": null,
      "actor": null,
      "commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1804173544",
      "submitted_at": "2024-01-04T13:38:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "reviewed",
      "id": 1804180509,
      "node_id": "PRR_kwDOABII585riZwd",
      "url": null,
      "actor": null,
      "commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1804180509",
      "submitted_at": "2024-01-04T13:42:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "reviewed",
      "id": 1804183397,
      "node_id": "PRR_kwDOABII585riadl",
      "url": null,
      "actor": null,
      "commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "crACK 8083aa21a699cb240a11741be8ba5cfeeb58ee8b\r\n\r\nleft some nits",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1804183397",
      "submitted_at": "2024-01-04T13:44:08Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "review_requested",
      "id": 11390094790,
      "node_id": "RRE_lADOABII585tXQ8MzwAAAAKm5w3G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11390094790",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T13:44:13Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1806749752,
      "node_id": "PRR_kwDOABII585rsNA4",
      "url": null,
      "actor": null,
      "commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 8083aa21a699cb240a11741be8ba5cfeeb58ee8b ([`jamesob/ackr/28209.1.darosior.fuzz_a_target_for_the_bl`](https://github.com/jamesob/bitcoin/tree/ackr/28209.1.darosior.fuzz_a_target_for_the_bl))\r\n\r\nRan the test locally and read over the change. This is a good basic test to have in place; seems like a low-risk merge.\r\n\r\n<details><summary>Show signature data</summary>\r\n<p>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 8083aa21a699cb240a11741be8ba5cfeeb58ee8b ([`jamesob/ackr/28209.1.darosior.fuzz_a_target_for_the_bl`](https://github.com/jamesob/bitcoin/tree/ackr/28209.1.darosior.fuzz_a_target_for_the_bl))\r\n\r\nRan the test locally and read over the change. This is a good basic test to have in place; seems like a low-risk merge.\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmWYX70ACgkQepNdrbLE\r\nTwVgYQ/+LDdpandHPyTi1cLLNY5tCGl/r8dIh5bpYrpz1GNgCdkbvpR3Bmu96NrP\r\nBbyG4CjtvoZM//F+Ri9Iizy7RjIDXdClnpn5Uw7LQ45Mq0ow9LHRAQB1hTKyHi0v\r\nSQZ/91I9ZuthzX2EAMwxcCmc1KrRpG8zzM3uDBZ2PCHYjO9/I1e3J6FS0gyJkOFP\r\nHXDwKo6gPmMXlKOdsdYzWH/M01anDSuK3lK5VYDL6ORgaj75BCc8UOzALKyQXGoG\r\njTU27Iu9wGyup5uSZzCEMoTwJUyrcx9jJzmIjdkTPQH7SVerHFOs9yPPeUVv5BPO\r\nb0yLc3RIMKnFe+1bIHO49KHdd1eXsYeimAMaLygrj7vZrh81RX5Qwf5aKIy2X2HV\r\nTE5I2yBQ2AX9/e8XNZjSc92pMySdH/deCJOlfADBsWvsYfgjyZQrXY9Q9wQClOUg\r\nsiz/egYV+aqeMjlqC9MLjpY9q+MxJge5r11v9zKqsI99H/VuUdX5Gl0WyvwANxN2\r\nYcBcXduTeop/PN8R55s3mKFNnts0pagvhYKHXJnDHuSEcIQsxK/F3YWQPo2KL4Ks\r\nsigccvKG01zezFWiEB/hUsdUl7gz1GkKd56soqVr5CPPwMJobAKJfrcg8pHIgUYe\r\nBLXPt7sZzgF59Udys1bZ8CjJPUIepx2XVjP6bz8vAyl8EfnctxI=\r\n=2f3X\r\n-----END PGP SIGNATURE-----\r\n\r\n```\r\n\r\n</p></details>\r\n\r\n<details><summary>Show platform data</summary>\r\n<p>\r\n\r\n```\r\nTested on Linux-6.6.8-arch1-1-x86_64-with-glibc2.38\r\n\r\nConfigured with ./configure 'BDB_LIBS=-L/home/james/src/bitcoin/db4/lib -ldb_cxx-4.8' BDB_CFLAGS=-I/home/james/src/bitcoin/db4/include 'CXXFLAGS=-fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare ' --disable-gui-tests --enable-fuzz --with-sanitizers=address,fuzzer,undefined --enable-wallet --enable-debug --with-daemon --enable-natpmp-default\r\n\r\nCompiled with /usr/bin/ccache /usr/bin/clang++ -std=c++20 -mavx -mavx2 -mpclmul -fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare  -O0 -g3 -ftrapv -fdebug-prefix-map=$(abs_top_srcdir)=.  -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection -fsanitize=address,fuzzer,undefined -msse4.1 -msse4.2 -msse4 -msha  i\r\n\r\nCompiler version: clang version 16.0.6\r\n```\r\n\r\n</p></details>\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1806749752",
      "submitted_at": "2024-01-05T19:58:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "commented",
      "id": 1881435270,
      "node_id": "IC_kwDOABII585wJGyG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1881435270",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T16:37:17Z",
      "updated_at": "2024-01-08T16:37:17Z",
      "author_association": "MEMBER",
      "body": "Two ACKs on a test change - RFM?",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1881435270",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "reviewed",
      "id": 1811154144,
      "node_id": "PRR_kwDOABII585r9ATg",
      "url": null,
      "actor": null,
      "commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1811154144",
      "submitted_at": "2024-01-09T13:41:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "review_requested",
      "id": 11430503325,
      "node_id": "RRE_lADOABII585tXQ8MzwAAAAKpT6Od",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11430503325",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T13:41:40Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 11473229987,
      "node_id": "LE_lADOABII585tXQ8MzwAAAAKr25ij",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11473229987",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T19:49:19Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11477956343,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAKsI7b3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11477956343",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T12:43:49Z"
    },
    {
      "event": "unlabeled",
      "id": 11478072983,
      "node_id": "UNLE_lADOABII585tXQ8MzwAAAAKsJX6X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11478072983",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T13:34:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "review_requested",
      "id": 12408755548,
      "node_id": "RRE_lADOABII585tXQ8MzwAAAALjnpVc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12408755548",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T15:19:49Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 2051450602,
      "node_id": "PRR_kwDOABII5856Rqbq",
      "url": null,
      "actor": null,
      "commit_id": "ffee43efe845cbbfbf16d5e61a1d541cb316ef56",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-2051450602",
      "submitted_at": "2024-05-12T20:45:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "reviewed",
      "id": 2051451161,
      "node_id": "PRR_kwDOABII5856RqkZ",
      "url": null,
      "actor": null,
      "commit_id": "ffee43efe845cbbfbf16d5e61a1d541cb316ef56",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-2051451161",
      "submitted_at": "2024-05-12T20:46:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "reviewed",
      "id": 2051980268,
      "node_id": "PRR_kwDOABII5856Trvs",
      "url": null,
      "actor": null,
      "commit_id": "ffee43efe845cbbfbf16d5e61a1d541cb316ef56",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK ffee43efe845cbbfbf16d5e61a1d541cb316ef56",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-2051980268",
      "submitted_at": "2024-05-13T08:19:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    },
    {
      "event": "review_requested",
      "id": 12783262254,
      "node_id": "RRE_lADOABII585tXQ8MzwAAAAL58Rou",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12783262254",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T08:19:36Z",
      "requested_reviewer": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 12783262476,
      "node_id": "RRE_lADOABII585tXQ8MzwAAAAL58RsM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12783262476",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T08:19:37Z",
      "requested_reviewer": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg2YjM4NTI5ZDUwMTQ2MTJjM2U3YmI1OWZkYzRkYWQzYmZmMmFhNjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "tree": {
        "sha": "a117c8acee2806b790e0fabb864fd78babccba93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a117c8acee2806b790e0fabb864fd78babccba93"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a117c8acee2806b790e0fabb864fd78babccba93\nparent 10164916f712bd3c92f0b3ac329ba2e1209746fe\nauthor Antoine Poinsot <darosior@protonmail.com> 1691054326 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1717001704 +0200\n\nqa: a fuzz target for the block index database\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmZXXegACgkQ4T/BRc0/\nQwQ2fAv+IzfjJddsnhLbfrz9Co68RzvLvDKWQGEO+otOkk+2tmJ0efP0xAYtw83b\nT17yam8s9zdtTtRyevBXmz2oTlVjoFZmwrKjbzPUfO670xGKMP+x6w5GIOaVqsO1\ntEl8XSTQF7veAvB50RMoNnsC8G+O6MZ4WzLkXON1rmmt1HQTduoCfXHcqrFdgGis\nD/9XglALtKNqVJ9WTpPSPlN8ks6loqZ1ENcMSqOY+6X8awbXVM6EsFLRHWYNbbzI\nfzlM0ESx5MrCi6950PoH8pA8eJIYCLT/UjCLwqynY+65S7si2xOL2O26wfXZ7DtO\nDSwP0tGF/qHT7SWcHIXzD/DnM7CPjqkcCMzy6S7r2HKf55ocmHbrjXVn4tamLhDk\nC93v2K5Nx4mjmYQbuwmz7XAqrJ93rTCDzt0v0cDeCl24VhS9MSFwNR+l2h0QdBL2\nKOnLzkyykcNpRqCDbojozdlEoW2RqBu3llO/VYluifbDtiq2u2pqC968nZOpALwM\nacbt2vX+\n=o4Kg\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10164916f712bd3c92f0b3ac329ba2e1209746fe",
          "sha": "10164916f712bd3c92f0b3ac329ba2e1209746fe",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/10164916f712bd3c92f0b3ac329ba2e1209746fe"
        }
      ],
      "message": "qa: a fuzz target for the block index database",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2024-05-29T16:55:04Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-08-03T09:18:46Z"
      },
      "sha": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12974774125,
      "node_id": "HRFPE_lADOABII585tXQ8MzwAAAAMFW1dt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12974774125",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-29T16:55:18Z"
    },
    {
      "event": "commented",
      "id": 2137880687,
      "node_id": "IC_kwDOABII585_bXhv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2137880687",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-29T17:01:37Z",
      "updated_at": "2024-05-29T17:01:37Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review, i've also rebased on top of master for fresh CI.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-2137880687",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28209"
    },
    {
      "event": "reviewed",
      "id": 2088000201,
      "node_id": "PRR_kwDOABII5858dFrJ",
      "url": null,
      "actor": null,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Re-ACK 86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-2088000201",
      "submitted_at": "2024-05-30T11:29:11Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283055992",
      "pull_request_review_id": 1560871534,
      "id": 1283055992,
      "node_id": "PRRC_kwDOABII585MeeF4",
      "diff_hunk": "@@ -92,6 +92,16 @@ class CBlockFileInfo\n         if (nTimeIn > nTimeLast)\n             nTimeLast = nTimeIn;\n     }\n+\n+    bool operator==(const CBlockFileInfo& b) const {",
      "path": "src/chain.h",
      "position": null,
      "original_position": 5,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8f26ab29a944feedcb05deda7ab08fecdf5cdd91",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not sure about adding test-only code to \"real\" code. What about moving this to the only fuzz test that needs it?",
      "created_at": "2023-08-03T11:21:03Z",
      "updated_at": "2023-08-03T11:34:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283055992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283055992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283056551",
      "pull_request_review_id": 1560871534,
      "id": 1283056551,
      "node_id": "PRRC_kwDOABII585MeeOn",
      "diff_hunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <pow.h>\n+",
      "path": "src/test/fuzz/block_index.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8f26ab29a944feedcb05deda7ab08fecdf5cdd91",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: remove newline?",
      "created_at": "2023-08-03T11:21:38Z",
      "updated_at": "2023-08-03T11:34:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283056551",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283056551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080177",
      "pull_request_review_id": 1560908036,
      "id": 1283080177,
      "node_id": "PRRC_kwDOABII585Mej_x",
      "diff_hunk": "@@ -92,6 +92,16 @@ class CBlockFileInfo\n         if (nTimeIn > nTimeLast)\n             nTimeLast = nTimeIn;\n     }\n+\n+    bool operator==(const CBlockFileInfo& b) const {",
      "path": "src/chain.h",
      "position": null,
      "original_position": 5,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8f26ab29a944feedcb05deda7ab08fecdf5cdd91",
      "in_reply_to_id": 1283055992,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure",
      "created_at": "2023-08-03T11:44:44Z",
      "updated_at": "2023-08-03T11:44:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283080177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080569",
      "pull_request_review_id": 1560908634,
      "id": 1283080569,
      "node_id": "PRRC_kwDOABII585MekF5",
      "diff_hunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <pow.h>\n+",
      "path": "src/test/fuzz/block_index.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8f26ab29a944feedcb05deda7ab08fecdf5cdd91",
      "in_reply_to_id": 1283056551,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, i forgot to push my last change, this include shouldn't be here (that's why i had separated it).",
      "created_at": "2023-08-03T11:45:10Z",
      "updated_at": "2023-08-03T11:45:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283080569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283499741",
      "pull_request_review_id": 1561543849,
      "id": 1283499741,
      "node_id": "PRRC_kwDOABII585MgKbd",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 8a0cb8b2147e852ac80d2030057272bdb59a83f2: Instead of using `ConsumeDeserializable`, couldn't we have a function to create a `CBlockFileInfo`? E.g.:\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/block_index.cpp b/src/test/fuzz/block_index.cpp\r\nindex b5b25fcbc7..528c2fae9f 100644\r\n--- a/src/test/fuzz/block_index.cpp\r\n+++ b/src/test/fuzz/block_index.cpp\r\n@@ -37,6 +37,19 @@ void init_block_index()\r\n     SelectParams(ChainType::MAIN);\r\n }\r\n \r\n+CBlockFileInfo CreateCBlockFileInfo(FuzzedDataProvider& fuzzed_data_provider)\r\n+{\r\n+    CBlockFileInfo block_file_info;\r\n+    block_file_info.nBlocks = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nSize = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nUndoSize = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nHeightFirst = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nHeightLast = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nTimeFirst = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\r\n+    block_file_info.nTimeLast = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\r\n+    return block_file_info;\r\n+}\r\n+\r\n FUZZ_TARGET(block_index, .init = init_block_index)\r\n {\r\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n@@ -53,12 +66,9 @@ FUZZ_TARGET(block_index, .init = init_block_index)\r\n     std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\r\n     files_info.reserve(files_count);\r\n     for (int i = 0; i < files_count; i++) {\r\n-        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\r\n-            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\r\n-            files_info.push_back({i, files.back().get()});\r\n-        } else {\r\n-            return;\r\n-        }\r\n+        auto file_info{CreateCBlockFileInfo(fuzzed_data_provider)};\r\n+        files.push_back(std::make_unique<CBlockFileInfo>(std::move(file_info)));\r\n+        files_info.push_back({i, files.back().get()});\r\n     }\r\n \r\n     // Generate a number of block headers to be stored in the index.\r\n```",
      "created_at": "2023-08-03T17:18:01Z",
      "updated_at": "2023-08-03T17:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283499741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283499741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284198100",
      "pull_request_review_id": 1562512011,
      "id": 1284198100,
      "node_id": "PRRC_kwDOABII585Mi07U",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good call, i've adopted this approach for both the `CBlockFile`s and the `CBlockHeader`s.",
      "created_at": "2023-08-04T09:25:22Z",
      "updated_at": "2023-08-04T09:25:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284198100",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284198100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284353466",
      "pull_request_review_id": 1562761528,
      "id": 1284353466,
      "node_id": "PRRC_kwDOABII585Mja26",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is the benefit? Looks like this is more code, easier to break (when for example a type width changes, or when a new field is added), as well as more wasteful (the early return is now removed and the fuzz engine will do a full run even if the fuzz input buffer is the empty string)?",
      "created_at": "2023-08-04T12:18:15Z",
      "updated_at": "2023-08-04T12:18:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284353466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284353466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284361515",
      "pull_request_review_id": 1562774300,
      "id": 1284361515,
      "node_id": "PRRC_kwDOABII585Mjc0r",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My thinking was that it would actually be more efficient to not rely on `ConsumeDeserializable` which needs to first guess the length of the byte vector to be consumed:\r\nhttps://github.com/bitcoin/bitcoin/blob/a4ca4975880c4f870c6047065c70610af2529e74/src/test/fuzz/util.h#L95-L107",
      "created_at": "2023-08-04T12:27:23Z",
      "updated_at": "2023-08-04T12:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284361515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284361515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284364488",
      "pull_request_review_id": 1562779233,
      "id": 1284364488,
      "node_id": "PRRC_kwDOABII585MjdjI",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, that could be. Maybe a benchmark can be done to see if it helps or hurts?\r\n\r\nIn any case, if you keep it, my preference would be to use `decltype()` to derive the type of the fields and not hardcode them.",
      "created_at": "2023-08-04T12:30:46Z",
      "updated_at": "2023-08-04T12:30:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284364488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284364488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284376542",
      "pull_request_review_id": 1562799161,
      "id": 1284376542,
      "node_id": "PRRC_kwDOABII585Mjgfe",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "+1 \r\n\r\n> My thinking was that it would actually be more efficient to not rely on ConsumeDeserializable which needs to first guess the length of the byte vector to be consumed\r\n\r\nMy initial thought was it facilitates especially for cases that `files_count`/`files_count` is closer to their max possible value.",
      "created_at": "2023-08-04T12:44:25Z",
      "updated_at": "2023-08-04T12:44:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284376542",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284376542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284450094",
      "pull_request_review_id": 1562914740,
      "id": 1284450094,
      "node_id": "PRRC_kwDOABII585Mjycu",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Alright, in order to benchmark which approach was most efficient i ran both versions with `-runs=100000` on an empty folder 3 times and compared the average coverage and runtime.\r\n\r\n- `ConsumeIntegral`-based: runtime of 75 seconds for a coverage of `1565` for all 3 runs.\r\n- `ConsumeDeserializable`-based: average runtime of 12 seconds for a coverage of `1560`.\r\n\r\nGiven the burst in coverage at the start of the run, the clear difference in runtime and the small difference in coverage i figured i'd need better measurement. I ran both on an empty folders with `-runs=1000000`:\r\n- `ConsumeIntegral`-based: coverage of `2230` after 1M runs (runtime: 2872 seconds).\r\n- `ConsumeDeserializable`-based: coverage of `2167` after 1M runs (runtime: 1614 seconds).\r\n\r\nMy interpretation of these results is that the `ConsumeDeserializable`-based target runs faster because of the invalid deserializations, that both targets quickly get to some basic coverage, but that the `ConsumeIntegral`-based one eventually gets to produce more interesting coverage. In my opinion i should therefore keep the `ConsumeIntegral`-based version even though its coverage/second is lower.",
      "created_at": "2023-08-04T13:49:27Z",
      "updated_at": "2023-08-04T13:49:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284450094",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284450094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284458654",
      "pull_request_review_id": 1562929155,
      "id": 1284458654,
      "node_id": "PRRC_kwDOABII585Mj0ie",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yea, `ConsumeDeserializable` is faster because it will 'return' every time it gets an invalid deserialization. The coverage is similar but I believe that it's expected because the difference between both approaches will only reflect on the size of blocks and files.",
      "created_at": "2023-08-04T13:57:12Z",
      "updated_at": "2023-08-04T13:57:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284458654",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284458654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284461013",
      "pull_request_review_id": 1562933535,
      "id": 1284461013,
      "node_id": "PRRC_kwDOABII585Mj1HV",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You could also test both approaches by putting an assert right after the loop, something like: `assert(files.size() > 50)`. I believe that the `ConsumeDeserializable`-based will take much more time to reach it.",
      "created_at": "2023-08-04T13:59:16Z",
      "updated_at": "2023-08-04T13:59:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284461013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284461013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284468527",
      "pull_request_review_id": 1562945396,
      "id": 1284468527,
      "node_id": "PRRC_kwDOABII585Mj28v",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> My interpretation of these results is\r\n\r\nI don't think you can use coverage as a metric when comparing two different code bases. The version that has higher coverage is also the version that has more code in the fuzz target, which is also counted toward \"coverage\".",
      "created_at": "2023-08-04T14:04:47Z",
      "updated_at": "2023-08-04T14:04:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284468527",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284468527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284480443",
      "pull_request_review_id": 1562964970,
      "id": 1284480443,
      "node_id": "PRRC_kwDOABII585Mj527",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Trying to maximum the coverage in 100_000 runs for each target i managed to:\r\n- achieve `2099` of coverage with the `ConsumeDeserializable`-based target using `-max_len=10000 -len_control=1 -mutate_depth=3` (in 305 seconds).\r\n- achieve `2088` of coverage with the `ConsumeIntegral`-based target using -max_len=8000 -len_control=0 -use_value_profile=1 -mutate_depth=1` (in 252 seconds).\r\n\r\n------\r\n\r\n> I don't think you can use coverage as a metric\r\n\r\nOh, right.. I had overlooked this. However the difference should be minimal, there is only 8 more lines for the `ConsumeIntegral` version. So i think it's still interesting to compare.\r\n\r\nI'm quite surprised by how well the  `ConsumeDeserializable`-based compares though.. I'm starting to lean toward reverting to this version.\r\n\r\nDo you have a suggestion of a better metric? I feel like introducing a crash wouldn't be interesting given the low coverage of the target.",
      "created_at": "2023-08-04T14:15:26Z",
      "updated_at": "2023-08-04T14:15:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284480443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284480443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284506824",
      "pull_request_review_id": 1563009595,
      "id": 1284506824,
      "node_id": "PRRC_kwDOABII585MkATI",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  I'm starting to lean toward reverting to this version.\r\n\r\nThere's also the possibility to add back the early return to the `ConsumeIntegral` one. (I haven't looked at the fuzz target to see if early return makes more or less sense)\r\n\r\n> I feel like introducing a crash wouldn't be interesting given the low coverage of the target.\r\n\r\nyeah, I guess it is hard to find a meaningful crash. I'd pick a line of code that is usually reached the \"last\" by coverage or is deeply nested.",
      "created_at": "2023-08-04T14:35:21Z",
      "updated_at": "2023-08-04T14:35:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284506824",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284506824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294444800",
      "pull_request_review_id": 1578335372,
      "id": 1294444800,
      "node_id": "PRRC_kwDOABII585NJ6kA",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 70,
      "original_position": 56,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "in_reply_to_id": 1283499741,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've reverted back to using `ConsumeDeserializable`. I had the same intuition as @brunoerg but from my testing it's not clear that the custom way is more efficient (in terms of coverage per unit of time). Absent this, it makes sense to not introduce more code and simply use the existing utilities.",
      "created_at": "2023-08-15T10:49:05Z",
      "updated_at": "2023-08-15T10:49:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1294444800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294444800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1440838577",
      "pull_request_review_id": 1802937872,
      "id": 1440838577,
      "node_id": "PRRC_kwDOABII585V4XOx",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 120,
      "original_position": 121,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Couldn't we fuzz `ReadFlag` with a name we didn't previously write?",
      "created_at": "2024-01-03T19:17:49Z",
      "updated_at": "2024-01-03T19:18:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1440838577",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1440838577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441757749",
      "pull_request_review_id": 1804173544,
      "id": 1441757749,
      "node_id": "PRRC_kwDOABII585V73o1",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 57,
      "original_position": 57,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit (feel free to ignore):\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/block_index.cpp b/src/test/fuzz/block_index.cpp\r\nindex 7885eda747..3f2a55f310 100644\r\n--- a/src/test/fuzz/block_index.cpp\r\n+++ b/src/test/fuzz/block_index.cpp\r\n@@ -54,11 +54,6 @@ void init_block_index()\r\n FUZZ_TARGET(block_index, .init = init_block_index)\r\n {\r\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n-    auto block_index = kernel::BlockTreeDB(DBParams{\r\n-        .path = \"\", // Memory only.\r\n-        .cache_bytes = 1 << 20, // 1MB.\r\n-        .memory_only = true,\r\n-    });\r\n \r\n     // Generate a number of block files to be stored in the index.\r\n     int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\r\n@@ -75,6 +70,12 @@ FUZZ_TARGET(block_index, .init = init_block_index)\r\n         }\r\n     }\r\n \r\n+    auto block_index = kernel::BlockTreeDB(DBParams{\r\n+        .path = \"\", // Memory only.\r\n+        .cache_bytes = 1 << 20, // 1MB.\r\n+        .memory_only = true,\r\n+    });\r\n+\r\n     // Generate a number of block headers to be stored in the index.\r\n     int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\r\n     std::vector<std::unique_ptr<CBlockIndex>> blocks;\r\n```\r\n\r\nwe could initialize the DB after having the files.",
      "created_at": "2024-01-04T13:38:00Z",
      "updated_at": "2024-01-04T13:38:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441757749",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441757749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441762014",
      "pull_request_review_id": 1804180509,
      "id": 1441762014,
      "node_id": "PRRC_kwDOABII585V74re",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 96,
      "original_position": 96,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit (feel free to ignore):\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/block_index.cpp b/src/test/fuzz/block_index.cpp\r\nindex 7885eda747..bc073e4930 100644\r\n--- a/src/test/fuzz/block_index.cpp\r\n+++ b/src/test/fuzz/block_index.cpp\r\n@@ -93,8 +93,8 @@ FUZZ_TARGET(block_index, .init = init_block_index)\r\n \r\n     // We should be able to read every block file info we stored. Its value should correspond to\r\n     // what we stored above.\r\n-    CBlockFileInfo info;\r\n     for (const auto& [n, file_info]: files_info) {\r\n+        CBlockFileInfo info;\r\n         assert(block_index.ReadBlockFileInfo(n, info));\r\n         assert(info == *file_info);\r\n     }\r\n```",
      "created_at": "2024-01-04T13:42:21Z",
      "updated_at": "2024-01-04T13:42:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441762014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441762014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441791286",
      "pull_request_review_id": 1804228745,
      "id": 1441791286,
      "node_id": "PRRC_kwDOABII585V7_02",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 96,
      "original_position": 96,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1441762014,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why? (EDIT: giving a longer answer: why instantiating a new `CBlockFileInfo` for each iteration instead of just reusing the same variable?)",
      "created_at": "2024-01-04T14:10:26Z",
      "updated_at": "2024-01-04T14:11:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441791286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441791286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441828968",
      "pull_request_review_id": 1804285116,
      "id": 1441828968,
      "node_id": "PRRC_kwDOABII585V8JBo",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 57,
      "original_position": 57,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1441757749,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Heh, no that's a good point. There is a bunch happening in CDBWrapper's constructor so i'm sure this would reduce the time we spend on uninteresting inputs.",
      "created_at": "2024-01-04T14:31:35Z",
      "updated_at": "2024-01-04T14:31:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441828968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441828968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441845813",
      "pull_request_review_id": 1804312852,
      "id": 1441845813,
      "node_id": "PRRC_kwDOABII585V8NI1",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 96,
      "original_position": 96,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1441762014,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nevermind, my bad. It's better to reuse the same variable.",
      "created_at": "2024-01-04T14:46:25Z",
      "updated_at": "2024-01-04T14:46:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441845813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441845813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441867954",
      "pull_request_review_id": 1804349130,
      "id": 1441867954,
      "node_id": "PRRC_kwDOABII585V8Siy",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 57,
      "original_position": 57,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1441757749,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, looks like i'm wrong. It doesn't make any difference in runtime when running my target over my local corpus. I'll hold off making this change then.",
      "created_at": "2024-01-04T15:05:32Z",
      "updated_at": "2024-01-04T15:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441867954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441867954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443317367",
      "pull_request_review_id": 1806749752,
      "id": 1443317367,
      "node_id": "PRRC_kwDOABII585WB0Z3",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 120,
      "original_position": 121,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1440838577,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good suggestion, but could be done in a follow-up I guess.",
      "created_at": "2024-01-05T19:55:07Z",
      "updated_at": "2024-01-05T19:58:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1443317367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443317367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446090797",
      "pull_request_review_id": 1811154144,
      "id": 1446090797,
      "node_id": "PRRC_kwDOABII585WMZgt",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};",
      "path": "src/test/fuzz/block_index.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think constants are not supposed to be prefixed with `g_`\r\n\r\n```suggestion\r\nconst uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\r\nconst uint32_t g_bits{0x1d00ffff};\r\n```\r\n\r\nI think you could also just use the genesis block (`Params().GenesisBlock()`) for these two values.",
      "created_at": "2024-01-09T13:29:23Z",
      "updated_at": "2024-01-09T13:41:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446090797",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446090797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446096447",
      "pull_request_review_id": 1811154144,
      "id": 1446096447,
      "node_id": "PRRC_kwDOABII585WMa4_",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);",
      "path": "src/test/fuzz/block_index.cpp",
      "position": null,
      "original_position": 118,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const std::string flag_name = fuzzed_data_provider.ConsumeRandomLengthString(100);\r\n```\r\n\r\n`ConsumeRandomLengthString`: \"Designed to be more stable with respect to a fuzzer inserting characters than just picking a random length and then consuming that many bytes with |ConsumeBytes|.\"",
      "created_at": "2024-01-09T13:35:19Z",
      "updated_at": "2024-01-09T13:41:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446096447",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446096447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": 117,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446101167",
      "pull_request_review_id": 1811154144,
      "id": 1446101167,
      "node_id": "PRRC_kwDOABII585WMcCv",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(flag_value);\n+    block_index.WriteFlag(flag_name, false);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(!flag_value);\n+\n+    // We should be able to load everything we've previously stored. Note to assert on the\n+    // return value we need to make sure all blocks pass the pow check.\n+    const auto params{Params().GetConsensus()};\n+    const auto inserter = [&](const uint256&) {\n+        return blocks.back().get();\n+    };\n+    WITH_LOCK(::cs_main, assert(block_index.LoadBlockIndexGuts(params, inserter, g_setup->m_interrupt)));",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 132,
      "original_position": 133,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can we get rid of `g_setup` if we initialize a new `SignalInterrupt` here each interation?",
      "created_at": "2024-01-09T13:40:09Z",
      "updated_at": "2024-01-09T13:41:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446101167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446101167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446286078",
      "pull_request_review_id": 1811476916,
      "id": 1446286078,
      "node_id": "PRRC_kwDOABII585WNJL-",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(flag_value);\n+    block_index.WriteFlag(flag_name, false);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(!flag_value);\n+\n+    // We should be able to load everything we've previously stored. Note to assert on the\n+    // return value we need to make sure all blocks pass the pow check.\n+    const auto params{Params().GetConsensus()};\n+    const auto inserter = [&](const uint256&) {\n+        return blocks.back().get();\n+    };\n+    WITH_LOCK(::cs_main, assert(block_index.LoadBlockIndexGuts(params, inserter, g_setup->m_interrupt)));",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 132,
      "original_position": 133,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1446101167,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You need it for the logs iirc.",
      "created_at": "2024-01-09T16:01:19Z",
      "updated_at": "2024-01-09T16:01:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446286078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446286078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496426",
      "pull_request_review_id": 1819998806,
      "id": 1451496426,
      "node_id": "PRRC_kwDOABII585WhBPq",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};",
      "path": "src/test/fuzz/block_index.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1446090797,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> nit: I think constants are not supposed to be prefixed with g_\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/3ba8de1b704d590fa4e1975620bd21d830d11666/doc/developer-notes.md?plain=1#L87-L93\r\n\r\n> I think you could also just use the genesis block (Params().GenesisBlock()) for these two values.\r\n\r\nDone.",
      "created_at": "2024-01-13T12:48:42Z",
      "updated_at": "2024-01-13T12:48:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1451496426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496443",
      "pull_request_review_id": 1819998808,
      "id": 1451496443,
      "node_id": "PRRC_kwDOABII585WhBP7",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);",
      "path": "src/test/fuzz/block_index.cpp",
      "position": null,
      "original_position": 118,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1446096447,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-01-13T12:48:46Z",
      "updated_at": "2024-01-13T12:48:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1451496443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": 117,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597710487",
      "pull_request_review_id": 2051450602,
      "id": 1597710487,
      "node_id": "PRRC_kwDOABII585fOyCX",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 11,
      "original_position": 13,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "ffee43efe845cbbfbf16d5e61a1d541cb316ef56",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Can you clean up the includes?",
      "created_at": "2024-05-12T20:40:30Z",
      "updated_at": "2024-05-12T20:45:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1597710487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597710487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597710496",
      "pull_request_review_id": 2051450602,
      "id": 1597710496,
      "node_id": "PRRC_kwDOABII585fOyCg",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(flag_value);\n+    block_index.WriteFlag(flag_name, false);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(!flag_value);\n+\n+    // We should be able to load everything we've previously stored. Note to assert on the\n+    // return value we need to make sure all blocks pass the pow check.\n+    const auto params{Params().GetConsensus()};\n+    const auto inserter = [&](const uint256&) {\n+        return blocks.back().get();\n+    };\n+    WITH_LOCK(::cs_main, assert(block_index.LoadBlockIndexGuts(params, inserter, g_setup->m_interrupt)));",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 132,
      "original_position": 133,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1446101167,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~How about:~\r\nEDIT: Never mind, this wasn't worth it.\r\n",
      "created_at": "2024-05-12T20:40:33Z",
      "updated_at": "2024-05-12T21:04:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1597710496",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597710496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598055160",
      "pull_request_review_id": 2051980268,
      "id": 1598055160,
      "node_id": "PRRC_kwDOABII585fQGL4",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 120,
      "original_position": 121,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "in_reply_to_id": 1440838577,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adding something to exercise `Erase` would also be nice.",
      "created_at": "2024-05-13T08:13:34Z",
      "updated_at": "2024-05-13T08:19:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1598055160",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598055160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619214183",
      "pull_request_review_id": 2085959072,
      "id": 1619214183,
      "node_id": "PRRC_kwDOABII585ggz9n",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>",
      "path": "src/test/fuzz/block_index.cpp",
      "position": 11,
      "original_position": 13,
      "commit_id": "86b38529d5014612c3e7bb59fdc4dad3bff2aa64",
      "original_commit_id": "ffee43efe845cbbfbf16d5e61a1d541cb316ef56",
      "in_reply_to_id": 1597710487,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reordered the includes.",
      "created_at": "2024-05-29T16:59:49Z",
      "updated_at": "2024-05-29T16:59:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1619214183",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619214183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    }
  ]
}