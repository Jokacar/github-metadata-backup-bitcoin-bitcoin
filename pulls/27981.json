{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
    "id": 1408663070,
    "node_id": "PR_kwDOABII585T9n4e",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/27981",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/27981.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/27981.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/3388e523a129ad9c7aef418c9f57491f8c2d9df8",
    "number": 27981,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Fix potential network stalling bug",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See https://github.com/ElementsProject/elements/issues/1233. There, it has been observed that if both sides of a P2P connection have a significant amount of data to send, a stall can occur, where both try to drain their own send queue before trying to receive. The same issue seems to apply to the current Bitcoin Core codebase, though I don't know whether it's a frequent issue for us.\r\n\r\nThe core issue is that whenever our optimistic send fails to fully send a message, we do subsequently not even select() for receiving; if it then turns out that sending is not possible either, no progress is made at all. To address this, the solution used in this PR is to still select() for both sending and receiving when an optimistic send fails, but skip receiving if sending succeeded, and (still) doesn't fully drain the send queue.\r\n\r\nThis is a significant reduction in how aggressive the \"receive pushback\" mechanism is, because now it will only mildly push back while sending progress is made; if the other side stops receiving entirely, the pushback disappears. I don't think that's a serious problem though:\r\n* We still have a pushback mechanism at the application buffer level (when the application receive buffer overflows, receiving is paused until messages in the buffer get processed; waiting on our own net_processing thread, not on the remote party).\r\n* There are cases where the existing mechanism is too aggressive; e.g. when the send queue is non-empty, but tiny, and can be sent with a single send() call. In that case, I think we'd prefer to still receive within the same processing loop of the network thread.\r\n",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "created_at": "2023-06-26T20:37:36Z",
    "updated_at": "2023-08-09T20:44:37Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "a397687f7748e6682b553bc1d32172fd12339784",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sipa:202306_pushback",
      "ref": "202306_pushback",
      "sha": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 22,
        "stargazers_count": 84,
        "watchers_count": 84,
        "size": 218170,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T19:30:18Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2023-07-17T18:31:45Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "79954903b24afa1bddbe2cac93bc3c2f322af058",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35486,
        "stargazers_count": 70679,
        "watchers_count": 70679,
        "size": 236373,
        "default_branch": "master",
        "open_issues_count": 681,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-09T20:46:21Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-09T20:54:07Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 30,
    "deletions": 37,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 15,
    "comments": 11
  },
  "events": [
    {
      "event": "commented",
      "id": 1608208734,
      "node_id": "IC_kwDOABII585f21Fe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608208734",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T20:37:40Z",
      "updated_at": "2023-08-09T20:44:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Approach ACK | [ajtowns](https://github.com/bitcoin/bitcoin/pull/27981#pullrequestreview-1513120096), [naumenkogs](https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1630685413) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28222](https://github.com/bitcoin/bitcoin/pull/28222) (Use shared_ptr for CNode inside CConnman by willcl-ark)\n* [#28196](https://github.com/bitcoin/bitcoin/pull/28196) (BIP324 connection support by sipa)\n* [#28165](https://github.com/bitcoin/bitcoin/pull/28165) (net: transport abstraction by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1608208734",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "commented",
      "id": 1608209183,
      "node_id": "IC_kwDOABII585f21Mf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608209183",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T20:38:02Z",
      "updated_at": "2023-06-26T20:43:15Z",
      "author_association": "MEMBER",
      "body": "cc @psgreco, who pointed to the issue, and helped test it.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1608209183",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "mentioned",
      "id": 9643754609,
      "node_id": "MEE_lADOABII585p1QV2zwAAAAI-0ARx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9643754609",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T20:38:02Z"
    },
    {
      "event": "subscribed",
      "id": 9643754631,
      "node_id": "SE_lADOABII585p1QV2zwAAAAI-0ASH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9643754631",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T20:38:02Z"
    },
    {
      "event": "commented",
      "id": 1608257369,
      "node_id": "IC_kwDOABII585f3A9Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608257369",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T21:03:23Z",
      "updated_at": "2023-06-26T21:03:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "concept ack 5e9237891df69876e1a6f81bf158aed2a683ffe2, this potential issue is not easy to trigger on demand in bitcoin, but it's relatively easy to trigger in elements, when the node is roughly 20/24 hours behind. Tested in elements a similar version of the patch it does solve the stalling",
      "user": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1608257369",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T03:29:17Z",
      "updated_at": "2023-06-27T03:29:17Z",
      "source": {
        "issue": {
          "id": 1652089479,
          "node_id": "PR_kwDOABII585Nfb4D",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27407",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27407/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27407/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27407/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27407",
          "number": 27407,
          "state": "closed",
          "state_reason": null,
          "title": "net, refactor: Privatise CNode send queue",
          "body": "The send queue members on `CNode` should not be part of the public interface. This PR makes all of them private and creates a clear interface for the send queue.\r\n\r\nThe interface after this PR consists of:\r\n* `CNode::PushMessage` for appending a message onto the send queue\r\n* `CNode::SocketSendData` for pushing as many messages from the send queue as possible onto the wire\r\n* `CNode::IsSendQueueEmpty` for checking if the send queue is empty\r\n* (`CNode::TestOnlyClearSendQueue` a test-only utility for clearing the send queue)",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27407",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27407",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27407.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27407.patch"
          },
          "closed_at": "2023-08-07T14:02:48Z",
          "created_at": "2023-04-03T13:36:50Z",
          "updated_at": "2023-08-07T14:02:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unsubscribed",
      "id": 9647249271,
      "node_id": "UE_lADOABII585p1QV2zwAAAAI_BVd3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9647249271",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T05:53:14Z"
    },
    {
      "event": "commented",
      "id": 1609049607,
      "node_id": "IC_kwDOABII585f6CYH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609049607",
      "actor": {
        "login": "kristapsk",
        "id": 4500994,
        "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kristapsk",
        "html_url": "https://github.com/kristapsk",
        "followers_url": "https://api.github.com/users/kristapsk/followers",
        "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
        "organizations_url": "https://api.github.com/users/kristapsk/orgs",
        "repos_url": "https://api.github.com/users/kristapsk/repos",
        "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kristapsk/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T08:38:26Z",
      "updated_at": "2023-06-27T08:38:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Wouldn't it be possible to trigger and test this with some functional test?",
      "user": {
        "login": "kristapsk",
        "id": 4500994,
        "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kristapsk",
        "html_url": "https://github.com/kristapsk",
        "followers_url": "https://api.github.com/users/kristapsk/followers",
        "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
        "organizations_url": "https://api.github.com/users/kristapsk/orgs",
        "repos_url": "https://api.github.com/users/kristapsk/repos",
        "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kristapsk/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1609049607",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "commented",
      "id": 1609279748,
      "node_id": "IC_kwDOABII585f66kE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609279748",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T11:04:02Z",
      "updated_at": "2023-06-27T11:21:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "In theory, it should be, but in our tests (mostly @lolhill 's) a good component of this situation is latency. I've never been able to replicate this between 2 local hosts, always  with a host that's ~100ms away.",
      "user": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1609279748",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "mentioned",
      "id": 9650571940,
      "node_id": "MEE_lADOABII585p1QV2zwAAAAI_OAqk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9650571940",
      "actor": {
        "login": "lolhill",
        "id": 98603469,
        "node_id": "U_kgDOBeCRzQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/98603469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lolhill",
        "html_url": "https://github.com/lolhill",
        "followers_url": "https://api.github.com/users/lolhill/followers",
        "following_url": "https://api.github.com/users/lolhill/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lolhill/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lolhill/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lolhill/subscriptions",
        "organizations_url": "https://api.github.com/users/lolhill/orgs",
        "repos_url": "https://api.github.com/users/lolhill/repos",
        "events_url": "https://api.github.com/users/lolhill/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lolhill/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T11:04:02Z"
    },
    {
      "event": "subscribed",
      "id": 9650571956,
      "node_id": "SE_lADOABII585p1QV2zwAAAAI_OAq0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9650571956",
      "actor": {
        "login": "lolhill",
        "id": 98603469,
        "node_id": "U_kgDOBeCRzQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/98603469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lolhill",
        "html_url": "https://github.com/lolhill",
        "followers_url": "https://api.github.com/users/lolhill/followers",
        "following_url": "https://api.github.com/users/lolhill/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lolhill/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lolhill/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lolhill/subscriptions",
        "organizations_url": "https://api.github.com/users/lolhill/orgs",
        "repos_url": "https://api.github.com/users/lolhill/repos",
        "events_url": "https://api.github.com/users/lolhill/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lolhill/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T11:04:02Z"
    },
    {
      "event": "labeled",
      "id": 9674799947,
      "node_id": "LE_lADOABII585p1QV2zwAAAAJAqbtL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9674799947",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T09:36:01Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "reviewed",
      "id": 1513120096,
      "node_id": "PRR_kwDOABII585aMGFg",
      "url": null,
      "actor": null,
      "commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "> The core issue is that whenever our optimistic send fails to fully send a message, we do subsequently not even select() for receiving; if it then turns out that sending is not possible either, no progress is made at all. To address this, the solution used in this PR is to still select() for both sending and receiving when an optimistic send fails, but skip receiving if sending succeeded, and (still) doesn't fully drain the send queue.\r\n\r\nAIUI (correct me if I'm wrong!) the backpressure we do is:\r\n\r\n * `fPauseSend` -- we won't do `ProcessMessage` (which would probably cause us to generate new data to send) when this is set, which is when we have more than 1MB of data lined up. (However we *will* do `SendMessages`, which generates relatively small messages like INVs and PING and GETDATA)\r\n * `fPauseRecv` -- we won't select the socket for reading any more once we've got more than 5MB in parsed messages queued up to process\r\n * prefer sending over receiving -- if we've got data to send, we'll prioritise sending it, even if we're making no forward progress and could receive messages, to the point where we don't even check (via select/poll) to see if there's any data to receive when we've got data to send\r\n\r\nThis patches changes the latter logic to be:\r\n\r\n * prefer sending over receiving -- always see if we can send/receive data, but don't actually try to receive data until either (a) we don't have data to send in the first place, (b) we can't send any data, or (c) we've successfully sent all the data we have.\r\n\r\nThis seems pretty sensible to me: this is a peer to peer protocol, so it seems to me we should be making progress in parallel on sending and receiving whenever possible -- your send is my receive after all.\r\n\r\nApproach ACK.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#pullrequestreview-1513120096",
      "submitted_at": "2023-07-04T16:06:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
    },
    {
      "event": "commented",
      "id": 1630685413,
      "node_id": "IC_kwDOABII585hMkjl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1630685413",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-11T11:53:08Z",
      "updated_at": "2023-07-11T11:53:08Z",
      "author_association": "MEMBER",
      "body": "Approach ACK",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1630685413",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "reviewed",
      "id": 1538174802,
      "node_id": "PRR_kwDOABII585brq9S",
      "url": null,
      "actor": null,
      "commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#pullrequestreview-1538174802",
      "submitted_at": "2023-07-19T23:13:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMzODhlNTIzYTEyOWFkOWM3YWVmNDE4YzlmNTc0OTFmOGMyZDlkZjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "tree": {
        "sha": "825130a69e80ad457e2640aaa3be4e843da51eb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/825130a69e80ad457e2640aaa3be4e843da51eb0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/296735f7638749906243c9e203df7bd024493806",
          "sha": "296735f7638749906243c9e203df7bd024493806",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/296735f7638749906243c9e203df7bd024493806"
        }
      ],
      "message": "Rework receive buffer pushback\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-20T14:36:22Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-06-13T18:20:13Z"
      },
      "sha": "3388e523a129ad9c7aef418c9f57491f8c2d9df8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9875432648,
      "node_id": "HRFPE_lADOABII585p1QV2zwAAAAJMnyTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9875432648",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T14:36:55Z"
    },
    {
      "event": "commented",
      "id": 1644073315,
      "node_id": "IC_kwDOABII585h_pFj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644073315",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T14:53:42Z",
      "updated_at": "2023-07-20T14:56:45Z",
      "author_association": "MEMBER",
      "body": "@psgreco See above; it turned out that what I intended to do here wasn't actually what was implemented (it was instead unconditionally preferring send over receive). Would you mind trying again if this fixes the issue for you?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1644073315",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "mentioned",
      "id": 9875653357,
      "node_id": "MEE_lADOABII585p1QV2zwAAAAJMooLt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9875653357",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T14:53:43Z"
    },
    {
      "event": "subscribed",
      "id": 9875653376,
      "node_id": "SE_lADOABII585p1QV2zwAAAAJMooMA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9875653376",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T14:53:43Z"
    },
    {
      "event": "commented",
      "id": 1644864253,
      "node_id": "IC_kwDOABII585iCqL9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644864253",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T01:28:10Z",
      "updated_at": "2023-07-21T01:33:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "I wrote a functional test, see https://github.com/mzumsande/bitcoin/tree/test_sipa_netstalling (because of the 1st commit obviously not intended for merge, but it makes it possible to reproduce the problem). \r\nIt works by mining a few large blocks, and having  two nodes exchange these blocks in both directions by repeated `getblockfrompeer` calls, and then check whether the deadlock happened.\r\n\r\nUnfortunately, the current branch doesn't appear to fix the problem completely, the test fails for me both here and on master: \r\nWhen the situation is reached where we now select for both sending and receiving (because our peer doesn't receive any data), we try to resolve the deadlock by now also receiving.\r\nThis works for a little while - however, if our send buffer is full, `fPauseSend` will be set, and because of that we skip early in `ProcessMessages()` and don't call `PollMessage()` anymore. Therefore the received data will pile up without being cleared by `net_processing`. When `pnode->m_msg_process_queue_size` becomes too large (5MB), `fPauseRecv` will also be set, and after that we are again in a deadlock situation where both peers are sending and none is receiving. I could observe this with the added logging in the 3rd commit in my branch.\r\n\r\nNot sure how to best fix this...",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1644864253",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "commented",
      "id": 1644977188,
      "node_id": "IC_kwDOABII585iDFwk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644977188",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T04:50:04Z",
      "updated_at": "2023-07-21T04:50:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think `fPauseSend` getting set on both sides and causing a deadlock should probably be out of scope for this PR -- at least as I understand it, this fixes an issue where we get a deadlock even without `fPauseSend` triggering.\r\n\r\nI think the scenario here is:\r\n\r\n * peer A sends a 2MB message to peer B. This fills up B's socket receive buffer (200kB?) and A's socket send buffer (200kB?) without completing. A still has 1.6MB to send to B, so stops reading from the socket.\r\n * peer B does the same thing at almost exactly the same time, with the same result.\r\n * A/B are deadlocked.\r\n\r\nMaybe adding a debug-only sendp2pmsg rpc would be the easiest way to simulate this and be useful for debugging p2p things in general?\r\n\r\nIf we do want to address `fPauseSend` deadlocking, a few approaches come to mind:\r\n\r\n 1. easy: make fPauseSend a timestamp rather than a boolean, and if it's been set for >5 minutes, disconnect. doesn't prevent the deadlock, but at least frees up the connection slot and makes it possible to try again.\r\n 2. hard: rework net_processing so that we keep making as much progress as we can -- eg, change `fPauseSend` to continue processing incoming block or tx messages, but to skip GETDATA messages and to defer sending out INV messages and the like, so that we're draining as much traffic as we can, while limiting how much gets added.\r\n 3. impossible? add more dynamic traffic throttling: if you're bandwidth limited and getting too much TX traffic, perhaps you should be raising your feefilter level even if your mempool isn't full? I don't see how to generalise that if it's blocks or header messages or something else that cause a problem though.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1644977188",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "commented",
      "id": 1646183855,
      "node_id": "IC_kwDOABII585iHsWv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1646183855",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T20:05:16Z",
      "updated_at": "2023-07-21T20:05:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @psgreco See above; it turned out that what I intended to do here wasn't actually what was implemented (it was instead unconditionally preferring send over receive). Would you mind trying again if this fixes the issue for you?\r\n\r\nIt seems to fix the issue for me still with the new changes, but the refactor that I had to do to run in elements 22 (like bitcoin 22), doesn't let me make a hard confirmation. ",
      "user": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1646183855",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "mentioned",
      "id": 9888561236,
      "node_id": "MEE_lADOABII585p1QV2zwAAAAJNZ3hU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9888561236",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T20:05:16Z"
    },
    {
      "event": "subscribed",
      "id": 9888561244,
      "node_id": "SE_lADOABII585p1QV2zwAAAAJNZ3hc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9888561244",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T20:05:17Z"
    },
    {
      "event": "commented",
      "id": 1647982643,
      "node_id": "IC_kwDOABII585iOjgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1647982643",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T14:03:03Z",
      "updated_at": "2023-07-24T14:03:03Z",
      "author_association": "MEMBER",
      "body": "@ajtowns @mzumsande Thanks, so it appears there are actually two mostly-unrelated network buffer deadlock issues, and Martin's test is likely triggering both of them.\r\n\r\nI agree with AJ that we should still fix the network side one, even if we can't (or don't want to address) the application buffer side one. Fixing the application buffer side one indeed seems a lot harder, and probably needs discussion beyond this PR.\r\n\r\nIt would be good to have a test for the network side one, without it also triggering the application side one, to verify this PR actually fixes something. Especially as I don't understand @psgreco's earlier observation (where an older version of this PR unconditionally preferred sending, which shouldn't improve the situation at all) as a means to validate it.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1647982643",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27981"
    },
    {
      "event": "mentioned",
      "id": 9900690344,
      "node_id": "MEE_lADOABII585p1QV2zwAAAAJOIIuo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9900690344",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T14:03:04Z"
    },
    {
      "event": "subscribed",
      "id": 9900690361,
      "node_id": "SE_lADOABII585p1QV2zwAAAAJOIIu5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9900690361",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T14:03:04Z"
    },
    {
      "event": "mentioned",
      "id": 9900690384,
      "node_id": "MEE_lADOABII585p1QV2zwAAAAJOIIvQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9900690384",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T14:03:04Z"
    },
    {
      "event": "subscribed",
      "id": 9900690404,
      "node_id": "SE_lADOABII585p1QV2zwAAAAJOIIvk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9900690404",
      "actor": {
        "login": "psgreco",
        "id": 12950210,
        "node_id": "MDQ6VXNlcjEyOTUwMjEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/12950210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psgreco",
        "html_url": "https://github.com/psgreco",
        "followers_url": "https://api.github.com/users/psgreco/followers",
        "following_url": "https://api.github.com/users/psgreco/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psgreco/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psgreco/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psgreco/subscriptions",
        "organizations_url": "https://api.github.com/users/psgreco/orgs",
        "repos_url": "https://api.github.com/users/psgreco/repos",
        "events_url": "https://api.github.com/users/psgreco/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psgreco/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T14:03:04Z"
    },
    {
      "event": "mentioned",
      "id": 9900690429,
      "node_id": "MEE_lADOABII585p1QV2zwAAAAJOIIv9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9900690429",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T14:03:04Z"
    },
    {
      "event": "subscribed",
      "id": 9900690449,
      "node_id": "SE_lADOABII585p1QV2zwAAAAJOIIwR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9900690449",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T14:03:04Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T03:32:59Z",
      "updated_at": "2023-07-27T03:32:59Z",
      "source": {
        "issue": {
          "id": 1823081141,
          "node_id": "PR_kwDOABII585Weln1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28165",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28165/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28165/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28165/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28165",
          "number": 28165,
          "state": "open",
          "state_reason": null,
          "title": "net: transport abstraction",
          "body": "This PR furthers the P2P message serialization/deserialization abstraction introduced in #16202 and #16562, in preparation for introducing the BIP324 v2 transport (making this part of #27634). However, nothing in this PR is BIP324-specific, and it contains a number of independently useful improvements.\r\n\r\nThe overall idea is to have a single object in every `CNode` (called `m_transport`) that is responsible for converting sent messages to wire bytes, and for converting received wire bytes back to messages, while having as little as possible knowledge about this conversion process in higher-level net code. To accomplish that, there is an abstract `Transport` class with (currently) a single `V1Transport` implementation.\r\n\r\nStructurally, the above is accomplished by:\r\n* Merging the `TransportDeserializer` and `TransportSerializer` classes into a single `Transport` class, which encompasses both the sending and receiving side. For `V1Transport` these two sides are entirely separate, but this assumption doesn't hold for the BIP324 transport where e.g. the sending encryption key depends on the DH key negotiation data received from the other side. Merging the two means a future `V2Transport` can handle all this interaction without callers needing to be aware.\r\n* Removing the assumption that each message is sent using a computed header followed by (unmodified) data bytes. To achieve that, the sending side of `Transport` mirrors what the receiver side does: callers can set a message to be sent, then ask what bytes must be sent out, and then allowing them to transition to the next message.\r\n* Adding internal locks to protect the sending and receiving state of the `V1Transport` implementation. I believe these aren't strictly needed (opinions welcome) as there is no real way to use `Transport` objects in a multi-threaded fashion without some form of external synchronization (e.g. \"get next bytes to send\" isn't meaningful to call from multiple threads at the same time without mechanism to control the order they'll actually get sent). Still, I feel it's cleaner to make the object responsible for its own consistency (as we definitely do not want the entire object to be under a single external GUARDED_BY, as that'd prevent simultaneous sending and receiving).\r\n* Moving the conversion of messages to bytes on the sending side from `PushMessage` to `SocketSendData`, which is needed to deal with the fact that a transport may not immediately be able to send messages.\r\n\r\nThis PR is not a refactor, though some commits are. Among the semantic changes are:\r\n* Changing the send buffer pushback mechanism to trigger based on the memory usage of the buffer rather than the amount of bytes to be sent. This is both closer to the desired behavior, and makes the buffering independent from transport details (which is why it's included here).\r\n* When optimistic send is not applicable, the V1 message checksum calculation now runs in the net thread rather than the message handling thread. I believe that's generally an improvement, as the message handling thread is far more computationally bottlenecked already.\r\n* The checksum calculation now runs under the `CNode::cs_vSend` lock, which does mean no two checksum calculations for messages sent to the same node can run in parallel, even if running in separate threads. Despite that limitation, having the checksum for non-optimistic sends moved in the net thread is still an improvement, I believe.\r\n* Statistics for per-message-type sent bytes are now updated when the bytes are actually handed to the OS rather than in `PushMessage`. This is because the actual serialized sizes aren't known until they've gone through the transport object.\r\n\r\nA fuzz test of the entire `V1Transport` is included. More elaborate rationale for each of the changes can be found in the commit messages.",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28165",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28165",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28165.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28165.patch"
          },
          "created_at": "2023-07-26T20:04:07Z",
          "updated_at": "2023-08-09T19:12:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T06:36:41Z",
      "updated_at": "2023-08-02T06:36:41Z",
      "source": {
        "issue": {
          "id": 1831769418,
          "node_id": "PR_kwDOABII585W74nW",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28196",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28196/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28196/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28196/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28196",
          "number": 28196,
          "state": "open",
          "state_reason": null,
          "title": "BIP324 connection support",
          "body": "Builds on top of #28008 and #28165, and part of #27634. Draft while dependencies and (more) tests are missing.\r\n\r\nThis implements the BIP324 v2 transport and application layer. It is currently only accessible through the test-only `-bip324=` command-line option, which specifies IPs, host names, or subnets for which to use BIP324 connections. This option is only added in order to make experimentation possible; I don't expect it will be supported long-term (or should even remain in this PR).\r\n\r\nStill missing features are:\r\n* Support for the `NODE_P2P_V2` service flag.\r\n* Automatically trying V2 connections when the service flag is set.\r\n* Retrying downgrade to V1 when attempted outbound V2 connections immediately fail.\r\n* P2P functional tests (only a fuzz test for the transport is included, and a few bitcoind-to-bitcoind functional tests)\r\n\r\nOther than that, support for V2 connections is functionally complete, including:\r\n* Autodetection of incoming V1 connections.\r\n* Garbage, both sending and receiving.\r\n* Short message type IDs, both sending and receiving.\r\n* Ignore packets (receiving only, and untested).\r\n* Session IDs are visible in `getpeerinfo` output (for manual comparison).\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28196",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28196",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28196.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28196.patch"
          },
          "created_at": "2023-08-01T17:56:58Z",
          "updated_at": "2023-08-09T18:32:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-05T20:31:01Z",
      "updated_at": "2023-08-05T20:31:01Z",
      "source": {
        "issue": {
          "id": 1837671308,
          "node_id": "PR_kwDOABII585XPvx_",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28222",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28222/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28222/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28222/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28222",
          "number": 28222,
          "state": "open",
          "state_reason": null,
          "title": "Use shared_ptr for CNode inside CConnman",
          "body": "Switch to using smart pointers to `CNode`s inside of `CConnman`.\r\n\r\nCurrently we are manually refcounting CNodes which is potentially error-prone and makes operations such as deleting them from multiple threads difficult without introducing new locks or other synchronisation operations (see https://github.com/bitcoin/bitcoin/pull/27912).\r\n\r\nSwitch to using `std::shared_ptr` references to `CNode`s inside of `m_nodes` and `m_nodes_disconnected` to give us better memory safety today, and in the future allow `AttemptToEvictConnection` (and optionally other sites) to safely synchronously disconnect nodes when needed.\r\n\r\nOpening as draft for now as I want to both gauge feedback on the approach, and see which PRs this may conflict with (#27213?) before moving it forwards.\r\n\r\nCC @vasild ",
          "user": {
            "login": "willcl-ark",
            "id": 6606587,
            "node_id": "MDQ6VXNlcjY2MDY1ODc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/willcl-ark",
            "html_url": "https://github.com/willcl-ark",
            "followers_url": "https://api.github.com/users/willcl-ark/followers",
            "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
            "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
            "repos_url": "https://api.github.com/users/willcl-ark/repos",
            "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28222",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28222",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28222.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28222.patch"
          },
          "created_at": "2023-08-05T09:45:10Z",
          "updated_at": "2023-08-09T17:52:26Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252173948",
      "pull_request_review_id": 1513120096,
      "id": 1252173948,
      "node_id": "PRRC_kwDOABII585Koqh8",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());",
      "path": "src/net.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it make sense to introduce a method `bool CNode::WantsToSend() const { return !pnode->vSendMsg.empty(); }` method, and use that here and instead of returning a `pair<X, bool>` above?",
      "created_at": "2023-07-04T15:36:37Z",
      "updated_at": "2023-07-04T16:06:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1252173948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252173948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1221,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268769040",
      "pull_request_review_id": 1538174802,
      "id": 1268769040,
      "node_id": "PRRC_kwDOABII585Ln-EQ",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Won't the second `emplace` just do nothing both if both `select_send` and `select_recv` are true? I thought the idea was to change behavior to have both send and recv requested events (instead of just giving `select_send` priority like in master). But wouldn't we need to insert a combination of `Sock::SEND` and `Sock::RECV` then, instead of repeated `emplace`?",
      "created_at": "2023-07-19T23:13:14Z",
      "updated_at": "2023-07-19T23:13:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268769040",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268769040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268782895",
      "pull_request_review_id": 1538194205,
      "id": 1268782895,
      "node_id": "PRRC_kwDOABII585LoBcv",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The order, or splitting, does not matter. All of these are fed to `Sock::WaitMany`, which will mark the ones that are ready for sending to/receiving from. It's in the processing of those wait results that the prioritization happens, where receiving is skipped if (a) the socket was ready for sending (b) something was sent and (c) there is yet more to send.",
      "created_at": "2023-07-19T23:38:11Z",
      "updated_at": "2023-07-19T23:38:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268782895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268782895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268852909",
      "pull_request_review_id": 1538307996,
      "id": 1268852909,
      "node_id": "PRRC_kwDOABII585LoSit",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm still confused: `events_per_sock` is a `std::unordered_map`. If `select_send` and `select_recv` are true, we now `emplace` twice into it, with the same key `pnode->m_sock` and different values. That means that the first value stays, and the second `emplace` is a no-op, leaving the container unchanged. So if only the first value (in this case `Sock::SEND`) is fed to `Sock::WaitMany`, why doesn't the order matter?",
      "created_at": "2023-07-20T02:06:32Z",
      "updated_at": "2023-07-20T02:06:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268852909",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268852909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268854292",
      "pull_request_review_id": 1538309193,
      "id": 1268854292,
      "node_id": "PRRC_kwDOABII585LoS4U",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, I had missed the data type, and thought you were talking something else.\n\nYou're absolutely right, will address.",
      "created_at": "2023-07-20T02:08:24Z",
      "updated_at": "2023-07-20T02:08:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268854292",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268854292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268855297",
      "pull_request_review_id": 1538310502,
      "id": 1268855297,
      "node_id": "PRRC_kwDOABII585LoTIB",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the concern here is that `events_per_sock` is a `Sock::EventsPerSock` which is an unordered map, so using the same key in two `emplace` calls would cause the second to overwrite the first. The key type here is `shared_ptr<const Sock>` and the `std::hash` for shared ptrs just looks at the address they're pointing too, so as far as I can see the second emplace here will indeed overwrite the first, making this effectively the same as:\r\n\r\n```\r\nif (select_recv) {\r\n    emplace(RECV);\r\n} else if (select_send) {\r\n    emplace(SEND);\r\n}\r\n```\r\n\r\nSo I think this should instead be a single emplace:\r\n\r\n```c++\r\nif (select_send || select_recv) {\r\n    Sock:Event event = (select_send ? Sock::SEND : 0) | (select_recv ? Sock::RECV : 0);\r\n    events_per_sock.emplace(pnode->m_sock, Sock::Events{event});\r\n}\r\n```",
      "created_at": "2023-07-20T02:10:43Z",
      "updated_at": "2023-07-20T02:10:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268855297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268855297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269574745",
      "pull_request_review_id": 1539451663,
      "id": 1269574745,
      "node_id": "PRRC_kwDOABII585LrCxZ",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2023-07-20T14:47:16Z",
      "updated_at": "2023-07-20T14:47:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1269574745",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269574745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269576094",
      "pull_request_review_id": 1539453771,
      "id": 1269576094,
      "node_id": "PRRC_kwDOABII585LrDGe",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());",
      "path": "src/net.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1252173948,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That'd mean grabbing the lock twice, no? I added it to `SocketSendData` because the `cs_vSend` lock is already grabbed to call that.",
      "created_at": "2023-07-20T14:48:17Z",
      "updated_at": "2023-07-20T14:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1269576094",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269576094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1221,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269593154",
      "pull_request_review_id": 1539481826,
      "id": 1269593154,
      "node_id": "PRRC_kwDOABII585LrHRC",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> so using the same key in two emplace calls would cause the second to overwrite the first.\r\n\r\nJust for the record: It's the other way round, the second call gets ignored and nothing overwritten, see https://en.cppreference.com/w/cpp/container/unordered_map/emplace",
      "created_at": "2023-07-20T15:00:18Z",
      "updated_at": "2023-07-20T15:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1269593154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269593154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270121452",
      "pull_request_review_id": 1540311677,
      "id": 1270121452,
      "node_id": "PRRC_kwDOABII585LtIPs",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());",
      "path": "src/net.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1252173948,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not if you make it `WantsToSend() EXCLUSIVE_LOCK_REQUIRED(cs_vSend)` and require the caller to have the lock?",
      "created_at": "2023-07-21T00:27:25Z",
      "updated_at": "2023-07-21T00:27:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270121452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270121452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1221,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122517",
      "pull_request_review_id": 1540313224,
      "id": 1270122517,
      "node_id": "PRRC_kwDOABII585LtIgV",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Err, doesn't that mean this behaved the same as the previous code? How did it [fix anything](https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1608257369)?",
      "created_at": "2023-07-21T00:30:29Z",
      "updated_at": "2023-07-21T00:30:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270122517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270125479",
      "pull_request_review_id": 1540317119,
      "id": 1270125479,
      "node_id": "PRRC_kwDOABII585LtJOn",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ajtowns The old code here first added a SEND, and then a RECEIVE, so if both were performed, only a SEND would be present in the map, meaning an unconditional send.",
      "created_at": "2023-07-21T00:38:00Z",
      "updated_at": "2023-07-21T00:38:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270125479",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270125479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270127032",
      "pull_request_review_id": 1540319113,
      "id": 1270127032,
      "node_id": "PRRC_kwDOABII585LtJm4",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I could reproduce the problem in a functional test today - for me, neither version (including the current one) fixes the problem completely. Will post detailed results soon.",
      "created_at": "2023-07-21T00:41:54Z",
      "updated_at": "2023-07-21T00:41:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270127032",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270127032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270175120",
      "pull_request_review_id": 1540388418,
      "id": 1270175120,
      "node_id": "PRRC_kwDOABII585LtVWQ",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> @ajtowns The old code here first added a SEND, and then a RECEIVE, so if both were performed, only a SEND would be present in the map, meaning an unconditional send.\r\n\r\nRight, but master does the same thing, only emplacing SEND whenever vSendMsg isn't empty; so seems weird that the original patch here was observed to help anything?",
      "created_at": "2023-07-21T02:47:13Z",
      "updated_at": "2023-07-21T02:47:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270175120",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270175120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270177198",
      "pull_request_review_id": 1540390987,
      "id": 1270177198,
      "node_id": "PRRC_kwDOABII585LtV2u",
      "diff_hunk": "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "original_commit_id": "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "in_reply_to_id": 1268769040,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ajtowns You're right. I'm confused now. @mzumsande's observation that stalling can also be caused by fPauseRecv being set on both sides seems like a partial explanation, but not the whole thing. ",
      "created_at": "2023-07-21T02:51:59Z",
      "updated_at": "2023-07-21T02:52:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270177198",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270177198"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    }
  ]
}