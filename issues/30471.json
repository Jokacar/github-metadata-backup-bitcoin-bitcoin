{
  "type": "issue",
  "issue": {
    "id": 2413404329,
    "node_id": "I_kwDOABII586P2aCp",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/30471",
    "number": 30471,
    "state": "open",
    "state_reason": null,
    "title": "Feature Request: Broadcast Pool",
    "body": "### Please describe the feature you'd like to see added.\n\nThis is a feature request for a broadcast pool. A broadcast pool is a cache local to the node which contains transactions which have been initially broadcast from that node, either from a local wallet or via an RPC like `sendrawtransaction`. Broadcast transactions are retained in this cache until they are included in a block, or expire after the configured `mempoolexpiry` period. The transactions in the broadcast pool are included in views on the mempool, ensuring that transactions broadcast from the node are not lost to the user due to fee rate environment changes. Transaction invalidation and replacement is handled in the same way as in the mempool. Transactions in broadcast pool that are not present in the mempool will occasionally be rebroadcasted, making this existing functionality available to all transactions broadcasted through the node and not just those created by a local wallet.\r\n\r\nAs an additional feature, a future-dated timestamp can be added in metadata associated with a broadcast pool transaction. Should such a timestamp exist, the transaction is only added to the local mempool and broadcast to the network after that date, allowing the user to mitigate timing analysis and obtain greater privacy. Future-dated transactions are also included in views on the mempool, but are marked as `unbroadcast: true` in mempool RPC responses, and are similarly subject to removal via normal transaction invalidation and replacement rules.\n\n### Is your feature related to a problem, if so please describe it.\n\nThe necessary resource limitations on the mempool lead to an unfortunate consequence for wallet developers and users. Because the mempool does not distinguish between transactions broadcast by the user, and all other transactions, broadcasted transactions can be 'lost' to the user due to external fee rate environment changes. These 'lost' transactions are then not available in a wallet interface for view or replacement by fee - they simply (and often unexpectedly) disappear. Further, they may mysteriously reappear, having not been dropped from a larger mempool as typically configured by a miner. This is a poor user experience, and leads users to consider out-of-band solutions, or to increase the size of their local mempool which is resource inefficient and counterproductive to the network as a whole. It is reasonable to assume that a user's broadcasted transactions carry much more economic value to them than most other transactions, and justify protection through some degree of additional resource allocation. This feature request seeks to realise that rationale, providing a better user experience consistent with the health of the network.\r\n\r\nWith respect to privacy, timing analysis is unfortunately a simple and convincing approach to link otherwise unconnected transactions. For example, a common use case is to transfer the funds in one wallet to another, perhaps for security reasons. In order to avoid linking the funds in disparate UTXOs, the user must not only send them one by one from the old wallet to the new, but do so with random (and lengthy) time intervals between each send. Failure to do so will result in a much higher chance of funds being linked onchain simply by the transactions being included in the same or adjacent blocks. Most bitcoin nodes are run as continuously online servers, and therefore are ideal candidates to handle this otherwise onerous task. \r\n\n\n### Describe the solution you'd like\n\nThe broadcast pool is a local cache of usually small but configurable maximum size. A default maximum value of 300 kB is proposed. Similarly to the mempool, the cache is persisted on shutdown and restored on startup. Transactions in the broadcast pool are subject to almost all of the same rules as those in the mempool, except that they are not removed due to mempool size limitations.\r\n\r\nTransactions in the broadcast pool not present in the mempool are occasionally rebroadcast. Optionally, a future-dated timestamp can be specified when broadcasting a transaction. In this case, the transaction is added to the broadcast pool but not to the local mempool or broadcast to the network until after that date has passed. If the node is restarted after the timestamp on a future-dated transaction, the transaction will be immediately broadcast. All transactions in the broadcast pool are included in views on the mempool, and in that sense the broadcast pool can be viewed as an extension of the mempool where different eviction rules apply. Future-dated broadcast transactions are not included in block templates.\r\n\r\nIf the broadcast pool is full and the broadcast is not future-dated, the broadcast will proceed as it does currently but with a warning returned to the user. A future-dated broadcast to a full broadcast pool will fail.\n\n### Describe any alternatives you've considered\n\nIt is possible to try to solve the evicted transaction retention problem on the application layer within a wallet application. Practically however, this is far from ideal. Client wallets are generally opened and closed at indeterminate times, leading to a state conflict with the connected node that must be resolved. Light client protocols are generally not optimized for this use case, leading to significant complexity and performance degradation. Further, consensus logic such as that used for transaction replacement by fee must be replicated in each wallet application. \r\n\r\nWith respect to the timing analysis problem, setting a future-dated broadcast will encourage the user to leave their wallet application open, which is in conflict to the ideal of cold storage. Further, the environment for mobile wallets is not well suited to this long running task.\r\n\r\nIn summary, addressing these problems in a wallet application leads to poor separation of concerns.\r\n\n\n### Please leave any additional context\n\nA short list of related issues from some popular Bitcoin wallets:\r\n\r\n- https://github.com/sparrowwallet/sparrow/issues/847\r\n- https://github.com/sparrowwallet/sparrow/issues/1391\r\n- https://github.com/sparrowwallet/sparrow/issues/1421\r\n- https://github.com/spesmilo/electrum/issues/3595\r\n- https://github.com/BlueWallet/BlueWallet/issues/2753",
    "user": {
      "login": "craigraw",
      "id": 862166,
      "node_id": "MDQ6VXNlcjg2MjE2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/craigraw",
      "html_url": "https://github.com/craigraw",
      "followers_url": "https://api.github.com/users/craigraw/followers",
      "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
      "organizations_url": "https://api.github.com/users/craigraw/orgs",
      "repos_url": "https://api.github.com/users/craigraw/repos",
      "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/craigraw/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "NONE",
    "locked": false,
    "comments": 25,
    "created_at": "2024-07-17T11:49:31Z",
    "updated_at": "2024-12-20T16:15:05Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 13535470670,
      "node_id": "LE_lADOABII586P2aCpzwAAAAMmxuRO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13535470670",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T11:49:32Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "commented",
      "id": 2233185138,
      "node_id": "IC_kwDOABII586FG7Ny",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2233185138",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T12:18:37Z",
      "updated_at": "2024-07-17T12:18:37Z",
      "author_association": "MEMBER",
      "body": "> making this existing functionality available to all transactions broadcasted through the node and not just those created by a local wallet.\r\n\r\nWould it not be possible to implement this by creating a wallet called `broadcast_pool` and then write simple wrapper functions to implement the broadcast pool features?\r\n\r\n> Future-dated transactions are also included in views on the mempool, but are marked as unbroadcast: true in mempool RPC responses\r\n\r\nI don't think it is possible to include something in the mempool and hide the fact that it is included from remote peers. This is a recurring topic. See e.g. https://github.com/bitcoin/bitcoin/pull/27509#issuecomment-1653599387\r\n\r\n\r\n\r\n> broadcasted transactions can be 'lost' to the user due to external fee rate environment changes. These 'lost' transactions are then not available in a wallet interface for view or replacement by fee - they simply (and often unexpectedly) disappear.\r\n\r\nIf you really care about putting the transaction in the mempool, you can use `prioritisetransaction`. However, that comes with the corresponding downsides as well. (Other, higher-fee transactions may be discarded; privacy leaks; ...).\r\n\r\n\r\nGenerally, my recommendation would be to implement this feature in the wallet: See https://github.com/bitcoin/bitcoin/issues/11887.\r\n\r\nAfter it has been implemented in the wallet, it can likely be ported to another slimmer module, if users think the wallet is too heavy to use for this task.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2233185138",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2235889412,
      "node_id": "IC_kwDOABII586FRPcE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2235889412",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T08:07:55Z",
      "updated_at": "2024-07-18T08:07:55Z",
      "author_association": "NONE",
      "body": "> Would it not be possible to implement this by creating a wallet called broadcast_pool and then write simple wrapper functions to implement the broadcast pool features?\r\n\r\nAll of the wallets linked in the issues above (and of course many others) use the Electrum server protocol, and in general rely on Electrum server implementations that do not require or use the wallet functionality. Even if they were to do so, I cannot see how it is practical to broadcast arbitrary transactions via the wallet RPCs.\r\n\r\n> I don't think it is possible to include something in the mempool and hide the fact that it is included from remote peers. This is a recurring topic.\r\n\r\nAn alternative would be to have a broadcast pool RPC. The minimum requirement is that future-dated transactions be retrievable via RPC, so that they can be included in transactions associated with a wallet.\r\n\r\n> If you really care about putting the transaction in the mempool, you can use prioritisetransaction.\r\n\r\nMy understanding from reading the original PR is that this affects inclusion of transactions into a proposed block, and not retention in the mempool. As you suggest though, changing the contents of the mempool for this purpose is not ideal.\r\n\r\n> Generally, my recommendation would be to implement this feature in the wallet\r\n\r\nUnfortunately, I don't think that would address this use case in a practical manner.",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2235889412",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236001712,
      "node_id": "IC_kwDOABII586FRq2w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236001712",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T09:04:25Z",
      "updated_at": "2024-07-18T09:04:25Z",
      "author_association": "MEMBER",
      "body": "> > If you really care about putting the transaction in the mempool, you can use prioritisetransaction.\r\n> \r\n> My understanding from reading the original PR is that this affects inclusion of transactions into a proposed block, and not retention in the mempool. As you suggest though, changing the contents of the mempool for this purpose is not ideal.\r\n\r\nWhile the RPC is placed in the \"mining\" section, it also affects the mempool size trimming calculation. But yeah, using the RPC here may not be ideal.\r\n\r\n\r\n> > I don't think it is possible to include something in the mempool and hide the fact that it is included from remote peers. This is a recurring topic.\r\n> An alternative would be to have a broadcast pool RPC. The minimum requirement is that future-dated transactions be retrievable via RPC, so that they can be included in transactions associated with a wallet.\r\n\r\nIf all you need is just a way to get back a byte blob by asking for its hash, and the byte blobs are sent to `sendrawtranscation` after some time, it would be trivial to implement. However, if you also want to build transaction graphs and do replacements on them, it will be non-trivial. Maybe if you limit yourself to only TRUC v3 transactions, it could be easier to implement, but I haven't checked this. I guess it could help if you specified why you need the transactions to be \"included in views on the mempool\". Do you need the views to determine which transactions are \"active\", for calculating the wallet balance and seeing which coins are spendable in the view?\r\n\r\n\r\n> > Generally, my recommendation would be to implement this feature in the wallet\r\n> \r\n> Unfortunately, I don't think that would address this use case in a practical manner.\r\n\r\nI meant that the general nature of this problem (and its general solution) is sufficiently similar (if not identical), so that having a solution for one is close to having a solution for the other. \r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236001712",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236090225,
      "node_id": "IC_kwDOABII586FSAdx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236090225",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T09:48:58Z",
      "updated_at": "2024-07-18T09:48:58Z",
      "author_association": "NONE",
      "body": "> Do you need the views to determine which transactions are \"active\", for calculating the wallet balance and seeing which coins are spendable in the view?\r\n\r\nYes - the wallet would consider any UTXOs included in these transactions as spent, and any UTXOs they create would be spendable. Of course there would need to be consideration in a wallet UI to avoid creating a situation where non-existent UTXOs are spent in a broadcasted transaction (which would simply fail on broadcast as it does now). \r\n\r\n> However, if you also want to build transaction graphs and do replacements on them, it will be non-trivial.\r\n\r\nTo clear, future-dated broadcasts are an additional (although powerful) feature request - I added it here because it appeared to fit within the framework of retaining locally broadcast transactions. It could also be built higher up the stack (for example in Electrum servers), since transactions that are restricted to the local environment may more simply be removed in the event of any conflict, without considering specific consensus rules. This is not true for broadcasted transactions, so I would consider that the more critical part of this issue.",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236090225",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236188801,
      "node_id": "IC_kwDOABII586FSYiB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236188801",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T10:41:44Z",
      "updated_at": "2024-07-18T10:41:44Z",
      "author_association": "MEMBER",
      "body": "> Yes - the wallet would consider any UTXOs included in these transactions as spent, and any UTXOs they create would be spendable. Of course there would need to be consideration in a wallet UI to avoid creating a situation where non-existent UTXOs are spent in a broadcasted transaction (which would simply fail on broadcast as it does now).\r\n\r\nI wonder if the feature helps users in that case. If a set of transactions isn't in \"the mempool\" (the one the wallet is connected to) right now, it will probably not be confirmed any time soon. So indicating to the user that the transactions are fine (and spendable) may be causing more issues than it solves. As a user, I'd probably expect to be notified that a transaction isn't in \"the connected mempool\" and be offered some kind of optional fee-bump (or rebroadcast button, if the transaction hit mempool-expiry).\r\n\r\nObviously, if the fee bump then happens through a child transaction, the transactions will have to be submitted as a package for relay. (Not sure if electrum supports this)\r\n\r\n\r\n\r\n\r\n\r\n> To clear, future-dated broadcasts are an additional (although powerful) feature request - I added it here because it appeared to fit within the framework of retaining locally broadcast transactions.\r\n\r\nLooks like the retaining local transactions issue was fixed in   https://github.com/spesmilo/electrum/issues/3595#issuecomment-363535872 , so it seems possible to implement the future-dated feature there as well?\r\n\r\n\r\n> since transactions that are restricted to the local environment may more simply be removed in the event of any conflict, without considering specific consensus rules. This is not true for broadcasted transactions, so I would consider that the more critical part of this issue.\r\n\r\nI assume when you say \"consensus\" you mean \"policy\". If you want to avoid implementing all the policy code in the local wallet app, you can rely on the `testmempoolaccept`   to try \"mempool-extensions\". However, I don't think there is a way to avoid in the local wallet app the concept of knowing the topology of unconfirmed transactions (and their unspent outputs). I am not sure if it is really easier to keep a remote mempool view of the user's current wallet, rather than letting the user modify the \"view\" locally (transaction replacements, or transaction chains), and then testing their modification via `testmempoolaccept` or a direct submit to the mempool+broadcast.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236188801",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236343826,
      "node_id": "IC_kwDOABII586FS-YS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236343826",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T12:12:40Z",
      "updated_at": "2024-07-18T12:12:40Z",
      "author_association": "NONE",
      "body": "> As a user, I'd probably expect to be notified that a transaction isn't in \"the connected mempool\" and be offered some kind of optional fee-bump (or rebroadcast button, if the transaction hit mempool-expiry).\r\n\r\nIn general I agree. I was referring specifically to future-dated transactions there, so we may be speaking slightly at cross purposes. But to speak to broadcasted transactions, it's less important to consider the local mempool, since we must assume they are contained in some miners mempool. For most users, it's more important that they always have access to a transaction to fee bump it - I think that's the primary motivation from a wallet POV.\r\n\r\n> Obviously, if the fee bump then happens through a child transaction, the transactions will have to be submitted as a package for relay.\r\n\r\nGood point. It doesn't currently - but that's solvable.\r\n\r\n> Looks like the retaining local transactions issue was fixed in https://github.com/spesmilo/electrum/issues/3595#issuecomment-363535872 ,\r\n\r\nElectrum have adopted a practical approach, but it's not entirely correct. They consider all conflicting transactions, and then discard according to the hierarchy confirmed > mempool > local ([reference](https://github.com/spesmilo/electrum/blob/76f5d6ceb07b49e403f63488832fd6cb397ee91b/electrum/address_synchronizer.py#L295-L298)). This does not consider policy rules, and may result in discarding a transaction that is later mined.\r\n\r\n> I assume when you say \"consensus\" you mean \"policy\". If you want to avoid implementing all the policy code in the local wallet app, you can rely on the testmempoolaccept to try \"mempool-extensions\" \r\n\r\nThat RPC call is not currently supported by Electrum servers. Would `testmempoolaccept` not always return false in this situation though, rejecting transactions below a certain fee rate?\r\n\r\n> I am not sure if it is really easier to keep a remote mempool view of the user's current wallet, rather than letting the user modify the \"view\" locally (transaction replacements, or transaction chains), and then testing their modification via testmempoolaccept or a direct submit to the mempool+broadcast.\r\n\r\nThe key problem is retaining transactions that have been dropped due to mempool size limitations (as opposed to other reasons). I've tried to implement this in Sparrow already, and found it particularly challenging to do efficiently within the constraints of the Electrum protocol which is optimized for performance and not conflict resolution. I abandoned the attempt before trying to reimplement policy rules. That said, it seems to me this functionality would be generally desirable and useful, and should not need to be reimplemented in every node client that makes use of transaction broadcasting.\r\n\r\n",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236343826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236633461,
      "node_id": "IC_kwDOABII586FUFF1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236633461",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T14:07:36Z",
      "updated_at": "2024-07-18T14:07:36Z",
      "author_association": "MEMBER",
      "body": "> Electrum have adopted a practical approach, but it's not entirely correct. They consider all conflicting transactions, and then discard according to the hierarchy confirmed > mempool > local ([reference](https://github.com/spesmilo/electrum/blob/76f5d6ceb07b49e403f63488832fd6cb397ee91b/electrum/address_synchronizer.py#L295-L298)). This does not consider policy rules, and may result in discarding a transaction that is later mined.\r\n\r\nYes, but that should be harmless, as a confirmed transaction in the chain can be retrieved from the chain. The same problem would exist in a broadcast pool, because any transaction in it is not guaranteed to be confirmed, and an earlier (or later) replacement could be confirmed, or none at all.\r\n\r\nIf you are looking for a solution to keep a backup of any wallet transactions created, I don't see another way than to store them directly in the wallet either locally (or remotely in a Bitcoin Core wallet, or another database).\r\n\r\n\r\n\r\n> That RPC call is not currently supported by Electrum servers. Would `testmempoolaccept` not always return false in this situation though, rejecting transactions below a certain fee rate?\r\n\r\nOnly if they are below the mempool min fee rate. However, in that case the user will likely have to wait for a long time anyway (possibly more than 2 weeks), so the transaction will need to be backup up anyway. (For checking the transaction, you can use `prioritisetransaction +delta`+`testmempoolaccept`+`prioritisetransaction -delta`, possibly in a single batch call, to check all policy rules except for the fee).\r\n\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236633461",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236775996,
      "node_id": "IC_kwDOABII586FUn48",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236775996",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T14:50:09Z",
      "updated_at": "2024-07-18T14:50:09Z",
      "author_association": "NONE",
      "body": "> Yes, but that should be harmless, as a confirmed transaction in the chain can be retrieved from the chain. The same problem would exist in a broadcast pool, because any transaction in it is not guaranteed to be confirmed, and an earlier (or later) replacement could be confirmed, or none at all.\r\n\r\nI don't agree - it could lead to a situation where a user is fee bumping a transaction unnecessarily. Certainly there are no guarantees on confirmation, but where a transaction is discarded locally in contradiction to your node's policy rules you have an unnecessarily less accurate view to make decisions on.\r\n\r\n> For checking the transaction, you can use `prioritisetransaction +delta`+`testmempoolaccept`+`prioritisetransaction -delta`, possibly in a single batch call, to check all policy rules except for the fee).\r\n\r\nNoted, although it seems a convoluted solution. The delta needs to be calculated (the mempool min fee is not available to Electrum clients) and obviously `prioritisetransaction` is not available either.\r\n\r\n",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236775996",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236887064,
      "node_id": "IC_kwDOABII586FVDAY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236887064",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T15:39:26Z",
      "updated_at": "2024-07-18T15:39:26Z",
      "author_association": "MEMBER",
      "body": "> > Yes, but that should be harmless, as a confirmed transaction in the chain can be retrieved from the chain. The same problem would exist in a broadcast pool, because any transaction in it is not guaranteed to be confirmed, and an earlier (or later) replacement could be confirmed, or none at all.\r\n> \r\n> I don't agree - it could lead to a situation where a user is fee bumping a transaction unnecessarily. Certainly there are no guarantees on confirmation, but where a transaction is discarded locally in contradiction to your node's policy rules you have an unnecessarily less accurate view to make decisions on.\r\n\r\nMaybe I don't understand. Do you disagree that it is harmless, or do you disagree that the same problem exists in a broadcast pool?\r\n\r\nAlso, why would a fee bump be unnecessary when the transaction doesn't even meet the min mempool fee? The fee bump is optional and up to the users, so they can decide whether they want to wait or not. Though, given that electrum doesn't even return the mempool min fee, a fee bump seems difficult either way.\r\n\r\n\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236887064",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2238694916,
      "node_id": "IC_kwDOABII586Fb8YE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2238694916",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T08:54:35Z",
      "updated_at": "2024-07-19T08:54:35Z",
      "author_association": "NONE",
      "body": "> Do you disagree that it is harmless, or do you disagree that the same problem exists in a broadcast pool?\r\n\r\nBoth. A broadcast pool has direct access to policy rules, a wallet client generally does not. \r\n\r\n> Also, why would a fee bump be unnecessary when the transaction doesn't even meet the min mempool fee?\r\n\r\nBecause it may still exist in a larger miner's mempool. Consider the following situation: Alice broadcasts a transaction at a fee rate of 10 sats/vb. Her min mempool fee increases later to 11 sats/vb, so the transaction is dropped from her mempool, but it still exists in a larger miner's mempool. Her min mempool fee then drops to 9 sats/vb. Mallory broadcasts a conflicting transaction at 9 sats/vb, and Alice's wallet discards her transaction using the hierarchy `confirmed > mempool > local`. Alice should at the least consult a block explorer like mempool.space at this point, since her wallet is no longer showing her an accurate picture of which transaction is likely to be mined. My point is that with a broadcast pool, this is unnecessary - her node has all the data and algorithms to make the correct decision about which transaction should be retained in her wallet view.",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2238694916",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2238799112,
      "node_id": "IC_kwDOABII586FcV0I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2238799112",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T09:51:22Z",
      "updated_at": "2024-07-19T09:51:22Z",
      "author_association": "MEMBER",
      "body": "The same problem exists in a broadcast pool. For example:\r\n\r\n* Alice broadcasts at 10sat/vb, but the transaction isn't confirmed in $mempool_expiry time, and thus dropped from Alice's mempool (and broadcast pool). (The transaction may or may not be in a miner's mempool with larger expiry)\r\n* Mallory broadcasts her at 9sat/vb.\r\n* Alice's wallet discards her transaction using 10sat/vb, based on the hierarchy `confirmed > mempool > local` (or `confirmed > mempool > broadcast_pool > local`)\r\n\r\nSo I don't think broadcast pools will solve this particular problem. I am ignoring the fact that untrusted Mallory can include Alice's wallet inputs in a transaction here and Alice has somehow strong expectations in this adversarial setting.\r\n\r\nI think a more robust solution here is likely an automatic or manual rebroadcast inside Alice's wallet.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2238799112",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2238824451,
      "node_id": "IC_kwDOABII586FccAD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2238824451",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T10:07:16Z",
      "updated_at": "2024-07-19T10:07:16Z",
      "author_association": "NONE",
      "body": "> and thus dropped from Alice's mempool (and broadcast pool)\r\n\r\nThis is where we differ. From my description in the OP: \"Transactions in the broadcast pool are subject to almost all of the same rules as those in the mempool, except that they are not removed due to mempool size limitations.\" Therefore, in this scenario, the transaction would not be dropped from the broadcast pool.\r\n\r\nI don't want to focus too deeply on whether the situation must be adversarial - as a wallet developer, I am always trying to avoid the situation where the wallet says one thing, and a block explorer says another, regardless of how that arises.",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2238824451",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2238834490,
      "node_id": "IC_kwDOABII586Fcec6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2238834490",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T10:13:35Z",
      "updated_at": "2024-07-19T10:13:35Z",
      "author_association": "MEMBER",
      "body": "> > and thus dropped from Alice's mempool (and broadcast pool)\r\n> \r\n> This is where we differ. From my description in the OP: \"Transactions in the broadcast pool are subject to almost all of the same rules as those in the mempool, except that they are not removed due to mempool size limitations.\" Therefore, in this scenario, the transaction would not be dropped from the broadcast pool.\r\n\r\nI think you accidentally mixed up size limits and expiry. They are different, because one looks at the memory usage and the other at expiry times (regardless of memory usage). With expiry, it is possible that transactions are dropped, even if the size limit is not yet hit. You also say this yourself in your OP: \"Broadcast transactions are retained in this cache until they are included in a block, or *expire after the configured mempoolexpiry period*.\"",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2238834490",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2238846496,
      "node_id": "IC_kwDOABII586FchYg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2238846496",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T10:21:40Z",
      "updated_at": "2024-07-19T10:21:40Z",
      "author_association": "NONE",
      "body": "> They are different, because one looks at the memory usage and the other at expiry times (regardless of memory usage). With expiry, it is possible that transactions are dropped, even if the size limit is not yet hit.\r\n\r\nI agree with this description, but am unclear how this impacts the scenario I described, where in no case is a transaction dropped due to expiry. All of the events described can occur within a 2 week period.",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2238846496",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2243102274,
      "node_id": "IC_kwDOABII586FswZC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2243102274",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T14:28:08Z",
      "updated_at": "2024-07-22T14:28:08Z",
      "author_association": "MEMBER",
      "body": "Well, your same scenario would be possible with a broadcast pool, because a broadcast pool would need to be size-limited. So Mallory can put the 9sat/vB transaction in the broadcast pool or mempool, when the 10sat/vB transaction has been dropped from the mempool and broadcast pool. Alice's wallet will still discard her transaction using the hierarchy `confirmed > mempool > local` (or `confirmed > mempool > broadcast_pool > local`).\r\n\r\nI understand the use cases and advantages of a broadcast pool, but all I want to say that the broadcast pool is probably not the right tool to fix the issue of 'lost' transactions. ",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2243102274",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2243160526,
      "node_id": "IC_kwDOABII586Fs-nO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2243160526",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T14:53:11Z",
      "updated_at": "2024-07-22T14:53:11Z",
      "author_association": "NONE",
      "body": "> So Mallory can put the 9sat/vB transaction in the broadcast pool\r\n\r\nFrom the OP: \"A broadcast pool is a cache local to the node which contains transactions which have been initially broadcast from that node\". So Mallory's transaction would not enter Alice's broadcast pool, as Alice did not initiate its broadcast. The broadcast pool *only* contains transactions that Alice has broadcast either from her Core wallet or via the `sendrawtransaction` RPC. It does not contain transactions received over the P2P network.\r\n\r\n> when the 10sat/vB transaction has been dropped from the mempool and broadcast pool\r\n\r\nThe 10 sat/vB transaction would not be dropped from Alice's broadcast pool, as it would in this example be the only transaction in that pool.\r\n\r\n",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2243160526",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2244507662,
      "node_id": "IC_kwDOABII586FyHgO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2244507662",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T07:53:12Z",
      "updated_at": "2024-07-23T07:53:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "This is related\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/29415\r\n\r\nit contains a storage of unbroadcast transactions, separate from the mempool. Transactions from that storage are periodically broadcast. A difference from this feature request is that transactions are removed from the unbroadcast storage once they are seen by the network. This can be easily changed however in a followup - for example if a local transaction is seen by the network, appears in ours and others' mempools, then keep it in the unbroadcast storage until included in a block. If at some point it disappears (pushed away by higher fee transactions) then re-broadcast it.\r\n\r\nIt is a separate task, which I am planning after https://github.com/bitcoin/bitcoin/pull/29415 is merged to have the wallet account for transactions that are in the unbroadcast storage and not in the mempool.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2244507662",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2244580379,
      "node_id": "IC_kwDOABII586FyZQb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2244580379",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T08:29:16Z",
      "updated_at": "2024-07-23T08:29:16Z",
      "author_association": "MEMBER",
      "body": "> The broadcast pool _only_ contains transactions that Alice has broadcast either from her Core wallet or via the `sendrawtransaction` RPC.\r\n\r\nI see. I assumed that Mallory and Alice could have wallet on the same node (multiwallet mode), or that they shared the `sendrawtransaction` RPC on the same node. Not sure if this assumption is accurate, but it seemed plausible that some nodes expose their `sendrawtransaction` to third parties.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2244580379",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2244671905,
      "node_id": "IC_kwDOABII586Fyvmh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2244671905",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T09:09:51Z",
      "updated_at": "2024-07-23T09:09:51Z",
      "author_association": "NONE",
      "body": "@vaslid This sounds excellent. From your comment it seems like https://github.com/bitcoin/bitcoin/pull/29415 is a great basis to implement this. I will look into that work more closely, as it's very useful in it's own right. Currently, if Tor is configured, Sparrow broadcasts over Tor via a random external service such as mempool.space for greater privacy. As I understand it, this would no longer be necessary with `-privatebroadcast=1`.\r\n\r\n> It is a separate task, which I am planning after https://github.com/bitcoin/bitcoin/pull/29415 is merged to have the wallet account for transactions that are in the unbroadcast storage and not in the mempool.\r\n\r\nThis would also be useful for those applications that leverage the Core wallet, including Sparrow's own Cormorant library, an  EPS-like light Electrum server. But for full Electrum servers like ElectrumX and Fulcrum which use RPCs like `getrawmempool`, some other way to retrieve unbroadcast transactions will be necessary. \r\n\r\nI also note that https://github.com/bitcoin/bitcoin/pull/29415 contains methods to internally schedule a rebroadcast, and I wonder if that could be later leveraged for future-dated broadcasts as described here.",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2244671905",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2245028663,
      "node_id": "IC_kwDOABII586F0Gs3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2245028663",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T11:53:42Z",
      "updated_at": "2024-07-23T11:53:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Sparrow broadcasts over Tor via a random external service such as mempool.space for greater privacy. As I understand it, this would no longer be necessary with `-privatebroadcast=1`\r\n\r\nCorrect.\r\n\r\n> But for full Electrum servers like ElectrumX and Fulcrum which use RPCs like getrawmempool, some other way to retrieve unbroadcast transactions will be necessary\r\n\r\nMaybe. Note that usually a transaction will be in unbroadcast pool and not in the mempool only for a few seconds, until it round-trips through the network back to us.\r\n\r\n> https://github.com/bitcoin/bitcoin/pull/29415 contains methods to internally schedule a rebroadcast, and I wonder if that could be later leveraged for future-dated broadcasts as described here.\r\n\r\nYes, that would be a nice addition and easy to implement as well. I will refrain from adding it to #29415 just not to [feature creep](https://en.wikipedia.org/wiki/Feature_creep) it. Also, the unbroadcast storage (pool) in #29415 is not persistent upon restarts. Deliberately delaying the broadcast for non-trivial amount of time warrants having the pool persist during restarts. So, most likely, both of this will come together in a followup.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2245028663",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2245169909,
      "node_id": "IC_kwDOABII586F0pL1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2245169909",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T12:52:51Z",
      "updated_at": "2024-07-23T12:52:51Z",
      "author_association": "NONE",
      "body": "> Maybe. Note that usually a transaction will be in unbroadcast pool and not in the mempool only for a few seconds, until it round-trips through the network back to us.\r\n\r\nYes, this would be the normal case. But if the transaction cannot enter the mempool because of low fee rate/mempool size constraints, then it will remain only in the unbroadcast pool as you described above. In this case, the Electrum server should be able to retrieve the transaction in order to include it in the list of relevant transactions for a wallet (for example for fee bumping).\r\n\r\n> Yes, that would be a nice addition and easy to implement as well.\r\n\r\nGreat to hear! ",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2245169909",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2416464868,
      "node_id": "IC_kwDOABII586QCFPk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2416464868",
      "actor": {
        "login": "nvk",
        "id": 797193,
        "node_id": "MDQ6VXNlcjc5NzE5Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/797193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nvk",
        "html_url": "https://github.com/nvk",
        "followers_url": "https://api.github.com/users/nvk/followers",
        "following_url": "https://api.github.com/users/nvk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nvk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nvk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nvk/subscriptions",
        "organizations_url": "https://api.github.com/users/nvk/orgs",
        "repos_url": "https://api.github.com/users/nvk/repos",
        "events_url": "https://api.github.com/users/nvk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nvk/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-16T10:57:17Z",
      "updated_at": "2024-10-16T10:57:17Z",
      "author_association": "NONE",
      "body": "Would love to see this happen. ",
      "user": {
        "login": "nvk",
        "id": 797193,
        "node_id": "MDQ6VXNlcjc5NzE5Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/797193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nvk",
        "html_url": "https://github.com/nvk",
        "followers_url": "https://api.github.com/users/nvk/followers",
        "following_url": "https://api.github.com/users/nvk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nvk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nvk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nvk/subscriptions",
        "organizations_url": "https://api.github.com/users/nvk/orgs",
        "repos_url": "https://api.github.com/users/nvk/repos",
        "events_url": "https://api.github.com/users/nvk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nvk/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2416464868",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "subscribed",
      "id": 14685209163,
      "node_id": "SE_lADOABII586P2aCpzwAAAANrToJL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14685209163",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-16T17:19:08Z"
    },
    {
      "event": "commented",
      "id": 2539513336,
      "node_id": "IC_kwDOABII586XXeX4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2539513336",
      "actor": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-12T16:59:49Z",
      "updated_at": "2024-12-12T16:59:49Z",
      "author_association": "NONE",
      "body": "Love this idea! Being able to have a bitcoin node handle a pool of transactions not directly managed by a wallet to help with rebroadcasting will help users be able to manage presigned transactions and key/utxo rotation as it relates to wallets leveraging timelocks.",
      "user": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2539513336",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2539525129,
      "node_id": "IC_kwDOABII586XXhQJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2539525129",
      "actor": {
        "login": "nvk",
        "id": 797193,
        "node_id": "MDQ6VXNlcjc5NzE5Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/797193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nvk",
        "html_url": "https://github.com/nvk",
        "followers_url": "https://api.github.com/users/nvk/followers",
        "following_url": "https://api.github.com/users/nvk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nvk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nvk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nvk/subscriptions",
        "organizations_url": "https://api.github.com/users/nvk/orgs",
        "repos_url": "https://api.github.com/users/nvk/repos",
        "events_url": "https://api.github.com/users/nvk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nvk/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-12T17:04:59Z",
      "updated_at": "2024-12-12T17:04:59Z",
      "author_association": "NONE",
      "body": "Any movement?\r\n",
      "user": {
        "login": "nvk",
        "id": 797193,
        "node_id": "MDQ6VXNlcjc5NzE5Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/797193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nvk",
        "html_url": "https://github.com/nvk",
        "followers_url": "https://api.github.com/users/nvk/followers",
        "following_url": "https://api.github.com/users/nvk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nvk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nvk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nvk/subscriptions",
        "organizations_url": "https://api.github.com/users/nvk/orgs",
        "repos_url": "https://api.github.com/users/nvk/repos",
        "events_url": "https://api.github.com/users/nvk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nvk/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2539525129",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2557300801,
      "node_id": "IC_kwDOABII586YbVBB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2557300801",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-20T16:15:04Z",
      "updated_at": "2024-12-20T16:15:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "The closest thing to this is at https://github.com/bitcoin/bitcoin/pull/29415, waiting for testing and code review.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2557300801",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    }
  ]
}