{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500",
    "id": 1519869698,
    "node_id": "PR_kwDOABII585al18C",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28500",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28500.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28500.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28500",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28500/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
    "number": 28500,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Prevent default/invalid CKey objects from allocating secure memory",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Bitcoin Core has `secure_allocator`, which allocates inside special \"secure\" (non-swappable) memory pages, which may be limited in availability. Currently, every `CKey` object uses 32 such secure bytes, even when the `CKey` object contains the (invalid) value zero.\r\n\r\nChange this to not use memory when the `CKey` is invalid. This is particularly relevant for `BIP324Cipher` which briefly holds a `CKey`, but after receiving the remote's public key and initializing the encryption ciphers, the key is wiped. In case secure memory usage is in high demand, it'd be silly to waste it on P2P encryption keys instead of wallet keys.",
    "labels": [
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2023-09-18T16:42:41Z",
    "updated_at": "2023-09-25T16:31:57Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "acdf10bbca07ad92b0b9a5f507985f509f51a4f3",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sipa:202309_no_null_key_alloc",
      "ref": "202309_no_null_key_alloc",
      "sha": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 22,
        "stargazers_count": 85,
        "watchers_count": 85,
        "size": 222936,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-24T11:22:34Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2023-09-15T21:50:59Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "ac9fa6ec78158e41006d621ee62e44dec0f934c0",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35741,
        "stargazers_count": 71484,
        "watchers_count": 71484,
        "size": 240204,
        "default_branch": "master",
        "open_issues_count": 635,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-25T16:47:05Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-09-25T16:49:20Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 78,
    "deletions": 38,
    "changed_files": 3,
    "commits": 2,
    "review_comments": 15,
    "comments": 2
  },
  "events": [
    {
      "event": "commented",
      "id": 1723925082,
      "node_id": "IC_kwDOABII585mwQJa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1723925082",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-18T16:42:44Z",
      "updated_at": "2023-09-25T16:31:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [ajtowns](https://github.com/bitcoin/bitcoin/pull/28500#issuecomment-1734094819) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#issuecomment-1723925082",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28500"
    },
    {
      "event": "reviewed",
      "id": 1637780993,
      "node_id": "PRR_kwDOABII585hno4B",
      "url": null,
      "actor": null,
      "commit_id": "f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#pullrequestreview-1637780993",
      "submitted_at": "2023-09-21T13:34:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJjZjU1YjNlYzFhYjc2NWU1YjQyOTdmMWY3MzNiMzRlZjY5NmQxZDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcf55b3ec1ab765e5b4297f1f733b34ef696d1d1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bcf55b3ec1ab765e5b4297f1f733b34ef696d1d1",
      "tree": {
        "sha": "a270e0ad2bf00710877b3b188a814e4a3cd21838",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a270e0ad2bf00710877b3b188a814e4a3cd21838"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b66f6dcb26906ca8187c7e54735e21168b8101c7",
          "sha": "b66f6dcb26906ca8187c7e54735e21168b8101c7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b66f6dcb26906ca8187c7e54735e21168b8101c7"
        }
      ],
      "message": "Add make_secure_unique helper",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-09-22T13:42:10Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2023-09-22T13:40:45Z"
      },
      "sha": "bcf55b3ec1ab765e5b4297f1f733b34ef696d1d1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10451885520,
      "node_id": "HRFPE_lADOABII585xVDYJzwAAAAJu-x3Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10451885520",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-22T22:53:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10451902793,
      "node_id": "HRFPE_lADOABII585xVDYJzwAAAAJu-2FJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10451902793",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-22T22:58:43Z"
    },
    {
      "event": "reviewed",
      "id": 1640800115,
      "node_id": "PRR_kwDOABII585hzJ9z",
      "url": null,
      "actor": null,
      "commit_id": "cd234018e63e221d580c0fd6d7c9a0457c816a38",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#pullrequestreview-1640800115",
      "submitted_at": "2023-09-24T10:38:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk0ZDU4ZmU5NDJmZDg2ZmM4ZDNiMTFlM2Y3NWU0YTRmODJjODZlMzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "tree": {
        "sha": "4611f7da9d234164f653af4345e770442157a660",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4611f7da9d234164f653af4345e770442157a660"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcf55b3ec1ab765e5b4297f1f733b34ef696d1d1",
          "sha": "bcf55b3ec1ab765e5b4297f1f733b34ef696d1d1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bcf55b3ec1ab765e5b4297f1f733b34ef696d1d1"
        }
      ],
      "message": "key: don't allocate secure mem for null (invalid) key\n\nInstead of storing the key material as an std::vector (with secure allocator),\nuse a secure_unique_ptr to a 32-byte array, and use nullptr for invalid keys.\nThis means a smaller CKey type, and no secure/dynamic memory usage for invalid\nkeys.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-09-24T11:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-09-18T16:10:19Z"
      },
      "sha": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10455063887,
      "node_id": "HRFPE_lADOABII585xVDYJzwAAAAJvK51P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10455063887",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-24T11:22:45Z"
    },
    {
      "event": "labeled",
      "id": 10455191668,
      "node_id": "LE_lADOABII585xVDYJzwAAAAJvLZB0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10455191668",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-24T12:56:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1734094819,
      "node_id": "IC_kwDOABII585nXC_j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1734094819",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-25T16:31:54Z",
      "updated_at": "2023-09-25T16:31:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38 lgtm",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#issuecomment-1734094819",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28500"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1333025536",
      "pull_request_review_id": 1637780993,
      "id": 1333025536,
      "node_id": "PRRC_kwDOABII585PdFsA",
      "diff_hunk": "@@ -37,6 +38,7 @@ class CKey\n      */\n     static const unsigned int SIZE            = 279;\n     static const unsigned int COMPRESSED_SIZE = 214;\n+    static constexpr unsigned int KEY_SIZE = 32;",
      "path": "src/key.h",
      "position": null,
      "original_position": 12,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems slightly odd to use a `vector` when we want something that's always 32 bytes. Could perhaps have `secure_unique_ptr<std::array<unsigned char, KEY_SIZE>> keydata` instead, essentially replacing `.resize(32)` with a `make_secure_unique()` call and replacing `ClearShrink` with `keydata = nullptr`.\r\n\r\n```c++\r\ntemplate<typename T>\r\nstruct SecureUniqueDeleter {\r\n    void operator()(T* t) noexcept {\r\n        secure_allocator<T>().deallocate(t, 1);\r\n    }\r\n};\r\n\r\ntemplate<typename T>\r\nusing secure_unique_ptr = std::unique_ptr<T,SecureUniqueDeleter<T>>;\r\n\r\ntemplate<typename T, typename... Args>\r\nsecure_unique_ptr<T> make_secure_unique(Args&&... as)\r\n{\r\n    T* p = secure_allocator<T>().allocate(1);\r\n\r\n    // initialize in place, and return as secure_unique_ptr\r\n    return secure_unique_ptr<T>(new (p) T(std::forward(as)...));\r\n}\r\n\r\n...\r\nusing KeyType = std::array<unsigned char, 32>;\r\nsecure_unique_ptr<KeyType> keydata{nullptr};\r\n```\r\n\r\nDoing this instead of a vector requires replacing `keydata.data()` with `keydata->data()` (etc), and writing an explicit copy constructor for `CKey`. This would save 16 bytes per `CKey` (vector presumably stores a 64 bit size/capacity), but it's not in the secure allocator pool, so we probably don't care.",
      "created_at": "2023-09-21T13:09:03Z",
      "updated_at": "2023-09-21T13:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1333025536",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1333025536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1333036202",
      "pull_request_review_id": 1637780993,
      "id": 1333036202,
      "node_id": "PRRC_kwDOABII585PdISq",
      "diff_hunk": "@@ -78,14 +73,17 @@ class CKey\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (size_t(pend - pbegin) != keydata.size()) {\n+        if (size_t(pend - pbegin) != KEY_SIZE) {\n             fValid = false;\n+            ClearShrink(keydata);",
      "path": "src/key.h",
      "position": null,
      "original_position": 37,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you could replace `fValid` with `keydata.size() != 0` ",
      "created_at": "2023-09-21T13:15:37Z",
      "updated_at": "2023-09-21T13:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1333036202",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1333036202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1333057205",
      "pull_request_review_id": 1637780993,
      "id": 1333057205,
      "node_id": "PRRC_kwDOABII585PdNa1",
      "diff_hunk": "@@ -321,14 +325,12 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n         assert(pubkey.size() == CPubKey::COMPRESSED_SIZE);\n         BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());\n     } else {\n-        assert(size() == 32);\n+        assert(size() == KEY_SIZE);\n         BIP32Hash(cc, nChild, 0, begin(), vout.data());\n     }\n-    memcpy(ccChild.begin(), vout.data()+32, 32);\n-    memcpy((unsigned char*)keyChild.begin(), begin(), 32);\n+    memcpy(ccChild.begin(), vout.data() + KEY_SIZE, 32);\n+    keyChild.Set(begin(), begin() + KEY_SIZE, true);\n     bool ret = secp256k1_ec_seckey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), vout.data());\n-    keyChild.fCompressed = true;\n-    keyChild.fValid = ret;",
      "path": "src/key.cpp",
      "position": 78,
      "original_position": 35,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not `if (!ret) ClearShrink(keyChild.keydata); keyChild.fValid = ret;` ? I guess the `[[nodiscard]]` is good enough though.",
      "created_at": "2023-09-21T13:27:22Z",
      "updated_at": "2023-09-21T13:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1333057205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1333057205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 331,
      "original_line": 331,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1333059157",
      "pull_request_review_id": 1637780993,
      "id": 1333059157,
      "node_id": "PRRC_kwDOABII585PdN5V",
      "diff_hunk": "@@ -301,8 +302,11 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n }\n \n bool CKey::Load(const CPrivKey &seckey, const CPubKey &vchPubKey, bool fSkipCheck=false) {\n-    if (!ec_seckey_import_der(secp256k1_context_sign, (unsigned char*)begin(), seckey.data(), seckey.size()))\n+    keydata.resize(KEY_SIZE);\n+    if (!ec_seckey_import_der(secp256k1_context_sign, (unsigned char*)begin(), seckey.data(), seckey.size())) {\n+        ClearShrink(keydata);",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`fValid = false;` ?",
      "created_at": "2023-09-21T13:28:51Z",
      "updated_at": "2023-09-21T13:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1333059157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1333059157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334870403",
      "pull_request_review_id": 1640722256,
      "id": 1334870403,
      "node_id": "PRRC_kwDOABII585PkIGD",
      "diff_hunk": "@@ -37,6 +38,7 @@ class CKey\n      */\n     static const unsigned int SIZE            = 279;\n     static const unsigned int COMPRESSED_SIZE = 214;\n+    static constexpr unsigned int KEY_SIZE = 32;",
      "path": "src/key.h",
      "position": null,
      "original_position": 12,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "in_reply_to_id": 1333025536,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. I've added a commit adding `secure_unique_ptr`, and then switched over to using that as storage type for `CKey`.",
      "created_at": "2023-09-22T22:55:06Z",
      "updated_at": "2023-09-22T22:55:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1334870403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334870403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334870483",
      "pull_request_review_id": 1640722378,
      "id": 1334870483,
      "node_id": "PRRC_kwDOABII585PkIHT",
      "diff_hunk": "@@ -78,14 +73,17 @@ class CKey\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (size_t(pend - pbegin) != keydata.size()) {\n+        if (size_t(pend - pbegin) != KEY_SIZE) {\n             fValid = false;\n+            ClearShrink(keydata);",
      "path": "src/key.h",
      "position": null,
      "original_position": 37,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "in_reply_to_id": 1333036202,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-09-22T22:55:22Z",
      "updated_at": "2023-09-22T22:55:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1334870483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334870483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334871616",
      "pull_request_review_id": 1640724062,
      "id": 1334871616,
      "node_id": "PRRC_kwDOABII585PkIZA",
      "diff_hunk": "@@ -321,14 +325,12 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n         assert(pubkey.size() == CPubKey::COMPRESSED_SIZE);\n         BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());\n     } else {\n-        assert(size() == 32);\n+        assert(size() == KEY_SIZE);\n         BIP32Hash(cc, nChild, 0, begin(), vout.data());\n     }\n-    memcpy(ccChild.begin(), vout.data()+32, 32);\n-    memcpy((unsigned char*)keyChild.begin(), begin(), 32);\n+    memcpy(ccChild.begin(), vout.data() + KEY_SIZE, 32);\n+    keyChild.Set(begin(), begin() + KEY_SIZE, true);\n     bool ret = secp256k1_ec_seckey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), vout.data());\n-    keyChild.fCompressed = true;\n-    keyChild.fValid = ret;",
      "path": "src/key.cpp",
      "position": 78,
      "original_position": 35,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "in_reply_to_id": 1333057205,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done (not with `ClearShrink`, but by resetting the `unique_ptr`).",
      "created_at": "2023-09-22T22:59:01Z",
      "updated_at": "2023-09-22T22:59:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1334871616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334871616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 331,
      "original_line": 331,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334871898",
      "pull_request_review_id": 1640724480,
      "id": 1334871898,
      "node_id": "PRRC_kwDOABII585PkIda",
      "diff_hunk": "@@ -301,8 +302,11 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n }\n \n bool CKey::Load(const CPrivKey &seckey, const CPubKey &vchPubKey, bool fSkipCheck=false) {\n-    if (!ec_seckey_import_der(secp256k1_context_sign, (unsigned char*)begin(), seckey.data(), seckey.size()))\n+    keydata.resize(KEY_SIZE);\n+    if (!ec_seckey_import_der(secp256k1_context_sign, (unsigned char*)begin(), seckey.data(), seckey.size())) {\n+        ClearShrink(keydata);",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "f2156d613e6e8cc6a6c3d860b74d912515dc782a",
      "in_reply_to_id": 1333059157,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No longer needed, because `fValid` is now implicit as you suggested.",
      "created_at": "2023-09-22T22:59:53Z",
      "updated_at": "2023-09-22T22:59:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1334871898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334871898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334939555",
      "pull_request_review_id": 1640800115,
      "id": 1334939555,
      "node_id": "PRRC_kwDOABII585PkY-j",
      "diff_hunk": "@@ -46,57 +46,72 @@ class CKey\n         \"COMPRESSED_SIZE is larger than SIZE\");\n \n private:\n-    //! Whether this private key is valid. We check for correctness when modifying the key\n-    //! data, so fValid should always correspond to the actual state.\n-    bool fValid{false};\n+    /** Internal data container for private key material. */\n+    using KeyType = std::array<unsigned char, 32>;\n \n     //! Whether the public key corresponding to this private key is (to be) compressed.\n     bool fCompressed{false};\n \n-    //! The actual byte data\n-    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n+    //! The actual byte data. nullptr for invalid keys.\n+    secure_unique_ptr<KeyType> keydata;\n \n     //! Check whether the 32-byte array pointed to by vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n+    void MakeKeyData(bool empty = false)\n+    {\n+        if (!empty) {\n+            if (!keydata) keydata = make_secure_unique<KeyType>();\n+        } else {\n+            keydata.reset();\n+        }\n+    }\n+\n public:\n-    //! Construct an invalid private key.\n-    CKey()\n+    CKey() noexcept = default;\n+    CKey(CKey&&) noexcept = default;\n+    CKey& operator=(CKey&&) noexcept = default;\n+\n+    CKey& operator=(const CKey& other)\n     {\n-        // Important: vch must be 32 bytes in length to not break serialization\n-        keydata.resize(32);\n+        MakeKeyData(/*empty=*/!other.keydata);\n+        std::copy(other.keydata->begin(), other.keydata->end(), keydata->begin());",
      "path": "src/key.h",
      "position": null,
      "original_position": 42,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "cd234018e63e221d580c0fd6d7c9a0457c816a38",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is the only case where you don't know `empty` at compile time; could rewrite it as:\r\n\r\n```c++\r\nvoid MakeKeyData() { if (!keydata) keydata = make_secure_unique<KeyType>(); }\r\nvoid ClearKeyData() { keydata.reset(); }\r\n...\r\nif (other.keydata) {\r\n    MakeKeyData();\r\n    *keydata = *other.keydata;\r\n} else {\r\n    ClearKeyData();\r\n}\r\n```",
      "created_at": "2023-09-23T07:54:45Z",
      "updated_at": "2023-09-24T10:38:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1334939555",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334939555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334941649",
      "pull_request_review_id": 1640800115,
      "id": 1334941649,
      "node_id": "PRRC_kwDOABII585PkZfR",
      "diff_hunk": "@@ -46,57 +46,72 @@ class CKey\n         \"COMPRESSED_SIZE is larger than SIZE\");\n \n private:\n-    //! Whether this private key is valid. We check for correctness when modifying the key\n-    //! data, so fValid should always correspond to the actual state.\n-    bool fValid{false};\n+    /** Internal data container for private key material. */\n+    using KeyType = std::array<unsigned char, 32>;\n \n     //! Whether the public key corresponding to this private key is (to be) compressed.\n     bool fCompressed{false};\n \n-    //! The actual byte data\n-    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n+    //! The actual byte data. nullptr for invalid keys.\n+    secure_unique_ptr<KeyType> keydata;\n \n     //! Check whether the 32-byte array pointed to by vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n+    void MakeKeyData(bool empty = false)\n+    {\n+        if (!empty) {\n+            if (!keydata) keydata = make_secure_unique<KeyType>();\n+        } else {\n+            keydata.reset();\n+        }\n+    }\n+\n public:\n-    //! Construct an invalid private key.\n-    CKey()\n+    CKey() noexcept = default;\n+    CKey(CKey&&) noexcept = default;\n+    CKey& operator=(CKey&&) noexcept = default;\n+\n+    CKey& operator=(const CKey& other)\n     {\n-        // Important: vch must be 32 bytes in length to not break serialization\n-        keydata.resize(32);\n+        MakeKeyData(/*empty=*/!other.keydata);\n+        std::copy(other.keydata->begin(), other.keydata->end(), keydata->begin());\n+        fCompressed = other.fCompressed;\n+        return *this;\n     }\n \n+    CKey(const CKey& other) { *this = other; }\n+\n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n         return a.fCompressed == b.fCompressed &&\n             a.size() == b.size() &&\n-            memcmp(a.keydata.data(), b.keydata.data(), a.size()) == 0;\n+            memcmp(a.data(), b.data(), a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (size_t(pend - pbegin) != keydata.size()) {\n-            fValid = false;\n+        if (size_t(pend - pbegin) != std::tuple_size_v<KeyType>) {\n+            MakeKeyData(/*empty=*/true);\n         } else if (Check(&pbegin[0])) {\n-            memcpy(keydata.data(), (unsigned char*)&pbegin[0], keydata.size());\n-            fValid = true;\n+            MakeKeyData();\n+            memcpy(keydata->data(), (unsigned char*)&pbegin[0], keydata->size());\n             fCompressed = fCompressedIn;\n         } else {\n-            fValid = false;\n+            MakeKeyData(/*empty=*/true);\n         }\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? keydata.size() : 0); }\n-    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata.data()); }\n-    const unsigned char* begin() const { return keydata.data(); }\n-    const unsigned char* end() const { return keydata.data() + size(); }\n+    unsigned int size() const { return keydata ? keydata->size() : 0; }\n+    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata->data()); }",
      "path": "src/key.h",
      "position": null,
      "original_position": 83,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "cd234018e63e221d580c0fd6d7c9a0457c816a38",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`return keydata ? reinterpret_cast<..>(..) : nullptr;` -- otherwise `CKey() == CKey()` will dereference nullptr?",
      "created_at": "2023-09-23T08:13:58Z",
      "updated_at": "2023-09-24T10:38:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1334941649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1334941649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335161931",
      "pull_request_review_id": 1641036783,
      "id": 1335161931,
      "node_id": "PRRC_kwDOABII585PlPRL",
      "diff_hunk": "@@ -46,57 +46,72 @@ class CKey\n         \"COMPRESSED_SIZE is larger than SIZE\");\n \n private:\n-    //! Whether this private key is valid. We check for correctness when modifying the key\n-    //! data, so fValid should always correspond to the actual state.\n-    bool fValid{false};\n+    /** Internal data container for private key material. */\n+    using KeyType = std::array<unsigned char, 32>;\n \n     //! Whether the public key corresponding to this private key is (to be) compressed.\n     bool fCompressed{false};\n \n-    //! The actual byte data\n-    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n+    //! The actual byte data. nullptr for invalid keys.\n+    secure_unique_ptr<KeyType> keydata;\n \n     //! Check whether the 32-byte array pointed to by vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n+    void MakeKeyData(bool empty = false)\n+    {\n+        if (!empty) {\n+            if (!keydata) keydata = make_secure_unique<KeyType>();\n+        } else {\n+            keydata.reset();\n+        }\n+    }\n+\n public:\n-    //! Construct an invalid private key.\n-    CKey()\n+    CKey() noexcept = default;\n+    CKey(CKey&&) noexcept = default;\n+    CKey& operator=(CKey&&) noexcept = default;\n+\n+    CKey& operator=(const CKey& other)\n     {\n-        // Important: vch must be 32 bytes in length to not break serialization\n-        keydata.resize(32);\n+        MakeKeyData(/*empty=*/!other.keydata);\n+        std::copy(other.keydata->begin(), other.keydata->end(), keydata->begin());\n+        fCompressed = other.fCompressed;\n+        return *this;\n     }\n \n+    CKey(const CKey& other) { *this = other; }\n+\n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n         return a.fCompressed == b.fCompressed &&\n             a.size() == b.size() &&\n-            memcmp(a.keydata.data(), b.keydata.data(), a.size()) == 0;\n+            memcmp(a.data(), b.data(), a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (size_t(pend - pbegin) != keydata.size()) {\n-            fValid = false;\n+        if (size_t(pend - pbegin) != std::tuple_size_v<KeyType>) {\n+            MakeKeyData(/*empty=*/true);\n         } else if (Check(&pbegin[0])) {\n-            memcpy(keydata.data(), (unsigned char*)&pbegin[0], keydata.size());\n-            fValid = true;\n+            MakeKeyData();\n+            memcpy(keydata->data(), (unsigned char*)&pbegin[0], keydata->size());\n             fCompressed = fCompressedIn;\n         } else {\n-            fValid = false;\n+            MakeKeyData(/*empty=*/true);\n         }\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? keydata.size() : 0); }\n-    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata.data()); }\n-    const unsigned char* begin() const { return keydata.data(); }\n-    const unsigned char* end() const { return keydata.data() + size(); }\n+    unsigned int size() const { return keydata ? keydata->size() : 0; }\n+    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata->data()); }",
      "path": "src/key.h",
      "position": null,
      "original_position": 83,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "cd234018e63e221d580c0fd6d7c9a0457c816a38",
      "in_reply_to_id": 1334941649,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For reference, this shouldn't be an issue with clang/gcc and should fix itself, given enough time, see https://reviews.llvm.org/D86993#4585590",
      "created_at": "2023-09-24T10:57:54Z",
      "updated_at": "2023-09-24T10:57:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1335161931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335161931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335163677",
      "pull_request_review_id": 1641038420,
      "id": 1335163677,
      "node_id": "PRRC_kwDOABII585PlPsd",
      "diff_hunk": "@@ -46,57 +46,72 @@ class CKey\n         \"COMPRESSED_SIZE is larger than SIZE\");\n \n private:\n-    //! Whether this private key is valid. We check for correctness when modifying the key\n-    //! data, so fValid should always correspond to the actual state.\n-    bool fValid{false};\n+    /** Internal data container for private key material. */\n+    using KeyType = std::array<unsigned char, 32>;\n \n     //! Whether the public key corresponding to this private key is (to be) compressed.\n     bool fCompressed{false};\n \n-    //! The actual byte data\n-    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n+    //! The actual byte data. nullptr for invalid keys.\n+    secure_unique_ptr<KeyType> keydata;\n \n     //! Check whether the 32-byte array pointed to by vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n+    void MakeKeyData(bool empty = false)\n+    {\n+        if (!empty) {\n+            if (!keydata) keydata = make_secure_unique<KeyType>();\n+        } else {\n+            keydata.reset();\n+        }\n+    }\n+\n public:\n-    //! Construct an invalid private key.\n-    CKey()\n+    CKey() noexcept = default;\n+    CKey(CKey&&) noexcept = default;\n+    CKey& operator=(CKey&&) noexcept = default;\n+\n+    CKey& operator=(const CKey& other)\n     {\n-        // Important: vch must be 32 bytes in length to not break serialization\n-        keydata.resize(32);\n+        MakeKeyData(/*empty=*/!other.keydata);\n+        std::copy(other.keydata->begin(), other.keydata->end(), keydata->begin());\n+        fCompressed = other.fCompressed;\n+        return *this;\n     }\n \n+    CKey(const CKey& other) { *this = other; }\n+\n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n         return a.fCompressed == b.fCompressed &&\n             a.size() == b.size() &&\n-            memcmp(a.keydata.data(), b.keydata.data(), a.size()) == 0;\n+            memcmp(a.data(), b.data(), a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (size_t(pend - pbegin) != keydata.size()) {\n-            fValid = false;\n+        if (size_t(pend - pbegin) != std::tuple_size_v<KeyType>) {\n+            MakeKeyData(/*empty=*/true);\n         } else if (Check(&pbegin[0])) {\n-            memcpy(keydata.data(), (unsigned char*)&pbegin[0], keydata.size());\n-            fValid = true;\n+            MakeKeyData();\n+            memcpy(keydata->data(), (unsigned char*)&pbegin[0], keydata->size());\n             fCompressed = fCompressedIn;\n         } else {\n-            fValid = false;\n+            MakeKeyData(/*empty=*/true);\n         }\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? keydata.size() : 0); }\n-    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata.data()); }\n-    const unsigned char* begin() const { return keydata.data(); }\n-    const unsigned char* end() const { return keydata.data() + size(); }\n+    unsigned int size() const { return keydata ? keydata->size() : 0; }\n+    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata->data()); }",
      "path": "src/key.h",
      "position": null,
      "original_position": 83,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "cd234018e63e221d580c0fd6d7c9a0457c816a38",
      "in_reply_to_id": 1334941649,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suppose `array::data(/*this=*/keydata)` is just returning `keydata`, so no dereferencing is really taking place, but still...",
      "created_at": "2023-09-24T11:14:47Z",
      "updated_at": "2023-09-24T11:14:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1335163677",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335163677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335164585",
      "pull_request_review_id": 1641039205,
      "id": 1335164585,
      "node_id": "PRRC_kwDOABII585PlP6p",
      "diff_hunk": "@@ -46,57 +46,72 @@ class CKey\n         \"COMPRESSED_SIZE is larger than SIZE\");\n \n private:\n-    //! Whether this private key is valid. We check for correctness when modifying the key\n-    //! data, so fValid should always correspond to the actual state.\n-    bool fValid{false};\n+    /** Internal data container for private key material. */\n+    using KeyType = std::array<unsigned char, 32>;\n \n     //! Whether the public key corresponding to this private key is (to be) compressed.\n     bool fCompressed{false};\n \n-    //! The actual byte data\n-    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n+    //! The actual byte data. nullptr for invalid keys.\n+    secure_unique_ptr<KeyType> keydata;\n \n     //! Check whether the 32-byte array pointed to by vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n+    void MakeKeyData(bool empty = false)\n+    {\n+        if (!empty) {\n+            if (!keydata) keydata = make_secure_unique<KeyType>();\n+        } else {\n+            keydata.reset();\n+        }\n+    }\n+\n public:\n-    //! Construct an invalid private key.\n-    CKey()\n+    CKey() noexcept = default;\n+    CKey(CKey&&) noexcept = default;\n+    CKey& operator=(CKey&&) noexcept = default;\n+\n+    CKey& operator=(const CKey& other)\n     {\n-        // Important: vch must be 32 bytes in length to not break serialization\n-        keydata.resize(32);\n+        MakeKeyData(/*empty=*/!other.keydata);\n+        std::copy(other.keydata->begin(), other.keydata->end(), keydata->begin());",
      "path": "src/key.h",
      "position": null,
      "original_position": 42,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "cd234018e63e221d580c0fd6d7c9a0457c816a38",
      "in_reply_to_id": 1334939555,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-09-24T11:23:31Z",
      "updated_at": "2023-09-24T11:23:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1335164585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335164585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335164601",
      "pull_request_review_id": 1641039224,
      "id": 1335164601,
      "node_id": "PRRC_kwDOABII585PlP65",
      "diff_hunk": "@@ -46,57 +46,72 @@ class CKey\n         \"COMPRESSED_SIZE is larger than SIZE\");\n \n private:\n-    //! Whether this private key is valid. We check for correctness when modifying the key\n-    //! data, so fValid should always correspond to the actual state.\n-    bool fValid{false};\n+    /** Internal data container for private key material. */\n+    using KeyType = std::array<unsigned char, 32>;\n \n     //! Whether the public key corresponding to this private key is (to be) compressed.\n     bool fCompressed{false};\n \n-    //! The actual byte data\n-    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n+    //! The actual byte data. nullptr for invalid keys.\n+    secure_unique_ptr<KeyType> keydata;\n \n     //! Check whether the 32-byte array pointed to by vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n+    void MakeKeyData(bool empty = false)\n+    {\n+        if (!empty) {\n+            if (!keydata) keydata = make_secure_unique<KeyType>();\n+        } else {\n+            keydata.reset();\n+        }\n+    }\n+\n public:\n-    //! Construct an invalid private key.\n-    CKey()\n+    CKey() noexcept = default;\n+    CKey(CKey&&) noexcept = default;\n+    CKey& operator=(CKey&&) noexcept = default;\n+\n+    CKey& operator=(const CKey& other)\n     {\n-        // Important: vch must be 32 bytes in length to not break serialization\n-        keydata.resize(32);\n+        MakeKeyData(/*empty=*/!other.keydata);\n+        std::copy(other.keydata->begin(), other.keydata->end(), keydata->begin());\n+        fCompressed = other.fCompressed;\n+        return *this;\n     }\n \n+    CKey(const CKey& other) { *this = other; }\n+\n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n         return a.fCompressed == b.fCompressed &&\n             a.size() == b.size() &&\n-            memcmp(a.keydata.data(), b.keydata.data(), a.size()) == 0;\n+            memcmp(a.data(), b.data(), a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (size_t(pend - pbegin) != keydata.size()) {\n-            fValid = false;\n+        if (size_t(pend - pbegin) != std::tuple_size_v<KeyType>) {\n+            MakeKeyData(/*empty=*/true);\n         } else if (Check(&pbegin[0])) {\n-            memcpy(keydata.data(), (unsigned char*)&pbegin[0], keydata.size());\n-            fValid = true;\n+            MakeKeyData();\n+            memcpy(keydata->data(), (unsigned char*)&pbegin[0], keydata->size());\n             fCompressed = fCompressedIn;\n         } else {\n-            fValid = false;\n+            MakeKeyData(/*empty=*/true);\n         }\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? keydata.size() : 0); }\n-    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata.data()); }\n-    const unsigned char* begin() const { return keydata.data(); }\n-    const unsigned char* end() const { return keydata.data() + size(); }\n+    unsigned int size() const { return keydata ? keydata->size() : 0; }\n+    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata->data()); }",
      "path": "src/key.h",
      "position": null,
      "original_position": 83,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "cd234018e63e221d580c0fd6d7c9a0457c816a38",
      "in_reply_to_id": 1334941649,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2023-09-24T11:23:40Z",
      "updated_at": "2023-09-24T11:23:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1335164601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335164601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335200278",
      "pull_request_review_id": 1641075192,
      "id": 1335200278,
      "node_id": "PRRC_kwDOABII585PlYoW",
      "diff_hunk": "@@ -46,57 +46,72 @@ class CKey\n         \"COMPRESSED_SIZE is larger than SIZE\");\n \n private:\n-    //! Whether this private key is valid. We check for correctness when modifying the key\n-    //! data, so fValid should always correspond to the actual state.\n-    bool fValid{false};\n+    /** Internal data container for private key material. */\n+    using KeyType = std::array<unsigned char, 32>;\n \n     //! Whether the public key corresponding to this private key is (to be) compressed.\n     bool fCompressed{false};\n \n-    //! The actual byte data\n-    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n+    //! The actual byte data. nullptr for invalid keys.\n+    secure_unique_ptr<KeyType> keydata;\n \n     //! Check whether the 32-byte array pointed to by vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n+    void MakeKeyData(bool empty = false)\n+    {\n+        if (!empty) {\n+            if (!keydata) keydata = make_secure_unique<KeyType>();\n+        } else {\n+            keydata.reset();\n+        }\n+    }\n+\n public:\n-    //! Construct an invalid private key.\n-    CKey()\n+    CKey() noexcept = default;\n+    CKey(CKey&&) noexcept = default;\n+    CKey& operator=(CKey&&) noexcept = default;\n+\n+    CKey& operator=(const CKey& other)\n     {\n-        // Important: vch must be 32 bytes in length to not break serialization\n-        keydata.resize(32);\n+        MakeKeyData(/*empty=*/!other.keydata);\n+        std::copy(other.keydata->begin(), other.keydata->end(), keydata->begin());\n+        fCompressed = other.fCompressed;\n+        return *this;\n     }\n \n+    CKey(const CKey& other) { *this = other; }\n+\n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n         return a.fCompressed == b.fCompressed &&\n             a.size() == b.size() &&\n-            memcmp(a.keydata.data(), b.keydata.data(), a.size()) == 0;\n+            memcmp(a.data(), b.data(), a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (size_t(pend - pbegin) != keydata.size()) {\n-            fValid = false;\n+        if (size_t(pend - pbegin) != std::tuple_size_v<KeyType>) {\n+            MakeKeyData(/*empty=*/true);\n         } else if (Check(&pbegin[0])) {\n-            memcpy(keydata.data(), (unsigned char*)&pbegin[0], keydata.size());\n-            fValid = true;\n+            MakeKeyData();\n+            memcpy(keydata->data(), (unsigned char*)&pbegin[0], keydata->size());\n             fCompressed = fCompressedIn;\n         } else {\n-            fValid = false;\n+            MakeKeyData(/*empty=*/true);\n         }\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? keydata.size() : 0); }\n-    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata.data()); }\n-    const unsigned char* begin() const { return keydata.data(); }\n-    const unsigned char* end() const { return keydata.data() + size(); }\n+    unsigned int size() const { return keydata ? keydata->size() : 0; }\n+    const std::byte* data() const { return reinterpret_cast<const std::byte*>(keydata->data()); }",
      "path": "src/key.h",
      "position": null,
      "original_position": 83,
      "commit_id": "94d58fe942fd86fc8d3b11e3f75e4a4f82c86e38",
      "original_commit_id": "cd234018e63e221d580c0fd6d7c9a0457c816a38",
      "in_reply_to_id": 1334941649,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I suppose `array::data(/*this=*/keydata)` is just returning `keydata`, so no dereferencing is really taking place, but still...\r\n\r\nAh, I misunderstood your initial comment. My reply does not apply here.",
      "created_at": "2023-09-24T14:53:50Z",
      "updated_at": "2023-09-24T14:53:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28500#discussion_r1335200278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335200278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    }
  ]
}