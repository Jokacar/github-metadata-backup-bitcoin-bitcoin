{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061",
    "id": 565590670,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTY1NTkwNjcw",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21061",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/21061.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/21061.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/9b757c214e59fbf5dd028323a54734726a1c461b",
    "number": 21061,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "[p2p] Introduce node rebroadcast module ",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "## Status\r\n(this section will be updated as the PR progresses, and eventually removed)\r\n- I'm reworking some of the approach, will mark ready for review once that is done. \r\n\r\n## Motivation:\r\nOur legacy rebroadcast mechanism lives in the wallet code. It rebroadcasts only & all transactions which are “mine”, not discerning if the fee rate indicates the transaction should actually have been confirmed by now. This is bad for privacy because it leaks information that allows spy nodes to link bitcoin addresses with IP addresses, a relationship we aim to obfuscate. \r\n\r\n## PR Overview:\r\nThis PR introduces a rebroadcast mechanism in the node. Instead of only rebroadcasting our own transactions, we will notify the network about _any_ transactions we identified as missing from blocks based on fee rate expectations in our own mempool. \r\n\r\nThe new module is currently behind a configuration flag that defaults to off.\r\n\r\nThe end goal is to enable node rebroadcast by default, and remove wallet rebroadcast. This would improve privacy for a few main reasons: \r\n1. We would no longer eagerly rebroadcast all of our wallet transactions regardless of fee-rate. We add logic to rebroadcast the ones which have a competitive rate according to the current blocks being mined. \r\n2. If a spy observes a bitcoin core node rebroadcasting a transaction, it would no longer know that the node has wallet enabled. \r\n3. If a spy observed a bitcoin core node rebroadcasting a transaction, it would no longer be able to deduce with high confidence that the associated wallet is participating in that transaction.\r\n\r\n## Approach: \r\nConceptually, we want to rebroadcast transactions that we believe “should” have been mined by now.  Since we expect miners to prioritize transactions with the highest package fee rates, we select high fee rate transactions that have been in our mempool for some time, but have not yet been mined. \r\n\r\nThis PR introduces a `txrebroadcast` module that encapsulates the selection logic. When `PeerManager` gets notified that we have received and processed a block, we trigger the rebroadcast logic. The module calculates the highest fee rate mempool packages that meet some additional conditions- the transaction must be > 30 minutes old, and surpass a fee threshold. This threshold is calculated by periodically (every minute) identifying the top block of transactions in our mempool, and caching the fee rate for a package to be included. We eliminate any of these candidates that we have rebroadcasted recently (last 4 hours), or already rebroadcast more than a maximum amount of times (6). We store any remaining candidates on each peer’s `setInventoryTxToSend`, which they will potentially relay next time we hit `SendMessages` for that peer (subject to general transaction relay conditions). \r\n",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2021-02-02T01:28:53Z",
    "updated_at": "2023-03-22T10:20:16Z",
    "closed_at": "2022-03-22T14:43:03Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "6eaa019ec3cd24f8e9127bb3eae02760f37d62d3",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "amitiuttarwar:2021-01-the-realest-rebroadcast",
      "ref": "2021-01-the-realest-rebroadcast",
      "sha": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 164037357,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwMzczNTc=",
        "name": "bitcoin",
        "full_name": "amitiuttarwar/bitcoin",
        "owner": {
          "login": "amitiuttarwar",
          "id": 1500952,
          "node_id": "MDQ6VXNlcjE1MDA5NTI=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/amitiuttarwar",
          "html_url": "https://github.com/amitiuttarwar",
          "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
          "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
          "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
          "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
          "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/amitiuttarwar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/amitiuttarwar/bitcoin",
        "archive_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/amitiuttarwar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:amitiuttarwar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/amitiuttarwar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/hooks",
        "svn_url": "https://github.com/amitiuttarwar/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 4,
        "stargazers_count": 6,
        "watchers_count": 6,
        "size": 219296,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-30T23:18:25Z",
        "created_at": "2019-01-04T00:31:16Z",
        "updated_at": "2021-09-05T22:29:09Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "123b401e0acf3b26f149711bdf06d7f6eced1968",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35476,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T20:20:41Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 947,
    "deletions": 37,
    "changed_files": 23,
    "commits": 21,
    "review_comments": 188,
    "comments": 45
  },
  "events": [
    {
      "event": "labeled",
      "id": 4276738931,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyNzY3Mzg5MzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4276738931",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T01:29:45Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 771426879,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTQyNjg3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771426879",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T07:23:50Z",
      "updated_at": "2021-04-16T20:14:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "## Future work \r\nto be addressed either in this PR or a follow up: \r\n- persist rebroadcast attempt tracker to disk\r\n- remove wallet dependency for `p2p_rebroadcast.py` \r\n\r\n## Merge Plan & Next Steps:\r\nAll of the functionality in this PR is hidden behind a configuration switch that defaults to off, and the wallet rebroadcast logic is currently untouched. The idea is to make these changes as safe as possible to merge into master, and allow reviewers to easily enable and observe the new rebroadcast mechanism in today’s network conditions. \r\n\r\nIf we build confidence that these changes are safe and desirable, we can default enable this new node rebroadcast logic and disable the legacy wallet rebroadcast logic. This is the desired end goal. \r\n\r\n## Project History: \r\nA version of these changes were originally proposed in #16698. \r\n\r\n#18038 broke out a subset of the functionality, enabling the node to provide a guarantee around minimal initial broadcast & reducing the frequency of the existing wallet rebroadcast functionality (unbroadcast set) \r\n\r\nSince #16698, there have been some changes in approach, and all of the unbroadcast conversation is no longer relevant. So, to help with review, I've decided to open a new PR. To preserve the relevant feedback and concerns, I've tried my best to capture the history of conversations in the following write-up: https://github.com/amitiuttarwar/bitcoin-notes/blob/main/rebroadcast-history.md. warning: it goes quite in depth.\r\n\r\n\r\n🙌🏽 Huge shout out to the village of core contributors who have provided feedback & guidance on this project so far. Honestly too many to name, but this project is much better for it. Thank you :) \r\n",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771426879",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "commented",
      "id": 771448221,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTQ0ODIyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771448221",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T08:05:13Z",
      "updated_at": "2021-06-11T07:17:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21866 ([Bundle 7/7] validation: Farewell, global Chainstate! by dongcarl)\n* #21789 (refactor: Remove ::Params() global from CChainState by MarcoFalke)\n* #21562 ([net processing] Various tidying up of PeerManagerImpl ctor by jnewbery)\n* #21526 (validation: UpdateTip/CheckBlockIndex assumeutxo support by jamesob)\n* #17580 (refactor: Add ALLOW_LIST flags and enforce usage in CheckArgFlags by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771448221",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T09:26:48Z",
      "updated_at": "2021-02-02T09:26:48Z",
      "source": {
        "issue": {
          "id": 785084033,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTU0MTY4Mzc3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20925",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20925/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20925/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20925/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20925",
          "number": 20925,
          "state": "closed",
          "state_reason": null,
          "title": "RFC: Move Peer and PeerManagerImpl declarations to separate header",
          "body": "Not sure whether this is desirable, so marking as a proof of concept.\r\n\r\nThis moves the `Peer` and `PeerManagerImpl` declarations to their own header file, `peerman_impl.h`, which can be included by `net_processing.cpp` and the test/bench/fuzz files.\r\n\r\nThe benefits of this are:\r\n\r\n- `PeerManagerImpl` functions which are exposed through the `PeerManager` interface for testing, but would otherwise be private can be removed from `PeerManager`. That means that `PeerManager` truly is net_processing's minimal interface to expose to the rest of the program.\r\n- If a test needs to directly manipulate `Peer` objects, it can do so, since they're exposed in peerman_impl header. ",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20925",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20925",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20925.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20925.patch"
          },
          "closed_at": "2021-02-15T12:03:12Z",
          "created_at": "2021-01-13T12:59:33Z",
          "updated_at": "2022-08-16T17:04:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T11:45:37Z",
      "updated_at": "2021-02-02T11:45:37Z",
      "source": {
        "issue": {
          "id": 722569048,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTA0Mjk2MzUx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20158",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20158/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20158/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20158/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20158",
          "number": 20158,
          "state": "closed",
          "state_reason": null,
          "title": "tree-wide: De-globalize ChainstateManager",
          "body": "## Prelude\r\n\r\n**Note to reviewers**: Currently looking Code Review on Sub-PRs (see below)\r\n\r\nOriginally: #20049\r\n\r\n### Sub-PRs\r\n\r\n_Last updated May 9th, 2020_\r\n\r\n- [x] #20323 | tests: Create or use existing properly initialized NodeContexts\r\n- [x] #20946 | fuzz: Consolidate fuzzing TestingSetup initialization\r\n- [x] #20972 | locks: Annotate CTxMemPool::check to require cs_main\r\n- [x] #20749 | [Bundle 1/n] Prune g_chainman usage related to ::LookupBlockIndex\r\n- [x] #20750 | [Bundle 2/n] Prune g_chainman usage in mempool-related validation functions\r\n- [x] #21055 | [Bundle 3/n] Prune remaining g_chainman usage in validation functions\r\n- [x] #21270 | [Bundle 4/n] Prune g_chainman usage in validation-adjacent modules\r\n- [x] #21391 | [Bundle 5/n] Prune g_chainman usage in RPC modules\r\n- [x] #21767 | [Bundle 6/n] Prune g_chainman usage in auxiliary modules\r\n- [x] #21866 | [Bundle 7/n] Farewell, global Chainstate!\r\n\r\n### Todo List\r\n\r\n_Last updated Feb 1st, 2020_\r\n\r\n- [x] Address ryanofsky's comments\r\n\t- [x] https://github.com/bitcoin/bitcoin/pull/20158#discussion_r520639845\r\n\r\n## Motivation\r\n\r\n###  Modularizing our consensus engine\r\n\r\nExcerpt from #20049\r\n> From my reading of past conversations and from a few offline chats, it seems that modularizing our consensus engine is a worthwhile first step towards a more complete isolation of said engine from non-consensus code.\r\n> \r\n> Modularizing our consensus engine means that:\r\n> \r\n> 1. We get clearer visibility into what currently lies in consensus codepaths **and** what depends on our consensus engine\r\n> 1. We can coalesce duplicate consensus initialization codepaths, mitigating against bugs that arise out of test/non-test initialization inconsistencies\r\n\r\n### De-globalizing `g_chainman`\r\n\r\nExcerpt from #20049\r\n> In order to modularize our consensus engine, we need to first de-globalize the global `ChainstateManager` -- namely `g_chainman` -- as it and its dependencies are what makes up the bulk of our consensus engine. A few direct references to `g_chainman` have already been removed in #19927, however, its indirect uses (mainly via `::Chain(state|)Active()`) are numerous in our codebase and often used to ~~cheat~~ avoid obtaining a `ChainstateManager` reference.\r\n\r\n## Description\r\n\r\nThis changeset moves the global `ChainstateManger` to `NodeContext` and removes `::Chain{state,}Active()` as a first step towards better modularization of our consensus engine. \r\n\r\nThe commits are ordered as such:\r\n1. Fixes to our existing codebase crucial to subsequent changes in this changeset\r\nhttps://github.com/bitcoin/bitcoin/compare/master...dongcarl:2020-10-chainman-fixes\r\n1. Remove all references to `g_chainman`, `::Chain{state,}Active()`\r\n\t1. In `src/validation.{cpp,h}`\r\n\t\t1. In a bundle of functions related to `::LookupBlockIndex` in the call graph\r\n\t\thttps://github.com/dongcarl/bitcoin/compare/2020-10-chainman-fixes...dongcarl:2020-09-libbitcoinruntime-v4\r\n\t\t1. In a bundle of functions that are mempool-related\r\n\t\thttps://github.com/dongcarl/bitcoin/compare/dongcarl:2020-09-libbitcoinruntime-v4...2020-09-reduce-validation-mempool-ccsactiveglobal-usage\r\n\t\t1. In a bundle of functions which do not belong in previous bundles\r\n\t\thttps://github.com/dongcarl/bitcoin/compare/2020-09-reduce-validation-mempool-ccsactiveglobal-usage...dongcarl:2020-09-reduce-validation-ccsactiveglobal-usage\r\n\t1. In \"validation-adjacent\" modules of the codebase\r\n\thttps://github.com/dongcarl/bitcoin/compare/dongcarl:2020-09-reduce-validation-ccsactiveglobal-usage...2020-09-libbitcoinruntime-v6\r\n\t\t1. In `src/txmempool.cpp`\r\n\t\t1. In `src/miner.cpp`\r\n\t\t1. In `src/node`\r\n\t\t1. In `src/net_processing.cpp`\r\n\t1. In RPC modules of the codebase\r\n\thttps://github.com/dongcarl/bitcoin/compare/2020-09-libbitcoinruntime-v6...dongcarl:2020-10-libbitcoinruntime-v7\r\n\t\t1. In `src/rpc`\r\n\t\t1. In `src/rest.cpp`\r\n\t1. In auxiliary modules of the codebase\r\n\thttps://github.com/dongcarl/bitcoin/compare/dongcarl:2020-10-libbitcoinruntime-v7...2020-10-libbitcoinruntime-v8\r\n\t\t1. In `src/bench`\r\n\t\t1. In `src/index`\r\n\t1. In initialization codepaths and tests\r\n\thttps://github.com/dongcarl/bitcoin/compare/2020-10-libbitcoinruntime-v8...dongcarl:2020-06-libbitcoinruntime\r\n\t\t1. In `src/init.cpp`\r\n\t\t1. In `src/test`\r\n\t\t1. In `src/wallet/test`\r\n\t\t1. In `src/qt/test`\r\n\r\nA few things to note:\r\n- The above ordering is constructed according to the overall call graph of our codebase such that we avoid touching the same function/module twice. \r\n- Due to the length of this overall change, each commit aims to be trivially-reviewable and only requires the reviewer to reason about the correctness of one function/module at a time.\r\n- There are a lot of review-only assertions which can be used to check for correctness. They are removed in 2236237070a45fe570cd0113f0025b0a46ac89be.\r\n",
          "user": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 118378960,
              "node_id": "MDU6TGFiZWwxMTgzNzg5NjA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mining",
              "name": "Mining",
              "color": "c7def8",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 192202000,
              "node_id": "MDU6TGFiZWwxOTIyMDIwMDA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus",
              "name": "Consensus",
              "color": "009800",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20158",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20158",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20158.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20158.patch"
          },
          "closed_at": "2021-06-16T16:19:42Z",
          "created_at": "2020-10-15T18:28:35Z",
          "updated_at": "2022-11-27T09:59:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4282170937,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI4MjE3MDkzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4282170937",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T22:51:20Z"
    },
    {
      "event": "convert_to_draft",
      "id": 4282969346,
      "node_id": "MDE5OkNvbnZlcnRUb0RyYWZ0RXZlbnQ0MjgyOTY5MzQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4282969346",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-03T03:30:32Z"
    },
    {
      "event": "commented",
      "id": 772195305,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjE5NTMwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/772195305",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-03T03:32:21Z",
      "updated_at": "2021-02-03T03:32:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "marking as draft until I resolve CI issues",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-772195305",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4288558476,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI4ODU1ODQ3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4288558476",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-04T02:40:49Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-05T01:34:00Z",
      "updated_at": "2021-02-05T01:34:00Z",
      "source": {
        "issue": {
          "id": 685710084,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDczMzkxNTc5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19806",
          "number": 19806,
          "state": "closed",
          "state_reason": null,
          "title": "validation: UTXO snapshot activation",
          "body": "This is part of the [assumeutxo project](https://github.com/bitcoin/bitcoin/projects/11):\r\n\r\nParent PR: #15606 \r\nIssue: #15605 \r\nSpecification: https://github.com/jamesob/assumeutxo-docs/tree/master/proposal\r\n\r\n---\r\n\r\nThis change proposes logic for activating UTXO snapshots, which is unused at the moment aside from an included unittest. There are a few moveonyish/refactoring commits to allow for halfway decent unittests.\r\n\r\nBasic structure is included for specifying and checking the assumeutxo hash values used to validate activated snapshots. Initially I had specified a few height/hash pairs for mainnet in this change, but because of the security-critical nature of those parameters, I figured it was better to leave their inclusion to a future PR that includes only that change - my intent being that reviewers will be more likely to verify those parameters firsthand in a dedicated PR.\r\n\r\nAside from that and the snapshot activation logic, there are a few related changes:\r\n\r\n- ~~allow caching the `nChainTx` value in the CCoinsViewDB; this is set during snapshot activation. Because we don't necessarily have access to the full chain at the time of snapshot load, this value is communicated through the snapshot metadata and must be cached within the chainstate to survive restarts.~~\r\n- break out `CreateUTXOSnapshot()` from dumptxoutset. This is essentially a move-only change to allow the reuse of snapshot creation logic from within unittests.\r\n- ...and a few other misc. changes that are solely related to unittests.\r\n\r\nThe move-onlyish commit is most easily reviewed with `--color-moved=zebra`.",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 35,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19806",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19806.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19806.patch"
          },
          "closed_at": "2021-02-16T18:23:27Z",
          "created_at": "2020-08-25T18:49:41Z",
          "updated_at": "2022-08-18T18:23:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-05T20:16:12Z",
      "updated_at": "2021-02-05T20:16:12Z",
      "source": {
        "issue": {
          "id": 29027200,
          "node_id": "MDU6SXNzdWUyOTAyNzIwMA==",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3828",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3828/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3828/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3828/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/3828",
          "number": 3828,
          "state": "open",
          "state_reason": null,
          "title": "Clients leak IPs if they are recipients of a transaction",
          "body": "So, this paper http://ifca.ai/fc14/papers/fc14_submission_71.pdf got me thinking about the current rules for transaction rebroadcasting:\n\nOnce a transaction has been broadcast, you stop rebroadcasting. Unless you own txins or txouts in the transaction. \n\nSo, you use the paper's techniques. But you can be much more speculative than they are, and get a low-likelihood but possible IP match for an address, connect your client up, and issue a transaction paying yourself and a small amount to the address you're interested in, just over the dust amount.\n\nThe transaction should be constructed so it's unlikely to be mined.\n\nThe transaction traverses the network, then it stops being rebroadcast, _except_ by the recipient and you. If your client is connected to the wallet that owns the address, it will see rebroadcasting for some time, providing a very strong link between the two.\n\nThis seems like a bad outcome. \n\nI speculate that the 1Sochi transactions may have this motivation -- mapping addresses to determine IPs at large in Bitcoin. \n\nIt seems like the simplest thing would be to not re-re-broadcast to clients you've already spoken to, but I'll wait for smarter people than me to work out the right fix.\n",
          "user": {
            "login": "vessenes",
            "id": 1199717,
            "node_id": "MDQ6VXNlcjExOTk3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1199717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vessenes",
            "html_url": "https://github.com/vessenes",
            "followers_url": "https://api.github.com/users/vessenes/followers",
            "following_url": "https://api.github.com/users/vessenes/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vessenes/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vessenes/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vessenes/subscriptions",
            "organizations_url": "https://api.github.com/users/vessenes/orgs",
            "repos_url": "https://api.github.com/users/vessenes/repos",
            "events_url": "https://api.github.com/users/vessenes/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vessenes/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 249581124,
              "node_id": "MDU6TGFiZWwyNDk1ODExMjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Privacy",
              "name": "Privacy",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 19,
          "created_at": "2014-03-08T18:36:48Z",
          "updated_at": "2021-02-05T20:16:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4299719419,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI5OTcxOTQxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4299719419",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-07T02:01:35Z"
    },
    {
      "event": "reviewed",
      "id": 585760946,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg1NzYwOTQ2",
      "url": null,
      "actor": null,
      "commit_id": "3766479d7924358f9c3b0d53fca1ca2e218e66fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-585760946",
      "submitted_at": "2021-02-08T17:44:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "ready_for_review",
      "id": 4304836891,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0MzA0ODM2ODkx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4304836891",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-08T17:53:10Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-08T17:55:15Z",
      "updated_at": "2021-02-08T17:55:15Z",
      "source": {
        "issue": {
          "id": 484621209,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzEwNDYwOTc1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16698",
          "number": 16698,
          "state": "closed",
          "state_reason": null,
          "title": "Mempool: rework rebroadcast logic to improve privacy",
          "body": "The current rebroadcast logic is terrible for privacy because only the source wallet will rebroadcast transactions, and does so quite frequently. This PR aims to improve privacy dramatically while preserving the benefits of rebroadcasting that ensure txns are successfully propagated through the network.\r\n\r\nThis PR introduces changes so nodes will resend transactions that it believes should have already been mined. It extracts the logic from the wallet into the mempool, so nodes will rebroadcast txns regardless of the originating wallet. Txns are defined as \"should have been mined\" by using the block assembler logic, and excluding txns that were recently added to the mempool. The wallet will resubmit txns to the mempool on a regular cadence to ensure those txns aren't dropped (due to eviction, expiry, etc..) before being confirmed. \r\n\r\nFor more information, see: https://gist.github.com/amitiuttarwar/b592ee410e1f02ac0d44fcbed4621dba",
          "user": {
            "login": "amitiuttarwar",
            "id": 1500952,
            "node_id": "MDQ6VXNlcjE1MDA5NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/amitiuttarwar",
            "html_url": "https://github.com/amitiuttarwar",
            "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
            "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
            "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
            "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
            "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 29,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16698",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16698.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16698.patch"
          },
          "closed_at": "2020-03-31T00:25:03Z",
          "created_at": "2019-08-23T16:48:58Z",
          "updated_at": "2022-08-16T17:04:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-08T18:53:13Z",
      "updated_at": "2021-02-08T18:53:13Z",
      "source": {
        "issue": {
          "id": 803832777,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTY5Njk0OTE5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21121",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21121/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21121/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21121/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21121",
          "number": 21121,
          "state": "closed",
          "state_reason": null,
          "title": "[test] Small unit test improvements, including helper to make mempool transaction",
          "body": "Some miscellaneous improvements that came up when working on #21061 \r\n- The first commit is a helper to make valid mempool transactions & submit via ATMP. Introducing in this PR, using in #21061.\r\n- The second commit is a small improvement in `miner_tests.cpp` that uses `BOOST_REQUIRE_EQUAL` to properly terminate the program instead of segfaulting in the failure scenario where the blocks do not include the expected number of transactions. \r\n- The third commit changes the function signature of `GetMockTime()` to return a chrono type.\r\n- The fourth & fifth commit overload `SetMockTime` to also accept chrono type, and adds documentation to indicate that the `int64_t` function signature is deprecated.",
          "user": {
            "login": "amitiuttarwar",
            "id": 1500952,
            "node_id": "MDQ6VXNlcjE1MDA5NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/amitiuttarwar",
            "html_url": "https://github.com/amitiuttarwar",
            "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
            "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
            "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
            "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
            "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21121",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21121",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21121.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21121.patch"
          },
          "closed_at": "2021-02-17T09:41:01Z",
          "created_at": "2021-02-08T18:53:12Z",
          "updated_at": "2022-08-16T17:12:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4311662462,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMxMTY2MjQ2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4311662462",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-09T21:55:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4311710327,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMxMTcxMDMyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4311710327",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-09T22:06:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4311849689,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMxMTg0OTY4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4311849689",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-09T22:39:04Z"
    },
    {
      "event": "commented",
      "id": 776398956,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjM5ODk1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776398956",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T02:44:12Z",
      "updated_at": "2021-02-10T02:44:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "rebased master, added a functional test, some small fixups. \r\n\r\nthis PR is ready for review! 🎈",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-776398956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T02:59:33Z",
      "updated_at": "2021-02-10T02:59:33Z",
      "source": {
        "issue": {
          "id": 782505298,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTUyMDQ5MjI1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20892",
          "number": 20892,
          "state": "open",
          "state_reason": null,
          "title": "tests: Run both descriptor and legacy tests within a single test invocation",
          "body": "Instead of having the tests only do one type or the other, depending on command line arguments, these tests should be running with both types of wallets. Any test that calls `add_wallet_options` will be run for each wallet type that it specifies a wallet option for if none are give in the command line. If a particular wallet is specified with `--legacy-wallet` or `--descriptors`, the options are still respected.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20892",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20892",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20892.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20892.patch"
          },
          "created_at": "2021-01-09T03:50:55Z",
          "updated_at": "2023-08-02T17:47:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T05:54:09Z",
      "updated_at": "2021-02-11T05:54:09Z",
      "source": {
        "issue": {
          "id": 806015472,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTcxNTE3MjEy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21148",
          "number": 21148,
          "state": "closed",
          "state_reason": null,
          "title": "Split orphan handling from net_processing into txorphanage",
          "body": "Splits orphan handling into its own module and reduces global usage.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21148",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21148.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21148.patch"
          },
          "closed_at": "2021-03-04T09:17:12Z",
          "created_at": "2021-02-11T01:42:58Z",
          "updated_at": "2022-08-16T17:06:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "subscribed",
      "id": 4318462246,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzMTg0NjIyNDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4318462246",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T07:41:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4326454942,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyNjQ1NDk0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4326454942",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T19:43:29Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T07:59:11Z",
      "updated_at": "2021-02-16T07:59:11Z",
      "source": {
        "issue": {
          "id": 774050753,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDM1NzYz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20758",
          "number": 20758,
          "state": "closed",
          "state_reason": null,
          "title": "net-processing refactoring -- lose globals, move implementation details from .h to .cpp",
          "body": "Done in #20811 :\r\n* Moves implementation details of PeerManager into PeerManagerImpl; moves PeerManagerImpl into .cpp\r\n* Moves struct Peer definition into .cpp\r\n\r\nDone in #20942:\r\n* Moves net_processing globals into PeerManagerImpl.\r\n* Moves a lot of net_processing functions into PeerManagerImpl and simplifies some of their arguments as a result.\r\n\r\nIn #21148:\r\n* Split orphan management into its own module\r\n* More more globals/functions into PeerManagerImpl\r\n\r\nAdditional things in this PR:\r\n* Moves more globals/functions into PeerManagerImpl; simplify their arguments.\r\n* Makes test/denialofservice_tests use the PeerManager api instead of directly accessing net_processing implementation details\r\n* Introduces State(CNode&) and State(Peer&) alternatives to calling State(node.GetId()) all the time.\r\n* Moves CNodeState into Peer as a step towards consolidating state information\r\n* Make NetEventsInterface take a CNode& instead of a CNode*\r\n* Pass ArgsManager into the constructor and collect parameters once rather than calling GetArgs regularly at runtime\r\n\r\nNot done yet:\r\n* Split parts of PeerManager into their own modules a la txrequest (block downloads?)",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20758",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20758.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20758.patch"
          },
          "closed_at": "2022-08-29T06:55:12Z",
          "created_at": "2020-12-23T21:25:17Z",
          "updated_at": "2022-08-29T11:10:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 4338097747,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMzgwOTc3NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4338097747",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T20:20:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 780097794,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDA5Nzc5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780097794",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T20:27:35Z",
      "updated_at": "2021-02-16T20:27:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "rebased",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-780097794",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4338123346,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzODEyMzM0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4338123346",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T20:27:35Z"
    },
    {
      "event": "unlabeled",
      "id": 4338531643,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDMzODUzMTY0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4338531643",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T22:25:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 4340396853,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQzNDAzOTY4NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4340396853",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "569b5ba1dc56ef1df2fc7dbf22b5fdbf35c87556",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/569b5ba1dc56ef1df2fc7dbf22b5fdbf35c87556",
      "created_at": "2021-02-17T09:41:00Z"
    },
    {
      "event": "referenced",
      "id": 4342233975,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQzNDIyMzM5NzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4342233975",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3d9605586b5f43641192c030778a17de95cd6c89",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/3d9605586b5f43641192c030778a17de95cd6c89",
      "created_at": "2021-02-17T16:10:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4344019763,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM0NDAxOTc2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4344019763",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-17T23:27:40Z"
    },
    {
      "event": "commented",
      "id": 780922203,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDkyMjIwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780922203",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-17T23:29:05Z",
      "updated_at": "2021-02-17T23:29:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "rebased to include #21121",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-780922203",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-23T00:55:49Z",
      "updated_at": "2021-02-23T00:55:49Z",
      "source": {
        "issue": {
          "id": 813704684,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTc3ODA4NzY5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21270",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21270/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21270/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21270/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21270",
          "number": 21270,
          "state": "closed",
          "state_reason": null,
          "title": "[Bundle 4/n] Prune g_chainman usage in validation-adjacent modules",
          "body": "Overall PR: #20158 (tree-wide: De-globalize ChainstateManager)\r\n\r\nBased on:\r\n- [x] #21055 | [Bundle 3/n] Prune g_chainman usage in mempool-related validation functions\r\n\r\nNote to reviewers:\r\n1. This bundle may _apparently_ introduce usage of `g_chainman` or `::Chain(state|)Active()` globals, but these are resolved later on in the overall PR. [Commits of overall PR](https://github.com/bitcoin/bitcoin/pull/20158/commits)\r\n2. There may be seemingly obvious local references to `ChainstateManager` or other validation objects which are not being used in callers of the current function in question, this is done intentionally to **_keep each commit centered around one function/method_** to ease review and to make the overall change systematic. We don't assume anything about our callers. Rest assured that once we are considering that particular caller in later commits, we will use the obvious local references. [Commits of overall PR](https://github.com/bitcoin/bitcoin/pull/20158/commits)\r\n3. When changing a function/method that has many callers (e.g. `LookupBlockIndex` with 55 callers), it is sometimes easier (and less error-prone) to use a scripted-diff. When doing so, there will be 3 commits in sequence so that every commit compiles like so:\r\n\t1. Add `new_function`, make `old_function` a wrapper of `new_function`, divert all calls to `old_function` to `new_function` **in the local module only**\r\n\t2. Scripted-diff to divert all calls to `old_function` to `new_function` **in the rest of the codebase**\r\n\t3. Remove `old_function`",
          "user": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21270",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21270",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21270.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21270.patch"
          },
          "closed_at": "2021-03-11T10:50:05Z",
          "created_at": "2021-02-22T17:26:14Z",
          "updated_at": "2023-01-18T17:42:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "added_to_project",
      "id": 4378240363,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ0Mzc4MjQwMzYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4378240363",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-25T19:03:40Z",
      "project_card": {
        "id": 55707788,
        "url": "https://api.github.com/projects/columns/cards/55707788",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 787211962,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzIxMTk2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787211962",
      "actor": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-28T00:52:52Z",
      "updated_at": "2021-02-28T00:52:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "This seems like a big win, both for privacy and for quality of service. There are a lot of nodes out there with larger-than-default mempools, and if this were the default, they would serve as reservoirs for transactions that were dropped from the default mempool, eventually rebroadcasting them when they noticed that they had a chance of getting confirmed. This would save users from sometimes having to manually intervene to unstick stuck transactions.\r\n\r\nIt might be a good idea to log whenever this logic kicks in and rebroadcast transactions. Perhaps just the number of transactions that it's rebroadcasting, i.e. `Rebroadcasting 23 transactions`, and maybe also the individual transaction IDs.\r\n\r\nI'd like to run this code on mainnet, and having logging statements would be very helpful for tracking how it actually behaves.",
      "user": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-787211962",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "comment_deleted",
      "id": 4385569991,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQ0Mzg1NTY5OTkx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4385569991",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-28T01:12:25Z"
    },
    {
      "event": "commented",
      "id": 787533629,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzUzMzYyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787533629",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-28T22:17:36Z",
      "updated_at": "2021-02-28T22:17:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "@casey thanks for taking a look! \r\n\r\nThe current code does have some logging, the most relevant statement firing here: https://github.com/bitcoin/bitcoin/pull/21061/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-7dff50848db96bdb8edffc4d21daeca6d9050ec0e67d96072780ea5751e7df06R90. This prints the transactions hashes where a rebroadcast will be attempted for all peers. Those candidates will go through additional per-peer filters (see SendMessages code that copies `setInventoryTxToSend` and `filterInventoryKnown`), so might not actually make it to every peer, but should be sufficient signal for us to monitor the frequency of rebroadcast. \r\n\r\nI've also added logs to monitor how long it takes to calculate rebroadcast blocks. The logs are all in the `NET` & `BENCH` categories. I'm currently running a node with this patch, but I'd love to gather more data so It'd be helpful if you are willing to run the patch and share your findings. \r\n\r\nSo far, I ran a node for 1 week with default mempool settings & 0 transactions were selected for rebroadcast. That seems reasonable. I'm now running a node with a larger mempool, and also want to tinker with making low fee rate wallet transactions to monitor node rebroadcast logic.\r\n\r\nIf you've intended to request more logging than what's currently there, I'm open to suggestions. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-787533629",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4386608189,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM4NjYwODE4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4386608189",
      "actor": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-28T22:17:36Z"
    },
    {
      "event": "subscribed",
      "id": 4386608191,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzODY2MDgxOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4386608191",
      "actor": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-28T22:17:36Z"
    },
    {
      "event": "commented",
      "id": 787673640,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzY3MzY0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787673640",
      "actor": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-01T06:09:15Z",
      "updated_at": "2021-03-01T06:09:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The current code does have some logging, the most relevant statement firing here:\r\n\r\nAh, excellent! I was looking where the transactions are actually rebroadcast, so I missed that. What's there looks good, I can't think of anything else I'd want.\r\n\r\n> …but I'd love to gather more data so It'd be helpful if you are willing to run the patch and share your findings.\r\n\r\nI was thinking about running a node with a very large max mempool size, as well as no mempool expiration time, to try to maximize transaction rebroadcasting. (Those are the only two settings I can think of that would affect this, but let me know if you can think of others.) I'll definitely share the logs if I wind up doing this!",
      "user": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-787673640",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "commented",
      "id": 788594423,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODU5NDQyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788594423",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T05:15:10Z",
      "updated_at": "2021-03-02T05:15:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@casey \r\n\r\n> I was thinking about running a node with a very large max mempool size, as well as no mempool expiration time, to try to maximize transaction rebroadcasting\r\n\r\nyup, that's exactly what I did, I also minimized the `feefilter` and `minrelaytxfee` to ensure I'd get all the transactions. \r\n\r\n> I'll definitely share the logs if I wind up doing this!\r\n\r\nsounds good, thanks :) ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-788594423",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4393674912,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM5MzY3NDkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4393674912",
      "actor": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T05:15:10Z"
    },
    {
      "event": "subscribed",
      "id": 4393674916,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzOTM2NzQ5MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4393674916",
      "actor": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T05:15:10Z"
    },
    {
      "event": "labeled",
      "id": 4407099826,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ0MDcwOTk4MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4407099826",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T10:01:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4410603933,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQxMDYwMzkzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4410603933",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T22:24:53Z"
    },
    {
      "event": "commented",
      "id": 790989016,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDk4OTAxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790989016",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T22:27:15Z",
      "updated_at": "2021-03-04T22:27:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-790989016",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "unlabeled",
      "id": 4410624808,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDQxMDYyNDgwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4410624808",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T22:31:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DesWurstes",
        "id": 23437045,
        "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DesWurstes",
        "html_url": "https://github.com/DesWurstes",
        "followers_url": "https://api.github.com/users/DesWurstes/followers",
        "following_url": "https://api.github.com/users/DesWurstes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DesWurstes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DesWurstes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
        "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
        "repos_url": "https://api.github.com/users/DesWurstes/repos",
        "events_url": "https://api.github.com/users/DesWurstes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-05T13:39:10Z",
      "updated_at": "2021-03-05T13:39:10Z",
      "source": {
        "issue": {
          "id": 823086530,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTg1NjAzNzk2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21372",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21372/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21372/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21372/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21372",
          "number": 21372,
          "state": "closed",
          "state_reason": null,
          "title": "RPC: minetxlocally",
          "body": "Function: `sendrawtransaction` + `prioritiserawtransaction` - `relay=true` - `policy`\r\n\r\nRationale: I guess that many pool operators have implemented this in their forks already. Adding it here makes it more convenient for them.\r\n\r\nThis allows them to mine their high-fee/nonstandard transactions for free.\r\n\r\nFor example, if a miner needs to consolidate lots of outputs, this allows them to finish this in one large tx and for free.\r\n\r\nI might need to rebase it after #21061\r\n\r\nWould you `Concept ACK` it?\r\n\r\nI need to add tests so that even https://github.com/bitcoin/bitcoin/blob/master/test/functional/p2p_segwit.py#L1466-L1468 passes with this feature enabled.",
          "user": {
            "login": "DesWurstes",
            "id": 23437045,
            "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
            "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DesWurstes",
            "html_url": "https://github.com/DesWurstes",
            "followers_url": "https://api.github.com/users/DesWurstes/followers",
            "following_url": "https://api.github.com/users/DesWurstes/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/DesWurstes/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/DesWurstes/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
            "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
            "repos_url": "https://api.github.com/users/DesWurstes/repos",
            "events_url": "https://api.github.com/users/DesWurstes/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21372",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21372",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21372.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21372.patch"
          },
          "closed_at": "2021-03-06T20:13:18Z",
          "created_at": "2021-03-05T13:30:09Z",
          "updated_at": "2022-08-16T17:06:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-09T04:25:28Z",
      "updated_at": "2021-03-09T04:25:28Z",
      "source": {
        "issue": {
          "id": 824961785,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTg3MTExNDk0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21391",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21391/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21391/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21391/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21391",
          "number": 21391,
          "state": "closed",
          "state_reason": null,
          "title": "[Bundle 5/n] Prune g_chainman usage in RPC modules",
          "body": "Overall PR: #20158 (tree-wide: De-globalize ChainstateManager)\r\n\r\nBased on:\r\n- [x] #21270 | [Bundle 4/n] Prune g_chainman usage in validation-adjacent modules\r\n- [x] #21525 | [Bundle 4.5/n] Followup fixups to bundle 4\r\n\r\nNote to reviewers:\r\n1. This bundle may _apparently_ introduce usage of `g_chainman` or `::Chain(state|)Active()` globals, but these are resolved later on in the overall PR. [Commits of overall PR](https://github.com/bitcoin/bitcoin/pull/20158/commits)\r\n2. There may be seemingly obvious local references to `ChainstateManager` or other validation objects which are not being used in callers of the current function in question, this is done intentionally to **_keep each commit centered around one function/method_** to ease review and to make the overall change systematic. We don't assume anything about our callers. Rest assured that once we are considering that particular caller in later commits, we will use the obvious local references. [Commits of overall PR](https://github.com/bitcoin/bitcoin/pull/20158/commits)\r\n3. When changing a function/method that has many callers (e.g. `LookupBlockIndex` with 55 callers), it is sometimes easier (and less error-prone) to use a scripted-diff. When doing so, there will be 3 commits in sequence so that every commit compiles like so:\r\n\t1. Add `new_function`, make `old_function` a wrapper of `new_function`, divert all calls to `old_function` to `new_function` **in the local module only**\r\n\t2. Scripted-diff to divert all calls to `old_function` to `new_function` **in the rest of the codebase**\r\n\t3. Remove `old_function`",
          "user": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21391",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21391",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21391.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21391.patch"
          },
          "closed_at": "2021-04-17T15:39:11Z",
          "created_at": "2021-03-08T21:18:11Z",
          "updated_at": "2022-08-18T18:23:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 4444536352,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ0NDQ1MzYzNTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4444536352",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T12:46:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4447957831,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ0Nzk1NzgzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4447957831",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T23:31:37Z"
    },
    {
      "event": "commented",
      "id": 797121429,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzEyMTQyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797121429",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T23:34:30Z",
      "updated_at": "2021-03-11T23:34:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797121429",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "commented",
      "id": 797153844,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzE1Mzg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797153844",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-12T00:45:57Z",
      "updated_at": "2021-03-12T00:45:57Z",
      "author_association": "NONE",
      "body": "Motivation and PR overview looks interesting. Couldn't compile though. Maybe I should have checked CI results.\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/110874750-525a0c00-82fa-11eb-9a14-e632f0084574.png)\r\n\r\n\r\n",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797153844",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "unlabeled",
      "id": 4448247886,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDQ0ODI0Nzg4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4448247886",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-12T01:19:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4448350113,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ0ODM1MDExMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4448350113",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-12T02:02:05Z"
    },
    {
      "event": "commented",
      "id": 797676411,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzY3NjQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797676411",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-12T18:39:21Z",
      "updated_at": "2021-03-12T18:39:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "@prayank23 Thanks for taking a look. I missed the tests in a recent rebase. It should be fixed now",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797676411",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4452102558,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQ1MjEwMjU1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4452102558",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-12T18:39:31Z"
    },
    {
      "event": "commented",
      "id": 797836751,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzgzNjc1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797836751",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-13T00:58:42Z",
      "updated_at": "2021-03-14T21:51:39Z",
      "author_association": "NONE",
      "body": "Concept ACK. Have few questions about the approach and will mention them below. Compiled successfully on Ubuntu. Tests passed.\r\n\r\n> Conceptually, we want to rebroadcast transactions that we believe “should” have been mined by now.\r\n\r\nNot sure about this part. Can we randomly rebroadcast different transactions to make it difficult for spy nodes to notice any pattern?\r\n\r\nI used below `bitcoin.conf`:\r\n```\r\ntestnet=1\r\nrebroadcast=1\r\ndebug=1\r\n```\r\n\r\nHad 1 incoming and 1 outgoing transaction pending associated with my wallet (segwit,rbf,1sat/vB). Node was connected to 10 peers.\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/111013015-f22f9c80-83c3-11eb-9183-76d8d62f66f5.png)\r\n\r\nStill trying to understand if I can find something relevant in logs. Only one line related to `rebroadcast`:\r\n\r\n`2021-03-13T00:34:03Z Caching minimum fee for rebroadcast to 1.000 sat/vB, took 122 µs to calculate.`\r\n\r\n> After we process a block, invoke the rebroadcast module to identify if there\r\nare any transactions we would have expected to be included, and queue them up\r\nfor relay to our peers.\r\n\r\nMaybe it couldn't find any transactions that should be rebroadcasted based on fee rate and other things.\r\n\r\n> In order to prevent spam, we need to carefully select which transactions to rebroadcast. As of this commit, we select the transactions in the mempool that have the highest feerate.\r\n\r\nCan you explain the SPAM part mentioned in https://github.com/bitcoin/bitcoin/pull/21061/commits/b86f6d90a844dd71008f7c8a5fb92a1ac8673891? \r\n\r\nChecked unit tests and functional test included in this PR. It would be helpful if you can suggest more ways to experiment with `rebroadcast` and check different things? \r\n\r\n",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797836751",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "reviewed",
      "id": 611742673,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjExNzQyNjcz",
      "url": null,
      "actor": null,
      "commit_id": "24e7415aeb248f5df3ca3492d5a6b75a213f978d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-611742673",
      "submitted_at": "2021-03-14T22:04:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "reviewed",
      "id": 612614556,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEyNjE0NTU2",
      "url": null,
      "actor": null,
      "commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I've reviewed the first 5 commits. Looks good so far!",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-612614556",
      "submitted_at": "2021-03-15T20:55:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "reviewed",
      "id": 614939135,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE0OTM5MTM1",
      "url": null,
      "actor": null,
      "commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-614939135",
      "submitted_at": "2021-03-18T02:50:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-24T06:48:32Z",
      "updated_at": "2021-03-24T06:48:32Z",
      "source": {
        "issue": {
          "id": 813790907,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTc3ODc5OTE5",
          "url": "https://api.github.com/repos/bitcoin-s/bitcoin-s/issues/2711",
          "repository_url": "https://api.github.com/repos/bitcoin-s/bitcoin-s",
          "labels_url": "https://api.github.com/repos/bitcoin-s/bitcoin-s/issues/2711/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-s/bitcoin-s/issues/2711/comments",
          "events_url": "https://api.github.com/repos/bitcoin-s/bitcoin-s/issues/2711/events",
          "html_url": "https://github.com/bitcoin-s/bitcoin-s/pull/2711",
          "number": 2711,
          "state": "closed",
          "state_reason": null,
          "title": "Wallet Rebroadcast Transactions thread",
          "body": "This makes it so the wallet will rebroadcast transaction that have yet to be confirmed. This should help with UX for the wallet where the user could need to manually rebroadcast a transaction.",
          "user": {
            "login": "benthecarman",
            "id": 15256660,
            "node_id": "MDQ6VXNlcjE1MjU2NjYw",
            "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benthecarman",
            "html_url": "https://github.com/benthecarman",
            "followers_url": "https://api.github.com/users/benthecarman/followers",
            "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
            "organizations_url": "https://api.github.com/users/benthecarman/orgs",
            "repos_url": "https://api.github.com/users/benthecarman/repos",
            "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/benthecarman/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1323684882,
              "node_id": "MDU6TGFiZWwxMzIzNjg0ODgy",
              "url": "https://api.github.com/repos/bitcoin-s/bitcoin-s/labels/wallet",
              "name": "wallet",
              "description": "work for the wallet project",
              "color": "6f5cce",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin-s/bitcoin-s/milestones/4",
            "html_url": "https://github.com/bitcoin-s/bitcoin-s/milestone/4",
            "labels_url": "https://api.github.com/repos/bitcoin-s/bitcoin-s/milestones/4/labels",
            "id": 5731065,
            "node_id": "MDk6TWlsZXN0b25lNTczMTA2NQ==",
            "number": 4,
            "state": "closed",
            "title": "v0.6.0",
            "description": "",
            "creator": {
              "login": "Christewart",
              "id": 3514957,
              "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
              "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/Christewart",
              "html_url": "https://github.com/Christewart",
              "followers_url": "https://api.github.com/users/Christewart/followers",
              "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
              "organizations_url": "https://api.github.com/users/Christewart/orgs",
              "repos_url": "https://api.github.com/users/Christewart/repos",
              "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/Christewart/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 265,
            "created_at": "2020-08-04T12:22:51Z",
            "updated_at": "2021-05-12T05:25:14Z",
            "closed_at": "2021-05-12T05:25:14Z"
          },
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-s/bitcoin-s/pulls/2711",
            "html_url": "https://github.com/bitcoin-s/bitcoin-s/pull/2711",
            "diff_url": "https://github.com/bitcoin-s/bitcoin-s/pull/2711.diff",
            "patch_url": "https://github.com/bitcoin-s/bitcoin-s/pull/2711.patch"
          },
          "closed_at": "2021-04-07T13:13:44Z",
          "created_at": "2021-02-22T19:22:21Z",
          "updated_at": "2021-04-07T13:20:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 805633642,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTYzMzY0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/805633642",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-24T09:15:19Z",
      "updated_at": "2021-03-24T09:15:19Z",
      "author_association": "MEMBER",
      "body": "Sorry to bring bad news but this needs rebase. There is a silent merge conflict (with 680eb56d828ce358b4e000c140f5b247ff5e6179 part of #21162). Merged on top of master the following build error appears:\r\n```\r\n  CXX      libbitcoin_server_a-net_processing.o\r\nnet_processing.cpp:1396:55: error: too many arguments to function call, expected 2, have 3\r\n            RelayTransaction(ids.m_txid, ids.m_wtxid, m_connman);\r\n            ~~~~~~~~~~~~~~~~                          ^~~~~~~~~\r\nnet_processing.cpp:251:5: note: 'RelayTransaction' declared here\r\n    void RelayTransaction(const uint256& txid, const uint256& wtxid) override;\r\n    ^\r\n1 error generated.\r\n```",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-805633642",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-24T09:59:06Z",
      "updated_at": "2021-03-24T09:59:06Z",
      "source": {
        "issue": {
          "id": 839117639,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTk5MTgyNzQ5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21515",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21515/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21515/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21515/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21515",
          "number": 21515,
          "state": "open",
          "state_reason": null,
          "title": "Erlay: bandwidth-efficient transaction relay protocol",
          "body": "I started forking off parts of this big PR so that we can review and merge in chunks with better efficiency.\r\n1. [p2p: Erlay support signaling](https://github.com/bitcoin/bitcoin/pull/23443) — done\r\n2. [Follow-up](https://github.com/bitcoin/bitcoin/pull/26359) — done\r\n3. [p2p: Fill reconciliation sets and request reconciliation (Erlay)](https://github.com/bitcoin/bitcoin/pull/26283) — pending\r\n\r\n-----------\r\n\r\nPlease use this discussion for high-level topics and keep the nitpics for the sub-PRs. The state of this branch might be not the cleanest and the freshest, although last time I rebased in on 2022/05/12 to be in sync {with master, with the latest child PR} and pass CI (modulo one race condition issue).\r\n\r\n-----------\r\n\r\nThis is an implementation of  [Erlay](https://arxiv.org/abs/1905.10518) , using primitives in the BIP-330 (see the updated spec  [here](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki) ). Please refer to these two to understand the design. My talk is [here](https://youtu.be/YxsjdIl0034?t=670) .\r\n\r\nThis PR supersedes the previous [one](https://github.com/bitcoin/bitcoin/pull/18261), because that one got too much review comments (I tried to resolve all of them for this version), and also it was much refactored since then.\r\n\r\n### Abstract\r\n\r\nErlay uses both flooding (announcing using INV messages to all peers) and reconciliation to announce transactions. Flooding is expensive, so Erlay seeks to use it sparingly and in strategic locations - only well-connected publicly reachable nodes flood transactions to other publicly reachable nodes via outbound connections. Since every unreachable node is directly connected to several reachable nodes, this policy ensures that a transaction is quickly propagated to be within one hop from most of the nodes in the network.\r\n\r\nAll transactions not propagated through flooding are propagated through efficient set reconciliation. To do this, every node keeps a reconciliation set for each peer, in which transactions are placed which would have been announced using INV messages absent this protocol. Every 2 seconds every node chooses a peer from its outbound connections in a predetermined order to reconcile with, resulting in both sides learning the transactions known to the other side. After every reconciliation round, the corresponding reconciliation set is cleared.\r\n\r\nI think both paper and the BIP motives the changes, but I’ll mention them briefly once again here:\r\n* save 40% of the bandwidth consumed by a node\r\n* increase network connectivity for almost no bandwidth or latency cost\r\n* improves privacy as a side-effect\r\n\r\n### How to review\r\n\r\nI suggest doing `make clean && autogen.sh && configure` before you try building it locally.\r\n\r\n-----------\r\n\r\nI created 2 discussion boards, please discuss not-code-related topics there:\r\n1. [Understanding bandwidth savings](https://github.com/naumenkogs/txrelaysim/issues/7)\r\n2. [Joining mainnet testing](https://github.com/naumenkogs/txrelaysim/issues/8)",
          "user": {
            "login": "naumenkogs",
            "id": 7975071,
            "node_id": "MDQ6VXNlcjc5NzUwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/naumenkogs",
            "html_url": "https://github.com/naumenkogs",
            "followers_url": "https://api.github.com/users/naumenkogs/followers",
            "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
            "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
            "repos_url": "https://api.github.com/users/naumenkogs/repos",
            "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 27,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21515",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21515",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21515.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21515.patch"
          },
          "created_at": "2021-03-23T20:58:32Z",
          "updated_at": "2023-05-31T20:37:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-24T21:38:19Z",
      "updated_at": "2021-03-24T21:38:19Z",
      "source": {
        "issue": {
          "id": 840105335,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjAwMDE5ODc5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21525",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21525/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21525/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21525/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21525",
          "number": 21525,
          "state": "closed",
          "state_reason": null,
          "title": "[Bundle 4.5/n] Followup fixups to bundle 4",
          "body": "Chronological history of this changeset:\r\n1. Bundle 4 (#21270) got merged\r\n2. Posthumous reviews were posted\r\n3. These changes were prepended in bundle 5\r\n4. More reviews were added in bundle 5\r\n5. Someone suggested that we split the prepended changes up to another PR\r\n6. This is that PR\r\n\r\nIn the future, I will just do posthumous review changes in another PR instead. I apologize for the confusion.\r\n\r\nAddresses posthumous reviews on bundle 4:\r\n  - From jnewbery:\r\n    - https://github.com/bitcoin/bitcoin/pull/21270#issuecomment-796738048\r\n      - I didn't fix this one, but I added a `TODO` comment so that we don't lost track of it\r\n    - https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592291225\r\n    - https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592296942\r\n    - https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592299738\r\n    - https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592301704\r\n  - From MarcoFalke:\r\n    - https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593096212\r\n    - https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593097032\r\n    - https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593097867\r\n    - https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593100570\r\n\r\nAddresses reviews on bundle 5:\r\n- Checking chainman existence before locking cs_main\r\n  - MarcoFalke\r\n    - https://github.com/bitcoin/bitcoin/pull/21391#discussion_r596601776\r\n    - https://github.com/bitcoin/bitcoin/pull/21391#discussion_r596601876\r\n- Appropriate locking, usage of chainman, and control flow in `src/node/interfaces.cpp`\r\n  - MarcoFalke\r\n    - https://github.com/bitcoin/bitcoin/pull/21391#discussion_r596601383\r\n  - jnewbery\r\n    - https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597029360\r\n    - https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597029921\r\n  - ryanofsky\r\n    - https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597163828\r\n- Style/comment formatting changes\r\n  - jnewbery\r\n    - https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597026552\r\n    - https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597027186\r\n- Making LookupBlockIndex const\r\n  - jnewbery\r\n    - https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597035062",
          "user": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21525",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21525",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21525.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21525.patch"
          },
          "closed_at": "2021-04-01T09:01:47Z",
          "created_at": "2021-03-24T19:39:12Z",
          "updated_at": "2022-08-16T17:07:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 806259991,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjI1OTk5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/806259991",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-25T00:01:23Z",
      "updated_at": "2021-03-26T08:14:41Z",
      "author_association": "NONE",
      "body": "~~NACK if:~~\r\n\r\n~~1. Not random\r\nhttps://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797836751~~\r\n\r\n~~2.  User cannot decide REBROADCAST_MIN_TX_AGE https://github.com/bitcoin/bitcoin/pull/21061#discussion_r593968023~~\r\n\r\n~~Because, then it does not achieve things mentioned in  motivation: _This is bad for privacy because it leaks information that allows spy nodes to link bitcoin addresses with IP addresses, a relationship we aim to obfuscate._~~\r\n\r\n~~We should not change the way spy nodes work. There will be a pattern here which can be followed.~~\r\n\r\nI changed my opinion and shared things below: https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-808026799",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806259991",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "commented",
      "id": 806262328,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjI2MjMyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/806262328",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-25T00:07:22Z",
      "updated_at": "2021-03-25T00:10:23Z",
      "author_association": "MEMBER",
      "body": "@prayank23 I think you're confused about the goal of this PR. The current problem is that rebroadcasting is something that _only_ happens for your own transactions. Any peer that observes rebroadcasting knows for a fact that it is yours. This PR changes things so that rebroadcasting is done uniformly for *all* transactions, without special treatment of your own. By definition, if the fact whether a transaction is yours is no longer used in the decision to rebroadcast or not, there is no signal any peer can infer anything from.\r\n\r\nThat obviously does not prevent spy nodes from learning other things (like observing which nodes broadcast first to infer origin), but it categorically removes rebroadcasting behavior from the set of leaks.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806262328",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4505051137,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDUwNTA1MTEzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4505051137",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-25T00:07:22Z"
    },
    {
      "event": "subscribed",
      "id": 4505051140,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1MDUwNTExNDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4505051140",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-25T00:07:22Z"
    },
    {
      "event": "reviewed",
      "id": 620319791,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjIwMzE5Nzkx",
      "url": null,
      "actor": null,
      "commit_id": "0c84415ae9fa1a32faace05db1e0d83979c7533b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-620319791",
      "submitted_at": "2021-03-25T00:11:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "commented",
      "id": 806276155,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjI3NjE1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/806276155",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-25T00:44:53Z",
      "updated_at": "2021-03-25T00:45:53Z",
      "author_association": "NONE",
      "body": "> This PR changes things so that rebroadcasting is done **uniformly for all transactions**, **without special treatment** of your own. By definition, if the fact whether a transaction is yours is no longer used in the decision to rebroadcast or not, there is no signal any peer can infer anything from.\r\n\r\nThis PR improves on 1 thing: They are not all mine\r\nThis PR adds 1 thing: New pattern (fee rate and time in mempool)\r\n\r\nIt makes things different but not difficult for spy nodes \r\n\r\nWhat is wrong with my comments? Random txs and time decided by users\r\n\r\nNobody knows what \"should\" be mined except miners and that 30 minutes time frame is weird for Bitcoin",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806276155",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "commented",
      "id": 806284509,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjI4NDUwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/806284509",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-25T01:09:02Z",
      "updated_at": "2021-03-25T01:25:51Z",
      "author_association": "MEMBER",
      "body": "> This PR adds 1 thing: New pattern (fee rate and time in mempool)\r\n\r\nI see what you mean now. Indeed, it does, but I think this is completely negligible. What it leaks about the mempool is on a scale of 30 minutes to hours. Within such amounts of time, we already reveal the transactions we've learned (simply by telling other nodes in the process of normal relay, every few seconds). The concern about privacy here is on the scale of seconds or less - by knowing which nodes see a transaction first an attacker can infer its origin. Revealing what was in your mempool 30 minutes ago is a non-issue.\r\n\r\nFeerate is already revealed (infrequently & quantized) through BIP133 feefilter messages.\r\n\r\n> It makes things different but not difficult for spy nodes.\r\n\r\nI disagree here. This change completely removes the issue of learning which transactions belong to a node based on rebroadcasting behavior, which is an enormous leak.\r\n\r\n> What is wrong with my comments? Random txs and time decided by users\r\n\r\nWhat do you mean by \"random txs\"?\r\n\r\nTime decided by users: generally the criterion for deciding whether a parameter should be configurable is whether you can also give advice under which cases users should be changing it, and how. I don't know what advice I'd give users except not to touch it; setting it very low could become a privacy issue (using the mechanism you point out), setting it very high may make it useless; things in between probably hardly matter. Do you have a scenario in mind under which you'd suggest changing it?\r\n\r\n> Nobody knows what \"should\" be mined except miners\r\n\r\nThat is literally what the mempool is: a node's prediction of what will be mined in the near future. It doesn't matter that this prediction is sometimes wrong.\r\n\r\n> and that 30 minutes time frame is weird for Bitcoin\r\n\r\nReal world protocol implementations are full of arbitrary-seeming constants.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806284509",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "commented",
      "id": 808026799,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwODAyNjc5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808026799",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-26T08:14:26Z",
      "updated_at": "2021-03-26T08:14:26Z",
      "author_association": "NONE",
      "body": "I thought of different scenarios including weekends when we see less transactions but couldn't find anything that supports my argument. So I change my opinion for now and maybe need to do more research. This PR improves things and if there is any need for further changes to improve privacy it can be done in follow up PRs.\r\n\r\nBelow is a diagram in which I was trying to visualize what happens in A(this PR) and B(things I suggested). I agree with you this change completely removes the issue of learning which transactions belong to a node based on rebroadcasting behavior, which is an enormous leak.\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/112599666-41e77c80-8e36-11eb-8cea-b487903dc4ae.png)\r\n\r\n> What do you mean by \"random txs\"?\r\n\r\nRandomization can be done using different algorithms. But a basic random rebroadcast would ignore filtering based on fee rate. Example: Mempool has 10 txs. A,B,C,D,E,F,G,H,I,J. Using this PR, ABCD are rebroadcasted but in my case AB rebroadcasted once and maybe AED next time if still not confirmed and almost same mempool. Again this suggestion can be ignored and I saw 1sat/vByte being used for filtering when I tried on testnet. Maybe need to do more tests and use mainnet as well.\r\n\r\n> Real world protocol implementations are full of arbitrary-seeming constants.\r\n\r\nI was suggesting to use either a default value like 30 minutes and user can change it if required. Or decide a MIN and MAX so that anything between this range can be used else default 30 minutes will be used.\r\n\r\nSometimes we don't see any blocks for more than 30 minutes in Bitcoin and few blocks are mined in couple of minutes gap. Considering this it would have been better if there was some algorithm that could adjust the value for us automatically within a range based on last N blocks. But it can also be done manually or we could just ignore this suggestion and do in follow up PRs if required.\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/112601480-8411bd80-8e38-11eb-814a-78dfd6f2bf62.png)\r\n\r\n",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-808026799",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "reviewed",
      "id": 621980840,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjIxOTgwODQw",
      "url": null,
      "actor": null,
      "commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-621980840",
      "submitted_at": "2021-03-26T13:58:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "commented",
      "id": 811072127,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxMTA3MjEyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/811072127",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-31T13:33:39Z",
      "updated_at": "2021-03-31T13:33:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK: this removes the rebroadcasting privacy leak\n\nI found the your [summary](https://github.com/amitiuttarwar/bitcoin-notes/blob/main/rebroadcast-history.md) of the previous discussion very helpful and still want to think though some of the edge cases in regards to e.g. bandwidth usage (which I think is already in a good state).\n\n--- \n\n@prayank23 I'm not sure I understood your concern with the constant min-age of 30min before consider to rebroadcast a transaction. This exists to limit the bandwidth usage (see the summary linked above if you haven't already read it). I think having this configurable doesn't add anything.\n\n---\n\nI've been comparing the contents of block templates to the actual blocks (with the goal detecting miners censoring transactions; unrelated to this PR). One edge case I've observed a few times is: \nA transaction `tx1` is missing from 100+ blocks it \"should have been in\". Manually rebroadcasting fails as there exists a conflicting and better propagated transaction `tx2` paying a substantially lower feerate. (This essentially a real-world observation of what @gmaxwell mentioned at the end of https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-571399346 as a potential bandwidth attack). \n\nA naive implemention would try to rebroadcast `tx1` for each of the 100+ blocks until `tx2` confirms. I haven't checked your code, but based on the summary this would be mitigated by only rebroadcasting the transaction every 4h and not more than six times total. I don't think adding 'do-not-re-rebroadcast-previously-rejected/conflicting-tx'-logic is worth it.\n\n\n\n\n\n\n\n",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-811072127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4534775045,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDUzNDc3NTA0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4534775045",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-31T13:33:39Z"
    },
    {
      "event": "subscribed",
      "id": 4534775050,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1MzQ3NzUwNTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4534775050",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-31T13:33:39Z"
    },
    {
      "event": "mentioned",
      "id": 4534775052,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDUzNDc3NTA1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4534775052",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-31T13:33:40Z"
    },
    {
      "event": "subscribed",
      "id": 4534775056,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1MzQ3NzUwNTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4534775056",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-31T13:33:40Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-01T04:25:58Z",
      "updated_at": "2021-04-01T04:25:58Z",
      "source": {
        "issue": {
          "id": 847054701,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjA2MDk2ODcz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21562",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21562/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21562/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21562/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21562",
          "number": 21562,
          "state": "closed",
          "state_reason": null,
          "title": "[net processing] Various tidying up of PeerManagerImpl ctor",
          "body": "- Use default initialization of PeerManagerImpl members where possible\r\n- Remove unique_ptr indirection where it's not needed",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21562",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21562",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21562.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21562.patch"
          },
          "closed_at": "2021-07-28T14:34:00Z",
          "created_at": "2021-03-31T17:58:42Z",
          "updated_at": "2022-08-18T18:32:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 4540196533,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ1NDAxOTY1MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4540196533",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-01T09:05:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 626660219,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NjYwMjE5",
      "url": null,
      "actor": null,
      "commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK, I think it makes sense to run the block assembler to determine which transactions we expect should have been mined. I've only done a light review so far, put in some suggestions about IBD and evicting from the tracker.\r\n\r\nHave you considered using the size of the block received instead of the max block weight? If an empty block is mined, for example, it seems unnecessary for all the Core nodes rebroadcast hundreds of transactions.\r\n\r\ncommit message from 0c84415ae9:\r\n\r\n> We use this information primarily to ensure we don't exceed a maximum number of\r\nrebroadcast attempts. This allows transactions to genuinely expire from the\r\nmajority of mempools.\r\n\r\nI don't really understand - what does it mean for tx to not genuinely expire from mempool? I thought the mempool would just evict a tx after expiry, and then rebroadcasts no longer happen either because we forgot about it? If you didn't have the rebroadcast tracker, would you keep rebroadcasting to each other and keep it in your mempool?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-626660219",
      "submitted_at": "2021-04-01T22:15:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "mentioned",
      "id": 4547462347,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU0NzQ2MjM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4547462347",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-03T01:41:31Z"
    },
    {
      "event": "subscribed",
      "id": 4547462348,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1NDc0NjIzNDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4547462348",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-03T01:41:31Z"
    },
    {
      "event": "mentioned",
      "id": 4547462349,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU0NzQ2MjM0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4547462349",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-03T01:41:31Z"
    },
    {
      "event": "subscribed",
      "id": 4547462350,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1NDc0NjIzNTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4547462350",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-03T01:41:31Z"
    },
    {
      "event": "reviewed",
      "id": 629804032,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI5ODA0MDMy",
      "url": null,
      "actor": null,
      "commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-629804032",
      "submitted_at": "2021-04-07T09:42:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "commented",
      "id": 814949875,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDk0OTg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814949875",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-07T14:14:19Z",
      "updated_at": "2021-04-07T14:24:57Z",
      "author_association": "MEMBER",
      "body": "Looks like 7b8e976cd5ac78a22f1be2b2fed8562c693af5d9 (#21525) introduced a small merge conflict with 9307196d13ec589f01546ff8c4758211fc1d48cb in `miner.cpp` (function `BlockAssembler::CreateNewBlock`).\r\n\r\nI think it can be solved by changing `chainparams` to `m_chainparams` on the affected line.\r\nEdit: no, it is needed on more lines. This is just the only one where an explicit conflict happens.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-814949875",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4565469064,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDU2NTQ2OTA2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4565469064",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-07T23:26:08Z"
    },
    {
      "event": "unlabeled",
      "id": 4565835411,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDU2NTgzNTQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4565835411",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-08T01:22:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 815393414,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTM5MzQxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/815393414",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-08T02:08:53Z",
      "updated_at": "2021-04-08T02:08:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "thank you all for the reviews! I'm working on incorporating/addressing all the comments. I've taken a first pass, but am still working my way through, I'll post again when I believe I've addressed all outstanding comments. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-815393414",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-08T17:37:27Z",
      "updated_at": "2021-04-08T17:37:27Z",
      "source": {
        "issue": {
          "id": 840105803,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjAwMDIwMjY2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21526",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21526/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21526/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21526/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21526",
          "number": 21526,
          "state": "closed",
          "state_reason": null,
          "title": "validation: UpdateTip/CheckBlockIndex assumeutxo support",
          "body": "This is part of the [assumeutxo project](https://github.com/bitcoin/bitcoin/projects/11) (parent PR: #15606) \r\n\r\n---\r\n\r\nModify UpdateTip and CheckBlockIndex for use with multiple chainstates. Includes a new unittest verifying `g_best_block` behavior (previously untested at the unit level) and various changes necessary for running and testing `ProcessNewBlock()`-like behavior on the background validation chainstate.\r\n\r\nThis changeset introduces a new block index `nStatus` flag called `BLOCK_ASSUMED_VALID`, and it is applied to block index entries that are beneath the UTXO snapshot base block upon snapshot load. Once each block is validated (during async background validation), the flag is removed. This allows us to avoid (ab)using `BLOCK_VALID_*` flags for snapshot chain block entries, and preserves the original meaning of those flags.\r\n\r\nNote: this PR previously incorporated changes to `LoadBlockIndex()` and `RewindBlockIndex()` as noted in Russ' comments below, but once I generated the changes necessary to test the UpdateTip change, I decided to split this changes out into another PR due to the size of this one.",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21526",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21526",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21526.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21526.patch"
          },
          "closed_at": "2021-09-23T20:22:36Z",
          "created_at": "2021-03-24T19:39:48Z",
          "updated_at": "2022-10-30T19:10:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 816751363,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNjc1MTM2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816751363",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-09T15:09:05Z",
      "updated_at": "2021-04-09T15:09:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Two noob questions (I did not look at the code):\r\n\r\n1. Could it happen that well propagated transactions with high fees are unnecessary rebroadcasted by all nodes at the same time, if a new block is mined that does not include them? Could this even be common? @0xB10C do you have some stats, on average, per block, how many transactions are not mined, that should have been mined?\r\n\r\n2. Wrt transactions with very low fees that originated on our node, is my understanding correct:\r\n* before this PR we would have rebroadcast them which is good for propagation and bad for privacy\r\n* after this PR we would not rebroadcast them which is good for privacy and bad for propagation?\r\n\r\nIf yes, then what about still rebroadcasting our low-fee transactions but also rebroadcast a bunch of random ones to make it less obvious that a tx is ours?",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-816751363",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4574988218,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU3NDk4ODIxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4574988218",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-09T15:09:05Z"
    },
    {
      "event": "subscribed",
      "id": 4574988219,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1NzQ5ODgyMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4574988219",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-09T15:09:05Z"
    },
    {
      "event": "commented",
      "id": 816987152,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNjk4NzE1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816987152",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-09T21:41:45Z",
      "updated_at": "2021-04-09T21:41:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "> 0xB10C do you have some stats, on average, per block, how many transactions are not mined, that should have been mined?\r\n\r\nOver the last ~2350 blocks there were on average 38 transactions (standard derivation of 116) and median 15 transactions not in the the block that my node's template (generated a few seconds before the pool-set block time ¹ ) would have included. Not all of these on average 38 transactions would make it into the rebroadcast set. \r\n\r\n```\r\ncount    2347.000000\r\nmean       37.921176\r\nstd       116.198727\r\nmin         1.000000\r\n25%         6.000000\r\n50%        15.000000\r\n75%        36.000000\r\nmax      3226.000000\r\n```\r\n\r\n¹) My methodology is not perfect as 1) pools clocks are not always accurate and 2) miners do additional nTime rolling on the timestamp so the pool likely generated his template before the block-time of the final block. That said, these numbers should still work here.",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-816987152",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-11T08:20:11Z",
      "updated_at": "2021-04-11T08:20:11Z",
      "source": {
        "issue": {
          "id": 527748980,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ0OTQzMDU4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17580",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17580/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17580/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17580/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17580",
          "number": 17580,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Add ALLOW_LIST flags and enforce usage in CheckArgFlags",
          "body": "**This is based on #16545.** The non-base commits are:\r\n\r\n- [`76d30ef52501` scripted-diff: Add ALLOW_LIST flag to arguments retrieved with GetArgs](https://github.com/bitcoin/bitcoin/pull/17580/commits/76d30ef525015e2f842e35f2b2061839440dc5e2)\r\n- [`49e25e1fa76f` refactor: Fix more ALLOW_LIST arguments](https://github.com/bitcoin/bitcoin/pull/17580/commits/49e25e1fa76f430a38abaab59211c220cae434f0)\r\n- [`870160359e7c` Always reject empty -rpcauth=\"\" arguments](https://github.com/bitcoin/bitcoin/pull/17580/commits/870160359e7cec9f66c7c26f01f4e65b40f35e1b)\r\n- [`d97b30d33cea` Always reject empty -blockfilterindex=\"\" arguments](https://github.com/bitcoin/bitcoin/pull/17580/commits/d97b30d33ceaabab805de4784ba1626cb0d2306d)\r\n- [`7e70f985eac4` refactor: Always enforce ALLOW_LIST in CheckArgFlags](https://github.com/bitcoin/bitcoin/pull/17580/commits/7e70f985eac4f07dcb74499161961bb75e61866d)\r\n\r\n---\r\n\r\nExcept for two `rpcauth` and `blockfilterindex` fixes, this PR does not change any behavior outside of tests. It is just supposed to enforce internal consistency and prevent bugs by ensuring that list arguments are always retrieved with GetArgs() and non-list arguments are always retrieved with GetArg(). Followup PRs could use the ALLOW_LIST flags for better documentation and error checking in the future. For example, #17493 builds on this to disallow conflicting config values. \r\n\r\nThis change was originally made as part of #17493",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17580",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17580",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17580.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17580.patch"
          },
          "created_at": "2019-11-24T20:05:39Z",
          "updated_at": "2023-05-09T16:37:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 817610973,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzYxMDk3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/817610973",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T08:38:36Z",
      "updated_at": "2021-04-12T08:38:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "@0xB10C, thanks!\r\n\r\nSo, to summarize, most of the time, shortly after every block is created, all nodes (that run this software) will rebroadcast a few 10s of transactions (and occasionally a few 1000s of transactions (corresponding to max 3226 above)). And this will be because miners' algo for composing a block differ from ours, not necessary because the transactions are not well propagated.\r\n\r\nIs this too aggressive, possibly creating unnecessary traffic? Would it make sense to rebroadcast a given tx only if it should have been included in each one of the last N blocks, but was not? (currently, I assume, it works as if N=1)",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-817610973",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4580631819,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU4MDYzMTgxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4580631819",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T08:38:36Z"
    },
    {
      "event": "subscribed",
      "id": 4580631823,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1ODA2MzE4MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4580631823",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T08:38:36Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T10:41:32Z",
      "updated_at": "2021-04-12T10:41:32Z",
      "source": {
        "issue": {
          "id": 541055269,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzU1NzgwNTc3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17783",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17783/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17783/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17783/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17783",
          "number": 17783,
          "state": "open",
          "state_reason": null,
          "title": "util: Fix -norpcwhitelist, -norpcallowip, and similar corner case behavior",
          "body": "**This is based on #16545 + #17580.** The non-base commits are:\r\n\r\n- [`a746ae052004` Fix nonsensical -norpcwhitelist, -norpcallowip and related behavior](https://github.com/bitcoin/bitcoin/pull/17783/commits/a746ae0520048f6290fb06347d4d303df4c1ccde)\r\n- [`f59bfafcc8f3` Fix nonsensical bitcoin-cli -norpcwallet behavior](https://github.com/bitcoin/bitcoin/pull/17783/commits/f59bfafcc8f3bf73d9e5c70669fff354f29b261b)\r\n\r\n---\r\n\r\nMake negating list options act the same as not specifying list options for `-norpcallowip`, `-norpcbind`, `-nobind`, `-nowhitebind`, `-noconnect`, `-noexternalip`, `-noonlynet`, `-nosignetchallenge`, `-nosignetseednode`, `-norpcwallet`. Instead of using `IsArgSet()` use `!GetArgs().empty()` so negation does not produce unexpected side effects, which are detailed in commit messages.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17783",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17783",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17783.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17783.patch"
          },
          "created_at": "2019-12-20T15:36:53Z",
          "updated_at": "2023-05-09T16:37:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 633921697,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzOTIxNjk3",
      "url": null,
      "actor": null,
      "commit_id": "06890651027cc50bdf3897283386a973bbf55725",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-633921697",
      "submitted_at": "2021-04-12T21:32:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4585740391,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDU4NTc0MDM5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4585740391",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T04:48:27Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T19:28:22Z",
      "updated_at": "2021-04-13T19:28:22Z",
      "source": {
        "issue": {
          "id": 527750404,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ0OTQ0MTEz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17581",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17581/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17581/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17581/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17581",
          "number": 17581,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Remove settings merge reverse precedence code",
          "body": "**This is based on #16545 + #17580 + #17493.** The non-base commits are:\r\n\r\n- [`55b31d8a921e` refactor: Remove settings merge reverse precedence code](https://github.com/bitcoin/bitcoin/pull/17581/commits/55b31d8a921e45cba9884a7da08b3aea6a88598b)\r\n\r\n---\r\n\r\nThis has no effect on behavior because as of https://github.com/bitcoin/bitcoin/pull/17493 it's not possible to specify multiple values for single value settings in the config file.\r\n\r\nThis change implements one of the settings simplifications listed in #17508",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17581",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17581",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17581.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17581.patch"
          },
          "created_at": "2019-11-24T20:17:13Z",
          "updated_at": "2023-05-09T16:37:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T19:34:57Z",
      "updated_at": "2021-04-13T19:34:57Z",
      "source": {
        "issue": {
          "id": 523714389,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzQxNjYxNjA3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17493",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17493/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17493/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17493/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17493",
          "number": 17493,
          "state": "open",
          "state_reason": null,
          "title": "util: Forbid ambiguous multiple assignments in config file",
          "body": "**This is based on #16545 + #17580.** The non-base commits are:\r\n\r\n- [`1c3d5be2ad34` util: Forbid ambiguous multiple assignments in config file](https://github.com/bitcoin/bitcoin/pull/17493/commits/1c3d5be2ad340349559d1bb5524c919e85da3ce8)\r\n- [`c65e3b3b7d1e` test: Extend util_ArgsMerge test to check for \"Multiple values specified\" errors](https://github.com/bitcoin/bitcoin/pull/17493/commits/c65e3b3b7d1e9dc33ecf5f0029430ef90f765cf8)\r\n\r\n---\r\n\r\nEnable error \"Multiple values specified for -setting in same section of config file.\", for ALLOW_ANY settings that don't specify ALLOW_LIST.\r\n\r\nInstead of silently ignoring settings, this change makes it an error to provide an ambiguous config file that provides assigns multiple values to a single-value setting. Change includes release notes.\r\n\r\nPart of the motivation for this change is to improve usability and prevent settings that look valid from being silently ignored. Another motivation is to be able to remove confusing \"reverse precedence\" logic in #17581",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17493",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17493",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17493.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17493.patch"
          },
          "created_at": "2019-11-15T22:11:44Z",
          "updated_at": "2023-05-09T16:37:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 820030611,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDAzMDYxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820030611",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-15T03:29:42Z",
      "updated_at": "2021-04-15T03:29:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "FWIW, I've been running this for about a week (a total of 1012 blocks), and most blocks result in an attempt to rebroadcast 6 or fewer txs, 75% of blocks are 51 or under, 99% of blocks are under 600 transactions, and the highest 1% of blocks result in 586- 1075 txs being queued for rebroadcast.\r\n\r\nI haven't investigated how many of these \"queued for attempted rebroadcast\" txs actually result in an INV being sent to some/all peers (since they'll be filtered by the inventory known bloom filter if they were at all recent), or how many of the txs that get INVed actually get requested. (I have seen at least one rebroadcasted tx get requested by a peer though, so that's something!)",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-820030611",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "subscribed",
      "id": 4605495556,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2MDU0OTU1NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4605495556",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T15:30:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4606648663,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYwNjY0ODY2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4606648663",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T20:09:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4607072777,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYwNzA3Mjc3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4607072777",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T22:22:23Z"
    },
    {
      "event": "reviewed",
      "id": 638126672,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM4MTI2Njcy",
      "url": null,
      "actor": null,
      "commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "78051301012",
        "id": 37097169,
        "node_id": "MDQ6VXNlcjM3MDk3MTY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/37097169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/78051301012",
        "html_url": "https://github.com/78051301012",
        "followers_url": "https://api.github.com/users/78051301012/followers",
        "following_url": "https://api.github.com/users/78051301012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/78051301012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/78051301012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/78051301012/subscriptions",
        "organizations_url": "https://api.github.com/users/78051301012/orgs",
        "repos_url": "https://api.github.com/users/78051301012/repos",
        "events_url": "https://api.github.com/users/78051301012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/78051301012/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-638126672",
      "submitted_at": "2021-04-16T22:49:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "commented",
      "id": 821722492,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTcyMjQ5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821722492",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T23:31:21Z",
      "updated_at": "2021-04-16T23:32:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "thank you all SO MUCH for these reviews 🙌🏽 I believe I have addressed all outstanding review comments 🎉 I have one more piece of functionality I'd like to implement in this patch ([link](https://github.com/bitcoin/bitcoin/pull/21061#discussion_r596515495)), but otherwise everything in this PR should be current and ready for further review.\r\n\r\nMy next step is to develop a patch for more insightful monitoring. I've been running this patch on mainnet for the past 2 weeks, and have seen results very similar to what aj reported [in this comment](https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-820030611). However, my main curiosity is how many of these transactions queued for rebroadcast 1. actually get `inv`ed to the network & 2. are subsequently requested via a `getdata`? Once I've written that, I'll share here incase anyone else is interested in running. \r\n\r\nA couple more conceptual responses:\r\n\r\n@0xB10C really cool that you're doing a very similar comparison, I'd be curious to learn more about how this patch compares to what you are running. I agree that the attempt tracker will mitigate & cap the worst case of something like this.\r\n\r\n@vasild it seems like your questions are highlighting two tensions that we are aiming to strike a balance between: \r\n1. privacy vs propagation\r\n2. propagation vs bandwidth \r\n\r\nWhile this patch uses `getblocktemplate` logic as a starting point for identifying which transactions to attempt to rebroadcast, there is a lot of nuance to ensure that we don't waste bandwidth (such as the attempt tracker). I'd suggest looking at the `GetRebroadcastTransaction` function ([link](https://github.com/bitcoin/bitcoin/pull/21061/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-7dff50848db96bdb8edffc4d21daeca6d9050ec0e67d96072780ea5751e7df06R78)) to see the various filters being applied. However, after they are selected, they will also need to pass through `filterInventoryKnown` before they actually make it as a network message. The monitoring I mentioned above will help us observe the numbers around that.\r\n\r\nIf we find that the number of transactions currently being rebroadcast is too high, the suggestion of looking at the last N blocks seems like a good approach :)",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-821722492",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4607234355,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDYwNzIzNDM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4607234355",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T23:31:21Z"
    },
    {
      "event": "subscribed",
      "id": 4607234357,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2MDcyMzQzNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4607234357",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T23:31:21Z"
    },
    {
      "event": "mentioned",
      "id": 4607234359,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDYwNzIzNDM1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4607234359",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T23:31:21Z"
    },
    {
      "event": "subscribed",
      "id": 4607234360,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2MDcyMzQzNjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4607234360",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T23:31:21Z"
    },
    {
      "event": "reviewed",
      "id": 638098056,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM4MDk4MDU2",
      "url": null,
      "actor": null,
      "commit_id": "d1bcb1d213ae380bbfce516a04c11a68864d3bbd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Beyond comments, I've still have a high-level concern about how this new rebroadcasting mechanism is servicing custom rebroadcasting logics. A lot of second-layers nodes and more and more Bitcoin applications have their own RBF-able rebroadcast logics, with their own frequencies and attempt limits. This new mechanism doesn't serve them well as their rebroadcast logics are going to leak a behavior breaking from the anonymous sets constituted by `m_attempt_tracker`. Assuming those differing rebroadcast logics are using `sendrawtransaction`, I don't think it's realistic to assume that `filterInventoryKnown` will protect them here, an attacker can renew its inbound connection quite quickly forcing the victim node to cleanup corresponding malicious peer filter ?\r\n\r\nThose node operators won't be incentivized to turn on this mechanism. We have already a 10k contingent of Lightning nodes against ~100k full-nodes ? Few years from now, we might have only a small minority of network nodes rebroadcasting thus severely minimizing benefits of motivation 2)\r\n\r\nAnother concern, I think this PR is making the assumption that big-sized node mempools will serve as some sort of transaction _archives_ for the rest of the network by rebroadcasting a-week-ago-or-month-ago bottom of mempools now feerate compelling for block inclusion ? I believe we should let Bitcoin applications be responsible of rescheduling their utxo claims, it's less complexity for full-nodes and prevent subtle issues. I.e a client might be interested to cheaply double-spend a utxo once the first spend has reached `MEMPOOL_EXPIRY` but could be now accidentally jammed by this new rebroadcast mechanism ?\r\n\r\nFurther, I would attend a more detailed privacy attacker model, we might have other privacy-preserving rebroadcast strategies with cheaper bandwidth trade-offs. E.g, one-shot tx-relay peer with aggressive rotation between rebroadcast attempts, and tracking that announced-to peers belong to different netgroups. Such rebroadcast strategy might suit better custom rebroadcast logics mentioned as first concern. Of course, we could support different ones, just at the price of smaller anonymous sets...\r\n\r\nThat said, I agree that this work is an obvious privacy improvement for Core wallet rebroadcast, I just fear we have more interactions to weigh in that might appear at first sight.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-638098056",
      "submitted_at": "2021-04-17T00:15:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "commented",
      "id": 823783793,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMzc4Mzc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/823783793",
      "actor": {
        "login": "DISC30",
        "id": 48271670,
        "node_id": "MDQ6VXNlcjQ4MjcxNjcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/48271670?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DISC30",
        "html_url": "https://github.com/DISC30",
        "followers_url": "https://api.github.com/users/DISC30/followers",
        "following_url": "https://api.github.com/users/DISC30/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DISC30/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DISC30/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DISC30/subscriptions",
        "organizations_url": "https://api.github.com/users/DISC30/orgs",
        "repos_url": "https://api.github.com/users/DISC30/repos",
        "events_url": "https://api.github.com/users/DISC30/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DISC30/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-21T05:19:25Z",
      "updated_at": "2021-04-21T05:19:25Z",
      "author_association": "NONE",
      "body": "Hey @amitiuttarwar what is the best way to pay you for the work you have done? I don't have BTCPay but can do static address or paypal.",
      "user": {
        "login": "DISC30",
        "id": 48271670,
        "node_id": "MDQ6VXNlcjQ4MjcxNjcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/48271670?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DISC30",
        "html_url": "https://github.com/DISC30",
        "followers_url": "https://api.github.com/users/DISC30/followers",
        "following_url": "https://api.github.com/users/DISC30/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DISC30/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DISC30/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DISC30/subscriptions",
        "organizations_url": "https://api.github.com/users/DISC30/orgs",
        "repos_url": "https://api.github.com/users/DISC30/repos",
        "events_url": "https://api.github.com/users/DISC30/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DISC30/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-823783793",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4622770949,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDYyMjc3MDk0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4622770949",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-21T05:19:25Z"
    },
    {
      "event": "subscribed",
      "id": 4622770952,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2MjI3NzA5NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4622770952",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-21T05:19:25Z"
    },
    {
      "event": "commented",
      "id": 826324358,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjMyNDM1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826324358",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T13:25:26Z",
      "updated_at": "2021-04-25T13:25:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "I haven't followed the project in detail over the past few months and might have missed some discussions on this aspect, so forgive me if this is a stupid question: The issues around nodes that use this new module but are not aware of a new softfork were discussed in the review club and also that `m_attempt_tracker` seems to resolve the issue. But it seems this could be exploited by an attacker at almost zero cost, spamming these nodes with such txs that are high fee but invalid under the new rules. Has this already been discussed somewhere? I haven’t thought about it much but maybe rebroadcast should ignore txs with anyone-can-spend outputs?",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-826324358",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4653724854,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1MzcyNDg1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4653724854",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T00:02:13Z"
    },
    {
      "event": "commented",
      "id": 829160497,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTE2MDQ5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/829160497",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-29T11:45:15Z",
      "updated_at": "2021-04-29T11:45:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "> But it seems this could be exploited by an attacker at almost zero cost, spamming these nodes with such txs that are high fee but invalid under the new rules.\r\n\r\nIf the txs are invalid under the new rules no node will accept them -- new nodes won't because they'll be invalid, old nodes won't because anything covered by the new rules is non-standard so not acceptable to the mempool/for relay.\r\n\r\nThe spam case is for txs that are only valid under the new rules, but miners aren't bothering to mine any txs that use the new rules -- in that case all the nodes running the new rules will rebroadcast them to everyone regularly -- but that's limited by expiry (each tx can only be rebroadcast so many times), inventory known (won't inv the same thing until it expires from the bloom filter), and (hopefully) by some miner creating blocks with txs that follow the new rules.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-829160497",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-30T21:52:01Z",
      "updated_at": "2021-04-30T21:52:01Z",
      "source": {
        "issue": {
          "id": 872250072,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjI3MTg0MDQ2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21815",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21815/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21815/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21815/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21815",
          "number": 21815,
          "state": "closed",
          "state_reason": null,
          "title": "Add `-maxoutfullrelay`",
          "body": "+ User can set maximum outbound full relay connections in `bitcoin.conf`\r\n+ Value can be anything between 0(MIN) and 8(MAX)\r\n+ [Default](https://github.com/bitcoin/bitcoin/blob/66fd3b28e85c167f3955b5603496daf8d91abcad/src/net.h#L64) value is 8\r\n+ Can be helpful for some users who prefer to keep only 1-2 peers which are automatically selected for outbound full relay connections, add other peers using `addnode` if required and use 2 block relay connections always. Gives users more control and freedom related to outbound connections and Maximum Outbound Full Relay always stays <=8(ignoring `addnode` connections`)\r\n\r\n`maxoutfullrelay=0`\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/116676516-b1680300-a9c4-11eb-8aa5-13de34d52e6c.png)\r\n\r\n`maxoutfullrelay=1`\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/116676375-89789f80-a9c4-11eb-9c99-a0afdef5fec5.png)\r\n\r\n`maxoutfullrelay=2`\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/116676081-2dae1680-a9c4-11eb-9f7f-24bd6ccdffb8.png)\r\n\r\n`maxoutfullrelay=N` (N >=8)\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/116676852-21768900-a9c5-11eb-9175-2ace3c6df1e5.png)\r\n\r\n\r\n",
          "user": {
            "login": "ghost",
            "id": 10137,
            "node_id": "MDQ6VXNlcjEwMTM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21815",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21815",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21815.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21815.patch"
          },
          "closed_at": "2021-05-01T12:51:30Z",
          "created_at": "2021-04-30T09:50:10Z",
          "updated_at": "2022-08-18T19:51:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4685844950,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY4NTg0NDk1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4685844950",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-04T21:46:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4686368136,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY4NjM2ODEzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4686368136",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T01:13:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4686908243,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY4NjkwODI0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4686908243",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T05:52:32Z"
    },
    {
      "event": "commented",
      "id": 832989504,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMjk4OTUwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832989504",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T20:35:24Z",
      "updated_at": "2021-05-05T20:37:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "I believe all review comments are now addressed (including the explanations below) 🎈\r\n\r\nSome updates about the latest push: \r\n- The rebroadcast logic now mines a block with a weight of 3/4 weight-of-incoming-block instead of 3/4 weight-of-maximum-block, to reduce bandwidth spikes \r\n- Rebased on master to resolve a silent merge conflict \r\n- We now store the last two values for the fee-rate cache, so we can use the previous if there has been a run since the block came in\r\n\r\nOne more note- looks like the latest push has caused a lock-order failure in the TSan build. I will address this soon! \r\n\r\nAlso, I've been monitoring the code using [this branch](https://github.com/amitiuttarwar/bitcoin/commits/2021-04-rebroadcast-monitoring2). In addition to a bunch of rebroadcast specific logging, the top commit adds two RPC endpoints: `getrebroadcastinfo` and `getgeneralbroadcastinfo` which reports counts of # of times we do events such as sending INVs and receiving GETDATAs. \r\n\r\nHere are a couple observations: \r\n- The patch has been running on my node with a huge mempool. I have `feefilter`: 0, `maxmempool`: 1000, `mempoolexpiry`:17520 (approx 2 years), and `minrelaytxfee`: 0, along with inbound connections enabled.\r\n- After running for a couple days, the rebroadcast INV:GETDATA ratio was 11-12:1, while the general ratio was 35-40:1. As the node ran for longer, both of these ratios have been reducing. After running for ~8 days, the rebroadcast ratio has been hovering around 9:1, and the general broadcast ratio has dropped to ~12:1. \r\n- The number of transactions identified for rebroadcast is very spiky, its often 0, or will hop up to 100-150 on a particular block. The latest push has changed the maximum weight to reflect the incoming block, so I'm curious to see \r\n\r\nIf anyone is interested in reviewing or running the monitoring code, that would be awesome! I'd love to gather more data :) \r\n\r\n--- \r\n\r\n@fjahr \r\n\r\n> But it seems this could be exploited by an attacker at almost zero cost, spamming these nodes with such txs that are high fee but invalid under the new rules. \r\n\r\nHm, so indeed an attacker could essentially nullify the utility of a mempool by spamming old nodes with now-policy-invalid transactions, but this is already the case. \r\n\r\nIn relation to this PR, we want to make sure we don't worsen, or automate that behavior. So `m_attempt_tracker` ensures that there are bounds on the number of times & frequency that we will rebroadcast any particular transaction. Combined with the `filterInventoryKnown` functionality, we can have some guarantees around bandwidth usage, especially asymmetric bandwidth usage, that nodes will have under normal or malicious worst case scenarios. However, I am not aiming to fix the existing issue around policy upgrades and attack vectors. \r\n\r\nDoes this help / make sense? \r\n\r\n\r\n@ariard \r\n\r\n> A lot of second-layers nodes and more and more Bitcoin applications have their own RBF-able rebroadcast logics, with their own frequencies and attempt limits. This new mechanism doesn't serve them well as their rebroadcast logics are going to leak a behavior breaking from the anonymous sets constituted by m_attempt_tracker. \r\n\r\nI don't understand what you are trying to say here. I don't find it unexpected or undesirable for various applications, users, companies to run custom rebroadcast logic. I also don't understand why you say that `m_attempt_tracker` is creating an anonymity set- it mostly serves as a way to mitigate frequently rebroadcasting any particular transaction, not the technique we use to identify rebroadcasts. \r\n\r\n\r\n> Another concern, I think this PR is making the assumption that big-sized node mempools will serve as some sort of transaction archives for the rest of the network by rebroadcasting a-week-ago-or-month-ago bottom of mempools now feerate compelling for block inclusion ?\r\n\r\nYes I think that's a fair way of looking at the long picture vision. \r\n\r\n> Further, I would attend a more detailed privacy attacker model, we might have other privacy-preserving rebroadcast strategies with cheaper bandwidth trade-offs...\r\n\r\nI agree that there are many possibilities & that it would be beneficial to have a more specific breakdown of privacy assumptions & guarantees. However, I don't think that we should gate concrete improvements on theoretically infinite problem spaces. I believe that the changes proposed in this PR & the intended direction of this project offer concrete, auditable improvements to privacy around 3rd parties deducing the source wallet of a transaction. \r\n\r\n\r\n@DISC30 thanks for the offer, I don't think this PR is the right place to discuss, so I emailed you (based on the email in your github). ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-832989504",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4691238867,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY5MTIzODg2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4691238867",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T20:35:25Z"
    },
    {
      "event": "subscribed",
      "id": 4691238871,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2OTEyMzg4NzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4691238871",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T20:35:25Z"
    },
    {
      "event": "mentioned",
      "id": 4691238875,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY5MTIzODg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4691238875",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T20:35:25Z"
    },
    {
      "event": "subscribed",
      "id": 4691238878,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2OTEyMzg4Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4691238878",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T20:35:25Z"
    },
    {
      "event": "mentioned",
      "id": 4691238880,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY5MTIzODg4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4691238880",
      "actor": {
        "login": "DISC30",
        "id": 48271670,
        "node_id": "MDQ6VXNlcjQ4MjcxNjcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/48271670?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DISC30",
        "html_url": "https://github.com/DISC30",
        "followers_url": "https://api.github.com/users/DISC30/followers",
        "following_url": "https://api.github.com/users/DISC30/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DISC30/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DISC30/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DISC30/subscriptions",
        "organizations_url": "https://api.github.com/users/DISC30/orgs",
        "repos_url": "https://api.github.com/users/DISC30/repos",
        "events_url": "https://api.github.com/users/DISC30/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DISC30/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T20:35:25Z"
    },
    {
      "event": "subscribed",
      "id": 4691238885,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2OTEyMzg4ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4691238885",
      "actor": {
        "login": "DISC30",
        "id": 48271670,
        "node_id": "MDQ6VXNlcjQ4MjcxNjcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/48271670?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DISC30",
        "html_url": "https://github.com/DISC30",
        "followers_url": "https://api.github.com/users/DISC30/followers",
        "following_url": "https://api.github.com/users/DISC30/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DISC30/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DISC30/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DISC30/subscriptions",
        "organizations_url": "https://api.github.com/users/DISC30/orgs",
        "repos_url": "https://api.github.com/users/DISC30/repos",
        "events_url": "https://api.github.com/users/DISC30/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DISC30/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T20:35:25Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T06:53:51Z",
      "updated_at": "2021-05-06T06:53:51Z",
      "source": {
        "issue": {
          "id": 876824606,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjMwODkzNDk1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21866",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21866/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21866/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21866/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21866",
          "number": 21866,
          "state": "closed",
          "state_reason": null,
          "title": "[Bundle 7/7] validation: Farewell, global Chainstate!",
          "body": "Based on:  #21767\r\n\r\nà la Mr. Sandman\r\n```\r\nMr. Chainman, bring me a tip (bung, bung, bung, bung)\r\nMake it the most work that I've ever seen (bung, bung, bung, bung)\r\nRewind old tip till we're at the fork point (bung, bung, bung, bung)\r\nThen tell it that it's time to call Con-nectTip\r\n\r\nChainman, I'm so alone (bung, bung, bung, bung)\r\nNo local objects to call my own (bung, bung, bung, bung)\r\nPlease make sure I have a ref\r\nMr. Chainman, bring me a tip!\r\n```\r\n\r\nThis is the last bundle in the #20158 series. Thanks everyone for their diligent review.\r\nI would like to call attention to https://github.com/bitcoin/bitcoin/issues/21766, where a few leftover improvements were collated.\r\n\r\n- Remove globals:\r\n  - `ChainstateManager g_chainman`\r\n  - `CChainState& ChainstateActive()`\r\n  - `CChain& ChainActive()`\r\n- Remove all review-only assertions.",
          "user": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21866",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21866",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21866.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21866.patch"
          },
          "closed_at": "2021-06-12T03:29:52Z",
          "created_at": "2021-05-05T20:51:55Z",
          "updated_at": "2022-08-16T17:24:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 833755057,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzc1NTA1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833755057",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T18:22:27Z",
      "updated_at": "2021-05-06T18:24:50Z",
      "author_association": "MEMBER",
      "body": "@amitiuttarwar \r\n\r\n> I don't understand what you are trying to say here. I don't find it unexpected or undesirable for various applications, users, companies to run custom rebroadcast logic. \r\n\r\nI think the problem this work is alleguing to solve is \"How to improve Bitcoin Core Wallet rebroadcast privacy\". The solution proposed is to rebroadcast _any_ transaction identified as missing from a block based on feerate expectations. This new behavior is justifying to improve privacy for the following reason \"If a spy observes a bitcoin core node rebroadcasting a transaction, it would not longer know that the node has wallet enabled\" among others. I believe we agree this assumption is function of *node* rebroadcasting module being activated by default.\r\n\r\nHowever, and that's my point, a lot of full-nodes are hosting Bitcoin applications with custom rebroadcast logic, and this trend is likely to increase in the future. So those full-nodes operators, with custom rebroadcast logics and not using the bitcoin core wallet, won't be incentivized to activate by default *node* rebroadcasting as it doesn't enhance privacy of their transactions. For this reason, improvement of Bitcoin Core wallet rebroadcast privacy as alleged by this work might reveal a tight upper bound in the future, under our optimistic intuitions. To be more concrete, if only 5% of node operators activate the node rebroadcast module, it won't offer the same level of rebroadcast privacy that if it's activated on 80% of the network IMHO.\r\n\r\nI believe we should address this concern before to propose default activation of this module in the future, or at least gauge bandwidth increases are insignificant to be borne by default. I'll try to run the patch soon to help there :)\r\n\r\nAgain, as I noticed in my previous comment, this work is of course a valuable privacy improvement for Bitcoin Core wallet users, or any Bitcoin software with the same rebroadcast strategy.\r\n\r\n> I also don't understand why you say that m_attempt_tracker is creating an anonymity set- it mostly serves as a way to mitigate frequently rebroadcasting any particular transaction, not the technique we use to identify rebroadcasts.\r\n\r\nIIUC, a transaction is selected for rebroadcast if it passes block min feerate, reattempt interval and max reattempt count. However those 2 late checks aren't applied if the transaction isn't a rebroadcast entry. So `m_attempt_tracker` and its content is part of the logic determining the rebroadcast set. From an attacker viewpoint, this rebroadcast set constitutes an anonymity set. Yes `m_attempt_tracker` isn't a technique to identify rebroadcast but it's used to filter them. Though I agree, for clarify of conversation, it would have been easier to employ as a term node rebroadcast logic.\r\n\r\n> I agree that there are many possibilities & that it would be beneficial to have a more specific breakdown of privacy assumptions & guarantees. However, I don't think that we should gate concrete improvements on theoretically infinite problem spaces. I believe that the changes proposed in this PR & the intended direction of this project offer concrete, auditable improvements to privacy around 3rd parties deducing the source wallet of a transaction.\r\n\r\nAnd I share the same feeling, we would be better off not traversing an infinite problem space. Though, unless you propose an efficient problem space traversal algorithm, we're left with raising and proceeding problem if _relevant_ one by one :/ FYI, IETF does have such design questions checklist about Internet protocols (see https://www.rfc-editor.org/rfc/rfc3426.html), though ofc not suiting per se Bitcoin space. Otherwise, I would recall that this project history showed us \"concrete improvements\" not solving the privacy issues alleged while introducing subtle DoS issues (e.g bloom filters)",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-833755057",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4696972286,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY5Njk3MjI4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4696972286",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T18:22:27Z"
    },
    {
      "event": "subscribed",
      "id": 4696972290,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2OTY5NzIyOTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4696972290",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T18:22:27Z"
    },
    {
      "event": "commented",
      "id": 833784113,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzc4NDExMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833784113",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T19:01:34Z",
      "updated_at": "2021-05-06T19:01:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ariard: To summarize, I think what you are concerned with is the rebroadcast privacy offered by this module to nodes that are using it assuming only a minority (perhaps a small minority) of the network is using it. This module is currently off by default and according to you (I have no reason to doubt you) a significant proportion of the network is already running custom rebroadcast logic.\r\n\r\nTo me it appears nodes that choose to use the module benefit and nodes that aren't using it aren't negatively impacted. As long as that is true (and you agree with that) it doesn't matter if only a (small) minority are using it? (Of course in time there could be a lot more than a small minority of the network using it.) Or is your concern with nodes that choose to use this module when they really shouldn't be using it?\r\n\r\n",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-833784113",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4697201382,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY5NzIwMTM4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4697201382",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T19:01:35Z"
    },
    {
      "event": "subscribed",
      "id": 4697201383,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2OTcyMDEzODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4697201383",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T19:01:35Z"
    },
    {
      "event": "commented",
      "id": 833970247,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzk3MDI0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833970247",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-07T00:29:17Z",
      "updated_at": "2021-05-07T00:29:17Z",
      "author_association": "NONE",
      "body": "> However, and that's my point, a lot of full-nodes are hosting Bitcoin applications with custom rebroadcast logic, and this trend is likely to increase in the future\r\n\r\nInteresting. Can you please share few examples?",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-833970247",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "reviewed",
      "id": 654234067,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU0MjM0MDY3",
      "url": null,
      "actor": null,
      "commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looking really good!\r\n\r\nI think commits 9301c280e139132413092abde1f372b736f9af54 (_[rebroadcast] Delete TxRebroadcastHandler default copy member functions._) and 343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c (_[doc] Improve description for m_attempt_tracker_) can be squashed with earlier commits.\r\n",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-654234067",
      "submitted_at": "2021-05-07T10:59:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-07T14:47:31Z",
      "updated_at": "2021-05-07T14:47:31Z",
      "source": {
        "issue": {
          "id": 879140859,
          "node_id": "MDU6SXNzdWU4NzkxNDA4NTk=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21876",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21876/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21876/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21876/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/21876",
          "number": 21876,
          "state": "closed",
          "state_reason": "completed",
          "title": "Broadcast a transaction to specific nodes",
          "body": "**Is your feature request related to a problem? Please describe.**\r\nThere is no argument in [`sendrawtransaction`](https://bitcoincore.org/en/doc/0.21.0/rpc/rawtransactions/sendrawtransaction/) to mention the peers \r\n\r\n**Describe the solution you'd like**\r\nAdd an argument in `sendrawtransaction` that accepts one or more addresses for nodes.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nhttps://github.com/libbtc/libbtc#send-a-raw-transaction-to-specific-peers-on-mainnet-and-show-debug-infos-use-a-timeout-of-5s\r\n\r\n**Additional context**\r\n\r\n> Note that the transaction will be sent unconditionally to **all peers**, so using this\r\nfor manual rebroadcast may degrade **privacy** by leaking the transaction's origin, as\r\nnodes will normally not rebroadcast non-wallet transactions already in their mempool.\r\n\r\n<sup>https://bitcoincore.org/en/doc/0.21.0/rpc/rawtransactions/sendrawtransaction/</sup>\r\n\r\nRebroadcast thing mentioned above will be fixed in https://github.com/bitcoin/bitcoin/pull/21061 however this option will still be useful.",
          "user": {
            "login": "ghost",
            "id": 10137,
            "node_id": "MDQ6VXNlcjEwMTM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 13,
          "closed_at": "2022-08-11T15:24:23Z",
          "created_at": "2021-05-07T14:47:30Z",
          "updated_at": "2023-03-23T07:28:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 834668685,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDY2ODY4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/834668685",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-07T18:16:26Z",
      "updated_at": "2021-05-07T18:18:16Z",
      "author_association": "MEMBER",
      "body": "@michaelfolkson \r\n\r\n> @ariard: To summarize, I think what you are concerned with is the rebroadcast privacy offered by this module to nodes that are using it assuming only a minority (perhaps a small minority) of the network is using it. This module is currently off by default and according to you (I have no reason to doubt you) a significant proportion of the network is already running custom rebroadcast logic.\r\n\r\nYes you're summing up well my concern, though significant would need more qualification. I gave some rough numbers above with 10k of Lightning nodes for 100k estimated full-nodes.\r\n\r\n> To me it appears nodes that choose to use the module benefit and nodes that aren't using it aren't negatively impacted. As long as that is true (and you agree with that) it doesn't matter if only a (small) minority are using it? (Of course in time there could be a lot more than a small minority of the network using it.) Or is your concern with nodes that choose to use this module when they really shouldn't be using it?\r\n\r\nWithholding the point on risks of [node fingerprint](https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615156761), I agree it should benefit nodes that are using this module and don't have negative impacts for not-using nodes/other network clients. It doesn't matter if only a small minority are using it, though due to the more limited set of module users, rebroadcast privacy won't be as good as alleged. Where I'm really skeptical is about *activating by default* this module in the future and thus inflating everyone's bandwidth if only a minority of nodes operators are benefiting from the feature.\r\n\r\n> I have no reason to doubt you\r\n\r\nPlease always doubt what I'm saying, I might be wrong or approximate :)\r\n\r\n@prayank23 \r\n\r\n> Interesting. Can you please share few examples?\r\n\r\nMost of Lightning nodes implementations are able to CPFP their transactions. It might be automatically triggered by a block-based timer, a user-selected once-for-all height confirmation or manually through custom's RPC. For eg see lnd's `bumpfee` or dual-funded channel spec with a new `init_rbf` message. For CPFP to be efficient, you will rebroadcast the parent, and its frequency is matter of suiting application/user requirements, likely not matching the new rebroadcast policy introduced by this module.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-834668685",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4703818204,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDcwMzgxODIwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4703818204",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-07T18:16:26Z"
    },
    {
      "event": "subscribed",
      "id": 4703818210,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3MDM4MTgyMTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4703818210",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-07T18:16:26Z"
    },
    {
      "event": "mentioned",
      "id": 4703818223,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDcwMzgxODIyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4703818223",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-07T18:16:26Z"
    },
    {
      "event": "subscribed",
      "id": 4703818227,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3MDM4MTgyMjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4703818227",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-07T18:16:26Z"
    },
    {
      "event": "mentioned",
      "id": 4703818235,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDcwMzgxODIzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4703818235",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-07T18:16:26Z"
    },
    {
      "event": "subscribed",
      "id": 4703818240,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3MDM4MTgyNDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4703818240",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-07T18:16:26Z"
    },
    {
      "event": "commented",
      "id": 835373212,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzNTM3MzIxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835373212",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-08T13:54:07Z",
      "updated_at": "2021-05-08T13:54:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ariard:\r\n\r\n> Where I'm really skeptical is about activating by default this module in the future and thus inflating everyone's bandwidth if only a minority of nodes operators are benefiting from the feature.\r\n\r\n> Most of Lightning nodes implementations are able to CPFP their transactions. It might be automatically triggered by a block-based timer, a user-selected once-for-all height confirmation or manually through custom's RPC. For eg see lnd's bumpfee or dual-funded channel spec with a new init_rbf message. For CPFP to be efficient, you will rebroadcast the parent, and its frequency is matter of suiting application/user requirements, likely not matching the new rebroadcast policy introduced by this module.\r\n\r\nOk thanks, makes sense. Based on that I'm a Concept ACK, Approach ACK for this particular PR (and it sounds like @ariard isn't NACKing this PR either). Any future PR turning this module on by default will need a more rigorous discussion based on above considerations.",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-835373212",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4707831193,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDcwNzgzMTE5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4707831193",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-08T13:54:08Z"
    },
    {
      "event": "subscribed",
      "id": 4707831194,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3MDc4MzExOTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4707831194",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-08T13:54:08Z"
    },
    {
      "event": "reviewed",
      "id": 655550429,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU1NTUwNDI5",
      "url": null,
      "actor": null,
      "commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-655550429",
      "submitted_at": "2021-05-10T11:50:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "reviewed",
      "id": 656231133,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU2MjMxMTMz",
      "url": null,
      "actor": null,
      "commit_id": "358a486935c768ab42a980f59493ac38e1dd41e4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-656231133",
      "submitted_at": "2021-05-11T03:46:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4739797209,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDczOTc5NzIwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4739797209",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-13T03:43:46Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-13T16:25:19Z",
      "updated_at": "2021-05-13T16:25:19Z",
      "source": {
        "issue": {
          "id": 869164323,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjI0NTc0MDE4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21789",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21789/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21789/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21789/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21789",
          "number": 21789,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Remove ::Params() global from CChainState",
          "body": "The `::Params()` global is verbose and confusing. Also it makes tests a bit harder to write because they'd have to mock a global.\r\n\r\nFix all issues by simply using a member variable that points to the right params.\r\n\r\n(Can be reviewed with `--word-diff-regex=.`)",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21789",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21789",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21789.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21789.patch"
          },
          "closed_at": "2021-06-29T03:23:50Z",
          "created_at": "2021-04-27T18:51:20Z",
          "updated_at": "2022-08-18T19:51:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4748147144,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc0ODE0NzE0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4748147144",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-14T17:30:39Z"
    },
    {
      "event": "reviewed",
      "id": 660312877,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwMzEyODc3",
      "url": null,
      "actor": null,
      "commit_id": "1cc12f956a30d1654cc5060e00f59dc4045a88d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-660312877",
      "submitted_at": "2021-05-15T07:01:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4757441060,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc1NzQ0MTA2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4757441060",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-17T23:41:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4757800176,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc1NzgwMDE3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4757800176",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-18T02:05:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4762165545,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc2MjE2NTU0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4762165545",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-18T17:50:21Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWVmYTdmZmJhNDIzM2NlNjNhMzlhMGZlODAzNjVkZDRmZTU4ODE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
      "tree": {
        "sha": "e71d2f8ce800ce6745eb9353cca63512e93e09e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e71d2f8ce800ce6745eb9353cca63512e93e09e5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/741749a6159eb68dd8a3c5ef0d1701337931e6df",
          "sha": "741749a6159eb68dd8a3c5ef0d1701337931e6df",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/741749a6159eb68dd8a3c5ef0d1701337931e6df"
        }
      ],
      "message": "[interface] Add block param to the UpdatedBlockTip interface function",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-11T23:20:13Z"
      },
      "sha": "c5efa7ffba4233ce63a39a0fe80365dd4fe58816"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMThkZTE4Y2EyN2JkYTQ2ZTdlMGNmZDZjZThlZjQ3OTFmZTRlNGI5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
      "tree": {
        "sha": "e50d66c37914200fceeb12efab2a7d64e0a7b0c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e50d66c37914200fceeb12efab2a7d64e0a7b0c1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
          "sha": "c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c5efa7ffba4233ce63a39a0fe80365dd4fe58816"
        }
      ],
      "message": "[rebroadcast] Introduce a mempool rebroadcast module\n\nIntroduce a module that rebroadcasts transactions from the node instead of the\nwallet. This module is currently unused.\n\nThe fundamental difference from the existing wallet rebroadcast logic is that\nwe apply the logic to all transactions, not just \"mine\". In order to prevent\nspam, we need to carefully select which transactions to rebroadcast. As of this\ncommit, we select the transactions in the mempool that have the highest\nfeerate.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T17:56:51Z"
      },
      "sha": "b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGIzNDJmYTdhMmMzMWUzZmNkODQ1M2UzMzdlOWIzNjAxM2E3MWZi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
      "tree": {
        "sha": "f533dd52c6c6397b9a7b4d73f0786e1d87a401d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f533dd52c6c6397b9a7b4d73f0786e1d87a401d0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
          "sha": "b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9"
        }
      ],
      "message": "[rebroadcast] Reduce amount of rebroadcast candidates\n\nInstead of determining the maximum size of the rebroadcast candidates based on\nthe maximum allowed block weight, calculate based on the incoming block that\ntriggered the mechanism. This will reduce the possible bandwidth usage when\nsmaller blocks are mined, for example, an empty block.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-13T01:57:16Z"
      },
      "sha": "a4b342fa7a2c31e3fcd8453e337e9b36013a71fb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWY1ZDBkNzNiOWU5NTBkYWExMjA0ODY1ZmM4MTMyYTJlNmZkYmU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
      "tree": {
        "sha": "8b97b35eae02859e17894b5518ae8f64be4fe1f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b97b35eae02859e17894b5518ae8f64be4fe1f2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
          "sha": "a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb"
        }
      ],
      "message": "[p2p] Start rebroadcasting mempool transactions\n\nAfter we process a block, invoke the rebroadcast module to identify if there\nare any transactions we would have expected to be included, and queue them up\nfor relay to our peers.\n\nThis will only identify rebroadcast candidates, as transactions will be subject\nto RelayTransaction and subsequent SendMessages logic, such as checking\nfilterInventoryKnown, the rate limit logic of INVENTORY_BROADCAST_MAX, etc.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-29T00:22:25Z"
      },
      "sha": "61f5d0d73b9e950daa1204865fc8132a2e6fdbe9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzYzNWI0ODc0YWUxMjNiYTU0YWVjMmY5MzYzY2EzY2ZmNGIwNzll",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23635b4874ae123ba54aec2f9363ca3cff4b079e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/23635b4874ae123ba54aec2f9363ca3cff4b079e",
      "tree": {
        "sha": "cd4e9048894bc71cd7c8262e43224e2411ae68c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd4e9048894bc71cd7c8262e43224e2411ae68c0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
          "sha": "61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9"
        }
      ],
      "message": "[p2p] Implement flag to disable rebroadcast\n\nTo initially roll out and test, default the node rebroadcast functionality to\nfalse. Since this is for developer testing, make this a hidden option so we do\nnot need to maintain an additional option in the long-term.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-11-05T20:03:33Z"
      },
      "sha": "23635b4874ae123ba54aec2f9363ca3cff4b079e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDVkMTIzODM4MTVmMzc2NTMyYTIxZjYyYzM5YmUyY2RjYmE0NjRh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d5d12383815f376532a21f62c39be2cdcba464a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3d5d12383815f376532a21f62c39be2cdcba464a",
      "tree": {
        "sha": "ecd024370d3e9744f8a5f007874f02438f3f8241",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecd024370d3e9744f8a5f007874f02438f3f8241"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23635b4874ae123ba54aec2f9363ca3cff4b079e",
          "sha": "23635b4874ae123ba54aec2f9363ca3cff4b079e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/23635b4874ae123ba54aec2f9363ca3cff4b079e"
        }
      ],
      "message": "[mining] Add recency condition on block creation to get rebroadcast set\n\nWhen identifying the rebroadcast candidates, only select transactions that\nentered the mempool REBROADCAST_MIN_TX_AGE ago. This gives the transactions a\nchance to have been picked up by a block, versus one that just entered our\nmempool.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T15:11:14Z"
      },
      "sha": "3d5d12383815f376532a21f62c39be2cdcba464a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjk3MGM5NDU3NzczZmQ3OTA3Y2Q4MmU5ZjA4NTIzODQ4ZjNhZGM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32970c9457773fd7907cd82e9f08523848f3adc6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/32970c9457773fd7907cd82e9f08523848f3adc6",
      "tree": {
        "sha": "297f2082c6a243fc038009ccebaaf96542e1e50c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/297f2082c6a243fc038009ccebaaf96542e1e50c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d5d12383815f376532a21f62c39be2cdcba464a",
          "sha": "3d5d12383815f376532a21f62c39be2cdcba464a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3d5d12383815f376532a21f62c39be2cdcba464a"
        }
      ],
      "message": "[p2p] Rebroadcast skips the block-validity check\n\nIt's not worth throwing a runtime error if the rebroadcast block fails the\nvalidity checks. Also, its an unnecessary use of resources to be regularly\nperforming the check.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-12-18T01:18:10Z"
      },
      "sha": "32970c9457773fd7907cd82e9f08523848f3adc6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjg1MzZhMWQzYmJmMzUwMmY0M2ExZDFjNTRjZGJjN2FkZTczYzg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
      "tree": {
        "sha": "5d1dbd7ec4a6036434315d09b5a6dd05d7e9590e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d1dbd7ec4a6036434315d09b5a6dd05d7e9590e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32970c9457773fd7907cd82e9f08523848f3adc6",
          "sha": "32970c9457773fd7907cd82e9f08523848f3adc6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/32970c9457773fd7907cd82e9f08523848f3adc6"
        }
      ],
      "message": "[mining] Use the new option to skip unconditional logging.\n\nThe unconditional logging would make sense if a user is calling\nCreateNewBlock to mine blocks. However, it seems confusing as a\nside effect of normal transaction relay, so skip it.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-28T22:37:08Z"
      },
      "sha": "028536a1d3bbf3502f43a1d1c54cdbc7ade73c87"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4762460882,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc2MjQ2MDg4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4762460882",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-18T18:55:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4763222086,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc2MzIyMjA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4763222086",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-18T21:56:18Z"
    },
    {
      "event": "reviewed",
      "id": 662753505,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYyNzUzNTA1",
      "url": null,
      "actor": null,
      "commit_id": "b927ab97c7a66c0addff17f57e92054ad3547519",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-662753505",
      "submitted_at": "2021-05-19T04:14:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T14:37:16Z",
      "updated_at": "2021-05-20T14:37:16Z",
      "source": {
        "issue": {
          "id": 840540283,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjAwNDEyMDM4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21527",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21527/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21527/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21527/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21527",
          "number": 21527,
          "state": "closed",
          "state_reason": null,
          "title": "net_processing: lock clean up",
          "body": "`cs_sendProcessing` is replaced by a private mutex in net_processing, non-orphan-specific things are moved out from `g_cs_orphans` and `g_cs_orphans` is replaced by a private mutex in txorphanage.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21527",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21527.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21527.patch"
          },
          "closed_at": "2022-08-29T06:54:34Z",
          "created_at": "2021-03-25T04:16:30Z",
          "updated_at": "2022-08-29T06:54:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 667349207,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY3MzQ5MjA3",
      "url": null,
      "actor": null,
      "commit_id": "b927ab97c7a66c0addff17f57e92054ad3547519",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-667349207",
      "submitted_at": "2021-05-25T03:04:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "reviewed",
      "id": 667355760,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY3MzU1NzYw",
      "url": null,
      "actor": null,
      "commit_id": "b927ab97c7a66c0addff17f57e92054ad3547519",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#pullrequestreview-667355760",
      "submitted_at": "2021-05-25T03:20:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-28T11:44:47Z",
      "updated_at": "2021-05-28T11:44:47Z",
      "source": {
        "issue": {
          "id": 421531882,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjYxNTYxNTQ3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15606",
          "number": 15606,
          "state": "closed",
          "state_reason": null,
          "title": "assumeutxo",
          "body": "**See the proposal for assumeutxo [here](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal).**\r\n\r\nTesting instructions can be found below the \"Progress\" section.\r\n\r\n---\r\n\r\n### Progress\r\n\r\nAll items here have corresponding commits here, but are unchecked if they haven't been merged yet.\r\n\r\n- [x] **Chainstate interface**\r\n  - https://github.com/bitcoin/bitcoin/pull/15976\r\n- [x] **Localize chainstate data**\r\n  - https://github.com/bitcoin/bitcoin/pull/16443\r\n- [x] **Share block data**\r\n  - https://github.com/bitcoin/bitcoin/pull/16194\r\n- [x] **Deglobalize chainstate**\r\n  - https://github.com/bitcoin/bitcoin/pull/15948\r\n- [x] **UpdateTip/CheckBlockIndex** modifications\r\n  - https://github.com/bitcoin/bitcoin/pull/21526\r\n- [x] **ChainstateManager**\r\n  - https://github.com/bitcoin/bitcoin/pull/17737\r\n- [x] **Mempool**\r\n  - https://github.com/bitcoin/bitcoin/pull/22415\r\n- [x] **LoadBlockIndex**\r\n  - https://github.com/bitcoin/bitcoin/pull/23174\r\n- [x] **Init/teardown**\r\n  - https://github.com/bitcoin/bitcoin/pull/24232\r\n  - https://github.com/bitcoin/bitcoin/pull/25667\r\n  - https://github.com/bitcoin/bitcoin/pull/25740\r\n- [x] **Wallet**: includes avoiding rescans when assumed-valid block data is in use\r\n  - https://github.com/bitcoin/bitcoin/pull/23997\r\n  - https://github.com/bitcoin/bitcoin/pull/26282\r\n- [ ] **P2P**: minor changes are made to `init.cpp` and `net_processing.cpp` to make simultaneous IBD across multiple chainstates work.\r\n  - #24008 \r\n- [ ] **Pruning**: implement correct pruning behavior when using a background chainstate\r\n- [ ] **Blockfile separation**: to prevent \"fragmentation\" in blockfile storage, have background chainstates use separate blockfiles from active snapshot chainstates to avoid interleaving heights and impairing pruning.\r\n- [ ] **Indexing**: all existing `CValidationInterface` events are given with an additional parameter, ChainstateRole, and all indexers ignore events from ChainstateRole::ASSUMEDVALID so that indexation only happens sequentially.\r\n- [ ] Raise error when both `-reindex` and assumeutxo are in use.\r\n- [ ] **RPC**: introduce RPC commands `dumptxoutset`, `loadtxoutset`, and (the probably temporary) `monitorsnapshot`.\r\n  - https://github.com/bitcoin/bitcoin/pull/16899\r\n- [ ] **Release docs & first assumeutxo commitment**: add notes and a particular assumeutxo hash value for first AU-enabled release.\r\n  - This will complete the project and allow use of UTXO snapshots for faster node bootstrap.\r\n- [ ] *(optional)* **Coinscache optimization**: allow flushing chainstate data without emptying the coins cache; results in better performance after UTXO snapshot load.\r\n  - https://github.com/bitcoin/bitcoin/pull/17487\r\n  - https://github.com/bitcoin/bitcoin/pull/27008\r\n\r\n---\r\n\r\n### Testing\r\n\r\n#### For fun (~5min)\r\n\r\nIf you want to do a quick test, you can run `./contrib/devtools/test_utxo_snapshots.sh` and follow the instructions. This is mostly obviated by the functional tests, though.\r\n\r\n#### For real (longer)\r\n\r\nIf you'd like to experience a real usage of assumeutxo, you can do that too.\r\nI've cut a new snapshot at height 788'000 (http://img.jameso.be/utxo-788000.dat - but you can do it yourself with `./contrib/devtools/utxo_snapshot.sh` if you want). Download that, and then create a datadir for testing:\r\n```sh\r\n$ cd ~/src/bitcoin  # or whatever\r\n\r\n# get the snapshot\r\n$ curl http://img.jameso.be/utxo-788000.dat > utxo-788000.dat\r\n\r\n# you'll want to do this if you like copy/pasting \r\n$ export AU_DATADIR=/home/${USER}/au-test # or wherever\r\n\r\n$ mkdir ${AU_DATADIR}\r\n$ vim ${AU_DATADIR}/bitcoin.conf\r\n\r\ndbcache=8000  # or, you know, something high\r\nblockfilterindex=1\r\ncoinstatsindex=1\r\nprune=3000\r\nlogthreadnames=1\r\n```\r\nObtain this branch, build it, and then start bitcoind:\r\n```sh\r\n$ git remote add jamesob https://github.com/jamesob/bitcoin\r\n$ git fetch jamesob utxo-dumpload-compressed\r\n$ git checkout jamesob/utxo-dumpload-compressed\r\n\r\n$ ./configure $conf_args && make  # (whatever you like to do here)\r\n\r\n# start 'er up and watch the logs\r\n$ ./src/bitcoind -datadir=${AU_DATADIR}\r\n```\r\nThen, in some other window, load the snapshot\r\n```sh\r\n$ ./src/bitcoin-cli -datadir=${AU_DATADIR} loadtxoutset $(pwd)/utxo-788000.dat\r\n```\r\n\r\nYou'll see some log messages about headers retrieval and waiting to see the snapshot in the headers chain. Once you get the full headers chain, you'll spend a decent amount of time (~10min) loading the snapshot, checking it, and flushing it to disk. After all that happens, you should be syncing to tip in pretty short order, and you'll see the occasional `[background validation]` log message go by.\r\n\r\nIn yet another window, you can check out chainstate status with\r\n```sh\r\n$ ./src/bitcoin-cli -datadir=${AU_DATADIR} getchainstates\r\n```\r\nas well as usual favorites like `getblockchaininfo`.\r\n\r\n---\r\n\r\n### Original change description\r\n\r\nFor those unfamiliar with assumeutxo, here's a brief summary from [the issue](https://github.com/bitcoin/bitcoin/issues/15605) (where any conceptual discussion not specific to this implementation should happen):\r\n\r\n> assumeutxo would be a way to initialize a node using a headers chain and a serialized version of the UTXO state which was generated from another node at some block height. A client making use of this UTXO \"snapshot\" would specify a hash and expect the content of the resulting UTXO set to yield this hash after deserialization. \r\n> \r\n> This would allow users to bootstrap a usable pruned node & wallet far more quickly (and with less disk usage) than waiting for a full initial block download to complete, since we only have to sync blocks between the base of the snapshot and the current network tip. Needless to say this is at expense of accepting a different trust model, though how different this really ends up being from `assumevalid` in effect is worth debate.\r\n\r\nIn short, this is an interesting change because it would allow nodes to get up and running within minutes given a ~3GB file (at time of writing) under an almost identical trust model to assumevalid.\r\n\r\nIn this implementation, I add a few RPC commands: `dumptxoutset` creates a UTXO snapshot and writes it to disk, and `loadtxoutset` intakes a snapshot from disk, constructs and activates chainstate based on it, and continues a from-scratch initial block download in the background for the sole purpose of validating the snapshot. Once the snapshot is validated, we throw away the chainstate used for background validation.\r\n\r\nThe assumeutxo procedure as implemented is as follows:\r\n\r\n1. A UTXO snapshot is loaded with the `loadtxoutset <path>` RPC command.\r\n1. A new chainstate (`CChainState`) is initialized using `ChainstateManager::ActivateSnapshot()`:\r\n   1. The serialized UTXO data is read in and various sanity checks are performed, e.g. compare expected coin count, recompute the hash and compare it with assumeutxo hash in source code.\r\n   1. We \"fast forward\" `new_chainstate->m_chain` to have a tip at the base of the snapshot (with or without block data). Lacking block data, we fake the `nTx` counts of the constituent `CBlockIndex` entries.\r\n   1. `LoadChainTip()` is called on the new snapshot and it is installed as our active chainstate.\r\n1. The new assumed-valid chainstate is now our active, and so that enters IBD until it is synced to the network's tip. Presumably the snapshot would be taken relatively close to the current tip but far enough away to avoid meaningful reorgs, say 10,000 blocks deep.\r\n1. Once the active chainstate is out of IBD, our old validation chain continues IBD \"in the background\" while the active chainstate services requests from most of the system.\r\n1. Once the background validation chainstate reaches a height equal the base of the snapshot, we take the hash of its UTXO set and ensure it equals the expected hash based on the snapshot. If the hashes are equivalent, we delete the validation chainstate and move on without event; if they aren't, we log loudly and fall back to the validation chainstate (we should probably just shut down).\r\n\r\nThe implicit assumption is that the background validation chain will always be a subset of the assumed-valid snapshot chain while the latter is active. We don't properly handle reorgs that go deeper than the base of the snapshot.\r\n\r\n### Changes (already merged/outdated)\r\n\r\n![chainstate-beforeafter (1)](https://user-images.githubusercontent.com/73197/54435797-a16b0780-4707-11e9-89c3-c90b5686804d.png)\r\n \r\nThe crux of this change is in removing any assumptions in the codebase that there is a single chainstate, i.e. any references to global variables `chainActive`, `pcoinsTip`, et al. need to be replaced with functions that return the relevant chainstate data at that moment in time. This change also takes `CChainState` to its logical conclusion by making it more self-contained - any references to globals like `chainActive` are removed with class-local references (`m_chain`).\r\n\r\nA few minor notes on the implementation:\r\n\r\n- When we attempt to load a wallet with a BestBlock locator lower than the base of a snapshot and the snapshot has not yet been validated, we refuse to load the wallet.\r\n\r\n- For additional notes, see [the new assumeutxo docs](https://github.com/jamesob/bitcoin/blob/utxo-dumpload-compressed/doc/assumeutxo.md).",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 66,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15606",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15606",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15606.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15606.patch"
          },
          "closed_at": "2023-05-08T15:09:24Z",
          "created_at": "2019-03-15T13:58:22Z",
          "updated_at": "2023-05-08T15:09:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODBhMDFhMjNjZDdiMDZjOTA5YjFkNGVlNjVhNjRlODZkNjA5ODA5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f80a01a23cd7b06c909b1d4ee65a64e86d609809",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f80a01a23cd7b06c909b1d4ee65a64e86d609809",
      "tree": {
        "sha": "1f22d6425976a5d75cf2ef2fa08812b2a611a9a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f22d6425976a5d75cf2ef2fa08812b2a611a9a3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
          "sha": "028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87"
        }
      ],
      "message": "[mining] Calculate the minimum fee rate for transaction inclusion.\n\nThe functionality introduced in this commit is currently unused. The ability\nto calculate the minimum fee rate for a transaction to be included into a block\nis used to identify the top of the mempool, and later applied to filter the\nrebroadcast candidates before sending them to peers.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-12-28T22:46:02Z"
      },
      "sha": "f80a01a23cd7b06c909b1d4ee65a64e86d609809"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWE0MWU2YTcyMDYxMTlhZmQ1Y2ViOWNjZjdkNTFjZmZkNzUzZWU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
      "tree": {
        "sha": "57e820aecf44ada9a999f912a97a8b449c23344d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57e820aecf44ada9a999f912a97a8b449c23344d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f80a01a23cd7b06c909b1d4ee65a64e86d609809",
          "sha": "f80a01a23cd7b06c909b1d4ee65a64e86d609809",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f80a01a23cd7b06c909b1d4ee65a64e86d609809"
        }
      ],
      "message": "[rebroadcast] Apply a fee rate filter\n\nEvery minute, calculate the threshold fee rate for a transaction to be\nconsidered at the top of the mempool, and cache this value. Apply this as a\ncondition when identifying rebroadcast candidates.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-12-29T20:17:28Z"
      },
      "sha": "25a41e6a7206119afd5ceb9ccf7d51cffd753ee4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjE1ZGQzZGY4N2QyNThiNTdlMDQzYzc4ZmFiZmE4NTMyNzM3Nzgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a615dd3df87d258b57e043c78fabfa8532737780",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a615dd3df87d258b57e043c78fabfa8532737780",
      "tree": {
        "sha": "412079da3d7f9828a67ccc5e8e0dcf2706620be8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/412079da3d7f9828a67ccc5e8e0dcf2706620be8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
          "sha": "25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4"
        }
      ],
      "message": "[rebroadcast] Track rebroadcast attempts\n\nIntroduce a boost::multi_index to track our previous rebroadcast attempts. We\nuse this information primarily to ensure we don't exceed a maximum number of\nrebroadcast attempts. This allows transactions to genuinely expire from the\nmajority of mempools. We disable automatic rebroadcasts because the\nconceptually desired behavior should be that after a certain amount of time,\nonly the source wallet should rebroadcast the transaction. (Of course, we\ncannot enforce this on a decentralized network, but design the default behavior\nto uphold this idea.)",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-26T23:06:27Z"
      },
      "sha": "a615dd3df87d258b57e043c78fabfa8532737780"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDhmNDkzMGZhNTY3NWU3ZjM2ZGJmOTE2ZjQwOGEyMDQwZDJjZDVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
      "tree": {
        "sha": "da6459caef770abe9731c185657ad4a4d94168cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da6459caef770abe9731c185657ad4a4d94168cb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a615dd3df87d258b57e043c78fabfa8532737780",
          "sha": "a615dd3df87d258b57e043c78fabfa8532737780",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a615dd3df87d258b57e043c78fabfa8532737780"
        }
      ],
      "message": "[rebroadcast] Delete TxRebroadcastHandler default copy member functions.\n\nSince the attempt tracker is implemented as a unique pointer, it should not be\ncopied. Delete the special member functions that would allow copying the\nTxRebroadcastHandler, and thus the unique pointer member variable (copy\nconstructor and copy assignment operator).",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-04-07T18:44:27Z"
      },
      "sha": "d48f4930fa5675e7f36dbf916f408a2040d2cd5a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWNjYzFlMjliMmU4MmZlNzVlNmFhODIyNjliYjU0ZTkwNmViMjc0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
      "tree": {
        "sha": "81b3ee2e118953fabd4bc66fad2b400792d9c66d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81b3ee2e118953fabd4bc66fad2b400792d9c66d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
          "sha": "d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d48f4930fa5675e7f36dbf916f408a2040d2cd5a"
        }
      ],
      "message": "[rebroadcast] Add a bloom filter for txns that have been max rebroadcasted.\n\nWhen a transaction hits the maximum on the attempt tracker, add it to a bloom\nfilter. Don't rebroadcast transactions present in the bloom filter. This\nensures that we won't repeatedly rebroadcast transactions that have hit the\nMAX_REBROADCAST_COUNT, even if there are more transactions than can fit in\nm_attempt_tracker at once.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-13T23:30:46Z"
      },
      "sha": "8eccc1e29b2e82fe75e6aa82269bb54e906eb274"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Mzc3N2RhOWZlMTAxOGU1MzY4ZTY5YjI1N2RkMWU0MDFlYmEyNjE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83777da9fe1018e5368e69b257dd1e401eba2619",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/83777da9fe1018e5368e69b257dd1e401eba2619",
      "tree": {
        "sha": "b6e24b9a55b902009b92b049b67ff7c61cb46fbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6e24b9a55b902009b92b049b67ff7c61cb46fbb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
          "sha": "8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8eccc1e29b2e82fe75e6aa82269bb54e906eb274"
        }
      ],
      "message": "[rebroadcast] Delete and expire entries from m_attempt_tracker\n\nEnsure the index does not grow unbounded, and delete entries that\nwere last updated >3 months ago.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-26T23:17:20Z"
      },
      "sha": "83777da9fe1018e5368e69b257dd1e401eba2619"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzA1M2MzMzhjMWY4MTk5NTgzZjA5YTE4MWZiZThlZWY3OThhNGJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3053c338c1f8199583f09a181fbe8eef798a4ba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b3053c338c1f8199583f09a181fbe8eef798a4ba",
      "tree": {
        "sha": "da1aabdbe461c273e2331eeba4a3f8b282dbe89d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da1aabdbe461c273e2331eeba4a3f8b282dbe89d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83777da9fe1018e5368e69b257dd1e401eba2619",
          "sha": "83777da9fe1018e5368e69b257dd1e401eba2619",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/83777da9fe1018e5368e69b257dd1e401eba2619"
        }
      ],
      "message": "[rebroadcast] Add logging to monitor rebroadcast.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-25T22:54:33Z"
      },
      "sha": "b3053c338c1f8199583f09a181fbe8eef798a4ba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWFiYzA3NWI2ODVjNjdmNDcyMjZjMGExM2IwZTM1YzZhNzAyMTQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eabc075b685c67f47226c0a13b0e35c6a702146",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4eabc075b685c67f47226c0a13b0e35c6a702146",
      "tree": {
        "sha": "b14834a3c2bae29d03ae44d6ffeb0e5de10c07aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b14834a3c2bae29d03ae44d6ffeb0e5de10c07aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3053c338c1f8199583f09a181fbe8eef798a4ba",
          "sha": "b3053c338c1f8199583f09a181fbe8eef798a4ba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b3053c338c1f8199583f09a181fbe8eef798a4ba"
        }
      ],
      "message": "[rebroadcast] Stop tracking rebroadcast attempts for certain transactions\n\nDepending on the reason a transaction is removed from the mempool, it can be\nextremely unlikely for it to be able to re-enter. Some examples are if it was\nmined into a block or replaced using RBF. In these circumstances, we can remove\nthe transaction entry from the rebroadcast tracker. Under an unlikely\ncircumstance where the transaction does re-enter the mempool and gets\nrebroadcast, it will simply be re-added to the attempt tracker.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-04-16T18:10:11Z"
      },
      "sha": "4eabc075b685c67f47226c0a13b0e35c6a702146"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTg0Mjk0YzIxYjk2MzBjMTExNjYxZTA1NWRlYmE5YTE2OTU1Y2Q0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d584294c21b9630c111661e055deba9a16955cd4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d584294c21b9630c111661e055deba9a16955cd4",
      "tree": {
        "sha": "f31e3c4c04121ca1044775c025fbdb7f5a090e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f31e3c4c04121ca1044775c025fbdb7f5a090e61"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eabc075b685c67f47226c0a13b0e35c6a702146",
          "sha": "4eabc075b685c67f47226c0a13b0e35c6a702146",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4eabc075b685c67f47226c0a13b0e35c6a702146"
        }
      ],
      "message": "[test] Add unit test to confirm the recency filter works.\n\nIncludes adding a helper to the shared unit test utilities to create a valid\ntransaction and submit to the mempool.\n\nupdate test to use normal key generation",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-12-15T23:35:27Z"
      },
      "sha": "d584294c21b9630c111661e055deba9a16955cd4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmIzYzU4ZjgxMzEwOWQ3NjUxM2M4NTdhYmUwZDQyYmYyYmRlMmM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26b3c58f813109d76513c857abe0d42bf2bde2c6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/26b3c58f813109d76513c857abe0d42bf2bde2c6",
      "tree": {
        "sha": "4a6cc5b217c30fcfc23dd9cde4bd5292085989fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a6cc5b217c30fcfc23dd9cde4bd5292085989fe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d584294c21b9630c111661e055deba9a16955cd4",
          "sha": "d584294c21b9630c111661e055deba9a16955cd4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d584294c21b9630c111661e055deba9a16955cd4"
        }
      ],
      "message": "[test] Add unit test for rebroadcast attempt logic",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-27T23:40:00Z"
      },
      "sha": "26b3c58f813109d76513c857abe0d42bf2bde2c6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODFhNzI4YTkyMGJhM2U3YzdkMDNiNWMwZjRmNjZiOTMwZThiYWMz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
      "tree": {
        "sha": "9bddc4139ff33552632a65ecc93e2b6f44c1bf82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bddc4139ff33552632a65ecc93e2b6f44c1bf82"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26b3c58f813109d76513c857abe0d42bf2bde2c6",
          "sha": "26b3c58f813109d76513c857abe0d42bf2bde2c6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/26b3c58f813109d76513c857abe0d42bf2bde2c6"
        }
      ],
      "message": "[test] Add unit test for the fee rate cache",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-30T02:51:16Z"
      },
      "sha": "f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDZmZGI4M2M3NTllYTUyNjEwM2U5ZWM1Mzg5MDJhZTQ1OWNlMzYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d46fdb83c759ea526103e9ec538902ae459ce362",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d46fdb83c759ea526103e9ec538902ae459ce362",
      "tree": {
        "sha": "e477241ae9a809baf1710919eedf2fc1f8606288",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e477241ae9a809baf1710919eedf2fc1f8606288"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
          "sha": "f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3"
        }
      ],
      "message": "[test] Functional tests for rebroadcast logic.\n\nWe test that when a block comes in, we rebroadcast missing transactions based\non time and fee rate.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-09T21:52:47Z"
      },
      "sha": "d46fdb83c759ea526103e9ec538902ae459ce362"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjc1N2MyMTRlNTlmYmY1ZGQwMjgzMjNhNTQ3MzQ3MjZhMWM0NjFi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b757c214e59fbf5dd028323a54734726a1c461b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9b757c214e59fbf5dd028323a54734726a1c461b",
      "tree": {
        "sha": "69008c5ba81ac8cf0ebf82864316320c60f3f45f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69008c5ba81ac8cf0ebf82864316320c60f3f45f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d46fdb83c759ea526103e9ec538902ae459ce362",
          "sha": "d46fdb83c759ea526103e9ec538902ae459ce362",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d46fdb83c759ea526103e9ec538902ae459ce362"
        }
      ],
      "message": "[docs] Update prioritisetransaction help man",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T15:10:10Z"
      },
      "sha": "9b757c214e59fbf5dd028323a54734726a1c461b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4815430449,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgxNTQzMDQ0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4815430449",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-29T02:05:41Z"
    },
    {
      "event": "commented",
      "id": 851563105,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTU2MzEwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/851563105",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-31T15:33:29Z",
      "updated_at": "2021-05-31T15:33:29Z",
      "author_association": "MEMBER",
      "body": "I've been simulating the behavior of this logic using historical transaction and block data, and I have some general concept thoughts:\r\n\r\n1) In a situation where a transaction propagated reasonably well, it doesn't make sense that the whole network should simultaneously try to rebroadcast that transaction at the same time.  That is needlessly bandwidth-wasteful, as it results in an INV for that transaction to be re-sent on every link in the network, in a situation where (by assumption) few nodes would be missing it.\r\n\r\n2) In a situation where a transaction didn't propagate well or has dropped out of many nodes' mempools, but would propagate well if rebroadcast, it should be sufficient for a single node or a small number of nodes to do the rebroadcasting. \r\n\r\n3) The benefit of rebroadcasting a transaction that wouldn't propagate well seems small.  The goal is to get good transactions into miners' mempools, but if a transaction doesn't propagate well to node mempools, it probably wouldn't make it into a lot of miners' mempools either.\r\n\r\n4) I think we want to avoid bandwidth spikes on the network -- particularly right after a new block is found, when we would ideally be prioritizing bandwidth for block relay.  So it seems better to me to (a) not have all nodes on the network synchronizing on rebroadcasting simultaneously and (b) not have block connection be a trigger for rebroadcast. \r\n\r\n5) If a bunch of nodes on the network are simultaneously deciding to rebroadcast a large set of transactions, the rate-limiting we have on transaction announcements will mean that the network's transaction relay latency will go up as it takes time for the backlog to clear.  So, I think in general we should want to avoid situations where a node might want to broadcast (for example) several hundred transactions at once -- even more so if all the nodes on the network would decide to do the same thing at the same time.  This is another reason for not synchronizing rebroadcast across nodes, and I think it is also an argument for capping the number of transactions that might get selected for rebroadcasting at any particular time.\r\n\r\n6) There's little value in rebroadcasting transactions whose feerates are only slightly better than other transactions in the mempool.  Not to say we should never do it, but in thinking about the cost/benefit of transaction rebroadcast, it seems to me that prioritizing bandwidth usage on the most comparatively valuable transactions makes the most sense.  \r\n\r\nTaking the above into account, I'd propose this approach:\r\n\r\na) Any given node should rebroadcast way less often -- perhaps each node could attempt to rebroadcast on the order of once every 24 hours or every 48 hours on average, whether on a poisson timer or a random offset.  In a network with 10k listening nodes this is already a lot of rebroadcasting (10,000 / (24*60) is about 7 such nodes attempting rebroadcast every minute, not even taking into account the non-listening nodes on the network which will also be doing this!).  \r\n\r\nb) If we do (a) then we've probably greatly mitigated bandwidth spikes on the network, but I'd go further and limit the number of transactions that are ever selected to be rebroadcast at some small value like 25 or 50, to ensure we don't ever try to re-announce several hundred (or more) transactions onto the network at once.  \r\n\r\nc) I think the logic in this PR could use some refining to avoid edge-case behavior when we might rebroadcast a lot of transactions that are not valuable to rebroadcast.  These first two are cases that I've seen so far in my simulations, and the last one is a conjecture: \r\n * If a node comes back online after being offline for a while, then using block connections to trigger rebroadcast can result in rapid-fire rebroadcast of transactions that we really shouldn't be reannouncing (because both our mempool and our tip are not up to date).  I think this would be fixed by adopting (a) and (b) above.\r\n *  The mining heuristic of calling `CreateNewBlock` with an option for excluding recent transactions can result in us deciding to rebroadcast a lot of transactions that we wouldn't even select for a new block. Imagine that the mempool has just less than 1MB (vsize) of high feerate stuff that is all recent, and everything else is some uniform low feerate.  Then our cached feerate for inclusion in a block might be the low feerate (if at least 1 such transaction would be included in the block), and the heuristic of calling `CNB` with the cached feerate and excluding recent transactions can pick up thousands of low-feerate old stuff that wouldn't all realistically make it in to a new block.\r\n *  I think that reannouncing transactions that are part of a package (ie have more than 1 unconfirmed ancestor) may not be a great idea, because there are at least two reasons that packages might not relay well: (a) if any unconfirmed parent has a feerate below a peer's mempool-min-fee, then the package won't be accepted, and (b) descendant transaction limits on unconfirmed parents can interfere with relay of even a high-fee-rate child.  So to avoid wasting bandwidth, I think there's an argument that perhaps we should start by just relaying transactions with no unconfirmed parents in our initial deployment of this logic, and defer trying to relay transactions with unconfirmed ancestors until we have a package relay protocol deployed.  \r\n\r\nd) Given the issue described above with `CreateNewBlock` and the issues I am conjecturing with package relay, I suggest that we simplify the logic by eliminating the dependency on the mining algorithm, and instead just do a really simple algorithm for deciding what to consider rebroadcasting.  Randomly once a day (or maybe once every two days):\r\n * Walk the mempool by descending ancestor-fee-rate\r\n * If in the first 1MB (by vsize) of size-with-ancestor we encounter a transaction that is > 30 minutes old and has no unconfirmed parents (and hasn't hit our max number of rebroadcast attempts), then add to the rebroadcast set.\r\n * If we we hit 1MB of vsize that we've looked at or hit some cap on the number of transactions to rebroadcast (say 25), break and announce whatever we've picked so far.\r\nOne thing I'm not sure about is if we should be concerned about rebroadcasting a transaction that is close to the end of our `-mempoolexpiry` value; it seems like it could be problematic if we rebroadcast some low-feerate transaction that would otherwise be expiring soon and somehow cause it to ping-pong into other's mempools again, and then others cause it to get resurrected in our own.  Maybe we should only rebroadcast transactions that are signaling BIP 125 RBF?\r\n\r\ne) I think that we should only rebroadcast transactions to peers that are using wtxidrelay (BIP 339).  Bitcoin Core software that predates wtxidrelay will not cache validation failure for segwit transactions that don't make it into the mempool. This means that if a transaction doesn't propagate for some random policy reason (eg feerate), then the peer would still try download it from every connection that announces it.  As this PR is drafted now, where all nodes are on the same announcement timer, that means a lot of wasted *transaction download* bandwidth (not just wasted INV bandwidth!) whenever a transaction that doesn't get accepted is rebroadcast.  This would be mitigated by randomizing rebroadcasts and reducing the frequency, but I think we might as well just limit this to wtxidrelay peers as well for an extra safety margin.\r\n\r\nMy simulations of this PR on historical data are still ongoing and I don't have a good summary yet, but please let me know if there are statistics or other specific questions that would be helpful for us to consider (I have a few ideas in mind but I'm still gathering my thoughts).",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-851563105",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "commented",
      "id": 852149829,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjE0OTgyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852149829",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-01T14:00:47Z",
      "updated_at": "2021-06-01T14:00:47Z",
      "author_association": "MEMBER",
      "body": "I had one other thought about how we select transactions for rebroadcast; I think it could be problematic to base transaction rebroadcast solely on how transactions in our mempool compare to transactions that we would select in `CreateNewBlock` without regard to what transaction fees we're actually seeing in blocks on the network.\r\n\r\nImagine that you are running a somewhat older node, and there have been releases of Bitcoin Core that enable new standard transaction types that others are using.  Then your node will not be aware of those new transactions, and it's possible that only looking at the set of transactions that you know to be standard would result in rebroadcasting transactions from your mempool that are actually quite a bit below the feerate that the rest of the network thinks is needed to be confirmed soon.\r\n\r\n(Or really there could be any reason that miners might have access to better feerate transactions than a single node does -- there's still no point in aggressively rebroadcasting transactions that are worse than what we see are being confirmed.)\r\n\r\nThis problem would also be largely mitigated by making this behavior occur much less frequently and limiting the number of transactions that we'd consider rebroadcasting at once, but I think the heuristic of calling `CreateNewBlock` every minute and caching the lowest observed package feerate may be inferior to just looking at the contents of each block we see, and trying to infer the lowest feerate that we think is actually needed to be included in a block (perhaps we could look at the set of in-block transactions that have no ancestors or descendants, and try to estimate the minimum feerate needed for inclusion as a moving average of what we've recently observed -- would need to test out any kind of heuristic like this though).",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-852149829",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "commented",
      "id": 855023462,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTAyMzQ2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/855023462",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T21:57:49Z",
      "updated_at": "2021-06-04T21:57:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Marking this PR as draft-\r\nAfter offline conversations with @ajtowns, @sdaftuar & @jnewbery, I'm planning to rework the approach of this patch to increase the requirements for a transaction to be rebroadcast. The biggest change will be only sending an INV after a transaction has been missed from 3 blocks. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-855023462",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "mentioned",
      "id": 4845395345,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg0NTM5NTM0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845395345",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T21:57:50Z"
    },
    {
      "event": "subscribed",
      "id": 4845395350,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4NDUzOTUzNTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845395350",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T21:57:50Z"
    },
    {
      "event": "mentioned",
      "id": 4845395357,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg0NTM5NTM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845395357",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T21:57:50Z"
    },
    {
      "event": "subscribed",
      "id": 4845395363,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4NDUzOTUzNjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845395363",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T21:57:50Z"
    },
    {
      "event": "mentioned",
      "id": 4845395367,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg0NTM5NTM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845395367",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T21:57:50Z"
    },
    {
      "event": "subscribed",
      "id": 4845395374,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4NDUzOTUzNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845395374",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T21:57:50Z"
    },
    {
      "event": "convert_to_draft",
      "id": 4845395815,
      "node_id": "MDE5OkNvbnZlcnRUb0RyYWZ0RXZlbnQ0ODQ1Mzk1ODE1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845395815",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T21:57:56Z"
    },
    {
      "event": "removed_from_project",
      "id": 4853223517,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50NDg1MzIyMzUxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4853223517",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-07T16:42:01Z",
      "project_card": {
        "id": 55707788,
        "url": "https://api.github.com/projects/columns/cards/55707788",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 890045629,
      "node_id": "IC_kwDOABII5841DQS9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/890045629",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-30T17:31:24Z",
      "updated_at": "2021-07-30T17:31:24Z",
      "author_association": "NONE",
      "body": "I was searching for privacy related PRs to review and write tests using PowerShell scripts for my project.\r\n\r\nFound this PR in the search results which I had already reviewed in March 2021, however I don't think writing test for it makes sense based on last two comments.\r\n\r\nAlso agree with the things mentioned by Suhas Daftuar. \r\n\r\n> I'm planning to rework the approach of this patch to increase the requirements for a transaction to be rebroadcast. \r\n\r\nHoping new approach will be better and we soon improve privacy in rebroadcast mechanism. Thanks for working on this.",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-890045629",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T22:50:14Z",
      "updated_at": "2021-12-07T22:50:14Z",
      "source": {
        "issue": {
          "id": 1073816846,
          "node_id": "I_kwDOAyFdmM5AASUO",
          "url": "https://api.github.com/repos/bitcoinknots/bitcoin/issues/42",
          "repository_url": "https://api.github.com/repos/bitcoinknots/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoinknots/bitcoin/issues/42/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoinknots/bitcoin/issues/42/comments",
          "events_url": "https://api.github.com/repos/bitcoinknots/bitcoin/issues/42/events",
          "html_url": "https://github.com/bitcoinknots/bitcoin/issues/42",
          "number": 42,
          "state": "open",
          "state_reason": null,
          "title": "[privacy] Introduce node rebroadcast module",
          "body": "Can we use the commits from this [pull request](https://github.com/bitcoin/bitcoin/pull/21061), make few changes and improve privacy in broadcasting of transactions?\r\n\r\nMy opinion:\r\n\r\n1. Default minimum age for a transaction to be rebroadcast should be more than 30 minutes by default and user can change it in bitcoin.conf if required\r\n\r\n2. Random transactions are chosen for rebroadcasting instead of fee rate criteria\r\n\r\nComments by sdaftuar post which PR has been in draft mode: https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-852149829",
          "user": {
            "login": "ghost",
            "id": 10137,
            "node_id": "MDQ6VXNlcjEwMTM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 0,
          "created_at": "2021-12-07T22:50:14Z",
          "updated_at": "2022-01-01T20:41:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 993000456,
      "node_id": "IC_kwDOABII5847L_wI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/993000456",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-13T23:18:49Z",
      "updated_at": "2021-12-13T23:18:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-993000456",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "labeled",
      "id": 5760411591,
      "node_id": "LE_lADOABII584vnWV6zwAAAAFXWOfH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5760411591",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-13T23:18:49Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1073871594,
      "node_id": "IC_kwDOABII585AAfrq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1073871594",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-21T13:06:51Z",
      "updated_at": "2022-03-21T13:06:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--13523179cfe9479db18ec6c5d236f789-->There hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? ➡️ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? ➡️ Please close.\n* Did the author lose interest or time to work on this? ➡️ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-1073871594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "commented",
      "id": 1075270440,
      "node_id": "IC_kwDOABII585AF1Mo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1075270440",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-22T14:43:03Z",
      "updated_at": "2022-03-22T14:43:03Z",
      "author_association": "MEMBER",
      "body": "Closing this for now. It may be reopened at a later point.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-1075270440",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061"
    },
    {
      "event": "closed",
      "id": 6284311380,
      "node_id": "CE_lADOABII584vnWV6zwAAAAF2kvtU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6284311380",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-22T14:43:03Z"
    },
    {
      "event": "locked",
      "id": 8814960684,
      "node_id": "LOE_lADOABII584vnWV6zwAAAAINaaAs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8814960684",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T10:20:16Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572243729",
      "pull_request_review_id": 585760946,
      "id": 572243729,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI0MzcyOQ==",
      "diff_hunk": "@@ -57,6 +57,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/filesystem.hpp\n     boost/filesystem/fstream.hpp\n     boost/multi_index/hashed_index.hpp\n+    boost/multi_index/member.hpp",
      "path": "test/lint/lint-includes.sh",
      "position": 4,
      "original_position": 4,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "3766479d7924358f9c3b0d53fca1ca2e218e66fb",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm importing this file so I can use the default key extractors in the `indexed_rebroadcast_set` multi_index: 1. https://github.com/bitcoin/bitcoin/pull/21061/files#diff-eccf6b88ae8b612dbdbdb92c110b66e4e7e3ffa665ccdc1acf08093aadc66b82R49 2. https://github.com/bitcoin/bitcoin/pull/21061/files#diff-eccf6b88ae8b612dbdbdb92c110b66e4e7e3ffa665ccdc1acf08093aadc66b82R55\r\n\r\nThe contents of the boost header file can be found [here](https://www.boost.org/doc/libs/1_71_0/boost/multi_index/member.hpp).\r\n\r\nIf we'd rather not import another boost header, I can avoid by writing custom key extractors.",
      "created_at": "2021-02-08T17:44:59Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r572243729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572243729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574281895",
      "pull_request_review_id": 588280404,
      "id": 574281895,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDI4MTg5NQ==",
      "diff_hunk": "@@ -57,6 +57,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/filesystem.hpp\n     boost/filesystem/fstream.hpp\n     boost/multi_index/hashed_index.hpp\n+    boost/multi_index/member.hpp",
      "path": "test/lint/lint-includes.sh",
      "position": 4,
      "original_position": 4,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "3766479d7924358f9c3b0d53fca1ca2e218e66fb",
      "in_reply_to_id": 572243729,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's fine to add a boost multi_index header dependency, it's the only submodule of boost that we really need and for which there is no replacement on the horizon. So just use what you need IMO, re-implementing anything from multi-index without a good plan would be a waste of time, I think. ",
      "created_at": "2021-02-11T06:58:44Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r574281895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574281895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593968023",
      "pull_request_review_id": 611742673,
      "id": 593968023,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzk2ODAyMw==",
      "diff_hunk": "@@ -7,17 +7,22 @@\n #include <miner.h>\n #include <script/script.h>\n #include <txrebroadcast.h>\n+#include <util/time.h>\n \n /** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n  *  such as miners mining priority transactions. */\n static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n \n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "24e7415aeb248f5df3ca3492d5a6b75a213f978d",
      "in_reply_to_id": null,
      "user": null,
      "body": "Any reasons for 30 minutes? Less than 30 minutes might have issues. What if we use more than 30 minutes or user can define this in `bitcoin.conf`?",
      "created_at": "2021-03-14T22:03:37Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r593968023",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593968023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594660140",
      "pull_request_review_id": 612614556,
      "id": 594660140,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2MDE0MA==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid),\n+          m_count(1) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count;",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 35,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Prefer default initialization when a member will always be initialized to the same value.\r\n\r\n```suggestion\r\n    int m_count{1};\r\n```\r\n\r\nAnd remove `m_count` from the initializer list.",
      "created_at": "2021-03-15T20:27:25Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594660140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594660140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594661183",
      "pull_request_review_id": 612614556,
      "id": 594661183,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2MTE4Mw==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 9,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is unused.",
      "created_at": "2021-03-15T20:28:58Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594661183",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594661183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594666637",
      "pull_request_review_id": 612614556,
      "id": 594666637,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2NjYzNw==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+struct TxIds {",
      "path": "src/txrebroadcast.h",
      "position": 16,
      "original_position": 20,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems unnecessary to define a type here. `GetRebroadcastTransactions()` could just return a vector of std::pairs, and the one caller (`UpdatedBlockTip()`) can unpack that vector of pairs using :sparkle: s t r u c t u t e d :sparkle: b i n d i n g s :sparkle:. Here's what the caller would look like:\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex 7811e3ca40..e5a425b4c1 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -1393,12 +1393,12 @@ void PeerManagerImpl::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlock\r\n \r\n     // Rebroadcast selected mempool transactions\r\n     if (gArgs.GetArg(\"-rebroadcast\", DEFAULT_REBROADCAST_ENABLED)) {\r\n-        std::vector<TxIds> rebroadcast_txs = m_txrebroadcast.GetRebroadcastTransactions();\r\n+        auto rebroadcast_txs = m_txrebroadcast.GetRebroadcastTransactions();\r\n \r\n         LOCK(cs_main);\r\n \r\n-        for (auto ids : rebroadcast_txs) {\r\n-            RelayTransaction(ids.m_txid, ids.m_wtxid, m_connman);\r\n+        for (auto [txid, wtxid] : rebroadcast_txs) {\r\n+            RelayTransaction(txid, wtxid, m_connman);\r\n         }\r\n     }\r\n```\r\n\r\nThat client code works whether you return a vector of `TxIds` or a vector of `std::pair<uint256, uint256>>`s (which is as it should be :slightly_smiling_face: )",
      "created_at": "2021-03-15T20:38:08Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594666637",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594666637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594670252",
      "pull_request_review_id": 612614556,
      "id": 594670252,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3MDI1Mg==",
      "diff_hunk": "@@ -325,6 +326,7 @@ class PeerManagerImpl final : public PeerManager\n     ChainstateManager& m_chainman;\n     CTxMemPool& m_mempool;\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n+    TxRebroadcastHandler m_txrebroadcast;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps make this a unique_ptr, and then pass in a boolean to the PeerManagerImpl ctor to indicate whether you want to enable tx rebroadcast and initialize the pointer.\r\n\r\nThen, in `UpdatedBlockTip`:\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex 7811e3ca40..8bb5e8f87f 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -1392,8 +1392,8 @@ void PeerManagerImpl::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlock\r\n     }\r\n \r\n     // Rebroadcast selected mempool transactions\r\n-    if (gArgs.GetArg(\"-rebroadcast\", DEFAULT_REBROADCAST_ENABLED)) {\r\n-        std::vector<TxIds> rebroadcast_txs = m_txrebroadcast.GetRebroadcastTransactions();\r\n+    if (m_txrebroadcast) {\r\n+        std::vector<TxIds> rebroadcast_txs = m_txrebroadcast->GetRebroadcastTransactions();\r\n \r\n         LOCK(cs_main);\r\n```\r\n\r\nparametrizing whether the TxRebroadcastHandler is initialized avoids having to read the global args every block, and should make it the code path more obviously isolated and testable.",
      "created_at": "2021-03-15T20:44:21Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594670252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594670252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594671707",
      "pull_request_review_id": 612614556,
      "id": 594671707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3MTcwNw==",
      "diff_hunk": "@@ -53,6 +53,8 @@ void RegenerateCommitments(CBlock& block, BlockManager& blockman)\n BlockAssembler::Options::Options() {\n     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n+    m_skip_inclusion_until = std::chrono::microseconds::max();\n+    check_block_validity = true;",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Prefer default initialization in the declaration, rather than setting these in the ctor.",
      "created_at": "2021-03-15T20:46:39Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594671707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594671707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 56,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594672688",
      "pull_request_review_id": 612614556,
      "id": 594672688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3MjY4OA==",
      "diff_hunk": "@@ -76,6 +80,9 @@ static BlockAssembler::Options DefaultOptions()\n     } else {\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     }\n+\n+    options.m_skip_inclusion_until = std::chrono::microseconds::max();\n+    options.check_block_validity = true;",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These aren't doing anything. They already get set in the `Options` constructor.",
      "created_at": "2021-03-15T20:48:04Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594672688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594672688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 84,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594673886",
      "pull_request_review_id": 612614556,
      "id": 594673886,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3Mzg4Ng==",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <boost/test/unit_test.hpp>\n+#include <clientversion.h>\n+#include <consensus/tx_check.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <rpc/util.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <streams.h>\n+#include <test/util/setup_common.h>\n+#include <tuple>",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not needed!",
      "created_at": "2021-03-15T20:49:54Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594673886",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594673886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594674279",
      "pull_request_review_id": 612614556,
      "id": 594674279,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3NDI3OQ==",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <boost/test/unit_test.hpp>",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Separate library imports from local project imports:\r\n\r\n```suggestion\r\n#include <boost/test/unit_test.hpp>\r\n\r\n#include <amount.h>\r\n```",
      "created_at": "2021-03-15T20:50:31Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594674279",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594674279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594677303",
      "pull_request_review_id": 612614556,
      "id": 594677303,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3NzMwMw==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 18,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd be really nice to avoid including these boost headers in a header that will transitively be included in a lot of translation units. Could you hide the `indexed_rebroadcast_set` inside the .cpp file to avoid this?",
      "created_at": "2021-03-15T20:55:29Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594677303",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594677303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595033242",
      "pull_request_review_id": 613068719,
      "id": 595033242,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTAzMzI0Mg==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 18,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594677303,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A quick and easy way to do this is to make `indexed_rebroadcast_set` a class that inherits from the `boost::multi_index_container` template class (defined in .cpp), forward declare it in .h and make `m_attempt_tracker` a unique pointer to `indexed_rebroadcast_set`. A few other things need to be shuffled around to make that work, but here's a rough implementation:\r\n\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/txrebroadcast_tests.cpp b/src/test/txrebroadcast_tests.cpp\r\nindex 6fdd5deb8f..d10a962ab3 100644\r\n--- a/src/test/txrebroadcast_tests.cpp\r\n+++ b/src/test/txrebroadcast_tests.cpp\r\n@@ -27,34 +27,13 @@ public:\r\n \r\n     bool CheckRecordedAttempt(uint256 txhsh, int expected_count, std::chrono::microseconds expected_timestamp)\r\n     {\r\n-        const auto it = m_attempt_tracker.find(txhsh);\r\n-        if (it == m_attempt_tracker.end()) return false;\r\n-        if (it->m_count != expected_count) return false;\r\n-\r\n-        // Check the recorded timestamp is within 2 seconds of the param passed in\r\n-        std::chrono::microseconds delta = expected_timestamp - it->m_last_attempt;\r\n-        if (delta.count() > 2) return false;\r\n-\r\n-        return true;\r\n-    };\r\n+        return TxRebroadcastHandler::CheckRecordedAttempt(txhsh, expected_count, expected_timestamp);\r\n+    }\r\n \r\n     void UpdateAttempt(uint256 txhsh, int count)\r\n     {\r\n-        auto it = m_attempt_tracker.find(txhsh);\r\n-        for (int i = 0; i < count; ++i) {\r\n-            RecordAttempt(it);\r\n-        }\r\n-    };\r\n-\r\n-    void RecordAttempt(indexed_rebroadcast_set::index<index_by_wtxid>::type::iterator& entry_it)\r\n-    {\r\n-        auto UpdateRebroadcastEntry = [](RebroadcastEntry& rebroadcast_entry) {\r\n-            rebroadcast_entry.m_last_attempt = GetTime<std::chrono::microseconds>() - 4h;\r\n-            ++rebroadcast_entry.m_count;\r\n-        };\r\n-\r\n-        m_attempt_tracker.modify(entry_it, UpdateRebroadcastEntry);\r\n-    };\r\n+        TxRebroadcastHandler::UpdateAttempt(txhsh, count);\r\n+    }\r\n \r\n     void UpdateCachedFeeRate(CFeeRate new_fee_rate)\r\n     {\r\ndiff --git a/src/txrebroadcast.cpp b/src/txrebroadcast.cpp\r\nindex 3cb9abaf69..49050c0d39 100644\r\n--- a/src/txrebroadcast.cpp\r\n+++ b/src/txrebroadcast.cpp\r\n@@ -10,6 +10,11 @@\r\n #include <txrebroadcast.h>\r\n #include <validation.h>\r\n \r\n+#include <boost/multi_index/hashed_index.hpp>\r\n+#include <boost/multi_index/member.hpp>\r\n+#include <boost/multi_index/ordered_index.hpp>\r\n+#include <boost/multi_index_container.hpp>\r\n+\r\n /** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\r\n  *  such as miners mining priority transactions. */\r\n static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\r\n@@ -30,6 +35,46 @@ static constexpr int MAX_ENTRIES = 500;\r\n /** The maximum age of an entry ~3 months */\r\n static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\r\n \r\n+/** Used for multi_index tag  */\r\n+struct index_by_last_attempt {};\r\n+\r\n+struct RebroadcastEntry {\r\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\r\n+        : m_last_attempt(now_time),\r\n+          m_wtxid(wtxid),\r\n+          m_count(1) {}\r\n+\r\n+    std::chrono::microseconds m_last_attempt;\r\n+    const uint256 m_wtxid;\r\n+    int m_count;\r\n+};\r\n+\r\n+class indexed_rebroadcast_set : public\r\n+boost::multi_index_container<\r\n+    RebroadcastEntry,\r\n+    boost::multi_index::indexed_by<\r\n+        // sorted by wtxid\r\n+        boost::multi_index::hashed_unique<\r\n+            boost::multi_index::tag<index_by_wtxid>,\r\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\r\n+            SaltedTxidHasher\r\n+        >,\r\n+        // sorted by last rebroadcast time\r\n+        boost::multi_index::ordered_non_unique<\r\n+            boost::multi_index::tag<index_by_last_attempt>,\r\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\r\n+        >\r\n+    >\r\n+> {};\r\n+\r\n+TxRebroadcastHandler::TxRebroadcastHandler(CTxMemPool& mempool, ChainstateManager& chainman)\r\n+    : m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}\r\n+    , m_mempool{mempool}\r\n+    , m_chainman{chainman}\r\n+{}\r\n+\r\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\r\n+\r\n std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\r\n {\r\n     std::vector<TxIds> rebroadcast_txs;\r\n@@ -58,12 +103,12 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\r\n \r\n         // Check if we have previously rebroadcasted, decide if we will this\r\n         // round, and if so, record the attempt.\r\n-        auto entry_it = m_attempt_tracker.find(wtxid);\r\n+        auto entry_it = m_attempt_tracker->find(wtxid);\r\n \r\n-        if (entry_it == m_attempt_tracker.end()) {\r\n+        if (entry_it == m_attempt_tracker->end()) {\r\n             // No existing entry, we will rebroadcast, so create a new one\r\n             RebroadcastEntry entry(start_time, wtxid);\r\n-            m_attempt_tracker.insert(entry);\r\n+            m_attempt_tracker->insert(entry);\r\n         } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\r\n             // We have already rebroadcast this transaction the maximum number\r\n             // of times permitted, so skip rebroadcasting.\r\n@@ -76,7 +121,12 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\r\n         } else {\r\n             // We have rebroadcasted this transaction before, but will try\r\n             // again now.\r\n-            RecordAttempt(entry_it);\r\n+            auto UpdateRebroadcastEntry = [](RebroadcastEntry& rebroadcast_entry) {\r\n+                rebroadcast_entry.m_last_attempt = GetTime<std::chrono::microseconds>();\r\n+                ++rebroadcast_entry.m_count;\r\n+            };\r\n+\r\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\r\n         }\r\n \r\n         // Add to set of rebroadcast candidates\r\n@@ -97,6 +147,32 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\r\n     return rebroadcast_txs;\r\n };\r\n \r\n+void TxRebroadcastHandler::UpdateAttempt(uint256 txhsh, int count)\r\n+{\r\n+    auto it = m_attempt_tracker->find(txhsh);\r\n+    for (int i = 0; i < count; ++i) {\r\n+        auto UpdateRebroadcastEntry = [](RebroadcastEntry& rebroadcast_entry) {\r\n+            rebroadcast_entry.m_last_attempt = GetTime<std::chrono::microseconds>() - 4h;\r\n+            ++rebroadcast_entry.m_count;\r\n+        };\r\n+\r\n+        m_attempt_tracker->modify(it, UpdateRebroadcastEntry);\r\n+    }\r\n+};\r\n+\r\n+bool TxRebroadcastHandler::CheckRecordedAttempt(uint256 txhsh, int expected_count, std::chrono::microseconds expected_timestamp)\r\n+{\r\n+    const auto it = m_attempt_tracker->find(txhsh);\r\n+    if (it == m_attempt_tracker->end()) return false;\r\n+    if (it->m_count != expected_count) return false;\r\n+\r\n+    // Check the recorded timestamp is within 2 seconds of the param passed in\r\n+    std::chrono::microseconds delta = expected_timestamp - it->m_last_attempt;\r\n+    if (delta.count() > 2) return false;\r\n+\r\n+    return true;\r\n+};\r\n+\r\n void TxRebroadcastHandler::CacheMinRebroadcastFee()\r\n {\r\n     // Update stamp of chain tip on cache run\r\n@@ -109,33 +185,23 @@ void TxRebroadcastHandler::CacheMinRebroadcastFee()\r\n     LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d µs to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\r\n };\r\n \r\n-void TxRebroadcastHandler::RecordAttempt(indexed_rebroadcast_set::index<index_by_wtxid>::type::iterator& entry_it)\r\n-{\r\n-    auto UpdateRebroadcastEntry = [](RebroadcastEntry& rebroadcast_entry) {\r\n-        rebroadcast_entry.m_last_attempt = GetTime<std::chrono::microseconds>();\r\n-        ++rebroadcast_entry.m_count;\r\n-    };\r\n-\r\n-    m_attempt_tracker.modify(entry_it, UpdateRebroadcastEntry);\r\n-};\r\n-\r\n void TxRebroadcastHandler::TrimMaxRebroadcast()\r\n {\r\n     // Delete any entries that are older than MAX_ENTRY_AGE\r\n     std::chrono::microseconds min_age = GetTime<std::chrono::microseconds>() - MAX_ENTRY_AGE;\r\n \r\n-    while (!m_attempt_tracker.empty()) {\r\n-        auto it = m_attempt_tracker.get<index_by_last_attempt>().begin();\r\n+    while (!m_attempt_tracker->empty()) {\r\n+        auto it = m_attempt_tracker->get<index_by_last_attempt>().begin();\r\n         if (it->m_last_attempt < min_age) {\r\n-            m_attempt_tracker.get<index_by_last_attempt>().erase(it);\r\n+            m_attempt_tracker->get<index_by_last_attempt>().erase(it);\r\n         } else {\r\n             break;\r\n         }\r\n     }\r\n \r\n     // If there are still too many entries, delete the oldest ones\r\n-    while (m_attempt_tracker.size() > MAX_ENTRIES) {\r\n-        auto it = m_attempt_tracker.get<index_by_last_attempt>().begin();\r\n-        m_attempt_tracker.get<index_by_last_attempt>().erase(it);\r\n+    while (m_attempt_tracker->size() > MAX_ENTRIES) {\r\n+        auto it = m_attempt_tracker->get<index_by_last_attempt>().begin();\r\n+        m_attempt_tracker->get<index_by_last_attempt>().erase(it);\r\n     }\r\n };\r\ndiff --git a/src/txrebroadcast.h b/src/txrebroadcast.h\r\nindex 8a176a08bc..ec3ea34ed7 100644\r\n--- a/src/txrebroadcast.h\r\n+++ b/src/txrebroadcast.h\r\n@@ -12,11 +12,6 @@\r\n #include <util/time.h>\r\n #include <validation.h>\r\n \r\n-#include <boost/multi_index/hashed_index.hpp>\r\n-#include <boost/multi_index/member.hpp>\r\n-#include <boost/multi_index/ordered_index.hpp>\r\n-#include <boost/multi_index_container.hpp>\r\n-\r\n struct TxIds {\r\n     TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\r\n \r\n@@ -24,43 +19,15 @@ struct TxIds {\r\n     const uint256 m_wtxid;\r\n };\r\n \r\n-struct RebroadcastEntry {\r\n-    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\r\n-        : m_last_attempt(now_time),\r\n-          m_wtxid(wtxid),\r\n-          m_count(1) {}\r\n-\r\n-    std::chrono::microseconds m_last_attempt;\r\n-    const uint256 m_wtxid;\r\n-    int m_count;\r\n-};\r\n-\r\n-/** Used for multi_index tag  */\r\n-struct index_by_last_attempt {};\r\n-\r\n-using indexed_rebroadcast_set = boost::multi_index_container<\r\n-    RebroadcastEntry,\r\n-    boost::multi_index::indexed_by<\r\n-        // sorted by wtxid\r\n-        boost::multi_index::hashed_unique<\r\n-            boost::multi_index::tag<index_by_wtxid>,\r\n-            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\r\n-            SaltedTxidHasher\r\n-        >,\r\n-        // sorted by last rebroadcast time\r\n-        boost::multi_index::ordered_non_unique<\r\n-            boost::multi_index::tag<index_by_last_attempt>,\r\n-            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\r\n-        >\r\n-    >\r\n->;\r\n+class indexed_rebroadcast_set;\r\n \r\n class TxRebroadcastHandler\r\n {\r\n public:\r\n-    TxRebroadcastHandler(CTxMemPool& mempool, ChainstateManager& chainman)\r\n-        : m_mempool(mempool),\r\n-          m_chainman(chainman){};\r\n+    TxRebroadcastHandler(CTxMemPool& mempool, ChainstateManager& chainman);\r\n+    ~TxRebroadcastHandler();\r\n+\r\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\r\n \r\n     std::vector<TxIds> GetRebroadcastTransactions();\r\n \r\n@@ -75,10 +42,13 @@ protected:\r\n     CFeeRate m_cached_fee_rate;\r\n \r\n     /** Keep track of previous rebroadcast attempts */\r\n-    indexed_rebroadcast_set m_attempt_tracker;\r\n+    std::unique_ptr<indexed_rebroadcast_set> m_attempt_tracker;\r\n+\r\n+    /** Test only */\r\n+    void UpdateAttempt(uint256 txhsh, int count);\r\n \r\n-    /** Update an existing RebroadcastEntry - increment count and update timestamp */\r\n-    void RecordAttempt(indexed_rebroadcast_set::index<index_by_wtxid>::type::iterator& entry_it);\r\n+    /** Test only */\r\n+    bool CheckRecordedAttempt(uint256 txhsh, int expected_count, std::chrono::microseconds expected_timestamp);\r\n \r\n private:\r\n     const CTxMemPool& m_mempool;\r\n```\r\n\r\n</details>",
      "created_at": "2021-03-16T10:20:02Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r595033242",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595033242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596515495",
      "pull_request_review_id": 614939135,
      "id": 596515495,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjUxNTQ5NQ==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = ::ChainActive().Tip();\n+\n+    // Update cache fee rate\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_mempool, Params()).minTxFeeRate();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 107,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could keep the old cached fee rate here, so that if you try end up doing `UpdateTip / CacheMinRebroadcastFee / RebroadcatTxs` you can do something sensible?\r\n\r\n```c++\r\n   new_tip = ::ChainActive().Tip();\r\n   if (new_tip != m_tip_at_cache_time) {\r\n       m_last_cached_fee_rate = m_cached_fee_rate;\r\n   } else {\r\n       m_last_cached_fee_rate = max; // ?\r\n   }\r\n   m_tip_at_cache_time = new_tip;\r\n```   ",
      "created_at": "2021-03-18T02:50:16Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r596515495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596515495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596516729",
      "pull_request_review_id": 614940621,
      "id": 596516729,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjUxNjcyOQ==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 18,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594677303,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "txrebroadcast.h is only included from net_processing and txrebroadcast.cpp itself, and net_processing already includes txmempool.h so there's not much saving to be had here I think",
      "created_at": "2021-03-18T02:54:33Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r596516729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596516729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600423847",
      "pull_request_review_id": 619647027,
      "id": 600423847,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDQyMzg0Nw==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 18,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594677303,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not currently, but I think a long-term it'd be good to remove the boost header dependencies from modules that aren't using boost multi_index. That'd involve refactoring the txmempool interface so it's not exposing multi_index objects.\r\n\r\nTo be honest, I'm not entirely sure how much actual benefit this would have on build times and binary size. I think that boost multi_index is almost entirely templates, so if they're not being instantiated in a translation unit, then it's probably minimal. Still, I think it's a good goal in itself to minimize where third party libraries are exposed within our code structure.",
      "created_at": "2021-03-24T12:17:30Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r600423847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600423847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600948474",
      "pull_request_review_id": 620319791,
      "id": 600948474,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDk0ODQ3NA==",
      "diff_hunk": "@@ -17,29 +16,63 @@ static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n /** Default minimum age for a transaction to be rebroadcast */\n static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n \n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n {\n     std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n \n     // If there has not been a cache run since the last block, the fee rate\n     // condition will not filter out any transactions, so skip this run.\n     if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n \n     BlockAssembler::Options options;\n     options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n-    options.m_skip_inclusion_until = GetTime<std::chrono::microseconds>() - REBROADCAST_MIN_TX_AGE;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n     options.check_block_validity = false;\n     options.blockMinFeeRate = m_cached_fee_rate;\n \n     // Use CreateNewBlock to identify rebroadcast candidates\n     auto block_template = BlockAssembler(m_mempool, Params(), options)\n                           .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n \n-    LOCK(m_mempool.cs);",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0c84415ae9fa1a32faace05db1e0d83979c7533b",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this lock added in the first commit and then removed?",
      "created_at": "2021-03-24T23:51:06Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r600948474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600948474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600952359",
      "pull_request_review_id": 620319791,
      "id": 600952359,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDk1MjM1OQ==",
      "diff_hunk": "@@ -96,3 +104,24 @@ void TxRebroadcastHandler::RecordAttempt(indexed_rebroadcast_set::index<index_by\n \n     m_attempt_tracker.modify(entry_it, UpdateRebroadcastEntry);\n };\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()",
      "path": "src/txrebroadcast.cpp",
      "position": 229,
      "original_position": 27,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "6f70142fcecac7098fb5aed1ae51cc59d20fb14c",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Entries from `m_attempt_tracker` seem to be only cleared after 3 months or when it's full. Shouldn't we also remove them if the tx is removed from the mempool because it has made it into a block (which would seem like the most common cause for removing)?",
      "created_at": "2021-03-25T00:02:14Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r600952359",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600952359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600955209",
      "pull_request_review_id": 620319791,
      "id": 600955209,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDk1NTIwOQ==",
      "diff_hunk": "@@ -8,15 +8,53 @@\n #include <policy/feerate.h>\n #include <tuple>\n #include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n #include <validation.h>\n \n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n struct TxIds {\n     TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n \n     const uint256 m_txid;\n     const uint256 m_wtxid;\n };\n \n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid),\n+          m_count(1) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count;\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+using indexed_rebroadcast_set = boost::multi_index_container<",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 34,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0c84415ae9fa1a32faace05db1e0d83979c7533b",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The mempool is persisted to disk, would it make sense to do the same with the rebroadcast tracker? With the index designed to keep a memory of months, I'd guess that several nodes would undergo several restarts during such a long period and, currently, lose all memory about past rebroadcasts.",
      "created_at": "2021-03-25T00:10:19Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r600955209",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600955209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602170601",
      "pull_request_review_id": 621980840,
      "id": 602170601,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjE3MDYwMQ==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We're trying to get rid of global calls like `Params()`. Consider adding a:\r\n\r\n```\r\n    const CChainParams& m_chainparams;\r\n```\r\n\r\nmember to `TxRebroadcastHandler` and setting it in the ctor (like `PeerManagerImpl` does)",
      "created_at": "2021-03-26T10:27:16Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602170601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602170601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602247755",
      "pull_request_review_id": 621980840,
      "id": 602247755,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI0Nzc1NQ==",
      "diff_hunk": "@@ -133,6 +133,10 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    std::chrono::microseconds m_skip_inclusion_until;\n+\n+    // To permit disabling block validity check\n+    bool check_block_validity;",
      "path": "src/miner.h",
      "position": null,
      "original_position": 7,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    bool m_check_block_validity;\r\n```",
      "created_at": "2021-03-26T12:38:06Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602247755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602247755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602249928",
      "pull_request_review_id": 621980840,
      "id": 602249928,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI0OTkyOA==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The type is obvious from the template parameter, so may be a good place to use auto:\r\n\r\n```suggestion\r\n    auto start_time = GetTime<std::chrono::microseconds>();\r\n```\r\n\r\n(and in the other calls to `GetTime`)",
      "created_at": "2021-03-26T12:41:37Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602249928",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602249928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602253880",
      "pull_request_review_id": 621980840,
      "id": 602253880,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI1Mzg4MA==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AUTO",
      "created_at": "2021-03-26T12:46:16Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602253880",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602253880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602255196",
      "pull_request_review_id": 621980840,
      "id": 602255196,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI1NTE5Ng==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe better to use \"us\" instead of \"µs\" to keep logs in ascii.",
      "created_at": "2021-03-26T12:47:38Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602255196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602255196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602260866",
      "pull_request_review_id": 621980840,
      "id": 602260866,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI2MDg2Ng==",
      "diff_hunk": "@@ -96,3 +104,24 @@ void TxRebroadcastHandler::RecordAttempt(indexed_rebroadcast_set::index<index_by\n \n     m_attempt_tracker.modify(entry_it, UpdateRebroadcastEntry);\n };\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()",
      "path": "src/txrebroadcast.cpp",
      "position": 229,
      "original_position": 27,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "6f70142fcecac7098fb5aed1ae51cc59d20fb14c",
      "in_reply_to_id": 600952359,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also make sure that you remove transactions that are conflicted out by the block (ie a conflicting transaction is included in the block).",
      "created_at": "2021-03-26T12:53:40Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602260866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602260866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602266206",
      "pull_request_review_id": 621980840,
      "id": 602266206,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI2NjIwNg==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "use `std::make_unique()` to make unique pointers.",
      "created_at": "2021-03-26T12:59:11Z",
      "updated_at": "2021-05-05T05:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602266206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602266206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602267130",
      "pull_request_review_id": 621980840,
      "id": 602267130,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI2NzEzMA==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems impossible to hit. You've just constructed a new `std::unique_ptr<CBlockTemplate>`.",
      "created_at": "2021-03-26T13:00:03Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602267130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602267130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 323,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602268144",
      "pull_request_review_id": 621980840,
      "id": 602268144,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI2ODE0NA==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();\n+    assert(prev_block_index != nullptr);\n+    nHeight = prev_block_index->nHeight + 1;\n+\n+    block->nTime = static_cast<uint32_t>(GetAdjustedTime());\n+    const int64_t median_time_past = prev_block_index->GetMedianTimePast();\n+\n+    nLockTimeCutoff = median_time_past;\n+    fIncludeWitness = IsWitnessEnabled(prev_block_index, chainparams.GetConsensus());",
      "path": "src/miner.cpp",
      "position": 62,
      "original_position": 93,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is needed. Witness is definitely enabled at the tip!",
      "created_at": "2021-03-26T13:01:11Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602268144",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602268144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602269820",
      "pull_request_review_id": 621980840,
      "id": 602269820,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI2OTgyMA==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = ::ChainActive().Tip();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Avoid calls to the global `::ChainActive()`.",
      "created_at": "2021-03-26T13:03:02Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602269820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602269820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602269986",
      "pull_request_review_id": 621980840,
      "id": 602269986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI2OTk4Ng==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = ::ChainActive().Tip();\n+\n+    // Update cache fee rate\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    auto start_time = GetTime<std::chrono::microseconds>();\r\n```",
      "created_at": "2021-03-26T13:03:10Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602269986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602269986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602270596",
      "pull_request_review_id": 621980840,
      "id": 602270596,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI3MDU5Ng==",
      "diff_hunk": "@@ -163,6 +169,12 @@ class BlockAssembler\n     static Optional<int64_t> m_last_block_num_txs;\n     static Optional<int64_t> m_last_block_weight;\n \n+    /* This function wraps addPackageTxs to calculate and return the minimum fee\n+     * rate required for a package to currently be included in the highest fee rate\n+     * block possible based on mempool transactions.\n+     */\n+    CFeeRate minTxFeeRate();",
      "path": "src/miner.h",
      "position": null,
      "original_position": 28,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Functions should be capitalized:\r\n\r\n```suggestion\r\n    CFeeRate MinTxFeeRate();\r\n```",
      "created_at": "2021-03-26T13:03:54Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602270596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602270596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602272135",
      "pull_request_review_id": 621980840,
      "id": 602272135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI3MjEzNQ==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = ::ChainActive().Tip();\n+\n+    // Update cache fee rate\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_mempool, Params()).minTxFeeRate();\n+    std::chrono::microseconds delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d µs to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "again, maybe avoid greek letters:\r\n\r\n```suggestion\r\n    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\r\n```",
      "created_at": "2021-03-26T13:05:25Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602272135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602272135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602276459",
      "pull_request_review_id": 621980840,
      "id": 602276459,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI3NjQ1OQ==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are these definitely needed? You're just going to throw the block template away at the end.",
      "created_at": "2021-03-26T13:09:48Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602276459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602276459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 329,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602276869",
      "pull_request_review_id": 621980840,
      "id": 602276869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI3Njg2OQ==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Avoid the global `::ChainActive()`",
      "created_at": "2021-03-26T13:10:12Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602276869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602276869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 333,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602278993",
      "pull_request_review_id": 621980840,
      "id": 602278993,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI3ODk5Mw==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();\n+    assert(prev_block_index != nullptr);\n+    nHeight = prev_block_index->nHeight + 1;\n+\n+    block->nTime = static_cast<uint32_t>(GetAdjustedTime());",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 89,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is needed. You're throwing away the block afterwards.",
      "created_at": "2021-03-26T13:12:33Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602278993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602278993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602279120",
      "pull_request_review_id": 621980840,
      "id": 602279120,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI3OTEyMA==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();\n+    assert(prev_block_index != nullptr);\n+    nHeight = prev_block_index->nHeight + 1;\n+\n+    block->nTime = static_cast<uint32_t>(GetAdjustedTime());\n+    const int64_t median_time_past = prev_block_index->GetMedianTimePast();\n+\n+    nLockTimeCutoff = median_time_past;",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 92,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "join these lines?",
      "created_at": "2021-03-26T13:12:42Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602279120",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602279120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 338,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 340,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602283867",
      "pull_request_review_id": 621980840,
      "id": 602283867,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI4Mzg2Nw==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();\n+    assert(prev_block_index != nullptr);\n+    nHeight = prev_block_index->nHeight + 1;\n+\n+    block->nTime = static_cast<uint32_t>(GetAdjustedTime());\n+    const int64_t median_time_past = prev_block_index->GetMedianTimePast();\n+\n+    nLockTimeCutoff = median_time_past;\n+    fIncludeWitness = IsWitnessEnabled(prev_block_index, chainparams.GetConsensus());\n+\n+    {\n+        LOCK2(cs_main, m_mempool.cs);",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is `cs_main` definitely required here? `addPackageTxs()` isn't annotated to say that it's required.",
      "created_at": "2021-03-26T13:17:38Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602283867",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602283867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602295773",
      "pull_request_review_id": 621980840,
      "id": 602295773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjI5NTc3Mw==",
      "diff_hunk": "@@ -308,7 +358,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)\n+void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated, CFeeRate* min_package_fee_rate)",
      "path": "src/miner.cpp",
      "position": 76,
      "original_position": 111,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`min_package_fee_rate` seems very cheap to calculate. Perhaps just make it a reference so it's always returned.\r\n\r\n(even better would be:\r\n\r\n```suggestion\r\nstd::tuple<int, int, CFeeRate> BlockAssembler::addPackageTxs()\r\n```\r\n\r\nbut that's maybe beyond the scope of this PR)",
      "created_at": "2021-03-26T13:32:06Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602295773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602295773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 337,
      "original_line": 337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602301898",
      "pull_request_review_id": 621980840,
      "id": 602301898,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjMwMTg5OA==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "avoid global `::ChainActive`",
      "created_at": "2021-03-26T13:40:39Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602301898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602301898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602306177",
      "pull_request_review_id": 621980840,
      "id": 602306177,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjMwNjE3Nw==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>",
      "path": "src/txrebroadcast.cpp",
      "position": 11,
      "original_position": 10,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we prefer to include all headers that are used in the translation unit, even if they're also included in the corresponding header file. You don't need to remove the \"#include <util/time.h> in the _[rebroadcast] Track rebroadcast attempts_ commit.",
      "created_at": "2021-03-26T13:46:30Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602306177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602306177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602306915",
      "pull_request_review_id": 621980840,
      "id": 602306915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjMwNjkxNQ==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps add some of the description from the _[rebroadcast] Track rebroadcast attempts_ commit log here. It's not at all obvious why we'd stop rebroadcasting after some time, and that commit log has a good explanation.",
      "created_at": "2021-03-26T13:47:29Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602306915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602306915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602310627",
      "pull_request_review_id": 621980840,
      "id": 602310627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjMxMDYyNw==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = ::ChainActive().Tip();\n+\n+    // Update cache fee rate\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_mempool, Params()).minTxFeeRate();\n+    std::chrono::microseconds delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d µs to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RecordAttempt(indexed_rebroadcast_set::index<index_by_wtxid>::type::iterator& entry_it)",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe pass in the current time to avoid calling `GetTime()` for every transaction?",
      "created_at": "2021-03-26T13:52:23Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602310627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602310627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602313388",
      "pull_request_review_id": 621980840,
      "id": 602313388,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjMxMzM4OA==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "y so verbose?\r\n\r\n```suggestion\r\nstatic constexpr std::chrono::hours MAX_ENTRY_AGE = 24h * 30 * 3;\r\n```",
      "created_at": "2021-03-26T13:55:51Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602313388",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602313388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602315679",
      "pull_request_review_id": 621980840,
      "id": 602315679,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjMxNTY3OQ==",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test node rebroadcast logic.\n+\n+We start by creating a set of transactions to set the rebroadcast minimum fee\n+cache to a medium fee rate value.\n+\n+We then create three sets of transactions:\n+    1. aged high fee rate\n+    2. aged low fee rate\n+    3. recent high fee rate\n+\n+We add a new connection, trigger the rebroadcast functionality by mining an\n+empty block, check that the aged high fee rate transactions were succesfully\n+rebroadcast, and that the other two sets were not rebroadcast.\n+\"\"\"\n+\n+from test_framework.p2p import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_greater_than,\n+    create_confirmed_utxos,\n+)\n+import time",
      "path": "test/functional/p2p_rebroadcast.py",
      "position": null,
      "original_position": 28,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Import standard libraries first, then local modules (this is the opposite order from c++)",
      "created_at": "2021-03-26T13:58:26Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602315679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602315679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605955358",
      "pull_request_review_id": 626660219,
      "id": 605955358,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTk1NTM1OA==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "braced initialization? 😛 ",
      "created_at": "2021-04-01T21:26:23Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605955358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605955358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605958836",
      "pull_request_review_id": 626660219,
      "id": 605958836,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTk1ODgzNg==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid),\n+          m_count(1) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count;\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+using indexed_rebroadcast_set = boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(CTxMemPool& mempool, ChainstateManager& chainman)\n+        : m_mempool(mempool),\n+          m_chainman(chainman){};\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+protected:\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;\n+\n+    /** Keep track of previous rebroadcast attempts */\n+    indexed_rebroadcast_set m_attempt_tracker;\n+\n+    /** Update an existing RebroadcastEntry - increment count and update timestamp */\n+    void RecordAttempt(indexed_rebroadcast_set::index<index_by_wtxid>::type::iterator& entry_it);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+\n+    const ChainstateManager& m_chainman;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Limit the size of m_attempt_tracker by deleting the oldest entries */\n+    void TrimMaxRebroadcast();",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 92,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why oldest and not random eviction, for example?\r\nHave you considered having a configurable value (similar to `-maxorphantx`)?",
      "created_at": "2021-04-01T21:34:05Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605958836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605958836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605964572",
      "pull_request_review_id": 626660219,
      "id": 605964572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTk2NDU3Mg==",
      "diff_hunk": "@@ -96,3 +104,24 @@ void TxRebroadcastHandler::RecordAttempt(indexed_rebroadcast_set::index<index_by\n \n     m_attempt_tracker.modify(entry_it, UpdateRebroadcastEntry);\n };\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()",
      "path": "src/txrebroadcast.cpp",
      "position": 229,
      "original_position": 27,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "6f70142fcecac7098fb5aed1ae51cc59d20fb14c",
      "in_reply_to_id": 600952359,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Other cases:\r\n- tx was RBFed out of mempool\r\n- parents were invalidated by conflicting tx in mempool and/or block\r\n\r\n~I think it boils down to = if we aren't keeping the tx in mempool, don't keep it in the rebroadcast tracker.~ I totally misunderstood, I thought you wouldn't want a tx in rebroadcast tracker if you didn't have it in mempool, but actually you'd want to keep it for a bit.\r\n\r\n",
      "created_at": "2021-04-01T21:48:08Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605964572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605964572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605967262",
      "pull_request_review_id": 626660219,
      "id": 605967262,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTk2NzI2Mg==",
      "diff_hunk": "@@ -1384,6 +1391,17 @@ void PeerManagerImpl::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlock\n         }\n     }\n \n+    // Rebroadcast selected mempool transactions\n+    if (gArgs.GetArg(\"-rebroadcast\", DEFAULT_REBROADCAST_ENABLED)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~I don't think we should rebroadcast after every block if we're in IBD?~\r\nNevermind there's already an IBD gate above",
      "created_at": "2021-04-01T21:55:02Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605967262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605967262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605968636",
      "pull_request_review_id": 626660219,
      "id": 605968636,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTk2ODYzNg==",
      "diff_hunk": "@@ -1246,9 +1249,12 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n     scheduler.scheduleEvery([this] { this->CheckForStaleTipAndEvictPeers(); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n \n-    // schedule next run for 10-15 minutes in the future\n+    // Attempt initial broadcast of locally submitted transactions in 10-15 minutes\n     const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n     scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n+\n+    // Rebroadcast cache every minute\n+    scheduler.scheduleEvery([this] { m_txrebroadcast.CacheMinRebroadcastFee(); }, std::chrono::minutes{1});",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same, maybe not worth doing until after IBD?",
      "created_at": "2021-04-01T21:58:17Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605968636",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605968636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606592920",
      "pull_request_review_id": 627423620,
      "id": 606592920,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjU5MjkyMA==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();\n+    assert(prev_block_index != nullptr);\n+    nHeight = prev_block_index->nHeight + 1;\n+\n+    block->nTime = static_cast<uint32_t>(GetAdjustedTime());\n+    const int64_t median_time_past = prev_block_index->GetMedianTimePast();\n+\n+    nLockTimeCutoff = median_time_past;\n+    fIncludeWitness = IsWitnessEnabled(prev_block_index, chainparams.GetConsensus());",
      "path": "src/miner.cpp",
      "position": 62,
      "original_position": 93,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602268144,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "so you'd prefer if I hard coded this to `fIncludeWitness = true`? \r\n🤔 `IsWitnessEnabled` doesn't seem like an expensive function. ",
      "created_at": "2021-04-03T02:14:31Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r606592920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606592920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608381620",
      "pull_request_review_id": 629644971,
      "id": 608381620,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODM4MTYyMA==",
      "diff_hunk": "@@ -96,3 +104,24 @@ void TxRebroadcastHandler::RecordAttempt(indexed_rebroadcast_set::index<index_by\n \n     m_attempt_tracker.modify(entry_it, UpdateRebroadcastEntry);\n };\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()",
      "path": "src/txrebroadcast.cpp",
      "position": 229,
      "original_position": 27,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "6f70142fcecac7098fb5aed1ae51cc59d20fb14c",
      "in_reply_to_id": 600952359,
      "user": {
        "login": "i0x0ff",
        "id": 77497807,
        "node_id": "MDQ6VXNlcjc3NDk3ODA3",
        "avatar_url": "https://avatars.githubusercontent.com/u/77497807?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/i0x0ff",
        "html_url": "https://github.com/i0x0ff",
        "followers_url": "https://api.github.com/users/i0x0ff/followers",
        "following_url": "https://api.github.com/users/i0x0ff/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/i0x0ff/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/i0x0ff/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/i0x0ff/subscriptions",
        "organizations_url": "https://api.github.com/users/i0x0ff/orgs",
        "repos_url": "https://api.github.com/users/i0x0ff/repos",
        "events_url": "https://api.github.com/users/i0x0ff/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/i0x0ff/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removing entries from `m_attempt_tracker` when tx is removed from mempool doesn't seem necessary given `m_attempt_tracker` isn't used as a source for txs that need to be rebroadcasted.\r\n\r\nI also don't see an issue with keeping txs that have already been included in a block or RBFed out of mempool in the `m_attempt_tracker` for up to 90 days (as per current setting) or till it gets removed after 500 limit is reached. Removing these entries from `m_attempt_tracker` would  add unnecessary complexity for a small benefit of a little saved memory as far as I understand. On that note, would perhaps removing the 90 days limit and just keeping the 500 limit still be fine?",
      "created_at": "2021-04-07T06:46:11Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r608381620",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608381620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608501464",
      "pull_request_review_id": 629804032,
      "id": 608501464,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODUwMTQ2NA==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Super small nit: Since this is new code - consider renaming as `after_cnb_time` to conform to the symbol naming conventions as described in the developer notes? :)",
      "created_at": "2021-04-07T09:42:05Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r608501464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608501464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608820579",
      "pull_request_review_id": 630230235,
      "id": 608820579,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODgyMDU3OQ==",
      "diff_hunk": "@@ -96,3 +104,24 @@ void TxRebroadcastHandler::RecordAttempt(indexed_rebroadcast_set::index<index_by\n \n     m_attempt_tracker.modify(entry_it, UpdateRebroadcastEntry);\n };\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()",
      "path": "src/txrebroadcast.cpp",
      "position": 229,
      "original_position": 27,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "6f70142fcecac7098fb5aed1ae51cc59d20fb14c",
      "in_reply_to_id": 600952359,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Removing entries from `m_attempt_tracker` when tx is removed from mempool doesn't seem necessary given `m_attempt_tracker` isn't used as a source for txs that need to be rebroadcasted.\r\n\r\nI agree that rebroadcast would still work - the problem is more that `m_attempt_tracker` might not be able to fulfill its intended purpose with a 500 limit if it was keeping track of too many unnecessary transactions (and at the same time expel those that it was meant to keep track off after capacity is reached).\r\n",
      "created_at": "2021-04-07T16:40:54Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r608820579",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608820579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609138170",
      "pull_request_review_id": 630806829,
      "id": 609138170,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTEzODE3MA==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid),\n+          m_count(1) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count;",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 35,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594660140,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-04-07T23:28:31Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609138170",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609138170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609138293",
      "pull_request_review_id": 630807264,
      "id": 609138293,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTEzODI5Mw==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 9,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594661183,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed",
      "created_at": "2021-04-07T23:28:50Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609138293",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609138293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609139124",
      "pull_request_review_id": 630811077,
      "id": 609139124,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTEzOTEyNA==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+struct TxIds {",
      "path": "src/txrebroadcast.h",
      "position": 16,
      "original_position": 20,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594666637,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah, I considered this approach but I went for an explicitly defined structure because its easy to mix up txid & wtxid, and doing so would cause quiet failures. It feels harder for a call site to accidentally mixup with the named access. ",
      "created_at": "2021-04-07T23:31:12Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609139124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609139124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609139254",
      "pull_request_review_id": 630811754,
      "id": 609139254,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTEzOTI1NA==",
      "diff_hunk": "@@ -325,6 +326,7 @@ class PeerManagerImpl final : public PeerManager\n     ChainstateManager& m_chainman;\n     CTxMemPool& m_mempool;\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n+    TxRebroadcastHandler m_txrebroadcast;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594670252,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "great idea! done ",
      "created_at": "2021-04-07T23:31:42Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609139254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609139254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609140585",
      "pull_request_review_id": 630817965,
      "id": 609140585,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0MDU4NQ==",
      "diff_hunk": "@@ -76,6 +80,9 @@ static BlockAssembler::Options DefaultOptions()\n     } else {\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     }\n+\n+    options.m_skip_inclusion_until = std::chrono::microseconds::max();\n+    options.check_block_validity = true;",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594672688,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good point, removed",
      "created_at": "2021-04-07T23:35:55Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609140585",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609140585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 84,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609140637",
      "pull_request_review_id": 630818234,
      "id": 609140637,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0MDYzNw==",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <boost/test/unit_test.hpp>\n+#include <clientversion.h>\n+#include <consensus/tx_check.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <rpc/util.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <streams.h>\n+#include <test/util/setup_common.h>\n+#include <tuple>",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594673886,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed",
      "created_at": "2021-04-07T23:36:04Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609140637",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609140637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609142392",
      "pull_request_review_id": 630825755,
      "id": 609142392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0MjM5Mg==",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <boost/test/unit_test.hpp>",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594674279,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I separated them, but I have boost after internal. Is that ok? Btw, I don't see anything in the style guide about this, maybe we should add? ",
      "created_at": "2021-04-07T23:40:55Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609142392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609142392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609145300",
      "pull_request_review_id": 630838092,
      "id": 609145300,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0NTMwMA==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 18,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594677303,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that having the boost headers has much tangible impact, but I decided to implement mostly for code legibility. The boost logic was ~1/2 of `txrebroadcast.h`, obscuring the way the module is supposed to be interacted with. I think it'd be fine for now, but more annoying if the rebroadcast logic were to get any more complex, which I think is a possibility. ",
      "created_at": "2021-04-07T23:49:10Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609145300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609145300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609145812",
      "pull_request_review_id": 630840211,
      "id": 609145812,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0NTgxMg==",
      "diff_hunk": "@@ -17,29 +16,63 @@ static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n /** Default minimum age for a transaction to be rebroadcast */\n static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n \n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n {\n     std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n \n     // If there has not been a cache run since the last block, the fee rate\n     // condition will not filter out any transactions, so skip this run.\n     if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n \n     BlockAssembler::Options options;\n     options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n-    options.m_skip_inclusion_until = GetTime<std::chrono::microseconds>() - REBROADCAST_MIN_TX_AGE;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n     options.check_block_validity = false;\n     options.blockMinFeeRate = m_cached_fee_rate;\n \n     // Use CreateNewBlock to identify rebroadcast candidates\n     auto block_template = BlockAssembler(m_mempool, Params(), options)\n                           .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n \n-    LOCK(m_mempool.cs);",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0c84415ae9fa1a32faace05db1e0d83979c7533b",
      "in_reply_to_id": 600948474,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oops, removed",
      "created_at": "2021-04-07T23:50:44Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609145812",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609145812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609146845",
      "pull_request_review_id": 630845156,
      "id": 609146845,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0Njg0NQ==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602170601,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-04-07T23:54:01Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609146845",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609146845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609146983",
      "pull_request_review_id": 630845784,
      "id": 609146983,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0Njk4Mw==",
      "diff_hunk": "@@ -133,6 +133,10 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    std::chrono::microseconds m_skip_inclusion_until;\n+\n+    // To permit disabling block validity check\n+    bool check_block_validity;",
      "path": "src/miner.h",
      "position": null,
      "original_position": 7,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602247755,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-04-07T23:54:24Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609146983",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609146983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609147479",
      "pull_request_review_id": 630848012,
      "id": 609147479,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0NzQ3OQ==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602249928,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok ok, I think I auto-ed the `GetTime` call sites. ",
      "created_at": "2021-04-07T23:55:49Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609147479",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609147479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609147657",
      "pull_request_review_id": 630848798,
      "id": 609147657,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0NzY1Nw==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602255196,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "aw man, I thought I was _so cool_ ",
      "created_at": "2021-04-07T23:56:21Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609147657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609147657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609147770",
      "pull_request_review_id": 630849283,
      "id": 609147770,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0Nzc3MA==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602266206,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-04-07T23:56:45Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609147770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609147770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609148059",
      "pull_request_review_id": 630850553,
      "id": 609148059,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE0ODA1OQ==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602267130,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah, looks like I copied this from `CreateNewBlock` and thought it was a \"safety check\" but I agree, it seems pointless. Removed.",
      "created_at": "2021-04-07T23:57:35Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609148059",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609148059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 323,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609150392",
      "pull_request_review_id": 630860859,
      "id": 609150392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE1MDM5Mg==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = ::ChainActive().Tip();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602269820,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done by making chainman a member",
      "created_at": "2021-04-08T00:04:45Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609150392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609150392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609150476",
      "pull_request_review_id": 630861294,
      "id": 609150476,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTE1MDQ3Ng==",
      "diff_hunk": "@@ -163,6 +169,12 @@ class BlockAssembler\n     static Optional<int64_t> m_last_block_num_txs;\n     static Optional<int64_t> m_last_block_weight;\n \n+    /* This function wraps addPackageTxs to calculate and return the minimum fee\n+     * rate required for a package to currently be included in the highest fee rate\n+     * block possible based on mempool transactions.\n+     */\n+    CFeeRate minTxFeeRate();",
      "path": "src/miner.h",
      "position": null,
      "original_position": 28,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602270596,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2021-04-08T00:05:04Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609150476",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/609150476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610047195",
      "pull_request_review_id": 631775638,
      "id": 610047195,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA0NzE5NQ==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602276459,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you're right, so I've removed these three lines. nice catch! ",
      "created_at": "2021-04-08T19:49:05Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r610047195",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610047195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 329,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610048842",
      "pull_request_review_id": 631777585,
      "id": 610048842,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA0ODg0Mg==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602276869,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed ",
      "created_at": "2021-04-08T19:51:40Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r610048842",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610048842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 333,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610049607",
      "pull_request_review_id": 631778430,
      "id": 610049607,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA0OTYwNw==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();\n+    assert(prev_block_index != nullptr);\n+    nHeight = prev_block_index->nHeight + 1;\n+\n+    block->nTime = static_cast<uint32_t>(GetAdjustedTime());",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 89,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602278993,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agreed, gone",
      "created_at": "2021-04-08T19:52:47Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r610049607",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610049607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610161831",
      "pull_request_review_id": 631889360,
      "id": 610161831,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDE2MTgzMQ==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602301898,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed ",
      "created_at": "2021-04-08T22:29:21Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r610161831",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610161831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611919507",
      "pull_request_review_id": 633921697,
      "id": 611919507,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxOTUwNw==",
      "diff_hunk": "@@ -188,7 +190,10 @@ class BlockAssembler\n       * only as an extra check in case of suboptimal node configuration */\n     bool TestPackageTransactions(const CTxMemPool::setEntries& package) const;\n     /** Return true if given transaction from mapTx has already been evaluated,\n-      * or if the transaction's cached data in mapTx is incorrect. */\n+      * or if the transaction's cached data in mapTx is incorrect.\n+      * If m_skip_inclusion_until is set in the options, we will skip\n+      * transactions until they meet that age. This is currently used for\n+      * rebroadcast logic.*/",
      "path": "src/miner.h",
      "position": null,
      "original_position": 24,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "06890651027cc50bdf3897283386a973bbf55725",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 06890651027cc50bdf3897283386a973bbf55725 \"[mining] Add recency condition on block creation to get rebroadcast set\"\r\n\r\nThis comment could be clearer as `m_skip_inclusion_until` isn't really an age. Rather we exclude any transactions that entered the mempool after the time specified by `m_skip_inclusion_until`.",
      "created_at": "2021-04-12T20:06:55Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611919507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611919507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611930625",
      "pull_request_review_id": 633921697,
      "id": 611930625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkzMDYyNQ==",
      "diff_hunk": "@@ -20,10 +21,15 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n {\n     std::vector<TxIds> rebroadcast_txs;\n \n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == m_chainman.ActiveChain().Tip()) return rebroadcast_txs;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "8b4db051bac56cefa8c85fe20e5548ddfab0f070",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 8b4db051bac56cefa8c85fe20e5548ddfab0f070 \"[rebroadcast] Apply a fee rate filter\"\r\n\r\nI'm having a hard time understanding how this comment explains the condition here. Could you explain in more detail?",
      "created_at": "2021-04-12T20:26:14Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611930625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611930625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611952972",
      "pull_request_review_id": 633921697,
      "id": 611952972,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTk1Mjk3Mg==",
      "diff_hunk": "@@ -181,3 +181,29 @@ void TxRebroadcastHandler::TrimMaxRebroadcast()\n         m_attempt_tracker->get<index_by_last_attempt>().erase(it);\n     }\n };\n+\n+void TxRebroadcastHandler::UpdateAttempt(const uint256 txhsh, const int count, const std::chrono::microseconds last_attempt_time)\n+{\n+    auto it = m_attempt_tracker->find(txhsh);\n+    for (int i = 0; i < count; ++i) {\n+        auto UpdateRebroadcastEntry = [last_attempt_time](RebroadcastEntry& rebroadcast_entry) {\n+            rebroadcast_entry.m_last_attempt = last_attempt_time;\n+            ++rebroadcast_entry.m_count;\n+        };\n+\n+        m_attempt_tracker->modify(it, UpdateRebroadcastEntry);\n+    }",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d579110263ad07386f1fbf796a3397a12340b6d5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In d579110263ad07386f1fbf796a3397a12340b6d5 \"[test] Add unit test for rebroadcast attempt logic\"\r\n\r\nIt seems like this for loop is not necessary as it is essentially doing `m_count += count`. Could instead be:\r\n\r\n```suggestion\r\n    auto UpdateRebroadcastEntry = [last_attempt_time, count](RebroadcastEntry& rebroadcast_entry) {\r\n        rebroadcast_entry.m_last_attempt = last_attempt_time;\r\n        rebroadcast_entry.m_count += count;\r\n    };\r\n\r\n    m_attempt_tracker->modify(it, UpdateRebroadcastEntry);\r\n```",
      "created_at": "2021-04-12T21:03:35Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611952972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611952972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 188,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611954385",
      "pull_request_review_id": 633921697,
      "id": 611954385,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTk1NDM4NQ==",
      "diff_hunk": "@@ -20,6 +20,24 @@\n \n #include <boost/test/unit_test.hpp>\n \n+class TxRebroadcastHandlerTest : public TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandlerTest(CTxMemPool& mempool, ChainstateManager& chainman, const CChainParams& chainparams) :\n+        TxRebroadcastHandler(mempool, chainman, chainparams){};\n+\n+    void UpdateAttempt(uint256 txhsh, int count)\n+    {\n+        auto attempt_time = GetTime<std::chrono::microseconds>() - 4h;",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d579110263ad07386f1fbf796a3397a12340b6d5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In d579110263ad07386f1fbf796a3397a12340b6d5 \"[test] Add unit test for rebroadcast attempt logic\"\r\n\r\nIt seems a bit odd to me that this function is supposed to be a wrapper but it also implements a little bit of test logic in that it changes the recorded last attempt time. I think it would make more sense to have the main test logic calculate the timestamp change and make this function a pure wrapper (or perhaps remove the entire class).",
      "created_at": "2021-04-12T21:06:07Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611954385",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611954385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611956645",
      "pull_request_review_id": 633921697,
      "id": 611956645,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTk1NjY0NQ==",
      "diff_hunk": "@@ -96,7 +142,7 @@ BOOST_AUTO_TEST_CASE(max_rebroadcast)\n \n     // Check that the transaction gets returned to rebroadcast\n     std::vector<TxIds> candidates = tx_rebroadcast.GetRebroadcastTransactions();\n-    BOOST_CHECK_EQUAL(candidates.size(), 1);\n+    BOOST_REQUIRE_EQUAL(candidates.size(), 1);",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0f13d876977d6a83549fa40f68a73308ba10d95d",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0f13d876977d6a83549fa40f68a73308ba10d95d \"[test] Add unit test for the fee rate cache\"\r\n\r\nSeems like this change should be part of the previous commit.",
      "created_at": "2021-04-12T21:10:11Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611956645",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611956645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611956732",
      "pull_request_review_id": 633921697,
      "id": 611956732,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTk1NjczMg==",
      "diff_hunk": "@@ -114,7 +160,7 @@ BOOST_AUTO_TEST_CASE(max_rebroadcast)\n     SetMockTime(current_time);\n     // Then check that it gets returned for rebroadacst\n     candidates = tx_rebroadcast.GetRebroadcastTransactions();\n-    BOOST_CHECK_EQUAL(candidates.size(), 1);\n+    BOOST_REQUIRE_EQUAL(candidates.size(), 1);",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0f13d876977d6a83549fa40f68a73308ba10d95d",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0f13d876977d6a83549fa40f68a73308ba10d95d \"[test] Add unit test for the fee rate cache\"\r\n\r\nSeems like this change should be part of the previous commit.",
      "created_at": "2021-04-12T21:10:20Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611956732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611956732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611961040",
      "pull_request_review_id": 633921697,
      "id": 611961040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTk2MTA0MA==",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2021 The Bitcoin Core developers",
      "path": "test/functional/p2p_rebroadcast.py",
      "position": null,
      "original_position": 2,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7005767691005f66e7e08ec2e575d436dae3be47",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 7005767691005f66e7e08ec2e575d436dae3be47 \"[test] Functional tests for rebroadcast logic.\"\r\n\r\n```suggestion\r\n# Copyright (c) 2021 The Bitcoin Core developers\r\n```",
      "created_at": "2021-04-12T21:18:18Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611961040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611961040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611964069",
      "pull_request_review_id": 633921697,
      "id": 611964069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTk2NDA2OQ==",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test node rebroadcast logic.\n+\n+We start by creating a set of transactions to set the rebroadcast minimum fee\n+cache to a medium fee rate value.\n+\n+We then create three sets of transactions:\n+    1. aged high fee rate\n+    2. aged low fee rate\n+    3. recent high fee rate\n+\n+We add a new connection, trigger the rebroadcast functionality by mining an\n+empty block, check that the aged high fee rate transactions were succesfully\n+rebroadcast, and that the other two sets were not rebroadcast.\n+\"\"\"\n+\n+from test_framework.p2p import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_greater_than,\n+    create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+\n+class NodeRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex\",\n+            \"-rebroadcast=1\"\n+        ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # Calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))",
      "path": "test/functional/p2p_rebroadcast.py",
      "position": null,
      "original_position": 55,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7005767691005f66e7e08ec2e575d436dae3be47",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 7005767691005f66e7e08ec2e575d436dae3be47 \"[test] Functional tests for rebroadcast logic.\"\r\n\r\n`getrawtransaction` can decode txs too.\r\n\r\n\r\n```suggestion\r\n        raw_tx = node.getrawtransaction(input_tx_hsh, True)\r\n```",
      "created_at": "2021-04-12T21:24:05Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611964069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611964069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611967264",
      "pull_request_review_id": 633921697,
      "id": 611967264,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTk2NzI2NA==",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test node rebroadcast logic.\n+\n+We start by creating a set of transactions to set the rebroadcast minimum fee\n+cache to a medium fee rate value.\n+\n+We then create three sets of transactions:\n+    1. aged high fee rate\n+    2. aged low fee rate\n+    3. recent high fee rate\n+\n+We add a new connection, trigger the rebroadcast functionality by mining an\n+empty block, check that the aged high fee rate transactions were succesfully\n+rebroadcast, and that the other two sets were not rebroadcast.\n+\"\"\"\n+\n+from test_framework.p2p import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_greater_than,\n+    create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+\n+class NodeRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex\",\n+            \"-rebroadcast=1\"\n+        ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
      "path": "test/functional/p2p_rebroadcast.py",
      "position": 46,
      "original_position": 45,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7005767691005f66e7e08ec2e575d436dae3be47",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 7005767691005f66e7e08ec2e575d436dae3be47 \"[test] Functional tests for rebroadcast logic.\"\r\n\r\nIt would be nice to not require the wallet for a p2p test.",
      "created_at": "2021-04-12T21:29:58Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611967264",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611967264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612104598",
      "pull_request_review_id": 634143525,
      "id": 612104598,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjEwNDU5OA==",
      "diff_hunk": "@@ -7,17 +7,22 @@\n #include <miner.h>\n #include <script/script.h>\n #include <txrebroadcast.h>\n+#include <util/time.h>\n \n /** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n  *  such as miners mining priority transactions. */\n static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n \n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "24e7415aeb248f5df3ca3492d5a6b75a213f978d",
      "in_reply_to_id": 593968023,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "30 minutes was chosen as the minimum age to ensure that transactions would have ample time to propagate through mempools. I don't think it makes sense for this to be a configurable value, both because of what sipa highlighted here: https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806284509, as well as the fact that it would increase the complexity of reasoning about & maintenance burden. However, that said, I don't think of this value (30min) as set in stone- through the review process & running the patch, we should identify if this value is appropriate. Another thing to keep in mind is that any rebroadcast candidates will have to pass through `filterInventoryKnown` for an inv to be sent to the peer. \r\n",
      "created_at": "2021-04-13T03:40:34Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612104598",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612104598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612114162",
      "pull_request_review_id": 634156171,
      "id": 612114162,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjExNDE2Mg==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid),\n+          m_count(1) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count;\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+using indexed_rebroadcast_set = boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(CTxMemPool& mempool, ChainstateManager& chainman)\n+        : m_mempool(mempool),\n+          m_chainman(chainman){};\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+protected:\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;\n+\n+    /** Keep track of previous rebroadcast attempts */\n+    indexed_rebroadcast_set m_attempt_tracker;\n+\n+    /** Update an existing RebroadcastEntry - increment count and update timestamp */\n+    void RecordAttempt(indexed_rebroadcast_set::index<index_by_wtxid>::type::iterator& entry_it);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+\n+    const ChainstateManager& m_chainman;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Limit the size of m_attempt_tracker by deleting the oldest entries */\n+    void TrimMaxRebroadcast();",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 92,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 605958836,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "RE oldest vs random:\r\nsince the attempt tracker updates the timestamp every time a transaction is selected as a candidate for rebroadcast, it makes sense to me that the least relevant would be ones that haven't been selected for the longest time. usually we use randomness in p2p data structures to ensure that a malicious peer cannot have disproportionate influence, which I don't think quite applies here. its possible that a peer could roll the attempt tracker, but they would also have to roll filterInventoryKnown in order to spend actual network bandwidth. I haven't thought this through in great depth, so let me know if I'm missing some reasons why we should consider randomizing.\r\n\r\nRE configurable: \r\nas sipa mentioned in https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806284509, \"generally the criterion for deciding whether a parameter should be configurable is whether you can also give advice under which cases users should be changing it, and how.\" I am also sensitive to introducing configurable params because it increases the maintenance burden of the project essentially forever. Do you see use cases of how you would recommend users to adjust the attempt tracker? The main reason I'd imagine for wanting a larger tracker is to reduce bandwidth, but in that case I think a \"turn rebroadcast off\" toggle would make more sense (and of this PR its off by default) ",
      "created_at": "2021-04-13T04:06:49Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612114162",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612114162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612122954",
      "pull_request_review_id": 634165996,
      "id": 612122954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjEyMjk1NA==",
      "diff_hunk": "@@ -20,10 +21,15 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n {\n     std::vector<TxIds> rebroadcast_txs;\n \n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == m_chainman.ActiveChain().Tip()) return rebroadcast_txs;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "8b4db051bac56cefa8c85fe20e5548ddfab0f070",
      "in_reply_to_id": 611930625,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "you're right, this comment is really confusing. updated to: \r\n```\r\n    // If the cache has run since we received the last block, the fee rate\r\n    // condition will not filter out any transactions, so skip this run.\r\n```\r\n\r\nAnd here's some more explanation: \r\n\r\nLet's refer to the fee rate for a txn to be in the top `MAX_REBROADCAST_WEIGHT` as top-of-mempool fee rate. The only event that has the ability to decrease the top-of-mempool fee rate is a block being mined. Otherwise, as transactions enter the mempool, the top-of-mempool fee rate either stays the same or increases. \r\n\r\nIf the top-of-mempool fee rate is only increasing over time, the fee rate cache would not help filter any transactions out. \r\n\r\nOur desired order is: cache | block | rebroadcast, with the delta between cache & block to be as small as possible. \r\n\r\nThe order we want to skip is: block | cache | rebroadcast, because then the fee rate filter will be meaningless, and would simply select the _next highest_ transactions to rebroadcast (which we logically wouldn't expect to be mined yet). \r\n\r\nDoes this make sense? Does the update to the comment help clarify? I'm not sure the best way to capture this in the code, so open to suggestions. ",
      "created_at": "2021-04-13T04:29:17Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612122954",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612122954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612128556",
      "pull_request_review_id": 634172110,
      "id": 612128556,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjEyODU1Ng==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602306915,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done, how's it look? [`3f4b664` (#21061)](https://github.com/bitcoin/bitcoin/pull/21061/commits/3f4b664fbc021b1c1ccabbf0f448a208c1463496)",
      "created_at": "2021-04-13T04:49:55Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612128556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612128556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612129176",
      "pull_request_review_id": 634172845,
      "id": 612129176,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjEyOTE3Ng==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = ::ChainActive().Tip();\n+\n+    // Update cache fee rate\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_mempool, Params()).minTxFeeRate();\n+    std::chrono::microseconds delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d µs to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RecordAttempt(indexed_rebroadcast_set::index<index_by_wtxid>::type::iterator& entry_it)",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602310627,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "no longer using the `RecordAttempt` function here, but did apply the concept so we don't call `GetTime` on a loop, https://github.com/bitcoin/bitcoin/pull/21061/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-7dff50848db96bdb8edffc4d21daeca6d9050ec0e67d96072780ea5751e7df06R124",
      "created_at": "2021-04-13T04:52:22Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612129176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612129176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612129381",
      "pull_request_review_id": 634173135,
      "id": 612129381,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjEyOTM4MQ==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 605955358,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, done for all the constants in this file ",
      "created_at": "2021-04-13T04:53:16Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612129381",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612129381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612129729",
      "pull_request_review_id": 634173548,
      "id": 612129729,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjEyOTcyOQ==",
      "diff_hunk": "@@ -1246,9 +1249,12 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n     scheduler.scheduleEvery([this] { this->CheckForStaleTipAndEvictPeers(); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n \n-    // schedule next run for 10-15 minutes in the future\n+    // Attempt initial broadcast of locally submitted transactions in 10-15 minutes\n     const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n     scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n+\n+    // Rebroadcast cache every minute\n+    scheduler.scheduleEvery([this] { m_txrebroadcast.CacheMinRebroadcastFee(); }, std::chrono::minutes{1});",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 605968636,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good point! I kick off the scheduler here, but an early exit in the function if IBD: https://github.com/bitcoin/bitcoin/pull/21061/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-7dff50848db96bdb8edffc4d21daeca6d9050ec0e67d96072780ea5751e7df06R152",
      "created_at": "2021-04-13T04:54:31Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612129729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612129729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612130356",
      "pull_request_review_id": 634174256,
      "id": 612130356,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjEzMDM1Ng==",
      "diff_hunk": "@@ -188,7 +190,10 @@ class BlockAssembler\n       * only as an extra check in case of suboptimal node configuration */\n     bool TestPackageTransactions(const CTxMemPool::setEntries& package) const;\n     /** Return true if given transaction from mapTx has already been evaluated,\n-      * or if the transaction's cached data in mapTx is incorrect. */\n+      * or if the transaction's cached data in mapTx is incorrect.\n+      * If m_skip_inclusion_until is set in the options, we will skip\n+      * transactions until they meet that age. This is currently used for\n+      * rebroadcast logic.*/",
      "path": "src/miner.h",
      "position": null,
      "original_position": 24,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "06890651027cc50bdf3897283386a973bbf55725",
      "in_reply_to_id": 611919507,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Used this suggested wording & updated to: \r\n```\r\n      * If m_skip_inclusion_until is set in the options, we will exclude any\r\n      * transactions that entered the mempool after the time specified. This is\r\n      * currently used for rebroadcast logic. */\r\n```",
      "created_at": "2021-04-13T04:56:46Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612130356",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612130356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612130713",
      "pull_request_review_id": 634174588,
      "id": 612130713,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjEzMDcxMw==",
      "diff_hunk": "@@ -181,3 +181,29 @@ void TxRebroadcastHandler::TrimMaxRebroadcast()\n         m_attempt_tracker->get<index_by_last_attempt>().erase(it);\n     }\n };\n+\n+void TxRebroadcastHandler::UpdateAttempt(const uint256 txhsh, const int count, const std::chrono::microseconds last_attempt_time)\n+{\n+    auto it = m_attempt_tracker->find(txhsh);\n+    for (int i = 0; i < count; ++i) {\n+        auto UpdateRebroadcastEntry = [last_attempt_time](RebroadcastEntry& rebroadcast_entry) {\n+            rebroadcast_entry.m_last_attempt = last_attempt_time;\n+            ++rebroadcast_entry.m_count;\n+        };\n+\n+        m_attempt_tracker->modify(it, UpdateRebroadcastEntry);\n+    }",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d579110263ad07386f1fbf796a3397a12340b6d5",
      "in_reply_to_id": 611952972,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good point, updated!",
      "created_at": "2021-04-13T04:57:49Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612130713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612130713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 188,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612130777",
      "pull_request_review_id": 634174634,
      "id": 612130777,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjEzMDc3Nw==",
      "diff_hunk": "@@ -96,7 +142,7 @@ BOOST_AUTO_TEST_CASE(max_rebroadcast)\n \n     // Check that the transaction gets returned to rebroadcast\n     std::vector<TxIds> candidates = tx_rebroadcast.GetRebroadcastTransactions();\n-    BOOST_CHECK_EQUAL(candidates.size(), 1);\n+    BOOST_REQUIRE_EQUAL(candidates.size(), 1);",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0f13d876977d6a83549fa40f68a73308ba10d95d",
      "in_reply_to_id": 611956645,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2021-04-13T04:57:57Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612130777",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612130777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612329994",
      "pull_request_review_id": 634434327,
      "id": 612329994,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMyOTk5NA==",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <boost/test/unit_test.hpp>",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594674279,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that's the right way to do it.\r\n\r\nI don't think we have any guidance in the style guide, but general best practice seems to be to go from small to large: https://stackoverflow.com/a/2762596/933705.",
      "created_at": "2021-04-13T10:37:13Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612329994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612329994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612330523",
      "pull_request_review_id": 634434904,
      "id": 612330523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMzMDUyMw==",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test node rebroadcast logic.\n+\n+We start by creating a set of transactions to set the rebroadcast minimum fee\n+cache to a medium fee rate value.\n+\n+We then create three sets of transactions:\n+    1. aged high fee rate\n+    2. aged low fee rate\n+    3. recent high fee rate\n+\n+We add a new connection, trigger the rebroadcast functionality by mining an\n+empty block, check that the aged high fee rate transactions were succesfully\n+rebroadcast, and that the other two sets were not rebroadcast.\n+\"\"\"\n+\n+from test_framework.p2p import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_greater_than,\n+    create_confirmed_utxos,\n+)\n+import time",
      "path": "test/functional/p2p_rebroadcast.py",
      "position": null,
      "original_position": 28,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602315679,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(this is recommended in PEP8: https://www.python.org/dev/peps/pep-0008/#imports)",
      "created_at": "2021-04-13T10:37:59Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612330523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612330523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615063731",
      "pull_request_review_id": 638006948,
      "id": 615063731,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTA2MzczMQ==",
      "diff_hunk": "@@ -308,7 +358,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)\n+void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated, CFeeRate* min_package_fee_rate)",
      "path": "src/miner.cpp",
      "position": 76,
      "original_position": 111,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602295773,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agree that updating `min_package_fee_rate` is pretty cheap, there's no additional calculation, its just updating the stored value, but might do so up to ~once per mempool transaction. \r\n\r\nbut can you help me understand the context of why you're suggesting a reference? even if it's not a lot of calculation, seems unnecessary? \r\n\r\n(agree that returning a tuple instead of in/out params would be nice. but leaving other params as is within this PR.)",
      "created_at": "2021-04-16T19:00:00Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615063731",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615063731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 337,
      "original_line": 337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615105060",
      "pull_request_review_id": 638061925,
      "id": 615105060,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEwNTA2MA==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = ::ChainActive().Tip();\n+\n+    // Update cache fee rate\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_mempool, Params()).minTxFeeRate();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 107,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 596515495,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added some logging to see how often this happens, and indeed it looks like it skips 1-3 times on most days, sometimes up to ~10 times. So, this mechanism seems good, I'll add it. ",
      "created_at": "2021-04-16T20:26:56Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615105060",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615105060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615107046",
      "pull_request_review_id": 638064435,
      "id": 615107046,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEwNzA0Ng==",
      "diff_hunk": "@@ -96,3 +104,24 @@ void TxRebroadcastHandler::RecordAttempt(indexed_rebroadcast_set::index<index_by\n \n     m_attempt_tracker.modify(entry_it, UpdateRebroadcastEntry);\n };\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()",
      "path": "src/txrebroadcast.cpp",
      "position": 229,
      "original_position": 27,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "6f70142fcecac7098fb5aed1ae51cc59d20fb14c",
      "in_reply_to_id": 600952359,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added commit 2ac22164f82a51d4eaece9acc42f346e8db679a5 to address this! I agree that when transactions are removed from the mempool for certain reasons, we are highly unlikely to see it again, so it makes sense for it to be removed from the rebroadcast attempt tracker. It's ok if it doesn't work perfectly for edge cases, but this behavior supports helps it work as intended. Thanks! ",
      "created_at": "2021-04-16T20:31:06Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615107046",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615107046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615107487",
      "pull_request_review_id": 638065064,
      "id": 615107487,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEwNzQ4Nw==",
      "diff_hunk": "@@ -8,15 +8,53 @@\n #include <policy/feerate.h>\n #include <tuple>\n #include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n #include <validation.h>\n \n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n struct TxIds {\n     TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n \n     const uint256 m_txid;\n     const uint256 m_wtxid;\n };\n \n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid),\n+          m_count(1) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count;\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+using indexed_rebroadcast_set = boost::multi_index_container<",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 34,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0c84415ae9fa1a32faace05db1e0d83979c7533b",
      "in_reply_to_id": 600955209,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "seems reasonable, but this PR is getting pretty huge so I'd rather keep this for a follow-up. I've noted it down here https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771426879 so I can keep track of it, and am going to resolve this conversation. ",
      "created_at": "2021-04-16T20:32:08Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615107487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615107487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615108294",
      "pull_request_review_id": 638066211,
      "id": 615108294,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEwODI5NA==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();\n+    assert(prev_block_index != nullptr);\n+    nHeight = prev_block_index->nHeight + 1;\n+\n+    block->nTime = static_cast<uint32_t>(GetAdjustedTime());\n+    const int64_t median_time_past = prev_block_index->GetMedianTimePast();\n+\n+    nLockTimeCutoff = median_time_past;\n+    fIncludeWitness = IsWitnessEnabled(prev_block_index, chainparams.GetConsensus());\n+\n+    {\n+        LOCK2(cs_main, m_mempool.cs);",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602283867,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tried to audit `addPackageTxs` and I think you're right that it's not necessary, but it's hard to be certain because there is a lot going on in the function & its only ever called under the `cs_main` lock. Do you have any recommendations for how I could build confidence other than checking the thread of every call site of every invoked function / variable? Maybe I could just remove and run the node and give it a 👍 if it doesn't crash for a week? 😅",
      "created_at": "2021-04-16T20:34:05Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615108294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615108294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615108623",
      "pull_request_review_id": 638066656,
      "id": 615108623,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEwODYyMw==",
      "diff_hunk": "@@ -20,6 +20,24 @@\n \n #include <boost/test/unit_test.hpp>\n \n+class TxRebroadcastHandlerTest : public TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandlerTest(CTxMemPool& mempool, ChainstateManager& chainman, const CChainParams& chainparams) :\n+        TxRebroadcastHandler(mempool, chainman, chainparams){};\n+\n+    void UpdateAttempt(uint256 txhsh, int count)\n+    {\n+        auto attempt_time = GetTime<std::chrono::microseconds>() - 4h;",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d579110263ad07386f1fbf796a3397a12340b6d5",
      "in_reply_to_id": 611954385,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok! removed the entire class and just made the test functions public with a comment indicating they are test only ",
      "created_at": "2021-04-16T20:34:51Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615108623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615108623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615108953",
      "pull_request_review_id": 638067080,
      "id": 615108953,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEwODk1Mw==",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test node rebroadcast logic.\n+\n+We start by creating a set of transactions to set the rebroadcast minimum fee\n+cache to a medium fee rate value.\n+\n+We then create three sets of transactions:\n+    1. aged high fee rate\n+    2. aged low fee rate\n+    3. recent high fee rate\n+\n+We add a new connection, trigger the rebroadcast functionality by mining an\n+empty block, check that the aged high fee rate transactions were succesfully\n+rebroadcast, and that the other two sets were not rebroadcast.\n+\"\"\"\n+\n+from test_framework.p2p import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_greater_than,\n+    create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+\n+class NodeRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex\",\n+            \"-rebroadcast=1\"\n+        ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
      "path": "test/functional/p2p_rebroadcast.py",
      "position": 46,
      "original_position": 45,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7005767691005f66e7e08ec2e575d436dae3be47",
      "in_reply_to_id": 611967264,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agreed, I've noted it down here: https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771426879 so I can keep track of it, and will address either in this PR or in a follow up. I'm going to resolve this conversation and will track it with that comment.  ",
      "created_at": "2021-04-16T20:35:31Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615108953",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615108953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615132868",
      "pull_request_review_id": 638098056,
      "id": 615132868,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEzMjg2OA==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d1bcb1d213ae380bbfce516a04c11a68864d3bbd",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIUC the purpose of this variable, we assume miners's mempools to be composed in average of 1/4 of _irreplaceable_ transactions. I.e transactions even if we know better feerate candidates, we won't be able to replace them as their scores are unduly increased by miner's mempool policy.\r\n\r\nIntuitively, this sounds a lot, do you have any real-world data backing up this assumption ? One could look on how many mined block transactions are under the local node `MinTxFeeRate` you've introduced to determine the size of the _surprise_ set.\r\n\r\nWhat's the trade-off of picking a value deviating from real-world data ? Well I think you may prevent or delay rebroadcast of transactions in the bottom quarter of block feerate. Due to this delay, broadcasting clients of those transactions may reach a fee-bumping timer and they trigger a RBF/CPFP in consequence. As such bleeding feerate beyond what would have been effective to get into block templates.\r\n\r\nIf the risk I'm describing is founded, do you think we should preserve transactions broadcaster's feerate instead of network nodes' bandwidth ? I'm leaning toward a yes as rebroadcast logic is at least opt-in, but broadcaster won't be aware of their peers's policies barring propagation of their good-enough feerate transaction.",
      "created_at": "2021-04-16T21:34:02Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615132868",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615132868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615146994",
      "pull_request_review_id": 638098056,
      "id": 615146994,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE0Njk5NA==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};",
      "path": "src/txrebroadcast.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d1bcb1d213ae380bbfce516a04c11a68864d3bbd",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's say an attacker partitions a victim's mempool from the rest of network mempools thanks to maliciously conflicting transactions. E.g send non-rbf signaling, _differing_ transactions to victim and all its tx-relay connected peers. \r\n\r\nThose malicious transactions are attached a feerate high-enough to completely occupy the `m_attempt_tracker`. Due to `MIN_REATTEMPT_INTERVAL`=4h and assuming 6 blocks per hour, it will require 6 * 4 * 500 = 12000 transactions to jam victim's rebroadcast attempt. Of course, `MAX_REBROADCAST_COUNT` should upper bound such behavior, but an attacker can easily renew `m_attempt_tracker` jamming by RBFing the pinning transactions.\r\n\r\nLet's assume malicious transactions size is `MIN_STANDARD_TX_NONWITNESS_SIZE`, so 82 bytes. Let's assume top block feerate is 170 sat/vbyte. Shrugging at RBF replacement fee penalties, 12_000 * 82 * 170 = 167_280_000 sats. So a permanent `m_attempt_tracker` jamming would require 1,67 BTC available to the attacker, though not burnt if the mempool isolation is operated properly.\r\n\r\nDo the attack model seems sound to you ? If so I think we should carefully document risks of `m_attempt_tracker` pinning and likely scale up parameters value.",
      "created_at": "2021-04-16T22:14:41Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615146994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615146994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615153925",
      "pull_request_review_id": 638098056,
      "id": 615153925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE1MzkyNQ==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};",
      "path": "src/txrebroadcast.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Assuming an entry's `m_count` reaches `MAX_REBROADCAST_COUNT`, it should never be again selected by `GetRebroadcastTransactions`. At that point, should we return an event to the wallet logic inviting to RBF the transaction ? \r\n\r\nOtherwise, the entry should stale until deletion by `TrimMaxRebroadcast`. At that point should we return an event inviting to re-submit the _same_ transaction ? Network mempools might have cleared up in between.\r\n\r\nI don't know if this new rebroadcasting mechanism should be transparent or not to Bitcoin applications vetted with their own rebroadcasting logics. ",
      "created_at": "2021-04-16T22:38:12Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615153925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615153925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615156761",
      "pull_request_review_id": 638098056,
      "id": 615156761,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE1Njc2MQ==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};",
      "path": "src/txrebroadcast.cpp",
      "position": 37,
      "original_position": 37,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the rational to pick up this value ?\r\n\r\nI don't think Bitcoin applications care about confirmation of transactions broadcast 3 months ago. At the contrary, an attacker could use this really long expiration delay as a fingerprint vector.\r\n\r\nLet's say in optimistic scenarios, a rebroadcast entry has a compelling feerate enough to be selected by `GetRebroadcastTransactions` after each `MIN_REATTEMPT_INTERVAL`, after 6 * 4, it's matured enough to be legitimately expired ? Of course, we can assume some margin of error and double to 48h. Or even select `MEMPOOL_EXPIRY` as a maximum age. But I don't understand the month-length delay...  ",
      "created_at": "2021-04-16T22:48:22Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615156761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615156761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615157000",
      "pull_request_review_id": 638126672,
      "id": 615157000,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE1NzAwMA==",
      "diff_hunk": "@@ -226,6 +226,7 @@ BITCOIN_CORE_H = \\\n   txdb.h \\\n   txmempool.h \\\n   txorphanage.h \\\n+  txrebroadcast.h \\\n   txrequest.h \\\n   undo.h \\",
      "path": "src/Makefile.am",
      "position": 6,
      "original_position": 6,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": null,
      "user": {
        "login": "78051301012",
        "id": 37097169,
        "node_id": "MDQ6VXNlcjM3MDk3MTY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/37097169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/78051301012",
        "html_url": "https://github.com/78051301012",
        "followers_url": "https://api.github.com/users/78051301012/followers",
        "following_url": "https://api.github.com/users/78051301012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/78051301012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/78051301012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/78051301012/subscriptions",
        "organizations_url": "https://api.github.com/users/78051301012/orgs",
        "repos_url": "https://api.github.com/users/78051301012/repos",
        "events_url": "https://api.github.com/users/78051301012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/78051301012/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n  txdb.h \\\r\n  txmempool.h \\\r\n  txorphanage.h \\\r\n  txrebroadcast.h \\\r\n  txrequest.h \\\r\n  undo.h \\\r\n```",
      "created_at": "2021-04-16T22:49:23Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615157000",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615157000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": 235,
      "original_start_line": 226,
      "start_side": "RIGHT",
      "line": 240,
      "original_line": 240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615158074",
      "pull_request_review_id": 638127908,
      "id": 615158074,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE1ODA3NA==",
      "diff_hunk": "@@ -226,6 +226,7 @@ BITCOIN_CORE_H = \\\n   txdb.h \\\n   txmempool.h \\\n   txorphanage.h \\\n+  txrebroadcast.h \\\n   txrequest.h \\\n   undo.h \\",
      "path": "src/Makefile.am",
      "position": 6,
      "original_position": 6,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615157000,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is there a suggestion here?",
      "created_at": "2021-04-16T22:53:42Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615158074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615158074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": 235,
      "original_start_line": 226,
      "start_side": "RIGHT",
      "line": 240,
      "original_line": 240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615158323",
      "pull_request_review_id": 638098056,
      "id": 615158323,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE1ODMyMw==",
      "diff_hunk": "@@ -1283,22 +1286,57 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);\n+\n+        // Run fee rate cache every minute\n+        scheduler.scheduleEvery([this] { m_txrebroadcast->CacheMinRebroadcastFee(); }, std::chrono::minutes{1});",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Have you tried to run this branch on mainet with a wide-sized mempool ? I think there is a logger in `CacheMinRebroadcastFee`, do you have stats to share on how much time it take by attempts ?\r\n\r\nNot sure if the block min feerate accuracy is worth the CPU time...",
      "created_at": "2021-04-16T22:54:41Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615158323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615158323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615159376",
      "pull_request_review_id": 638098056,
      "id": 615159376,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE1OTM3Ng==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If the cache has run since we received the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == m_chainman.ActiveTip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) return;\n+\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = m_chainman.ActiveTip();\n+\n+    // Update cache fee rate\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams).MinTxFeeRate();\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()\n+{\n+    // Delete any entries that are older than MAX_ENTRY_AGE\n+    auto min_age = GetTime<std::chrono::microseconds>() - MAX_ENTRY_AGE;\n+\n+    while (!m_attempt_tracker->empty()) {\n+        auto it = m_attempt_tracker->get<index_by_last_attempt>().begin();\n+        if (it->m_last_attempt < min_age) {\n+            m_attempt_tracker->get<index_by_last_attempt>().erase(it);\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    // If there are still too many entries, delete the oldest ones",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 184,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think a deletion criteria which might applied before age is delaying if `m_count` == `MAX_REBROADCAST_COUNT`. A transaction might be the oldest one but still feerate compelling and was unlucky on its previous rebroadcast attempts ?",
      "created_at": "2021-04-16T22:58:11Z",
      "updated_at": "2021-05-06T16:36:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615159376",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615159376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615159937",
      "pull_request_review_id": 638098056,
      "id": 615159937,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE1OTkzNw==",
      "diff_hunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+    /** Remove transaction entry from the attempt tracker.*/\n+    void RemoveFromAttemptTracker(const CTransactionRef& tx);\n+\n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;\n+\n+    /** Test only */\n+    void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+    const ChainstateManager& m_chainman;\n+    const CChainParams& m_chainparams;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 59,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not exactly to be included in a block as we overprice its weight with `MAX_REBROADCAST_WEIGHT` ?",
      "created_at": "2021-04-16T23:00:26Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615159937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615159937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615161228",
      "pull_request_review_id": 638098056,
      "id": 615161228,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE2MTIyOA==",
      "diff_hunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+    /** Remove transaction entry from the attempt tracker.*/\n+    void RemoveFromAttemptTracker(const CTransactionRef& tx);\n+\n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;\n+\n+    /** Test only */\n+    void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+    const ChainstateManager& m_chainman;\n+    const CChainParams& m_chainparams;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;\n+\n+    /** Keep track of previous rebroadcast attempts.\n+     *\n+     *  There are circumstances where our mempool might know about transactions\n+     *  that will never be mined. Two examples:\n+     *  1. A software upgrade tightens policy, but the node has not been\n+     *  upgraded and thus is accepting transactions that other nodes on the\n+     *  network now reject.\n+     *  2. An attacker targets the network by sending conflicting transactions\n+     *  to nodes based on their distance from a miner.",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 69,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand how victim's node distance from miner mempools make it easier or harder to successfully conflict. Of course, you can assume that few miner mempools are running full-rbf and as such you can't leverage lack of rbf signaling as a tx-relay jamming vector but a) require victim to be _strict neighbor_ of miner and b) attacker can exploit other relay policies differences, i.e non taproot spend allowed ?",
      "created_at": "2021-04-16T23:06:21Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615161228",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615161228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615164135",
      "pull_request_review_id": 638098056,
      "id": 615164135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE2NDEzNQ==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};",
      "path": "src/txrebroadcast.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you should document somewhere how `filterInventoryKnown` is mitigating bandwidth attacks as described by gmaxwell in your notes. Even if you can pin `m_attempt_tracker` permanently or for a while, most of reattempt should be ended up by being passed over and won't consume again INV bandwidth.\r\n\r\nThough you may roll over a majority of network nodes's `filterInventoryKnown` with cheap-RBF replacement ? Dunno if anyone has already done the math, but it might be interesting to know them for this PR...",
      "created_at": "2021-04-16T23:18:42Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615164135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615164135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615166865",
      "pull_request_review_id": 638098056,
      "id": 615166865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE2Njg2NQ==",
      "diff_hunk": "@@ -458,6 +458,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections.\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-rebroadcast\", strprintf(\"Enable node rebroadcast functionality (default: %u)\", DEFAULT_REBROADCAST_ENABLED), ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);",
      "path": "src/init.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think for rational 2) to hold (\"If a spy observes a bitcoin core node rebroadcasting a transaction, it would no longer know that the node has wallet enabled\"), you need bandwidth increase from rebroadcast set to be low enough for not being a burden to a wide majority of node operators. Otherwise, a privacy attacker can still guess with high success that only node operators with an associated wallet will activate rebroadcasting.\r\n\r\nIs the longer plan to activate it by default ? If so we should have really good real-world data and I think consensus of what's an acceptable bandwidth increase for the alleged benefits.",
      "created_at": "2021-04-16T23:30:54Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615166865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615166865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 452,
      "original_line": 452,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615263491",
      "pull_request_review_id": 638232677,
      "id": 615263491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI2MzQ5MQ==",
      "diff_hunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+    /** Remove transaction entry from the attempt tracker.*/\n+    void RemoveFromAttemptTracker(const CTransactionRef& tx);\n+\n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;\n+\n+    /** Test only */\n+    void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+    const ChainstateManager& m_chainman;\n+    const CChainParams& m_chainparams;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 59,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615159937,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we apply `MAX_REBROADCAST_WEIGHT` for calculating the set of candidates when it is time to rebroadcast, not for calculating the minimum fee rate ",
      "created_at": "2021-04-17T14:45:45Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615263491",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615263491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615289678",
      "pull_request_review_id": 638266254,
      "id": 615289678,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI4OTY3OA==",
      "diff_hunk": "@@ -1283,22 +1286,57 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);\n+\n+        // Run fee rate cache every minute\n+        scheduler.scheduleEvery([this] { m_txrebroadcast->CacheMinRebroadcastFee(); }, std::chrono::minutes{1});",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615158323,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yup, here are some values are for running the whole function. Note that it does not distinguish CPU time vs time spent waiting to acquire the lock, as it currently acquires `cs_main` and `mempool.cs`, but the first might be unnecessary (see https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602283867): \r\n\r\nthe median value is 9090 μs, with 75% of the runs being under 11300 μs, and 99% of the run being under 11826 μs.\r\n\r\n> Not sure if the block min feerate accuracy is worth the CPU time...\r\n\r\nits a pretty critical component to this approach, without it the node would most likely be attempting to rebroadcast `MAX_REBROADCAST_WEIGHT` of transactions on every block.",
      "created_at": "2021-04-17T18:30:31Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615289678",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615289678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615290277",
      "pull_request_review_id": 638266672,
      "id": 615290277,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI5MDI3Nw==",
      "diff_hunk": "@@ -458,6 +458,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections.\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-rebroadcast\", strprintf(\"Enable node rebroadcast functionality (default: %u)\", DEFAULT_REBROADCAST_ENABLED), ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);",
      "path": "src/init.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615166865,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agree that we don't want rebroadcast to have high bandwidth requirements. the longer plan is to activate it by default after building confidence about resource usage. please see [Merge Plan & Next Steps](https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771426879).",
      "created_at": "2021-04-17T18:36:48Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615290277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615290277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 452,
      "original_line": 452,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615295498",
      "pull_request_review_id": 638269876,
      "id": 615295498,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI5NTQ5OA==",
      "diff_hunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+    /** Remove transaction entry from the attempt tracker.*/\n+    void RemoveFromAttemptTracker(const CTransactionRef& tx);\n+\n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;\n+\n+    /** Test only */\n+    void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+    const ChainstateManager& m_chainman;\n+    const CChainParams& m_chainparams;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;\n+\n+    /** Keep track of previous rebroadcast attempts.\n+     *\n+     *  There are circumstances where our mempool might know about transactions\n+     *  that will never be mined. Two examples:\n+     *  1. A software upgrade tightens policy, but the node has not been\n+     *  upgraded and thus is accepting transactions that other nodes on the\n+     *  network now reject.\n+     *  2. An attacker targets the network by sending conflicting transactions\n+     *  to nodes based on their distance from a miner.",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 69,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615161228,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I don't understand how victim's node distance from miner mempools make it easier or harder to successfully conflict\r\n\r\nI'm not suggesting it is?? ",
      "created_at": "2021-04-17T19:31:03Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615295498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615295498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617629020",
      "pull_request_review_id": 641200868,
      "id": 617629020,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzYyOTAyMA==",
      "diff_hunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+    /** Remove transaction entry from the attempt tracker.*/\n+    void RemoveFromAttemptTracker(const CTransactionRef& tx);\n+\n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;\n+\n+    /** Test only */\n+    void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+    const ChainstateManager& m_chainman;\n+    const CChainParams& m_chainparams;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;\n+\n+    /** Keep track of previous rebroadcast attempts.\n+     *\n+     *  There are circumstances where our mempool might know about transactions\n+     *  that will never be mined. Two examples:\n+     *  1. A software upgrade tightens policy, but the node has not been\n+     *  upgraded and thus is accepting transactions that other nodes on the\n+     *  network now reject.\n+     *  2. An attacker targets the network by sending conflicting transactions\n+     *  to nodes based on their distance from a miner.",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 69,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615161228,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So what are you suggesting is how a victim node distance from a miner enters into attacker motivation to target it ? Otherwise, I would suggest just drop \"distance from a miner\" part, I'm not sure if it significant information here.",
      "created_at": "2021-04-21T14:58:09Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r617629020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617629020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617653118",
      "pull_request_review_id": 641233365,
      "id": 617653118,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzY1MzExOA==",
      "diff_hunk": "@@ -1283,22 +1286,57 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);\n+\n+        // Run fee rate cache every minute\n+        scheduler.scheduleEvery([this] { m_txrebroadcast->CacheMinRebroadcastFee(); }, std::chrono::minutes{1});",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615158323,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> the median value is 9090 μs, with 75% of the runs being under 11300 μs, and 99% of the run being under 11826 μs.\r\n\r\nOkay and with a fulfilled mempool of the default size 300 MiB ? If yes I agree that's not that much and I think we're relieved on this concern :) If it does causes issues on low-grade nodes in the future, due to non-linear scaling of the CPU time in function of mempool size, I guess we'll be able to make this value configurable, offering a trade-off between CPU and bandwidth to node operators.\r\n\r\n> its a pretty critical component to this approach, without it the node would most likely be attempting to rebroadcast MAX_REBROADCAST_WEIGHT of transactions on every block.\r\n\r\nDo you mean without it or with a lower frequency rather than 1 min ? IIUC, the node would attempt to rebroadcast `MAX_REBROADCAST_WEIGHT` because you don't account for the fresh arrivals of new transactions. The feerate of those newcomers making most of your rebroadcast candidates irrelevant to block confirmation ? If refreshing the cache was costly, I guess we would run it once between _expected_ block intervals when the odds of having discovered enough new transactions to have a consistent view of next block are high. But cost is pretty low, so I don't think we care further... \r\n\r\nnit: maybe replace 1 by a named constant like `CACHE_REBROADCAST_FEERATE_FREQUENCY` ?",
      "created_at": "2021-04-21T15:26:17Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r617653118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617653118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621629648",
      "pull_request_review_id": 646390846,
      "id": 621629648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTYyOTY0OA==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};",
      "path": "src/txrebroadcast.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d1bcb1d213ae380bbfce516a04c11a68864d3bbd",
      "in_reply_to_id": 615146994,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what is the fundamental resource that is being spent in this attack? are you evaluating the possibility of asymmetric bandwidth usage? if that's the case then you also need to factor in rolling over `filterInventoryKnown`. \r\n\r\nalso I don't understand how the attacker avoids spending any funds- say A and A' are two versions of the same txn via RBF. A is sent to the victim & A' is sent to the rest of the network. according to the current patch, if A' gets mined into a block, A is removed from the attempt tracker. \r\n\r\nupdate: wait, you refer to the bandwidth interactions with `filterInventoryKnown` in your comment https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615164135, so then I must be missing what you are trying to describe in this attack.  \r\n\r\nsecond update: is an assumption behind this hypothetical attack that jamming `m_attempt_tracker` would prevent a node from rebroadcasting? just want to clarify that rebroadcasts would work without the tracker, its mainly a technique to mitigate bandwidth usage.",
      "created_at": "2021-04-27T21:51:05Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621629648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621629648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621632712",
      "pull_request_review_id": 646394238,
      "id": 621632712,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTYzMjcxMg==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};",
      "path": "src/txrebroadcast.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615153925,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> At that point, should we return an event to the wallet logic inviting to RBF the transaction ?\r\n\r\nthat's a cool idea. I don't think it is applicable yet, but I've noted it down for future work where it would be more relevant.\r\n\r\nwhy I don't think it is applicable yet: as of this patch, `ResendWalletTransactions` still calls `SubmitMemoryPoolAndRelay` with the `relay` bool set to `true` (aka patch doesn't change it). This gets used in `BroadcastTransaction` to force relaying the transaction to peers at the time of submission. in the future, the goal is to disable this (see \"Merge Plan & Next Steps\" in  https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771426879), at which time I believe this sort of mechanism would make sense. ",
      "created_at": "2021-04-27T21:56:47Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621632712",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621632712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621658134",
      "pull_request_review_id": 646422332,
      "id": 621658134,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY1ODEzNA==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};",
      "path": "src/txrebroadcast.cpp",
      "position": 37,
      "original_position": 37,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615156761,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand this comment, let me explain some of the mechanisms incase that helps. otherwise, please help me understand what you are trying to communicate.\r\n\r\n> I don't think Bitcoin applications care about confirmation of transactions broadcast 3 months ago.\r\n\r\n1. the attempt tracker records the timestamp of when the mempool transaction was last selected for rebroadcast, not when it was initially broadcast / ATMPed (see https://github.com/bitcoin/bitcoin/pull/21061/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-7dff50848db96bdb8edffc4d21daeca6d9050ec0e67d96072780ea5751e7df06R110 and https://github.com/bitcoin/bitcoin/pull/21061/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-7dff50848db96bdb8edffc4d21daeca6d9050ec0e67d96072780ea5751e7df06R125).\r\n2. `MAX_ENTRY_AGE` is only called from `TrimMaxRebroadcast`. It is essentially used to say \"if a transaction hasn't been selected for rebroadcast in the past 3 months, remove it from the attempt tracker\"\r\n\r\n> Let's say in optimistic scenarios, a rebroadcast entry has a compelling feerate enough to be selected by GetRebroadcastTransactions after each MIN_REATTEMPT_INTERVAL, after 6 * 4, it's matured enough to be legitimately expired ?\r\n\r\ncan you clarify what you mean by \"legitimately expired\"? if you mean that we should disable automatic rebroadcast so the txn can (probably) expire from the (majority of) network mempools, then yes I agree. which is why we put it on the tracker. but then, what is the question? \r\n\r\n>  select MEMPOOL_EXPIRY as a maximum age.\r\n\r\nif we stored transactions on the attempt tracker for the same duration as `MEMPOOL_EXPIRY` time, that would leave room for the issue that the attempt tracker is meant to address. for more explanation on that, please see https://github.com/amitiuttarwar/bitcoin-notes/blob/main/rebroadcast-history.md#faq section \"What happens if a transaction can / will never be mined?\". expiry would be one of the main ways to get the ping-ponging behavior for never-going-to-be-mined transactions (eg. due to a policy upgrade on the network).",
      "created_at": "2021-04-27T22:30:54Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621658134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621658134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621660734",
      "pull_request_review_id": 646430272,
      "id": 621660734,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY2MDczNA==",
      "diff_hunk": "@@ -1283,22 +1286,57 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);\n+\n+        // Run fee rate cache every minute\n+        scheduler.scheduleEvery([this] { m_txrebroadcast->CacheMinRebroadcastFee(); }, std::chrono::minutes{1});",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615158323,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Okay and with a fulfilled mempool of the default size 300 MiB ? If yes I agree that's not that much and I think we're relieved on this concern :)\r\n\r\nmy mempool is bumped up to 1000MiB, so these are values for a significantly-larger-than-normal mempool :)\r\n\r\n> I guess we'll be able to make this value configurable\r\n\r\nyup, rebroadcast currently defaults off, but the plan is to keep this toggle in the long run to address any bandwidth concerns.\r\n\r\n",
      "created_at": "2021-04-27T22:36:39Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621660734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621660734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621673594",
      "pull_request_review_id": 646441726,
      "id": 621673594,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY3MzU5NA==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If the cache has run since we received the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == m_chainman.ActiveTip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) return;\n+\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = m_chainman.ActiveTip();\n+\n+    // Update cache fee rate\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams).MinTxFeeRate();\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()\n+{\n+    // Delete any entries that are older than MAX_ENTRY_AGE\n+    auto min_age = GetTime<std::chrono::microseconds>() - MAX_ENTRY_AGE;\n+\n+    while (!m_attempt_tracker->empty()) {\n+        auto it = m_attempt_tracker->get<index_by_last_attempt>().begin();\n+        if (it->m_last_attempt < min_age) {\n+            m_attempt_tracker->get<index_by_last_attempt>().erase(it);\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    // If there are still too many entries, delete the oldest ones",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 184,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615159376,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hm, then what do you propose as the method to ensure old attempts expire from the tracker?\r\n\r\nkeep in mind that the time is updated every time a transaction is selected to be rebroadcast.\r\n\r\nthat said, there still could be the case that the transaction is very high fee rate but hasn't been rebroadcast in a long time because it hit the `MAX_REBROADCAST_COUNT`. if this is the concern, we could address that by re-ordering the if / else logic in `GetRebroadcastTransactions` and update the timestamp if a transaction is being considered to rebroadcast, but filtered due to having hit the max. this way they would stay recent and we could continue with the same deletion logic.",
      "created_at": "2021-04-27T22:59:45Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621673594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621673594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621685372",
      "pull_request_review_id": 646456271,
      "id": 621685372,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY4NTM3Mg==",
      "diff_hunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+    /** Remove transaction entry from the attempt tracker.*/\n+    void RemoveFromAttemptTracker(const CTransactionRef& tx);\n+\n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;\n+\n+    /** Test only */\n+    void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+    const ChainstateManager& m_chainman;\n+    const CChainParams& m_chainparams;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;\n+\n+    /** Keep track of previous rebroadcast attempts.\n+     *\n+     *  There are circumstances where our mempool might know about transactions\n+     *  that will never be mined. Two examples:\n+     *  1. A software upgrade tightens policy, but the node has not been\n+     *  upgraded and thus is accepting transactions that other nodes on the\n+     *  network now reject.\n+     *  2. An attacker targets the network by sending conflicting transactions\n+     *  to nodes based on their distance from a miner.",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 69,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615161228,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm unable to parse your question. Although I think it helps motivate the attack, I'll drop the end of the sentence.",
      "created_at": "2021-04-27T23:20:21Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621685372",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621685372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621687434",
      "pull_request_review_id": 646464168,
      "id": 621687434,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY4NzQzNA==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};",
      "path": "src/txrebroadcast.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615164135,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this comment seems to have a lot of overlap with the one you left here: https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615146994. I don't understand exactly what you mean by \"cheap-RBF replacement\". I'm going to resolve this conversation, but we can continue the topic in that other thread. ",
      "created_at": "2021-04-27T23:25:43Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621687434",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621687434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621709334",
      "pull_request_review_id": 646488920,
      "id": 621709334,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTcwOTMzNA==",
      "diff_hunk": "@@ -1283,22 +1286,57 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);\n+\n+        // Run fee rate cache every minute\n+        scheduler.scheduleEvery([this] { m_txrebroadcast->CacheMinRebroadcastFee(); }, std::chrono::minutes{1});",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615158323,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> maybe replace 1 by a named constant like `CACHE_REBROADCAST_FEERATE_FREQUENCY`\r\n\r\ndone",
      "created_at": "2021-04-28T00:03:20Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621709334",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621709334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621709628",
      "pull_request_review_id": 646489224,
      "id": 621709628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTcwOTYyOA==",
      "diff_hunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+    /** Remove transaction entry from the attempt tracker.*/\n+    void RemoveFromAttemptTracker(const CTransactionRef& tx);\n+\n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;\n+\n+    /** Test only */\n+    void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+    const ChainstateManager& m_chainman;\n+    const CChainParams& m_chainparams;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;\n+\n+    /** Keep track of previous rebroadcast attempts.\n+     *\n+     *  There are circumstances where our mempool might know about transactions\n+     *  that will never be mined. Two examples:\n+     *  1. A software upgrade tightens policy, but the node has not been\n+     *  upgraded and thus is accepting transactions that other nodes on the\n+     *  network now reject.\n+     *  2. An attacker targets the network by sending conflicting transactions\n+     *  to nodes based on their distance from a miner.",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 69,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615161228,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated to `2. An attacker targets the network by sending conflicting transactions to nodes.`\r\n",
      "created_at": "2021-04-28T00:04:02Z",
      "updated_at": "2021-05-05T05:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621709628",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621709628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626866576",
      "pull_request_review_id": 652706191,
      "id": 626866576,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjg2NjU3Ng==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <validation.h>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT = 3 * MAX_BLOCK_WEIGHT / 4;\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE = 30min;\n+\n+/** Maximum number of times we will rebroadcast a tranasaction */\n+static constexpr int MAX_REBROADCAST_COUNT = 6;\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL = 4h;\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES = 500;\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE = std::chrono::hours(3 * 30 * 24);\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If there has not been a cache run since the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == ::ChainActive().Tip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_mempool, Params(), options)\n+                          .CreateNewBlock(m_chainman.ActiveChainstate(), CScript());\n+    std::chrono::microseconds after_CNB_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker.find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker.end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker.insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now.\n+            RecordAttempt(entry_it);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    std::chrono::microseconds delta1 = after_CNB_time - start_time;\n+    std::chrono::microseconds delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d µs total, %d µs spent in CreateNewBlock.\\n\", delta1.count(), delta2.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = ::ChainActive().Tip();\n+\n+    // Update cache fee rate\n+    std::chrono::microseconds start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_mempool, Params()).minTxFeeRate();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 107,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 596515495,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-05-05T20:13:05Z",
      "updated_at": "2021-05-05T20:13:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r626866576",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626866576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627470377",
      "pull_request_review_id": 653488835,
      "id": 627470377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzQ3MDM3Nw==",
      "diff_hunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n+    /** Remove transaction entry from the attempt tracker.*/\n+    void RemoveFromAttemptTracker(const CTransactionRef& tx);\n+\n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;\n+\n+    /** Test only */\n+    void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+    const ChainstateManager& m_chainman;\n+    const CChainParams& m_chainparams;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time{nullptr};\n+\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate;\n+\n+    /** Keep track of previous rebroadcast attempts.\n+     *\n+     *  There are circumstances where our mempool might know about transactions\n+     *  that will never be mined. Two examples:\n+     *  1. A software upgrade tightens policy, but the node has not been\n+     *  upgraded and thus is accepting transactions that other nodes on the\n+     *  network now reject.\n+     *  2. An attacker targets the network by sending conflicting transactions\n+     *  to nodes based on their distance from a miner.",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 69,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615161228,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, my question was simply \"Why a node distance from a miner helps to motivate the attack ?\"",
      "created_at": "2021-05-06T14:26:28Z",
      "updated_at": "2021-05-06T14:26:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627470377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627470377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627575612",
      "pull_request_review_id": 653648606,
      "id": 627575612,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzU3NTYxMg==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};",
      "path": "src/txrebroadcast.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d1bcb1d213ae380bbfce516a04c11a68864d3bbd",
      "in_reply_to_id": 615146994,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the second clarifying update, effectively this is documented L124 in `src/txrebroadcast.cpp`, \"No existing entry, we will rebroadcast, so create new one\". \r\n\r\nSo IIUC, even if `m_attempt_tracker` is fulfilled with pinning transactions, it won't block node rebroadcast capability. I think pinning costs of `m_attempt_tracker` above roughly above but it can't be abused by an attacker to jam rebroadcasting, so we're good.\r\n\r\nI would recommend to document this \"pinning-doesn't-block-rebroadcast-so-not-a-new-tx-relay jamming-vector\" around `m_attempt_tracker` declaration in `src/txreconciliation.h`, it's quite an important design aspect imo.\r\n\r\nW.r.t to asymmetric bandwidth usage and risks of bleeding, I don't think `m_attempt_tracker` pinning is making it better or worst, I share the opinion we're ultimately protected by `filterInventoryKnown`.\r\n\r\n>  I don't understand how the attacker avoids spending any funds- say A and A' are two versions of the same txn via RBF. A is sent to the victim & A' is sent to the rest of the network. according to the current patch, if A' gets mined into a block, A is removed from the attempt tracker.\r\n\r\nI should have precise this point. Transaction A feerate to successfully pin `m_attempt_tracker` must be at 170 sat/vbyte. However transaction A' feerate just need to be above miners'mempools min feerates to block propagation of transaction A. If transaction A' feerate is 2 sat/vbyte, with same equation laid out above, effective pinning cost for an attacker is 12_000 * 82 * 2 = 1_968_000 sats and not 167_280_000 sats. Miners observe and eventually mine transactions with a far lower-feerate than the ones maliciously sent to non-miner nodes. This is what I meant by \"not burnt if the mempool isolation is operated properly\".",
      "created_at": "2021-05-06T16:20:16Z",
      "updated_at": "2021-05-06T17:13:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627575612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627575612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627615103",
      "pull_request_review_id": 653697420,
      "id": 627615103,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzYxNTEwMw==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};",
      "path": "src/txrebroadcast.cpp",
      "position": 37,
      "original_position": 37,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615156761,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC, by \"legitimately expired\" I meant a transaction of which `m_count` has reached `MAX_REBROADCAST_COUNT`. As we already rebroadcasted this transaction the maximum number of times permitted, we skip its rebroadcasting forever, but without necessarily removing it from `m_attempt_tracker` ? I think such transaction has exhausted its rebroadcast \"credit\" and it's mature enough to be \"legitimately\" expired or pruned. Though this deletion criteria isn't currently considered in `TrimMaxRebroadcast()` ? \r\n\r\nI think this deletion criteria would be more efficient to expire transactions from the majority of network mempools rather than MAX_ENTRY_AGE, especially with a 3 months delay.\r\n\r\n> if we stored transactions on the attempt tracker for the same duration as MEMPOOL_EXPIRY time, that would leave room for the issue that the attempt tracker is meant to address. for more explanation on that, please see https://github.com/amitiuttarwar/bitcoin-notes/blob/main/rebroadcast-history.md#faq section \"What happens if a transaction can / will never be mined?\". expiry would be one of the main ways to get the ping-ponging behavior for never-going-to-be-mined transactions (eg. due to a policy upgrade on the network)\r\n\r\nIIUC, the problem we're trying to solve is \"How to avoid never-going-to-be-mined transactions to forever ping-pong across the network ?\". \r\n\r\nTo achieve this aim, I believe we should expire a rebroadcast entry as soon as it has exhausted its rebroadcast count, a hint that either feerate is definitively aloof or severer circumstances as described in documentation. But selecting a MAX_ENTRY_AGE superior to MEMPOOL_EXPIRY moves in the opposite direction. \r\n\r\nIf rebroadcast entry _average_ rebroadcast interval  is superior to 56 hours, 56 * MAX_REBROADCAST_COUNT== MEMPOOL_EXPIRY and node rebroadcast guarantees attempts beyond the mempool expiration limit ?\r\n\r\nOr is the behavior I'm describing not possible ? I'm happy to illustrate with a test to assert our intuitions :)\r\n\r\nupdate: Or is the purpose of keeping rebroadcast entry with `m_count` == `MAX_REBROADCAST_COUNT` and only expire them when `last_attempt` is older than MAX_ENTRY_AGE prevent new registration in `m_attempt_tracker` cache provoked by rebroadcast from other network mempools ? Thus you expect a transaction to expire from mempools after MEMPOOL_EXPIRY, then to avoid network laggards with differing policy to trigger new rebroadcasting wawes, you have MAX_ENTRY_AGE as an upper bound of MEMPOOL_EXPIRY ? \r\n\r\nOkay I can see how it solves mempool ping-pong though reasoning could be better documented and still we should envisage to reduce MAX_ENTRY_AGE to minimize node fingerprinting.",
      "created_at": "2021-05-06T17:08:55Z",
      "updated_at": "2021-05-06T17:32:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627615103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627615103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627623142",
      "pull_request_review_id": 653708582,
      "id": 627623142,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzYyMzE0Mg==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If the cache has run since we received the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == m_chainman.ActiveTip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) return;\n+\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = m_chainman.ActiveTip();\n+\n+    // Update cache fee rate\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams).MinTxFeeRate();\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()\n+{\n+    // Delete any entries that are older than MAX_ENTRY_AGE\n+    auto min_age = GetTime<std::chrono::microseconds>() - MAX_ENTRY_AGE;\n+\n+    while (!m_attempt_tracker->empty()) {\n+        auto it = m_attempt_tracker->get<index_by_last_attempt>().begin();\n+        if (it->m_last_attempt < min_age) {\n+            m_attempt_tracker->get<index_by_last_attempt>().erase(it);\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    // If there are still too many entries, delete the oldest ones",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 184,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615159376,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we agree first on the problem solved by `m_attempt_tracker` ? See new comment : https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627615103\r\n\r\nWhat we want to do in `TrimMaxRebroadcast()` is pending on this conversation imo.",
      "created_at": "2021-05-06T17:21:38Z",
      "updated_at": "2021-05-06T17:21:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627623142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627623142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627635595",
      "pull_request_review_id": 653724809,
      "id": 627635595,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzYzNTU5NQ==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};",
      "path": "src/txrebroadcast.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615164135,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See second half of other comment answer on why you can consider RBF cheap for an attacker. More generally there is also the fact that the bip125 replacement penalty is static (DEFAULT_INCREMENTAL_RELAY_FEE) is _static_ and doesn't scale up in function of your mempool congestion.\r\n\r\nSimplify fee-bumping algorithms a lot though at the price of bandwidth overcost for network nodes processing replacement...\r\n\r\nW.r.t to `filterInventoryKnown`, a malicious roll over isn't new from introducing node rebroadcast logic, though from now this module make assumptions on it to prevent bandwidth bleeding.",
      "created_at": "2021-05-06T17:38:49Z",
      "updated_at": "2021-05-06T17:38:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627635595",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627635595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628043830",
      "pull_request_review_id": 654234067,
      "id": 628043830,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODA0MzgzMA==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems a shame to add a disk read here (which gets called in net_processing's `UpdatedBlockTip()` callback). We could avoid this by updating the `UpdatedBlockTip()` signature function to also pass a `const std::shared_ptr<const CBlock> &block` in the same way that `BlockConnected()` does. It could also just pass the weight of the new block, but that seems strangely specific for the validation interface. What do you think?",
      "created_at": "2021-05-07T08:55:45Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628043830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628043830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628053757",
      "pull_request_review_id": 654234067,
      "id": 628053757,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODA1Mzc1Nw==",
      "diff_hunk": "@@ -1286,22 +1289,57 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could go in the initializer list:\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex 9a7bc8efd3..79897845d3 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -337,7 +337,7 @@ private:\r\n     ChainstateManager& m_chainman;\r\n     CTxMemPool& m_mempool;\r\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\r\n-    std::unique_ptr<TxRebroadcastHandler> m_txrebroadcast;\r\n+    const std::unique_ptr<TxRebroadcastHandler> m_txrebroadcast;\r\n \r\n     /** The height of the best chain */\r\n     std::atomic<int> m_best_height{-1};\r\n@@ -1271,6 +1271,7 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\r\n       m_banman(banman),\r\n       m_chainman(chainman),\r\n       m_mempool(pool),\r\n+      m_txrebroadcast{enable_rebroadcast ? std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams) : nullptr},\r\n       m_stale_tip_check_time(0),\r\n       m_ignore_incoming_txs(ignore_incoming_txs)\r\n {\r\n@@ -1289,9 +1290,7 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\r\n     // same probability that we have in the reject filter).\r\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\r\n \r\n-    if (enable_rebroadcast) {\r\n-        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);\r\n-\r\n+    if (m_txrebroadcast) {\r\n         // Run fee rate cache every minute\r\n         scheduler.scheduleEvery([this] { m_txrebroadcast->CacheMinRebroadcastFee(); }, REBROADCAST_CACHE_FREQUENCY);\r\n     }\r\n[john] /home/john/Code/crypto/bitcoin\r\n```\r\n\r\nThat allows you to make the `m_txrebroadcast` member `const` (which means that there can't possibly be any data races on setting/reading the pointer).",
      "created_at": "2021-05-07T09:11:19Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628053757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628053757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628054781",
      "pull_request_review_id": 654234067,
      "id": 628054781,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODA1NDc4MQ==",
      "diff_hunk": "@@ -1286,22 +1289,57 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);\n+\n+        // Run fee rate cache every minute",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Don't put the value (`minute`) in this comment. If the constant is updated at some point in the future, this comment will become outdated. In fact, I think this comment can be removed entirely. The code is pretty self-documenting.",
      "created_at": "2021-05-07T09:12:48Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628054781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628054781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1295,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628060392",
      "pull_request_review_id": 654234067,
      "id": 628060392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODA2MDM5Mg==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {\n+        rebroadcast_block_weight = 3 * GetBlockWeight(block) / 4;\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());",
      "path": "src/txrebroadcast.cpp",
      "position": 128,
      "original_position": 109,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd be really nice if `BlockAssembler` could be extracted so that rebroadcast doesn't have dependencies on the mining-specific code. That would allow you to remove `m_chainman.ActiveChainstate()`, `m_chainparams` and `CScript()` from this call.",
      "created_at": "2021-05-07T09:21:13Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628060392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628060392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": 127,
      "original_start_line": 108,
      "start_side": "RIGHT",
      "line": 128,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628064681",
      "pull_request_review_id": 654234067,
      "id": 628064681,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODA2NDY4MQ==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe move this initialization down to below the call to CNB (just above the main for loop in this function where `rebroadcast_txs` is used), and then call `reserve` to the size of `block_template->block.vtx` so that we don't to multiple reallocations)",
      "created_at": "2021-05-07T09:27:55Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628064681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628064681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628081472",
      "pull_request_review_id": 654234067,
      "id": 628081472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODA4MTQ3Mg==",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <tuple>\n+#include <txmempool.h>\n+#include <util/hasher.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+struct TxIds {",
      "path": "src/txrebroadcast.h",
      "position": 16,
      "original_position": 20,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 594666637,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's fair. Marking this as resolved.",
      "created_at": "2021-05-07T09:54:48Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628081472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628081472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628084018",
      "pull_request_review_id": 654234067,
      "id": 628084018,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODA4NDAxOA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+/** Frequency to run the fee rate cache. */\n+constexpr std::chrono::minutes REBROADCAST_CACHE_FREQUENCY{1};\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions(const CBlockIndex* recent_block_index);",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 33,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could this be a `const CBlockIndex&` rather than pointer? `ReadBlockFromDisk()` unconditionally dereferences the pointer, so it can't be null.",
      "created_at": "2021-05-07T09:58:49Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628084018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628084018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628097324",
      "pull_request_review_id": 654234067,
      "id": 628097324,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODA5NzMyNA==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {\n+        rebroadcast_block_weight = 3 * GetBlockWeight(block) / 4;\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) return;\n+\n+    LOCK(m_rebroadcast_mutex);\n+\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = m_chainman.ActiveTip();\n+\n+    // Store the existing fee rate\n+    m_previous_cached_fee_rate = m_cached_fee_rate;\n+\n+    // Calculate a new cached fee rate\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams).MinTxFeeRate();\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    LOCK(m_rebroadcast_mutex);\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()\n+{",
      "path": "src/txrebroadcast.cpp",
      "position": 230,
      "original_position": 192,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add an assertion that `m_attempt_tracker` is held.",
      "created_at": "2021-05-07T10:21:35Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628097324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628097324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628101402",
      "pull_request_review_id": 654234067,
      "id": 628101402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODEwMTQwMg==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {\n+        rebroadcast_block_weight = 3 * GetBlockWeight(block) / 4;\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) return;\n+\n+    LOCK(m_rebroadcast_mutex);\n+\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = m_chainman.ActiveTip();\n+\n+    // Store the existing fee rate\n+    m_previous_cached_fee_rate = m_cached_fee_rate;\n+\n+    // Calculate a new cached fee rate\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams).MinTxFeeRate();\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    LOCK(m_rebroadcast_mutex);\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()\n+{\n+    // Delete any entries that are older than MAX_ENTRY_AGE\n+    auto min_age = GetTime<std::chrono::microseconds>() - MAX_ENTRY_AGE;\n+\n+    while (!m_attempt_tracker->empty()) {",
      "path": "src/txrebroadcast.cpp",
      "position": 234,
      "original_position": 196,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The two while loops can be consolidated:\r\n\r\n```diff\r\ndiff --git a/src/txrebroadcast.cpp b/src/txrebroadcast.cpp\r\nindex 940735df1a..401621153c 100644\r\n--- a/src/txrebroadcast.cpp\r\n+++ b/src/txrebroadcast.cpp\r\n@@ -195,18 +195,11 @@ void TxRebroadcastHandler::TrimMaxRebroadcast()\r\n \r\n     while (!m_attempt_tracker->empty()) {\r\n         auto it = m_attempt_tracker->get<index_by_last_attempt>().begin();\r\n-        if (it->m_last_attempt < min_age) {\r\n-            m_attempt_tracker->get<index_by_last_attempt>().erase(it);\r\n-        } else {\r\n+        if (it->m_last_attempt >= min_age && m_attempt_tracker->size() <= MAX_ENTRIES) {\r\n+            // The transaction is not old enough to trim and the attempt tracker is not full\r\n             break;\r\n         }\r\n     }\r\n-\r\n-    // If there are still too many entries, delete the oldest ones\r\n-    while (m_attempt_tracker->size() > MAX_ENTRIES) {\r\n-        auto it = m_attempt_tracker->get<index_by_last_attempt>().begin();\r\n-        m_attempt_tracker->get<index_by_last_attempt>().erase(it);\r\n-    }\r\n };\r\n```\r\n\r\nPerhaps that's easier to read since there's less repetition?\r\n\r\nIf you do that, then perhaps you could just remove this function entirely and put the loop inside `GetRebroadcastTransactions()` since it's only called in that one place.",
      "created_at": "2021-05-07T10:28:31Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628101402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628101402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628102526",
      "pull_request_review_id": 654234067,
      "id": 628102526,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODEwMjUyNg==",
      "diff_hunk": "@@ -78,6 +80,7 @@ static BlockAssembler::Options DefaultOptions()\n     } else {\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     }\n+",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps remove this added newline?",
      "created_at": "2021-05-07T10:30:24Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628102526",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628102526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628119730",
      "pull_request_review_id": 654234067,
      "id": 628119730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODExOTczMA==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {\n+        rebroadcast_block_weight = 3 * GetBlockWeight(block) / 4;\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) return;\n+\n+    LOCK(m_rebroadcast_mutex);\n+\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = m_chainman.ActiveTip();\n+\n+    // Store the existing fee rate\n+    m_previous_cached_fee_rate = m_cached_fee_rate;\n+\n+    // Calculate a new cached fee rate\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams).MinTxFeeRate();\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    LOCK(m_rebroadcast_mutex);\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()",
      "path": "src/txrebroadcast.cpp",
      "position": 229,
      "original_position": 191,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems to me that `m_attempt_tracker` has two distinct purposes:\r\n\r\n1. prevent us from rebroadcasting transactions too frequently (see `entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL`)\r\n2. prevent us from rebroadcasting transactions too many times (see `else if (entry_it->m_count >= MAX_REBROADCAST_COUNT)`)\r\n\r\nI think the expiry strategies conflict for these two purposes. Imagine that we (unupgraded) have 550 txs that are no longer standard for the rest of the network\r\n\r\n- for don't-rebroadcast-too-frequently, we want to expire least-recently-rebroadcast first, since if we expire more recently rebroadcast transactions, then we'll try to rebroadcast them again the next time we receive a block, and we'll end up rebroadcasting a very small set of txs very frequently.\r\n- for don't-rebroadcast-too-many-times, if we expire the least-recently-rebroadcast first, then the next time we calculate a rebroadcast set, we'll include them again, re-add them to attempt_tracker, and expire the next oldest 50. We'll continue cycling all the now-nonstandard transactions through the attempt tracker over and over again.\r\n\r\nI think it might be a good idea to separate these two purposes by adding a (rolling?) bloom filter for (2). Once a transaction has been rebroadcast `MIN_REATTEMPT_INTERVAL` times (or it's removed from the attempt tracker because the tracker is full) we toss it in the bloom filter and then never rebroadcast it again (at least until restart).",
      "created_at": "2021-05-07T10:58:58Z",
      "updated_at": "2021-05-07T10:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628119730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628119730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628786207",
      "pull_request_review_id": 655015796,
      "id": 628786207,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODc4NjIwNw==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};",
      "path": "src/txrebroadcast.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d1bcb1d213ae380bbfce516a04c11a68864d3bbd",
      "in_reply_to_id": 615146994,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> So IIUC, even if m_attempt_tracker is fulfilled with pinning transactions, it won't block node rebroadcast capability. \r\n\r\nyeah, exactly. \r\n\r\n> I would recommend to document this \"pinning-doesn't-block-rebroadcast-so-not-a-new-tx-relay jamming-vector\" around m_attempt_tracker declaration in src/txreconciliation.h, it's quite an important design aspect imo.\r\n\r\nI don't think it makes sense to document what data structures _don't_ do. \r\n\r\n> I should have precise this point...\r\n\r\nAh I understand now, thanks for clarifying. ",
      "created_at": "2021-05-08T19:17:09Z",
      "updated_at": "2021-05-08T19:17:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628786207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628786207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628821403",
      "pull_request_review_id": 655034454,
      "id": 628821403,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODgyMTQwMw==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};",
      "path": "src/txrebroadcast.cpp",
      "position": 37,
      "original_position": 37,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615156761,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it seems like the majority of this comment is based on a misunderstanding of how `m_attempt_tracker` works. \r\n\r\nthe update seems like its getting on the right track- the main purpose of tracking rebroadcast entries is to allow enforcing a maximum number of rebroadcast attempts. \r\n\r\n> IIUC, the problem we're trying to solve is \"How to avoid never-going-to-be-mined transactions to forever ping-pong across the network ?\".\r\n\r\nyes, exactly.\r\n\r\nbut it still seems like there is remaining confusion. `MAX_ENTRY_AGE` indicates the amount of time has passed since tx A has been rebroadcast to peers. if its been 3 months since we last tried to rebroadcast tx A, we remove the attempts from the tracker. if there is no entry for tx A on the tracker, we don't have record of the fact that we tried to rebroadcast it, so if tx A is selected by the block assembler, we would rebroadcast it again. \r\n\r\nI don't see how `MAX_ENTRY_AGE` would viably be used for node fingerprinting when you combine with the other factors such as `filterInventoryKnown`. ",
      "created_at": "2021-05-09T02:14:06Z",
      "updated_at": "2021-05-09T02:14:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628821403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628821403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628821498",
      "pull_request_review_id": 655034518,
      "id": 628821498,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODgyMTQ5OA==",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast 3/4 of max block weight to reduce noise due to circumstances\n+ *  such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    // If the cache has run since we received the last block, the fee rate\n+    // condition will not filter out any transactions, so skip this run.\n+    if (m_tip_at_cache_time == m_chainman.ActiveTip()) return rebroadcast_txs;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+    options.blockMinFeeRate = m_cached_fee_rate;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) return;\n+\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = m_chainman.ActiveTip();\n+\n+    // Update cache fee rate\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams).MinTxFeeRate();\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()\n+{\n+    // Delete any entries that are older than MAX_ENTRY_AGE\n+    auto min_age = GetTime<std::chrono::microseconds>() - MAX_ENTRY_AGE;\n+\n+    while (!m_attempt_tracker->empty()) {\n+        auto it = m_attempt_tracker->get<index_by_last_attempt>().begin();\n+        if (it->m_last_attempt < min_age) {\n+            m_attempt_tracker->get<index_by_last_attempt>().erase(it);\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    // If there are still too many entries, delete the oldest ones",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 184,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "7ae2e385b69764bd381677a17183ee01ffc7f178",
      "in_reply_to_id": 615159376,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, going to resolve this conversation here in favor of the other comment thread. ",
      "created_at": "2021-05-09T02:15:16Z",
      "updated_at": "2021-05-09T02:15:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628821498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628821498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629292659",
      "pull_request_review_id": 655550429,
      "id": 629292659,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI5MjY1OQ==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {\n+        rebroadcast_block_weight = 3 * GetBlockWeight(block) / 4;\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Quick comment noticed while writing about this review club session. IIRC it's preferable to pass `uint256` by reference to const rather than by value, e.g. `const uint256& txid{tx->GetHash()};` or `const auto& txid = tx->GetHash();` (and here these aliases may as well be const anyway as IIUC they aren't intended to be mutated). It looks like there are a few other places.",
      "created_at": "2021-05-10T11:50:13Z",
      "updated_at": "2021-05-10T12:00:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629292659",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629292659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629805112",
      "pull_request_review_id": 656231133,
      "id": 629805112,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTgwNTExMg==",
      "diff_hunk": "@@ -76,6 +76,8 @@ static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n static constexpr uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n /** Default for blocks only*/\n static const bool DEFAULT_BLOCKSONLY = false;\n+/** Default for node rebroadcast logic */\n+static constexpr bool DEFAULT_REBROADCAST_ENABLED = false;",
      "path": "src/net.h",
      "position": null,
      "original_position": 5,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "a3367b9b79086326f75d111d6b381088d88312f0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In a3367b9b79086326f75d111d6b381088d88312f0 [p2p] Implement flag to disable rebroadcast \r\n\r\nShould this be in net_processing.h instead of net.h? It seems more like an application-layer thing.",
      "created_at": "2021-05-11T02:32:14Z",
      "updated_at": "2021-05-11T03:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629805112",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629805112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629809015",
      "pull_request_review_id": 656231133,
      "id": 629809015,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTgwOTAxNQ==",
      "diff_hunk": "@@ -306,6 +306,29 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::MinTxFeeRate()",
      "path": "src/miner.cpp",
      "position": 49,
      "original_position": 4,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d72f030be9c9fa77e23132268e16708d7cbb192e",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Approach-related question about d72f030be9c9fa77e23132268e16708d7cbb192e  [mining] Calculate the minimum fee rate for transaction inclusion\r\n\r\nApologies if this has already been asked. Why is a new `BlockAssembler::MinTxFeeRate()` function created instead of using `CBlockPolicyEstimator::estimateSmartFee()` with a confirmation target of 1 block or some implementation built using the fee estimator? I'm not too familiar with how it works, but it seems like a very similar idea - get an estimation of what fee would be needed to make it into the next block.",
      "created_at": "2021-05-11T02:45:57Z",
      "updated_at": "2021-05-11T03:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629809015",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629809015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 308,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629812701",
      "pull_request_review_id": 656231133,
      "id": 629812701,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTgxMjcwMQ==",
      "diff_hunk": "@@ -33,6 +33,18 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlock\n     options.m_skip_inclusion_until = GetTime<std::chrono::microseconds>() - REBROADCAST_MIN_TX_AGE;\n     options.m_check_block_validity = false;\n \n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "956819c69de99db84908df0fb3b25ba616f2362d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 956819c69de99db84908df0fb3b25ba616f2362d [rebroadcast] Apply a fee rate filter:\r\n\r\nWhat happens if our node has its own prioritized transactions, which could be returned by our own block assembler but miners wouldn't care about? I believe the block assembler uses modified feerate, so setting `blockMinFeeRate` here won't filter those out.",
      "created_at": "2021-05-11T02:58:16Z",
      "updated_at": "2021-05-11T03:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629812701",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629812701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629818366",
      "pull_request_review_id": 656231133,
      "id": 629818366,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTgxODM2Ng==",
      "diff_hunk": "@@ -1308,9 +1309,37 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n }\n \n /**\n- * Evict orphan txn pool entries based on a newly connected\n- * block, remember the recently confirmed transactions, and delete tracked\n- * announcements for them. Also save the time of the last tip update.\n+ * If a transaction was removed from the mempool for a reason that entails it\n+ * most likely will not re-enter, let the rebroadcast handler know.\n+ */\n+void PeerManagerImpl::TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence)\n+{\n+    if (!m_txrebroadcast) return;\n+\n+    switch(reason) {\n+        case MemPoolRemovalReason::BLOCK:\n+            // Although transactions removed for this reason will not be\n+            // returned by this callback, include it here so the compiler\n+            // can warn about missing cases in this switch statement.\n+            // These transactions are handled by BlockConnected.\n+            break;\n+        case MemPoolRemovalReason::EXPIRY:",
      "path": "src/net_processing.cpp",
      "position": 95,
      "original_position": 29,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "4165cb0606e4be476651899b80525f63f6e4465a",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 4165cb0606e4be476651899b80525f63f6e4465a [rebroadcast] Stop tracking rebroadcast attempts for certain transactions\r\n\r\nWould it be possible to write in a comment here \"we want to avoid a situation where two peers that are unaware of new policy/consensus rules endlessly rebroadcast a transaction considered invalid by the majority of the network. Thus, the rebroadcast attempt tracker should remember transactions even after they have expired from the mempool.\" or something along those lines? I just remember it being confusing what \"genuinely expire from majority of mempools\" meant and why we don't remove from the tracker when a tx expires from mempool.",
      "created_at": "2021-05-11T03:19:23Z",
      "updated_at": "2021-05-11T03:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629818366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629818366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1327,
      "original_line": 1327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629819928",
      "pull_request_review_id": 656231133,
      "id": 629819928,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTgxOTkyOA==",
      "diff_hunk": "@@ -1308,9 +1309,37 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n }\n \n /**\n- * Evict orphan txn pool entries based on a newly connected\n- * block, remember the recently confirmed transactions, and delete tracked\n- * announcements for them. Also save the time of the last tip update.\n+ * If a transaction was removed from the mempool for a reason that entails it\n+ * most likely will not re-enter, let the rebroadcast handler know.\n+ */\n+void PeerManagerImpl::TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence)\n+{\n+    if (!m_txrebroadcast) return;\n+\n+    switch(reason) {\n+        case MemPoolRemovalReason::BLOCK:\n+            // Although transactions removed for this reason will not be\n+            // returned by this callback, include it here so the compiler\n+            // can warn about missing cases in this switch statement.\n+            // These transactions are handled by BlockConnected.\n+            break;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "4165cb0606e4be476651899b80525f63f6e4465a",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 4165cb0606e4be476651899b80525f63f6e4465a [rebroadcast] Stop tracking rebroadcast attempts for certain transactions\r\n\r\nWhy not group `MemPoolRemovalReason::BLOCK` with the cases that we call `RemoveFromAttemptTracker()` for (while keeping the comment indicating that they don't go through this callback)?",
      "created_at": "2021-05-11T03:24:51Z",
      "updated_at": "2021-05-11T03:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629819928",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629819928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 1320,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629820715",
      "pull_request_review_id": 656231133,
      "id": 629820715,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTgyMDcxNQ==",
      "diff_hunk": "@@ -1308,9 +1309,37 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n }\n \n /**\n- * Evict orphan txn pool entries based on a newly connected\n- * block, remember the recently confirmed transactions, and delete tracked\n- * announcements for them. Also save the time of the last tip update.\n+ * If a transaction was removed from the mempool for a reason that entails it\n+ * most likely will not re-enter, let the rebroadcast handler know.\n+ */\n+void PeerManagerImpl::TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence)\n+{\n+    if (!m_txrebroadcast) return;\n+\n+    switch(reason) {\n+        case MemPoolRemovalReason::BLOCK:\n+            // Although transactions removed for this reason will not be\n+            // returned by this callback, include it here so the compiler\n+            // can warn about missing cases in this switch statement.\n+            // These transactions are handled by BlockConnected.\n+            break;\n+        case MemPoolRemovalReason::EXPIRY:\n+        case MemPoolRemovalReason::SIZELIMIT:\n+            break;\n+        case MemPoolRemovalReason::REORG:\n+        case MemPoolRemovalReason::CONFLICT:\n+        case MemPoolRemovalReason::REPLACED:\n+            m_txrebroadcast->RemoveFromAttemptTracker(tx);\n+    } // No default case, so the compiler can warn about missing cases\n+}\n+\n+/**\n+ * Update state based on a newly connected block:\n+ * - Evict orphan txn pool entries\n+ * - Save the time of the last tip update\n+ * - Remember recently confirmed transactions\n+ * - Delete tracked announcements for block transactions\n+ * - Delete tracked rebroadcast attempts",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "4165cb0606e4be476651899b80525f63f6e4465a",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * - Delete tracked rebroadcast attempts for block transactions\r\n```",
      "created_at": "2021-05-11T03:27:56Z",
      "updated_at": "2021-05-11T03:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629820715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629820715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629823940",
      "pull_request_review_id": 656231133,
      "id": 629823940,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTgyMzk0MA==",
      "diff_hunk": "@@ -57,6 +57,48 @@ BOOST_AUTO_TEST_CASE(recency)\n     BOOST_CHECK_EQUAL(candidates.front().m_txid, tx_old.GetHash());\n }\n \n+BOOST_AUTO_TEST_CASE(fee_rate)\n+{\n+    // Since the test chain comes with 100 blocks, the first coinbase is\n+    // already valid to spend. Generate another block to have two valid\n+    // coinbase inputs to spend.\n+    CreateAndProcessBlock(std::vector<CMutableTransaction>(), CScript());\n+\n+    // Instantiate rebroadcast module & mine a block, so when we run\n+    // GetRebroadcastTransactions, Chain tip will be beyond m_tip_at_cache_time\n+    const auto chain_params = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    TxRebroadcastHandler tx_rebroadcast(*m_node.mempool, *m_node.chainman, *chain_params);\n+    CBlock recent_block = CreateAndProcessBlock(std::vector<CMutableTransaction>(), CScript());\n+    CBlockIndex recent_block_index{recent_block.GetBlockHeader()};\n+\n+    // Update m_cached_fee_rate\n+    // The transactions created in this test are each 157 bytes, and they set\n+    // the fee at 1 BTC and 2 BTC.\n+    CFeeRate cached_fee_rate(1.5 * COIN, 157);\n+    tx_rebroadcast.UpdateCachedFeeRate(cached_fee_rate);\n+\n+    // Create two transactions\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CScript output_destination = GetScriptForDestination(PKHash(key.GetPubKey()));\n+\n+    // - One with a low fee rate\n+    CMutableTransaction tx_low = CreateValidMempoolTransaction(m_coinbase_txns[0], /* vout */ 0, /* input_height */ 0, coinbaseKey, output_destination, CAmount(49 * COIN));\n+    // - One with a high fee rate\n+    CMutableTransaction tx_high = CreateValidMempoolTransaction(m_coinbase_txns[1], /* vout */ 0, /* input_height */ 1, coinbaseKey, output_destination, CAmount(48 * COIN));\n+\n+    // Confirm both transactions successfully made it into the mempool\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), 2);\n+\n+    // Age transaction to be older than REBROADCAST_MIN_TX_AGE\n+    SetMockTime(GetTime<std::chrono::seconds>() + 35min);",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": 99,
      "original_position": 38,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0ae1420767a320cfeafd2acee0b54bc6a6eb9b27",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ae1420767a320cfeafd2acee0b54bc6a6eb9b27 [test] Add unit test for the fee rate cache \r\n\r\nWhy note just use + REBROADCAST_MIN_TX_AGE + 5 minutes here?",
      "created_at": "2021-05-11T03:39:41Z",
      "updated_at": "2021-05-11T03:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629823940",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629823940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629824222",
      "pull_request_review_id": 656231133,
      "id": 629824222,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTgyNDIyMg==",
      "diff_hunk": "@@ -57,6 +57,48 @@ BOOST_AUTO_TEST_CASE(recency)\n     BOOST_CHECK_EQUAL(candidates.front().m_txid, tx_old.GetHash());\n }\n \n+BOOST_AUTO_TEST_CASE(fee_rate)",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": 65,
      "original_position": 4,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0ae1420767a320cfeafd2acee0b54bc6a6eb9b27",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ae1420767a320cfeafd2acee0b54bc6a6eb9b27 [test] Add unit test for the fee rate cache \r\n\r\nWould be nice if the test also checked what happens with transactions that are prioritized.",
      "created_at": "2021-05-11T03:40:41Z",
      "updated_at": "2021-05-11T03:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629824222",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629824222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629825081",
      "pull_request_review_id": 656231133,
      "id": 629825081,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTgyNTA4MQ==",
      "diff_hunk": "@@ -41,13 +41,19 @@ class TxRebroadcastHandler\n     /** Remove transaction entry from the attempt tracker.*/\n     void RemoveFromAttemptTracker(const CTransactionRef& tx);\n \n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;",
      "path": "src/txrebroadcast.h",
      "position": 60,
      "original_position": 8,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "87d6466380737c2d05932d4af3879950982e61c4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 87d6466380737c2d05932d4af3879950982e61c4 [test] Add unit test for rebroadcast attempt logic \r\n\r\nI'm not sure what difference it would make, but why don't these require `m_rebroadcast_mutex` instead of doing the locking internally?",
      "created_at": "2021-05-11T03:43:43Z",
      "updated_at": "2021-05-11T03:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629825081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629825081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": 57,
      "original_start_line": 45,
      "start_side": "RIGHT",
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631543314",
      "pull_request_review_id": 658559408,
      "id": 631543314,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0MzMxNA==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": 628043830,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah, I went through a similar thought process. In the initial pass, I opted for the `ReadBlockFromDisk` approach because it seemed simpler. But in the latest push, I updated the `UpdateBlockTip` function signature to also take in `block`. Unfortunately, it seems like callers cannot rely on `block` to be properly populated, so I still need to have the `ReadBlockFromDisk` as a fallback. The relevant code is in 33eb966d284bd954af16ed5905315e0bc91c3662 & 33eb966d284bd954af16ed5905315e0bc91c3662, let me know what you think.",
      "created_at": "2021-05-13T03:51:25Z",
      "updated_at": "2021-05-13T03:51:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631543314",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631543314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631543511",
      "pull_request_review_id": 658559613,
      "id": 631543511,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0MzUxMQ==",
      "diff_hunk": "@@ -1286,22 +1289,57 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": 628053757,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "very nice, done ",
      "created_at": "2021-05-13T03:52:07Z",
      "updated_at": "2021-05-13T03:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631543511",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631543511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631543597",
      "pull_request_review_id": 658559707,
      "id": 631543597,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0MzU5Nw==",
      "diff_hunk": "@@ -1286,22 +1289,57 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        m_txrebroadcast = std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams);\n+\n+        // Run fee rate cache every minute",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": 628054781,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agree, removed.",
      "created_at": "2021-05-13T03:52:27Z",
      "updated_at": "2021-05-13T03:52:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631543597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631543597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1295,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631543989",
      "pull_request_review_id": 658560139,
      "id": 631543989,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0Mzk4OQ==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {\n+        rebroadcast_block_weight = 3 * GetBlockWeight(block) / 4;\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());",
      "path": "src/txrebroadcast.cpp",
      "position": 128,
      "original_position": 109,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": 628060392,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah, that would be nice! I don't think it makes sense to increase the complexity of this PR, but I have noted it down as potential future work.",
      "created_at": "2021-05-13T03:54:02Z",
      "updated_at": "2021-05-13T03:54:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631543989",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631543989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": 127,
      "original_start_line": 108,
      "start_side": "RIGHT",
      "line": 128,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631544094",
      "pull_request_review_id": 658560232,
      "id": 631544094,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0NDA5NA==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": 628064681,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-05-13T03:54:23Z",
      "updated_at": "2021-05-13T03:54:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631544094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631544094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631544292",
      "pull_request_review_id": 658560431,
      "id": 631544292,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0NDI5Mg==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+/** Frequency to run the fee rate cache. */\n+constexpr std::chrono::minutes REBROADCAST_CACHE_FREQUENCY{1};\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class indexed_rebroadcast_set;\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n+\n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n+    std::vector<TxIds> GetRebroadcastTransactions(const CBlockIndex* recent_block_index);",
      "path": "src/txrebroadcast.h",
      "position": null,
      "original_position": 33,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": 628084018,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-05-13T03:55:01Z",
      "updated_at": "2021-05-13T03:55:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631544292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631544292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631544648",
      "pull_request_review_id": 658560861,
      "id": 631544648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0NDY0OA==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {\n+        rebroadcast_block_weight = 3 * GetBlockWeight(block) / 4;\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) return;\n+\n+    LOCK(m_rebroadcast_mutex);\n+\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = m_chainman.ActiveTip();\n+\n+    // Store the existing fee rate\n+    m_previous_cached_fee_rate = m_cached_fee_rate;\n+\n+    // Calculate a new cached fee rate\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams).MinTxFeeRate();\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    LOCK(m_rebroadcast_mutex);\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()\n+{",
      "path": "src/txrebroadcast.cpp",
      "position": 230,
      "original_position": 192,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": 628097324,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done ",
      "created_at": "2021-05-13T03:56:16Z",
      "updated_at": "2021-05-13T03:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631544648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631544648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631545127",
      "pull_request_review_id": 658561398,
      "id": 631545127,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0NTEyNw==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {\n+        rebroadcast_block_weight = 3 * GetBlockWeight(block) / 4;\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) return;\n+\n+    LOCK(m_rebroadcast_mutex);\n+\n+    // Update stamp of chain tip on cache run\n+    m_tip_at_cache_time = m_chainman.ActiveTip();\n+\n+    // Store the existing fee rate\n+    m_previous_cached_fee_rate = m_cached_fee_rate;\n+\n+    // Calculate a new cached fee rate\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    m_cached_fee_rate = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams).MinTxFeeRate();\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n+};\n+\n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    LOCK(m_rebroadcast_mutex);\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()\n+{\n+    // Delete any entries that are older than MAX_ENTRY_AGE\n+    auto min_age = GetTime<std::chrono::microseconds>() - MAX_ENTRY_AGE;\n+\n+    while (!m_attempt_tracker->empty()) {",
      "path": "src/txrebroadcast.cpp",
      "position": 234,
      "original_position": 196,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": 628101402,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good point on consolidating the two loops. the code you shared doesn't quite make sense (it no longer erases anything from the attempt tracker? 😛), but I got the gist and reworked the logic. ",
      "created_at": "2021-05-13T03:58:09Z",
      "updated_at": "2021-05-13T03:58:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631545127",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631545127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631546704",
      "pull_request_review_id": 658563254,
      "id": 631546704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0NjcwNA==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr unsigned int MAX_REBROADCAST_WEIGHT{3 * MAX_BLOCK_WEIGHT / 4};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlockIndex* recent_block_index)\n+{\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    int rebroadcast_block_weight = MAX_REBROADCAST_WEIGHT;\n+    CBlock block;\n+    const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+    if (ReadBlockFromDisk(block, recent_block_index, consensus_params)) {\n+        rebroadcast_block_weight = 3 * GetBlockWeight(block) / 4;\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        uint256 txid = tx->GetHash();\n+        uint256 wtxid = tx->GetWitnessHash();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "343e3cbb3aea6c8e1f561c798a62b343f5ac7e1c",
      "in_reply_to_id": 629292659,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yup, makes sense. thanks!\r\n\r\nI've updated this site, but in all the other places that I found, was already using references. Let me know if I'm missing some?",
      "created_at": "2021-05-13T04:04:32Z",
      "updated_at": "2021-05-13T04:04:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631546704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631546704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631547275",
      "pull_request_review_id": 658563963,
      "id": 631547275,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0NzI3NQ==",
      "diff_hunk": "@@ -76,6 +76,8 @@ static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n static constexpr uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n /** Default for blocks only*/\n static const bool DEFAULT_BLOCKSONLY = false;\n+/** Default for node rebroadcast logic */\n+static constexpr bool DEFAULT_REBROADCAST_ENABLED = false;",
      "path": "src/net.h",
      "position": null,
      "original_position": 5,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "a3367b9b79086326f75d111d6b381088d88312f0",
      "in_reply_to_id": 629805112,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "great point! fixed now, thanks.",
      "created_at": "2021-05-13T04:06:59Z",
      "updated_at": "2021-05-13T04:06:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631547275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631547275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631549506",
      "pull_request_review_id": 658566488,
      "id": 631549506,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU0OTUwNg==",
      "diff_hunk": "@@ -306,6 +306,29 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::MinTxFeeRate()",
      "path": "src/miner.cpp",
      "position": 49,
      "original_position": 4,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "d72f030be9c9fa77e23132268e16708d7cbb192e",
      "in_reply_to_id": 629809015,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it's an interesting idea, but I don't think it makes sense to reuse. although they are answering conceptually similar questions, the way these two functions are going about answering is quite different. `MinTxFeeRate` is calculating very precisely based on the state of the mempool _right now_, where as the `estimateSmartFee` function is trying to predict a rate based on current conditions combined with various confidence thresholds.  \r\n\r\n(also note that a `confTarget` of 1 gets automatically turned into 2. I didn't dig into the function too deep to understand exactly why that's necessary, but I think indicates the divergent aims)",
      "created_at": "2021-05-13T04:15:54Z",
      "updated_at": "2021-05-13T04:15:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631549506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631549506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 308,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631550246",
      "pull_request_review_id": 658567391,
      "id": 631550246,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU1MDI0Ng==",
      "diff_hunk": "@@ -33,6 +33,18 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const CBlock\n     options.m_skip_inclusion_until = GetTime<std::chrono::microseconds>() - REBROADCAST_MIN_TX_AGE;\n     options.m_check_block_validity = false;\n \n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == m_chainman.ActiveTip()) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "956819c69de99db84908df0fb3b25ba616f2362d",
      "in_reply_to_id": 629812701,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "GREAT point! in the original PR (#16698), I had a commit to update the `prioritisetransaction` help documentation, but somehow got lost along the way to this current PR. In the latest push, I've cherry-picked that commit onto this PR. \r\n\r\nand, to confirm, you're absolutely right. the block assembler uses modified feerate, so could select transactions to rebroadcast that the user has manually added priority.",
      "created_at": "2021-05-13T04:18:59Z",
      "updated_at": "2021-05-13T04:19:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631550246",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631550246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631550445",
      "pull_request_review_id": 658567628,
      "id": 631550445,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU1MDQ0NQ==",
      "diff_hunk": "@@ -1308,9 +1309,37 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n }\n \n /**\n- * Evict orphan txn pool entries based on a newly connected\n- * block, remember the recently confirmed transactions, and delete tracked\n- * announcements for them. Also save the time of the last tip update.\n+ * If a transaction was removed from the mempool for a reason that entails it\n+ * most likely will not re-enter, let the rebroadcast handler know.\n+ */\n+void PeerManagerImpl::TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence)\n+{\n+    if (!m_txrebroadcast) return;\n+\n+    switch(reason) {\n+        case MemPoolRemovalReason::BLOCK:\n+            // Although transactions removed for this reason will not be\n+            // returned by this callback, include it here so the compiler\n+            // can warn about missing cases in this switch statement.\n+            // These transactions are handled by BlockConnected.\n+            break;\n+        case MemPoolRemovalReason::EXPIRY:",
      "path": "src/net_processing.cpp",
      "position": 95,
      "original_position": 29,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "4165cb0606e4be476651899b80525f63f6e4465a",
      "in_reply_to_id": 629818366,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done, thanks! I've been having a hard time explaining, added a comment along these lines.",
      "created_at": "2021-05-13T04:19:55Z",
      "updated_at": "2021-05-13T04:19:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631550445",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631550445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1327,
      "original_line": 1327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631550588",
      "pull_request_review_id": 658567796,
      "id": 631550588,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU1MDU4OA==",
      "diff_hunk": "@@ -1308,9 +1309,37 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n }\n \n /**\n- * Evict orphan txn pool entries based on a newly connected\n- * block, remember the recently confirmed transactions, and delete tracked\n- * announcements for them. Also save the time of the last tip update.\n+ * If a transaction was removed from the mempool for a reason that entails it\n+ * most likely will not re-enter, let the rebroadcast handler know.\n+ */\n+void PeerManagerImpl::TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence)\n+{\n+    if (!m_txrebroadcast) return;\n+\n+    switch(reason) {\n+        case MemPoolRemovalReason::BLOCK:\n+            // Although transactions removed for this reason will not be\n+            // returned by this callback, include it here so the compiler\n+            // can warn about missing cases in this switch statement.\n+            // These transactions are handled by BlockConnected.\n+            break;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "4165cb0606e4be476651899b80525f63f6e4465a",
      "in_reply_to_id": 629819928,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sure, doesn't seem like it matters either way? but done regardless",
      "created_at": "2021-05-13T04:20:31Z",
      "updated_at": "2021-05-13T04:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631550588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631550588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": 1320,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631551672",
      "pull_request_review_id": 658569060,
      "id": 631551672,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU1MTY3Mg==",
      "diff_hunk": "@@ -57,6 +57,48 @@ BOOST_AUTO_TEST_CASE(recency)\n     BOOST_CHECK_EQUAL(candidates.front().m_txid, tx_old.GetHash());\n }\n \n+BOOST_AUTO_TEST_CASE(fee_rate)\n+{\n+    // Since the test chain comes with 100 blocks, the first coinbase is\n+    // already valid to spend. Generate another block to have two valid\n+    // coinbase inputs to spend.\n+    CreateAndProcessBlock(std::vector<CMutableTransaction>(), CScript());\n+\n+    // Instantiate rebroadcast module & mine a block, so when we run\n+    // GetRebroadcastTransactions, Chain tip will be beyond m_tip_at_cache_time\n+    const auto chain_params = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    TxRebroadcastHandler tx_rebroadcast(*m_node.mempool, *m_node.chainman, *chain_params);\n+    CBlock recent_block = CreateAndProcessBlock(std::vector<CMutableTransaction>(), CScript());\n+    CBlockIndex recent_block_index{recent_block.GetBlockHeader()};\n+\n+    // Update m_cached_fee_rate\n+    // The transactions created in this test are each 157 bytes, and they set\n+    // the fee at 1 BTC and 2 BTC.\n+    CFeeRate cached_fee_rate(1.5 * COIN, 157);\n+    tx_rebroadcast.UpdateCachedFeeRate(cached_fee_rate);\n+\n+    // Create two transactions\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CScript output_destination = GetScriptForDestination(PKHash(key.GetPubKey()));\n+\n+    // - One with a low fee rate\n+    CMutableTransaction tx_low = CreateValidMempoolTransaction(m_coinbase_txns[0], /* vout */ 0, /* input_height */ 0, coinbaseKey, output_destination, CAmount(49 * COIN));\n+    // - One with a high fee rate\n+    CMutableTransaction tx_high = CreateValidMempoolTransaction(m_coinbase_txns[1], /* vout */ 0, /* input_height */ 1, coinbaseKey, output_destination, CAmount(48 * COIN));\n+\n+    // Confirm both transactions successfully made it into the mempool\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), 2);\n+\n+    // Age transaction to be older than REBROADCAST_MIN_TX_AGE\n+    SetMockTime(GetTime<std::chrono::seconds>() + 35min);",
      "path": "src/test/txrebroadcast_tests.cpp",
      "position": 99,
      "original_position": 38,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "0ae1420767a320cfeafd2acee0b54bc6a6eb9b27",
      "in_reply_to_id": 629823940,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`REBROADCAST_MIN_TX_AGE` is defined in the `.cpp`, so isn't available to import in the test. I could move it to the header, but I was trying to minimize how much stuff is in the header only for tests. I could redefine the symbol as a constant in the test, but then we run into the same issue of having to update it if the code changes, so doesn't seem much better.. ",
      "created_at": "2021-05-13T04:24:41Z",
      "updated_at": "2021-05-13T04:24:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631551672",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631551672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631552240",
      "pull_request_review_id": 658569837,
      "id": 631552240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTU1MjI0MA==",
      "diff_hunk": "@@ -41,13 +41,19 @@ class TxRebroadcastHandler\n     /** Remove transaction entry from the attempt tracker.*/\n     void RemoveFromAttemptTracker(const CTransactionRef& tx);\n \n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;",
      "path": "src/txrebroadcast.h",
      "position": 60,
      "original_position": 8,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "87d6466380737c2d05932d4af3879950982e61c4",
      "in_reply_to_id": 629825081,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just so I can keep `m_rebroadcast_mutex` as a private member ",
      "created_at": "2021-05-13T04:27:14Z",
      "updated_at": "2021-05-13T04:27:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631552240",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631552240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": 57,
      "original_start_line": 45,
      "start_side": "RIGHT",
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632905508",
      "pull_request_review_id": 660312877,
      "id": 632905508,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkwNTUwOA==",
      "diff_hunk": "@@ -1224,8 +1225,10 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     ChainstateManager& chainman = *Assert(node.chainman);\n \n     assert(!node.peerman);\n+    bool enable_rebroadcast = gArgs.GetArg(\"-rebroadcast\", DEFAULT_REBROADCAST_ENABLED);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "1cc12f956a30d1654cc5060e00f59dc4045a88d1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const bool enable_rebroadcast{args.GetArg(\"-rebroadcast\", DEFAULT_REBROADCAST_ENABLED)};\r\n```",
      "created_at": "2021-05-15T06:42:22Z",
      "updated_at": "2021-05-15T07:01:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r632905508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632905508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632906592",
      "pull_request_review_id": 660312877,
      "id": 632906592,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkwNjU5Mg==",
      "diff_hunk": "@@ -1431,6 +1476,16 @@ void PeerManagerImpl::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlock\n         }\n     }\n \n+    // Rebroadcast selected mempool transactions\n+    if (m_txrebroadcast) {\n+        const std::vector<TxIds> rebroadcast_txs = m_txrebroadcast->GetRebroadcastTransactions(block, *pindexNew);\n+\n+        LOCK(cs_main);\n+        for (auto ids : rebroadcast_txs) {\n+            RelayTransaction(ids.m_txid, ids.m_wtxid);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "1cc12f956a30d1654cc5060e00f59dc4045a88d1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "to avoid the recursive lock\r\n\r\n```suggestion\r\n            _RelayTransaction(ids.m_txid, ids.m_wtxid);\r\n```",
      "created_at": "2021-05-15T06:54:27Z",
      "updated_at": "2021-05-15T07:01:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r632906592",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632906592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632907051",
      "pull_request_review_id": 660312877,
      "id": 632907051,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkwNzA1MQ==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test node rebroadcast logic.\n+\n+We start by creating a set of transactions to set the rebroadcast minimum fee\n+cache to a medium fee rate value.\n+\n+We then create three sets of transactions:\n+    1. aged, high fee rate\n+    2. aged, low fee rate\n+    3. recent, high fee rate\n+\n+We add a new connection, trigger the rebroadcast functionality by mining an\n+empty block, check that the aged high fee rate transactions were succesfully\n+rebroadcast, and that the other two sets were not rebroadcast.\n+\"\"\"\n+\n+import time\n+from decimal import Decimal\n+\n+from test_framework.p2p import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_greater_than,\n+    create_confirmed_utxos,\n+)\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+\n+class NodeRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",",
      "path": "test/functional/p2p_rebroadcast.py",
      "position": null,
      "original_position": 40,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "1cc12f956a30d1654cc5060e00f59dc4045a88d1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would be nice to select the exact permission needed",
      "created_at": "2021-05-15T06:59:10Z",
      "updated_at": "2021-05-15T07:01:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r632907051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632907051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633934902",
      "pull_request_review_id": 661516674,
      "id": 633934902,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzkzNDkwMg==",
      "diff_hunk": "@@ -1224,8 +1225,10 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     ChainstateManager& chainman = *Assert(node.chainman);\n \n     assert(!node.peerman);\n+    bool enable_rebroadcast = gArgs.GetArg(\"-rebroadcast\", DEFAULT_REBROADCAST_ENABLED);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "1cc12f956a30d1654cc5060e00f59dc4045a88d1",
      "in_reply_to_id": 632905508,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done. note: had to change `GetArg` to `GetBoolArg` to work with braced initialization, which seems better anyways. ",
      "created_at": "2021-05-17T23:44:55Z",
      "updated_at": "2021-05-17T23:44:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r633934902",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633934902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633935088",
      "pull_request_review_id": 661516890,
      "id": 633935088,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzkzNTA4OA==",
      "diff_hunk": "@@ -1431,6 +1476,16 @@ void PeerManagerImpl::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlock\n         }\n     }\n \n+    // Rebroadcast selected mempool transactions\n+    if (m_txrebroadcast) {\n+        const std::vector<TxIds> rebroadcast_txs = m_txrebroadcast->GetRebroadcastTransactions(block, *pindexNew);\n+\n+        LOCK(cs_main);\n+        for (auto ids : rebroadcast_txs) {\n+            RelayTransaction(ids.m_txid, ids.m_wtxid);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "1cc12f956a30d1654cc5060e00f59dc4045a88d1",
      "in_reply_to_id": 632906592,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good call, rebased to get the internal function & updated ",
      "created_at": "2021-05-17T23:45:32Z",
      "updated_at": "2021-05-17T23:45:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r633935088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633935088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633935119",
      "pull_request_review_id": 661516931,
      "id": 633935119,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzkzNTExOQ==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test node rebroadcast logic.\n+\n+We start by creating a set of transactions to set the rebroadcast minimum fee\n+cache to a medium fee rate value.\n+\n+We then create three sets of transactions:\n+    1. aged, high fee rate\n+    2. aged, low fee rate\n+    3. recent, high fee rate\n+\n+We add a new connection, trigger the rebroadcast functionality by mining an\n+empty block, check that the aged high fee rate transactions were succesfully\n+rebroadcast, and that the other two sets were not rebroadcast.\n+\"\"\"\n+\n+import time\n+from decimal import Decimal\n+\n+from test_framework.p2p import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_greater_than,\n+    create_confirmed_utxos,\n+)\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+\n+class NodeRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",",
      "path": "test/functional/p2p_rebroadcast.py",
      "position": null,
      "original_position": 40,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "1cc12f956a30d1654cc5060e00f59dc4045a88d1",
      "in_reply_to_id": 632907051,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-05-17T23:45:40Z",
      "updated_at": "2021-05-17T23:45:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r633935119",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633935119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634900036",
      "pull_request_review_id": 662753505,
      "id": 634900036,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDkwMDAzNg==",
      "diff_hunk": "@@ -0,0 +1,273 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr float REBROADCAST_WEIGHT_RATIO{0.75};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()},\n+      m_max_filter(1500, 0.0001){}",
      "path": "src/txrebroadcast.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "b927ab97c7a66c0addff17f57e92054ad3547519",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This gives a 1-in-10k fp rate, so once the bloom filter has had time to fill up, we should expect each node to incorrectly not rebroadcast 1-in-10k transactions. However, the nTweak parameter should ensure that this is affects different transactions on different nodes, so I think this should be fine.",
      "created_at": "2021-05-19T04:14:30Z",
      "updated_at": "2021-05-19T04:14:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r634900036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634900036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638418544",
      "pull_request_review_id": 667349207,
      "id": 638418544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODQxODU0NA==",
      "diff_hunk": "@@ -0,0 +1,273 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr float REBROADCAST_WEIGHT_RATIO{0.75};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()},\n+      m_max_filter(1500, 0.0001){}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index)\n+{\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    // Calculate how many transactions to rebroadcast based on the size of the\n+    // incoming block.\n+    float rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * MAX_BLOCK_WEIGHT;\n+    if (recent_block) {\n+        // If the passed in block is populated, use to avoid a disk read.\n+        rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(*recent_block.get());\n+    } else {\n+        // Otherwise, use the block index to retrieve the relevant block.\n+        const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+        CBlock block;\n+\n+        if (ReadBlockFromDisk(block, &recent_block_index, consensus_params)) {\n+            rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(block);\n+        }\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        const CBlockIndex* tip = m_chainman.ActiveTip();\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == tip) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Skip if the fee rate cache has not yet run, which could happen once on\n+    // startup\n+    std::vector<TxIds> rebroadcast_txs;\n+    if (options.blockMinFeeRate.GetFeePerK() == CAmount(0)) return rebroadcast_txs;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+    rebroadcast_txs.reserve(block_template->block.vtx.size());\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        const uint256& txid = tx->GetHash();\n+        const uint256& wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have kinda recently rebroadcasted this transaction the\n+        // maximum number of times.\n+        if (m_max_filter.contains(wtxid)) continue;\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted. Record in the max filter, remove from\n+            // attempt tracker, and skip rebroadcasting.\n+            m_max_filter.insert(wtxid);\n+            const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+            if (it != m_attempt_tracker->end()) m_attempt_tracker->erase(it);\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    CChainState& chain_state = m_chainman.ActiveChainstate();\n+    if (chain_state.IsInitialBlockDownload()) return;\n+    auto tip = m_chainman.ActiveTip();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "b927ab97c7a66c0addff17f57e92054ad3547519",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you should be locking `cs_main` prior to calling this -- you want a consistent view between `tip` and `current_fee_rate`, but currently there's no reason you couldn't update the tip immediately after this line, thus associating the old tip with the new (much reduced) fee rate.",
      "created_at": "2021-05-25T03:00:00Z",
      "updated_at": "2021-05-25T03:04:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r638418544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638418544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638419647",
      "pull_request_review_id": 667349207,
      "id": 638419647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODQxOTY0Nw==",
      "diff_hunk": "@@ -419,6 +450,12 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         // This transaction will make it in; reset the failed counter.\n         nConsecutiveFailed = 0;\n \n+        if (min_package_fee_rate) {\n+            // Compare package fee rate and potentially update new minimum\n+            CFeeRate newFeeRate(packageFees, packageSize);\n+            if (newFeeRate < *min_package_fee_rate) *min_package_fee_rate = newFeeRate;",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "b927ab97c7a66c0addff17f57e92054ad3547519",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Earlier in this function, there's code to skip transactions if they're too large for the block. I think this can result in the mempool containing txs with fee rates of: `120 s/vb, 119 s/vb, 118 s/vb, 117 s/vb, 115 s/vb, 110 s/vb, 105 s/vb, 100 s/vb, 95 s/vb, 80 s/vb, 79 s/vb, ...` and the block containing txs with fee rates of: `120, 119, 118, 117, 95, 80` -- because the 110-100 s/vb txs just didn't fit in the block, but the 95 and 80 s/vb txs happened to be tiny. This would then incorrectly result in txs with fee rates above 80 s/vb being rebroadcast, whereas really only txs with fee rates above 117 s/vb should be.",
      "created_at": "2021-05-25T03:04:23Z",
      "updated_at": "2021-05-25T03:04:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r638419647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638419647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638423702",
      "pull_request_review_id": 667355760,
      "id": 638423702,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODQyMzcwMg==",
      "diff_hunk": "@@ -0,0 +1,273 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr float REBROADCAST_WEIGHT_RATIO{0.75};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()},\n+      m_max_filter(1500, 0.0001){}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index)\n+{\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    // Calculate how many transactions to rebroadcast based on the size of the\n+    // incoming block.\n+    float rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * MAX_BLOCK_WEIGHT;\n+    if (recent_block) {\n+        // If the passed in block is populated, use to avoid a disk read.\n+        rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(*recent_block.get());\n+    } else {\n+        // Otherwise, use the block index to retrieve the relevant block.\n+        const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+        CBlock block;\n+\n+        if (ReadBlockFromDisk(block, &recent_block_index, consensus_params)) {\n+            rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(block);\n+        }\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        const CBlockIndex* tip = m_chainman.ActiveTip();\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == tip) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Skip if the fee rate cache has not yet run, which could happen once on\n+    // startup\n+    std::vector<TxIds> rebroadcast_txs;\n+    if (options.blockMinFeeRate.GetFeePerK() == CAmount(0)) return rebroadcast_txs;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+    rebroadcast_txs.reserve(block_template->block.vtx.size());\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        const uint256& txid = tx->GetHash();\n+        const uint256& wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have kinda recently rebroadcasted this transaction the\n+        // maximum number of times.\n+        if (m_max_filter.contains(wtxid)) continue;\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted. Record in the max filter, remove from\n+            // attempt tracker, and skip rebroadcasting.\n+            m_max_filter.insert(wtxid);\n+            const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+            if (it != m_attempt_tracker->end()) m_attempt_tracker->erase(it);\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    CChainState& chain_state = m_chainman.ActiveChainstate();\n+    if (chain_state.IsInitialBlockDownload()) return;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 192,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "b927ab97c7a66c0addff17f57e92054ad3547519",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps this should also be conditional on `mempool.IsLoaded()` ?",
      "created_at": "2021-05-25T03:20:24Z",
      "updated_at": "2021-05-25T03:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r638423702",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638423702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642210611",
      "pull_request_review_id": 671949665,
      "id": 642210611,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjIxMDYxMQ==",
      "diff_hunk": "@@ -0,0 +1,273 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr float REBROADCAST_WEIGHT_RATIO{0.75};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()},\n+      m_max_filter(1500, 0.0001){}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index)\n+{\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    // Calculate how many transactions to rebroadcast based on the size of the\n+    // incoming block.\n+    float rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * MAX_BLOCK_WEIGHT;\n+    if (recent_block) {\n+        // If the passed in block is populated, use to avoid a disk read.\n+        rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(*recent_block.get());\n+    } else {\n+        // Otherwise, use the block index to retrieve the relevant block.\n+        const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+        CBlock block;\n+\n+        if (ReadBlockFromDisk(block, &recent_block_index, consensus_params)) {\n+            rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(block);\n+        }\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        const CBlockIndex* tip = m_chainman.ActiveTip();\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == tip) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Skip if the fee rate cache has not yet run, which could happen once on\n+    // startup\n+    std::vector<TxIds> rebroadcast_txs;\n+    if (options.blockMinFeeRate.GetFeePerK() == CAmount(0)) return rebroadcast_txs;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+    rebroadcast_txs.reserve(block_template->block.vtx.size());\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        const uint256& txid = tx->GetHash();\n+        const uint256& wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have kinda recently rebroadcasted this transaction the\n+        // maximum number of times.\n+        if (m_max_filter.contains(wtxid)) continue;\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted. Record in the max filter, remove from\n+            // attempt tracker, and skip rebroadcasting.\n+            m_max_filter.insert(wtxid);\n+            const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+            if (it != m_attempt_tracker->end()) m_attempt_tracker->erase(it);\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    CChainState& chain_state = m_chainman.ActiveChainstate();\n+    if (chain_state.IsInitialBlockDownload()) return;",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 192,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "b927ab97c7a66c0addff17f57e92054ad3547519",
      "in_reply_to_id": 638423702,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done ",
      "created_at": "2021-05-31T05:01:15Z",
      "updated_at": "2021-05-31T05:01:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r642210611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642210611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642210663",
      "pull_request_review_id": 671949755,
      "id": 642210663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjIxMDY2Mw==",
      "diff_hunk": "@@ -0,0 +1,273 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+\n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr float REBROADCAST_WEIGHT_RATIO{0.75};\n+\n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()},\n+      m_max_filter(1500, 0.0001){}\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index)\n+{\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+\n+    // Calculate how many transactions to rebroadcast based on the size of the\n+    // incoming block.\n+    float rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * MAX_BLOCK_WEIGHT;\n+    if (recent_block) {\n+        // If the passed in block is populated, use to avoid a disk read.\n+        rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(*recent_block.get());\n+    } else {\n+        // Otherwise, use the block index to retrieve the relevant block.\n+        const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+        CBlock block;\n+\n+        if (ReadBlockFromDisk(block, &recent_block_index, consensus_params)) {\n+            rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(block);\n+        }\n+    }\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n+\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    {\n+        const CBlockIndex* tip = m_chainman.ActiveTip();\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == tip) {\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Skip if the fee rate cache has not yet run, which could happen once on\n+    // startup\n+    std::vector<TxIds> rebroadcast_txs;\n+    if (options.blockMinFeeRate.GetFeePerK() == CAmount(0)) return rebroadcast_txs;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n+    rebroadcast_txs.reserve(block_template->block.vtx.size());\n+\n+    LOCK(m_rebroadcast_mutex);\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        const uint256& txid = tx->GetHash();\n+        const uint256& wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have kinda recently rebroadcasted this transaction the\n+        // maximum number of times.\n+        if (m_max_filter.contains(wtxid)) continue;\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted. Record in the max filter, remove from\n+            // attempt tracker, and skip rebroadcasting.\n+            m_max_filter.insert(wtxid);\n+            const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+            if (it != m_attempt_tracker->end()) m_attempt_tracker->erase(it);\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n+    }\n+\n+    TrimMaxRebroadcast();\n+\n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s, wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n+    return rebroadcast_txs;\n+};\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    CChainState& chain_state = m_chainman.ActiveChainstate();\n+    if (chain_state.IsInitialBlockDownload()) return;\n+    auto tip = m_chainman.ActiveTip();",
      "path": "src/txrebroadcast.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "b927ab97c7a66c0addff17f57e92054ad3547519",
      "in_reply_to_id": 638418544,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah makes sense, done",
      "created_at": "2021-05-31T05:01:31Z",
      "updated_at": "2021-05-31T05:01:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r642210663",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642210663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642211263",
      "pull_request_review_id": 671950516,
      "id": 642211263,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjIxMTI2Mw==",
      "diff_hunk": "@@ -298,6 +311,43 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if (!pblocktemplate.get()) {\n+        return min_fee_rate;\n+    }\n+    CBlock* block = &pblocktemplate->block;\n+\n+    // Add dummy coinbase tx as first transaction\n+    block->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1);\n+    pblocktemplate->vTxSigOpsCost.push_back(-1);\n+\n+    CBlockIndex* prev_block_index = ::ChainActive().Tip();\n+    assert(prev_block_index != nullptr);\n+    nHeight = prev_block_index->nHeight + 1;\n+\n+    block->nTime = static_cast<uint32_t>(GetAdjustedTime());\n+    const int64_t median_time_past = prev_block_index->GetMedianTimePast();\n+\n+    nLockTimeCutoff = median_time_past;\n+    fIncludeWitness = IsWitnessEnabled(prev_block_index, chainparams.GetConsensus());\n+\n+    {\n+        LOCK2(cs_main, m_mempool.cs);",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "9b757c214e59fbf5dd028323a54734726a1c461b",
      "original_commit_id": "038f751e9ce27f885f0baa87cd13d89fe71fa3d5",
      "in_reply_to_id": 602283867,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I removed the `cs_main` call from here, but think I actually have to lock it from the caller, see:  https://github.com/bitcoin/bitcoin/pull/21061#discussion_r638418544",
      "created_at": "2021-05-31T05:03:43Z",
      "updated_at": "2021-05-31T05:03:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21061#discussion_r642211263",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642211263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    }
  ]
}