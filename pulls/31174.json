{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174",
    "id": 2150352880,
    "node_id": "PR_kwDOABII586AK8fw",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31174",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31174.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31174.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31174",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31174/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
    "number": 31174,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "tinyformat: Add compile-time checking for literal format strings",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Add compile-time checking for literal format strings passed to `strprintf` and `tfm::format` to make sure the right number of format arguments are passed.\r\n\r\nThere is still no compile-time checking if non-literal `std::string` or `bilingual_str` format strings are passed, but this is improved in other PRs:\r\n\r\n- [#31061](https://github.com/bitcoin/bitcoin/pull/31061) implements compile-time checking for translated strings\r\n- [#31072](https://github.com/bitcoin/bitcoin/pull/31072) increases compile-time checking by using literal strings as format strings, instead of `std::string` and `bilingual_str`\r\n- [#31149](https://github.com/bitcoin/bitcoin/pull/31149) may drop the `std::string`  overload for `strprintf` to [require](https://github.com/bitcoin/bitcoin/pull/31149#issuecomment-2444579999) compile-time checking",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2024-10-28T23:56:27Z",
    "updated_at": "2024-11-11T09:47:28Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "1ad2c8181cd619f8767efd71105b759eb69fa4da",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ryanofsky:pr/tcheck",
      "ref": "pr/tcheck",
      "sha": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 9,
        "stargazers_count": 14,
        "watchers_count": 14,
        "size": 270101,
        "default_branch": "master",
        "open_issues_count": 3,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-08T21:39:27Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2024-09-28T22:54:37Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b934954ad10401d9f96d7e0f248e45c4dd7a7409",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36326,
        "stargazers_count": 79279,
        "watchers_count": 79279,
        "size": 272072,
        "default_branch": "master",
        "open_issues_count": 648,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-08T18:51:35Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-11-11T09:59:42Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 90,
    "deletions": 53,
    "changed_files": 3,
    "commits": 2,
    "review_comments": 32,
    "comments": 3
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE5OTE5NGViMGY0MTlmNmFlNzVmNzU4Y2NlZjU2MTBlY2MxZDQ0Mzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a99194eb0f419f6ae75f758ccef5610ecc1d4439",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a99194eb0f419f6ae75f758ccef5610ecc1d4439",
      "tree": {
        "sha": "b5c0abd282bcb299b62397155b3ac95963bb4220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5c0abd282bcb299b62397155b3ac95963bb4220"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da10e0bab4a3e98868dd663af02c43b1dc8b7f4a",
          "sha": "da10e0bab4a3e98868dd663af02c43b1dc8b7f4a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/da10e0bab4a3e98868dd663af02c43b1dc8b7f4a"
        }
      ],
      "message": "util: Support dynamic width & precision in ConstevalFormatString\n\nThis is needed in the next commit to add compile-time checking to strprintf\ncalls, because bitcoin-cli.cpp uses dynamic width in many format strings.\n\nThis change is easiest to review ignoring whitespace.\n\nCo-authored-by: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-10-28T23:11:16Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-10-28T23:11:16Z"
      },
      "sha": "a99194eb0f419f6ae75f758ccef5610ecc1d4439"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVjYzVjYjlhODljNmIwMDFkZjgzOTY3NWIyM2Q4ZmMxZjdhYzY5YmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "tree": {
        "sha": "9a064eacd2a78efed5bd2530471a19c83a3c9118",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a064eacd2a78efed5bd2530471a19c83a3c9118"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a99194eb0f419f6ae75f758ccef5610ecc1d4439",
          "sha": "a99194eb0f419f6ae75f758ccef5610ecc1d4439",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a99194eb0f419f6ae75f758ccef5610ecc1d4439"
        }
      ],
      "message": "tinyformat: Add compile-time checking for literal format strings\n\nCo-authored-by: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-10-28T23:13:46Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-10-28T23:13:46Z"
      },
      "sha": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba"
    },
    {
      "event": "commented",
      "id": 2442890561,
      "node_id": "IC_kwDOABII586Rm41B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2442890561",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T23:56:30Z",
      "updated_at": "2024-11-08T14:55:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31174.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [hodlinator](https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2423920012), [maflcko](https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2423906139) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31061](https://github.com/bitcoin/bitcoin/pull/31061) (refactor: Check translatable format strings at compile-time by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#issuecomment-2442890561",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31174"
    },
    {
      "event": "reviewed",
      "id": 2401315598,
      "node_id": "PRR_kwDOABII586PISsO",
      "url": null,
      "actor": null,
      "commit_id": "1d16d6e6bac994fed7c695f530b9984edcd290bd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Nice. This looks less scary than expected. Left a nit to add more compile time checks, but this looks good either way.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2401315598",
      "submitted_at": "2024-10-29T10:34:14Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
    },
    {
      "event": "reviewed",
      "id": 2402127724,
      "node_id": "PRR_kwDOABII586PLY9s",
      "url": null,
      "actor": null,
      "commit_id": "1d16d6e6bac994fed7c695f530b9984edcd290bd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2402127724",
      "submitted_at": "2024-10-29T14:40:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14987045301,
      "node_id": "HRFPE_lADOABII586cJxi_zwAAAAN9TCm1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14987045301",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T15:43:37Z"
    },
    {
      "event": "reviewed",
      "id": 2402142576,
      "node_id": "PRR_kwDOABII586PLclw",
      "url": null,
      "actor": null,
      "commit_id": "e6086e00e32e486aaeeeb346ccca1377bbf647b2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Updated 1d16d6e6bac994fed7c695f530b9984edcd290bd -> e6086e00e32e486aaeeeb346ccca1377bbf647b2 ([`pr/tcheck.1`](https://github.com/ryanofsky/bitcoin/commits/pr/tcheck.1) -> [`pr/tcheck.2`](https://github.com/ryanofsky/bitcoin/commits/pr/tcheck.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/tcheck.1..pr/tcheck.2)) addressing comments and making `ConstEvalFormatString` parsing stricter to reject incomplete specifiers.\r\nUpdated e6086e00e32e486aaeeeb346ccca1377bbf647b2 -> e53829d3952c6ed275507a66e77636aad67d106b ([`pr/tcheck.2`](https://github.com/ryanofsky/bitcoin/commits/pr/tcheck.2) -> [`pr/tcheck.3`](https://github.com/ryanofsky/bitcoin/commits/pr/tcheck.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/tcheck.2..pr/tcheck.3)) cleaning up whitespace and comments.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2402142576",
      "submitted_at": "2024-10-29T15:48:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14990636162,
      "node_id": "HRFPE_lADOABII586cJxi_zwAAAAN9gvSC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14990636162",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T20:01:16Z"
    },
    {
      "event": "labeled",
      "id": 14999463639,
      "node_id": "LE_lADOABII586cJxi_zwAAAAN-CabX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14999463639",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-30T07:37:40Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 2404320459,
      "node_id": "PRR_kwDOABII586PTwTL",
      "url": null,
      "actor": null,
      "commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK e53829d3952c6ed275507a66e77636aad67d106b\r\n\r\nCleanest attempt at increased compile time validation of format so far. When reviewing #31149 I had the gnawing feeling that more complete format string support would have reduced the diff, but pushed it away for expediency (an earlier attempt at more complete support was attempted in #30999).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2404320459",
      "submitted_at": "2024-10-30T10:44:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
    },
    {
      "event": "comment_deleted",
      "id": 15004274913,
      "node_id": "CDE_lADOABII586cJxi_zwAAAAN-UxDh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15004274913",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-30T11:24:49Z"
    },
    {
      "event": "commented",
      "id": 2447182783,
      "node_id": "IC_kwDOABII586R3Qu_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2447182783",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-30T13:34:40Z",
      "updated_at": "2024-10-30T13:36:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased #30933 on top of this PR (as a separate branch for now) and the mismatches between our custom `consteval` checking and tinyformat are gone as far as our current tests go - rebased commit: 32d4cf37d5056dc42bbf317b059e10910b984b0e",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#issuecomment-2447182783",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31174"
    },
    {
      "event": "commented",
      "id": 2447224880,
      "node_id": "IC_kwDOABII586R3bAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2447224880",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-30T13:49:18Z",
      "updated_at": "2024-10-30T13:49:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31174#issuecomment-2447182783\r\n\r\n> mismatches between our custom `consteval` checking and tinyformat are gone as far as our current tests go\r\n\r\nIn case you do want a test with different behavior, I think you can use %n specifier which is not supported by tinyformat",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#issuecomment-2447224880",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31174"
    },
    {
      "event": "reviewed",
      "id": 2405166236,
      "node_id": "PRR_kwDOABII586PW-yc",
      "url": null,
      "actor": null,
      "commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "> In case you do want a test with different behavior, I think you can use %n specifier which is not supported by tinyformat\r\n\r\nCould document non-parity like so (unless you prefer I do it as part of #30933):\r\n```C++\r\n    // Non-parity\r\n    int n{};\r\n    BOOST_CHECK_EXCEPTION(tfm::format(std::string{\"%n\"}, n), tfm::format_error,\r\n        HasReason{\"tinyformat: %n conversion spec not supported\"});\r\n    ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%n\");\r\n```",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2405166236",
      "submitted_at": "2024-10-30T22:15:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15111243193,
      "node_id": "HRFPE_lADOABII586cJxi_zwAAAAOEs0W5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15111243193",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T22:31:27Z"
    },
    {
      "event": "reviewed",
      "id": 2414174938,
      "node_id": "PRR_kwDOABII586P5WLa",
      "url": null,
      "actor": null,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Updated e53829d3952c6ed275507a66e77636aad67d106b -> ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba ([`pr/tcheck.3`](https://github.com/ryanofsky/bitcoin/commits/pr/tcheck.3) -> [`pr/tcheck.4`](https://github.com/ryanofsky/bitcoin/commits/pr/tcheck.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/tcheck.3..pr/tcheck.4)) with review suggestions.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2405166236\r\n\r\n> Could document non-parity like so (unless you prefer I do it as part of #30933):\r\n\r\nI think that change doesn't really fit into this PR, since this PR isn't checking type characters. But it does make sense as part of #30933, so would be good to add there and I'd be happy to review it.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2414174938",
      "submitted_at": "2024-11-04T22:33:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
    },
    {
      "event": "reviewed",
      "id": 2423920012,
      "node_id": "PRR_kwDOABII586QehWM",
      "url": null,
      "actor": null,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba\r\n\r\nImplemented my suggestions (except comment removal suggestion) + broke out `parse_size()` since my last review.\r\n\r\n*util_string_tests* tests passed locally.\r\n\r\nLeft one comment, but nothing blocking.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2423920012",
      "submitted_at": "2024-11-08T14:17:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
    },
    {
      "event": "reviewed",
      "id": 2423906139,
      "node_id": "PRR_kwDOABII586Qed9b",
      "url": null,
      "actor": null,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left some nit ideas for more tests, but this is good either way.\r\n\r\nreview ACK ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba 🕯\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: review ACK ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba 🕯\r\n+oFB4Q8dHdvzp6J/1Ir4akTLS5GbDLpGOeKvcRP31CsusrUqTTnwOMie2fGfDcGYiEyKkNN9JiriK4ne+GSICw==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2423906139",
      "submitted_at": "2024-11-08T14:55:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
    },
    {
      "event": "reviewed",
      "id": 2425834191,
      "node_id": "PRR_kwDOABII586Ql0rP",
      "url": null,
      "actor": null,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Nice, simple approach, like it a lot!\r\nI think we can simplify the validator a bit more - let me know what you think.\r\n\r\nAlso, not exactly sure why `%n` parity wasn't added like in https://github.com/bitcoin/bitcoin/pull/30999/files#diff-71badc1cc71ba46244f7841a088251bb294265f4fe9e662c0ad6b15be540eee4R69 (is it controversial or unnecessary or not useful)?",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#pullrequestreview-2425834191",
      "submitted_at": "2024-11-10T20:20:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820457426",
      "pull_request_review_id": 2401315598,
      "id": 1820457426,
      "node_id": "PRRC_kwDOABII585sgfnS",
      "diff_hunk": "@@ -54,12 +54,16 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n     PassFmt<1>(\"%_\");\n     PassFmt<1>(\"%\\n\");\n \n-    // The `*` specifier behavior is unsupported and can lead to runtime\n-    // errors when used in a ConstevalFormatString. Please refer to the\n-    // note in the ConstevalFormatString docs.\n-    PassFmt<1>(\"%*c\");\n-    PassFmt<2>(\"%2$*3$d\");\n-    PassFmt<1>(\"%.*f\");\n+    PassFmt<2>(\"%*c\");\n+    PassFmt<2>(\"%+*c\");\n+    PassFmt<2>(\"%.*f\");\n+    PassFmt<3>(\"%*.*f\");\n+    PassFmt<3>(\"%2$*3$d\");\n+    PassFmt<3>(\"%2$*3$.9d\");\n+    PassFmt<3>(\"%2$.*3$d\");\n+    PassFmt<3>(\"%2$9.*3$d\");\n+    PassFmt<3>(\"%2$+9.*3$d\");\n+    PassFmt<4>(\"%3$*2$.*4$f\");\n ",
      "path": "src/test/util_string_tests.cpp",
      "position": 38,
      "original_position": 20,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "97dd5fe5128592332c83998825bbeda063815120",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 97dd5fe5128592332c83998825bbeda063815120: in the commit message: Missing `needed *in the* next commit`.\r\n\r\nAlso, it would be good to add some failing test cases for this stuff.\r\n\r\nFor example, `\"%1\"` should fail, because `terminate called after throwing an instance of 'tinyformat::format_error'\r\n  what():  tinyformat: Conversion spec incorrectly terminated by end of string`. See https://godbolt.org/z/1eehh1oTv . Also see 51c56e8b38033b96fb3930c2bcba3add2047d324",
      "created_at": "2024-10-29T09:46:58Z",
      "updated_at": "2024-10-29T10:34:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820457426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820457426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820461851",
      "pull_request_review_id": 2401315598,
      "id": 1820461851,
      "node_id": "PRRC_kwDOABII585sggsb",
      "diff_hunk": "@@ -54,12 +54,16 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n     PassFmt<1>(\"%_\");\n     PassFmt<1>(\"%\\n\");\n \n-    // The `*` specifier behavior is unsupported and can lead to runtime\n-    // errors when used in a ConstevalFormatString. Please refer to the\n-    // note in the ConstevalFormatString docs.\n-    PassFmt<1>(\"%*c\");\n-    PassFmt<2>(\"%2$*3$d\");\n-    PassFmt<1>(\"%.*f\");\n+    PassFmt<2>(\"%*c\");\n+    PassFmt<2>(\"%+*c\");\n+    PassFmt<2>(\"%.*f\");\n+    PassFmt<3>(\"%*.*f\");\n+    PassFmt<3>(\"%2$*3$d\");\n+    PassFmt<3>(\"%2$*3$.9d\");\n+    PassFmt<3>(\"%2$.*3$d\");\n+    PassFmt<3>(\"%2$9.*3$d\");\n+    PassFmt<3>(\"%2$+9.*3$d\");\n+    PassFmt<4>(\"%3$*2$.*4$f\");\n ",
      "path": "src/test/util_string_tests.cpp",
      "position": 38,
      "original_position": 20,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "97dd5fe5128592332c83998825bbeda063815120",
      "in_reply_to_id": 1820457426,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Other failing test cases to possibly add: `\"%*\"`, `\"%+*\"`, `\"%.*\"`, ...",
      "created_at": "2024-10-29T09:49:46Z",
      "updated_at": "2024-10-29T10:34:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820461851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820461851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820504400",
      "pull_request_review_id": 2401315598,
      "id": 1820504400,
      "node_id": "PRRC_kwDOABII585sgrFQ",
      "diff_hunk": "@@ -54,12 +54,16 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n     PassFmt<1>(\"%_\");\n     PassFmt<1>(\"%\\n\");\n \n-    // The `*` specifier behavior is unsupported and can lead to runtime\n-    // errors when used in a ConstevalFormatString. Please refer to the\n-    // note in the ConstevalFormatString docs.\n-    PassFmt<1>(\"%*c\");\n-    PassFmt<2>(\"%2$*3$d\");\n-    PassFmt<1>(\"%.*f\");\n+    PassFmt<2>(\"%*c\");\n+    PassFmt<2>(\"%+*c\");\n+    PassFmt<2>(\"%.*f\");\n+    PassFmt<3>(\"%*.*f\");\n+    PassFmt<3>(\"%2$*3$d\");\n+    PassFmt<3>(\"%2$*3$.9d\");\n+    PassFmt<3>(\"%2$.*3$d\");\n+    PassFmt<3>(\"%2$9.*3$d\");\n+    PassFmt<3>(\"%2$+9.*3$d\");\n+    PassFmt<4>(\"%3$*2$.*4$f\");\n ",
      "path": "src/test/util_string_tests.cpp",
      "position": 38,
      "original_position": 20,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "97dd5fe5128592332c83998825bbeda063815120",
      "in_reply_to_id": 1820457426,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also, some more \"fancy\" passing test cases:\r\n\r\n* `PassFmt<3>(\"'%1$- 0+*3$.*2$f'\");` (space and `0` are ignored, confusing, but valid)\r\n* `PassFmt<3>(\"'%- 0+*.*f'\");` (same, without pos specs)",
      "created_at": "2024-10-29T10:12:40Z",
      "updated_at": "2024-10-29T10:34:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820504400",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820504400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820543443",
      "pull_request_review_id": 2401315598,
      "id": 1820543443,
      "node_id": "PRRC_kwDOABII585sg0nT",
      "diff_hunk": "@@ -178,6 +179,23 @@ namespace tfm = tinyformat;\n \n namespace tinyformat {\n \n+// Added for Bitcoin Core. Wrapper type for format strings to allow compile-time checks.\n+struct FormatString {\n+    const char* fmt;\n+    operator const char*() { return fmt; }\n+};",
      "path": "src/tinyformat.h",
      "position": null,
      "original_position": 16,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "1d16d6e6bac994fed7c695f530b9984edcd290bd",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit in 1d16d6e6bac994fed7c695f530b9984edcd290bd: I don't really see why this is useful. Maybe I am missing something, but everything compiles by just moving the two members to the derived struct:\r\n\r\n\r\n```diff\r\ndiff --git a/src/tinyformat.h b/src/tinyformat.h\r\nindex 56c25d8f7f..6227cdeca0 100644\r\n--- a/src/tinyformat.h\r\n+++ b/src/tinyformat.h\r\n@@ -179,21 +179,16 @@ namespace tfm = tinyformat;\r\n \r\n namespace tinyformat {\r\n \r\n-// Added for Bitcoin Core. Wrapper type for format strings to allow compile-time checks.\r\n-struct FormatString {\r\n-    const char* fmt;\r\n-    operator const char*() { return fmt; }\r\n-};\r\n-\r\n // Added for Bitcoin Core. Wrapper for checking format strings at compile time.\r\n // Unlike ConstevalFormatString this supports std::string for runtime string\r\n // formatting without compile time checks.\r\n template <unsigned num_params>\r\n-struct FormatStringCheck : FormatString {\r\n-    consteval FormatStringCheck(const char* str) : FormatString{util::ConstevalFormatString<num_params>{str}.fmt} {}\r\n-    FormatStringCheck(const std::string& str) : FormatString{str.c_str()} {}\r\n-    FormatStringCheck(FormatString str) : FormatString{str} {}\r\n-    FormatStringCheck(util::ConstevalFormatString<num_params> str) : FormatString{str.fmt} {}\r\n+struct FormatStringCheck {\r\n+    consteval FormatStringCheck(const char* str) : fmt{util::ConstevalFormatString<num_params>{str}.fmt} {}\r\n+    FormatStringCheck(const std::string& str) : fmt{str.c_str()} {}\r\n+    FormatStringCheck(util::ConstevalFormatString<num_params> str) : fmt{str.fmt} {}\r\n+    const char* fmt;\r\n+    operator const char*() { return fmt; }\r\n };\r\n \r\n // Added for Bitcoin Core\r\n",
      "created_at": "2024-10-29T10:33:56Z",
      "updated_at": "2024-10-29T10:34:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820543443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820543443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": 182,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820938133",
      "pull_request_review_id": 2402127724,
      "id": 1820938133,
      "node_id": "PRRC_kwDOABII585siU-V",
      "diff_hunk": "@@ -53,23 +46,45 @@ struct ConstevalFormatString {\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;",
      "path": "src/util/string.h",
      "position": 54,
      "original_position": 35,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "1d16d6e6bac994fed7c695f530b9984edcd290bd",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we still have unbounded increment without checking the end (I though we've fixed this already, maybe it got stuck in the comments...)",
      "created_at": "2024-10-29T14:39:25Z",
      "updated_at": "2024-10-29T14:40:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820938133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820938133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820947389",
      "pull_request_review_id": 2402142576,
      "id": 1820947389,
      "node_id": "PRRC_kwDOABII585siXO9",
      "diff_hunk": "@@ -54,12 +54,16 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n     PassFmt<1>(\"%_\");\n     PassFmt<1>(\"%\\n\");\n \n-    // The `*` specifier behavior is unsupported and can lead to runtime\n-    // errors when used in a ConstevalFormatString. Please refer to the\n-    // note in the ConstevalFormatString docs.\n-    PassFmt<1>(\"%*c\");\n-    PassFmt<2>(\"%2$*3$d\");\n-    PassFmt<1>(\"%.*f\");\n+    PassFmt<2>(\"%*c\");\n+    PassFmt<2>(\"%+*c\");\n+    PassFmt<2>(\"%.*f\");\n+    PassFmt<3>(\"%*.*f\");\n+    PassFmt<3>(\"%2$*3$d\");\n+    PassFmt<3>(\"%2$*3$.9d\");\n+    PassFmt<3>(\"%2$.*3$d\");\n+    PassFmt<3>(\"%2$9.*3$d\");\n+    PassFmt<3>(\"%2$+9.*3$d\");\n+    PassFmt<4>(\"%3$*2$.*4$f\");\n ",
      "path": "src/test/util_string_tests.cpp",
      "position": 38,
      "original_position": 20,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "97dd5fe5128592332c83998825bbeda063815120",
      "in_reply_to_id": 1820457426,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820457426\r\n\r\nThanks, I added the suggested test cases. The suggested tests that \"should fail\" didn't actually fail with 97dd5fe5128592332c83998825bbeda063815120 because it accepted `\\0` as a valid specifier character, so I added an extra check to prevent that. I also added extra code to consume digits after `.` otherwise format strings like `\"%1.2\"` would be accepted treating `2` as the specifier.",
      "created_at": "2024-10-29T14:44:17Z",
      "updated_at": "2024-10-29T15:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820947389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820947389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820954447",
      "pull_request_review_id": 2402142576,
      "id": 1820954447,
      "node_id": "PRRC_kwDOABII585siY9P",
      "diff_hunk": "@@ -178,6 +179,23 @@ namespace tfm = tinyformat;\n \n namespace tinyformat {\n \n+// Added for Bitcoin Core. Wrapper type for format strings to allow compile-time checks.\n+struct FormatString {\n+    const char* fmt;\n+    operator const char*() { return fmt; }\n+};",
      "path": "src/tinyformat.h",
      "position": null,
      "original_position": 16,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "1d16d6e6bac994fed7c695f530b9984edcd290bd",
      "in_reply_to_id": 1820543443,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820543443\r\n\r\nThanks, applied patch. The reason for having a `FormatString` class was to provide a cleaner escape from compile-time checks `strprintf(FormatString{\"%*s\"}, width, str)` before the first commit was implemented. But it's no longer necessary after that commit.",
      "created_at": "2024-10-29T14:48:01Z",
      "updated_at": "2024-10-29T15:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820954447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820954447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": 182,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821063869",
      "pull_request_review_id": 2402142576,
      "id": 1821063869,
      "node_id": "PRRC_kwDOABII585sizq9",
      "diff_hunk": "@@ -53,23 +46,45 @@ struct ConstevalFormatString {\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;",
      "path": "src/util/string.h",
      "position": 54,
      "original_position": 35,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "1d16d6e6bac994fed7c695f530b9984edcd290bd",
      "in_reply_to_id": 1820938133,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1820938133\r\n\r\n> we still have unbounded increment without checking the end (I though we've fixed this already, maybe it got stuck in the comments...)\r\n\r\nThanks. I fixed this by just switching the string type to `const char*` instead of `string_view` since tinyformat already assumes the string is null terminated.\r\n\r\nI think it would be possible to write a clean version of this code that used `string_view`, but it would have to be structured differently to avoid the need for `it < str.end()` checks everywhere.",
      "created_at": "2024-10-29T15:31:57Z",
      "updated_at": "2024-10-29T15:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1821063869",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821063869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822308585",
      "pull_request_review_id": 2404320459,
      "id": 1822308585,
      "node_id": "PRRC_kwDOABII585snjjp",
      "diff_hunk": "@@ -25,51 +24,73 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                };",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 55,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n                }\r\n```",
      "created_at": "2024-10-30T10:24:49Z",
      "updated_at": "2024-10-30T10:44:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1822308585",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822308585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822380551",
      "pull_request_review_id": 2404449074,
      "id": 1822380551,
      "node_id": "PRRC_kwDOABII585sn1IH",
      "diff_hunk": "@@ -53,23 +46,45 @@ struct ConstevalFormatString {\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;",
      "path": "src/util/string.h",
      "position": 54,
      "original_position": 35,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "1d16d6e6bac994fed7c695f530b9984edcd290bd",
      "in_reply_to_id": 1820938133,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Found the PR thanks to @hodlinator, this is how I handled that case: https://github.com/bitcoin/bitcoin/pull/30999/files#diff-71badc1cc71ba46244f7841a088251bb294265f4fe9e662c0ad6b15be540eee4R60\r\n\r\nWe could a test case for the incomplete trailing number (or any other test that seems relevant here): https://github.com/bitcoin/bitcoin/pull/30999/files#diff-718d0d85269ec81595bd9f9181eea3a74b20244b07f14c546e3e07520b2b5f82R81",
      "created_at": "2024-10-30T11:01:45Z",
      "updated_at": "2024-10-30T11:01:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1822380551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822380551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822392320",
      "pull_request_review_id": 2404467784,
      "id": 1822392320,
      "node_id": "PRRC_kwDOABII585sn4AA",
      "diff_hunk": "@@ -53,23 +46,45 @@ struct ConstevalFormatString {\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;",
      "path": "src/util/string.h",
      "position": 54,
      "original_position": 35,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "1d16d6e6bac994fed7c695f530b9984edcd290bd",
      "in_reply_to_id": 1820938133,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't that done here?\r\nhttps://github.com/bitcoin/bitcoin/blob/ad37073f2e6ab1f39a59109692f84cc85809f53e/src/test/util_string_tests.cpp#L90",
      "created_at": "2024-10-30T11:08:44Z",
      "updated_at": "2024-10-30T11:08:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1822392320",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822392320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822395900",
      "pull_request_review_id": 2404472884,
      "id": 1822395900,
      "node_id": "PRRC_kwDOABII585sn438",
      "diff_hunk": "@@ -53,23 +46,45 @@ struct ConstevalFormatString {\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;",
      "path": "src/util/string.h",
      "position": 54,
      "original_position": 35,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "1d16d6e6bac994fed7c695f530b9984edcd290bd",
      "in_reply_to_id": 1820938133,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is indeed now, thanks for checking.",
      "created_at": "2024-10-30T11:10:21Z",
      "updated_at": "2024-10-30T11:10:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1822395900",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822395900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822780992",
      "pull_request_review_id": 2405166236,
      "id": 1822780992,
      "node_id": "PRRC_kwDOABII585spW5A",
      "diff_hunk": "@@ -25,51 +24,73 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                };\n+\n+                if (*it == '$') {\n+                    ++it;\n+                    // Positional specifier, like %8$s\n+                    if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                    count_pos = std::max(count_pos, maybe_num);\n+                } else {\n+                    // Non-positional specifier, like %s\n+                    ++count_normal;\n+                }\n             };\n \n-            if (*it == '$') {\n-                // Positional specifier, like %8$s\n-                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n-                count_pos = std::max(count_pos, maybe_num);\n-                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            // Increase argument count and consume positional specifier, if present.\n+            add_arg();\n+\n+            // Consume flags.\n+            while (*it == '#' || *it == '0' || *it == '-' || *it == ' ' || *it == '+') ++it;\n+\n+            // Consume dynamic or static width value.\n+            if (*it == '*') {\n+                ++it;\n+                add_arg();\n             } else {\n-                // Non-positional specifier, like %s\n-                ++count_normal;\n+                while ('0' <= *it && *it <= '9') ++it;\n+            }\n+\n+            // Consume dynamic or static precision value.\n+            if (*it == '.') {\n                 ++it;\n+                if (*it == '*') {\n+                    ++it;\n+                    add_arg();\n+                } else {\n+                   while ('0' <= *it && *it <= '9') ++it;\n+                }\n             }\n+\n+            if (*it == '\\0') throw \"Format specifier incorrectly terminated by end of string\";\n+\n             // The remainder \"[flags][width][.precision][length]type\" of the\n             // specifier is not checked. Parsing continues with the next '%'.",
      "path": "src/util/string.h",
      "position": 103,
      "original_position": 103,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this be removed?",
      "created_at": "2024-10-30T14:40:23Z",
      "updated_at": "2024-10-30T22:15:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1822780992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822780992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": 93,
      "original_start_line": 94,
      "start_side": "RIGHT",
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822782509",
      "pull_request_review_id": 2405166236,
      "id": 1822782509,
      "node_id": "PRRC_kwDOABII585spXQt",
      "diff_hunk": "@@ -25,51 +24,73 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                };\n+\n+                if (*it == '$') {\n+                    ++it;\n+                    // Positional specifier, like %8$s\n+                    if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                    count_pos = std::max(count_pos, maybe_num);\n+                } else {\n+                    // Non-positional specifier, like %s\n+                    ++count_normal;\n+                }\n             };\n \n-            if (*it == '$') {\n-                // Positional specifier, like %8$s\n-                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n-                count_pos = std::max(count_pos, maybe_num);\n-                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            // Increase argument count and consume positional specifier, if present.\n+            add_arg();\n+\n+            // Consume flags.\n+            while (*it == '#' || *it == '0' || *it == '-' || *it == ' ' || *it == '+') ++it;\n+\n+            // Consume dynamic or static width value.\n+            if (*it == '*') {\n+                ++it;\n+                add_arg();\n             } else {\n-                // Non-positional specifier, like %s\n-                ++count_normal;\n+                while ('0' <= *it && *it <= '9') ++it;\n+            }\n+\n+            // Consume dynamic or static precision value.\n+            if (*it == '.') {\n                 ++it;\n+                if (*it == '*') {\n+                    ++it;\n+                    add_arg();\n+                } else {\n+                   while ('0' <= *it && *it <= '9') ++it;",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 96,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(One could expect that at least one precision-digit was required after '.' but it is not in tinyformat so this behavior is consistent).",
      "created_at": "2024-10-30T14:40:59Z",
      "updated_at": "2024-10-30T22:15:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1822782509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822782509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823481424",
      "pull_request_review_id": 2405166236,
      "id": 1823481424,
      "node_id": "PRRC_kwDOABII585ssB5Q",
      "diff_hunk": "@@ -1056,15 +1069,15 @@ inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)\n \n /// Format list of arguments to the stream according to given format string.\n template<typename... Args>\n-void format(std::ostream& out, const char* fmt, const Args&... args)\n+void format(std::ostream& out, FormatStringCheck<sizeof...(Args)> fmt, const Args&... args)\n {\n     vformat(out, fmt, makeFormatList(args...));\n }\n \n /// Format list of arguments according to the given format string and return\n /// the result as a string.\n template<typename... Args>\n-std::string format(const char* fmt, const Args&... args)\n+std::string format(FormatStringCheck<sizeof...(Args)> fmt, const Args&... args)",
      "path": "src/tinyformat.h",
      "position": 41,
      "original_position": 41,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why not use `FormatStringCheck<sizeof...(Args)>` in `printf` and `printfln` directly below as well?",
      "created_at": "2024-10-30T22:03:19Z",
      "updated_at": "2024-10-30T22:15:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1823481424",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823481424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1080,
      "original_line": 1080,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823488811",
      "pull_request_review_id": 2405166236,
      "id": 1823488811,
      "node_id": "PRRC_kwDOABII585ssDsr",
      "diff_hunk": "@@ -54,12 +54,20 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n     PassFmt<1>(\"%_\");\n     PassFmt<1>(\"%\\n\");\n \n-    // The `*` specifier behavior is unsupported and can lead to runtime\n-    // errors when used in a ConstevalFormatString. Please refer to the\n-    // note in the ConstevalFormatString docs.\n-    PassFmt<1>(\"%*c\");\n-    PassFmt<2>(\"%2$*3$d\");\n-    PassFmt<1>(\"%.*f\");\n+    PassFmt<2>(\"%*c\");\n+    PassFmt<2>(\"%+*c\");\n+    PassFmt<2>(\"%.*f\");",
      "path": "src/test/util_string_tests.cpp",
      "position": 30,
      "original_position": 21,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could also add\r\n```C++\r\nPassFmt<1>(\"%.f\");\r\n```\r\nmaybe grouped with the `<1>` calls above. Confirmed tinyformat allows for it, see how the success status returned by `parseWidthOrPrecision` is ignored:\r\nhttps://github.com/bitcoin/bitcoin/blob/e53829d3952c6ed275507a66e77636aad67d106b/src/tinyformat.h#L778-L788",
      "created_at": "2024-10-30T22:05:26Z",
      "updated_at": "2024-10-30T22:15:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1823488811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823488811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828424528",
      "pull_request_review_id": 2414174938,
      "id": 1828424528,
      "node_id": "PRRC_kwDOABII585s-4tQ",
      "diff_hunk": "@@ -54,12 +54,20 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n     PassFmt<1>(\"%_\");\n     PassFmt<1>(\"%\\n\");\n \n-    // The `*` specifier behavior is unsupported and can lead to runtime\n-    // errors when used in a ConstevalFormatString. Please refer to the\n-    // note in the ConstevalFormatString docs.\n-    PassFmt<1>(\"%*c\");\n-    PassFmt<2>(\"%2$*3$d\");\n-    PassFmt<1>(\"%.*f\");\n+    PassFmt<2>(\"%*c\");\n+    PassFmt<2>(\"%+*c\");\n+    PassFmt<2>(\"%.*f\");",
      "path": "src/test/util_string_tests.cpp",
      "position": 30,
      "original_position": 21,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": 1823488811,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1823488811\r\n\r\n> ```c++\r\n> PassFmt<1>(\"%.f\");\r\n> ```\r\n\r\nNice suggestion, added two cases: `%5.f` and `%.f` below `%5.2f`",
      "created_at": "2024-11-04T21:39:15Z",
      "updated_at": "2024-11-04T22:33:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1828424528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828424528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828424659",
      "pull_request_review_id": 2414174938,
      "id": 1828424659,
      "node_id": "PRRC_kwDOABII585s-4vT",
      "diff_hunk": "@@ -25,51 +24,73 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                };",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 55,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": 1822308585,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1822308585\r\n\r\nThanks, updated \r\n\r\n",
      "created_at": "2024-11-04T21:39:22Z",
      "updated_at": "2024-11-04T22:33:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1828424659",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828424659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828424763",
      "pull_request_review_id": 2414174938,
      "id": 1828424763,
      "node_id": "PRRC_kwDOABII585s-4w7",
      "diff_hunk": "@@ -25,51 +24,73 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                };\n+\n+                if (*it == '$') {\n+                    ++it;\n+                    // Positional specifier, like %8$s\n+                    if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                    count_pos = std::max(count_pos, maybe_num);\n+                } else {\n+                    // Non-positional specifier, like %s\n+                    ++count_normal;\n+                }\n             };\n \n-            if (*it == '$') {\n-                // Positional specifier, like %8$s\n-                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n-                count_pos = std::max(count_pos, maybe_num);\n-                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            // Increase argument count and consume positional specifier, if present.\n+            add_arg();\n+\n+            // Consume flags.\n+            while (*it == '#' || *it == '0' || *it == '-' || *it == ' ' || *it == '+') ++it;\n+\n+            // Consume dynamic or static width value.\n+            if (*it == '*') {\n+                ++it;\n+                add_arg();\n             } else {\n-                // Non-positional specifier, like %s\n-                ++count_normal;\n+                while ('0' <= *it && *it <= '9') ++it;\n+            }\n+\n+            // Consume dynamic or static precision value.\n+            if (*it == '.') {\n                 ++it;\n+                if (*it == '*') {\n+                    ++it;\n+                    add_arg();\n+                } else {\n+                   while ('0' <= *it && *it <= '9') ++it;",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 96,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": 1822782509,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1822782509\r\n\r\n> (One could expect that at least one precision-digit was required after '.' but it is not in tinyformat so this behavior is consistent).\r\n\r\nThat's good to know, I was just trying to make the parsing as simple as possible, but this syntax does seem to be commonly accepted (it works in python too) and I added  test cases for it following your other suggestion",
      "created_at": "2024-11-04T21:39:28Z",
      "updated_at": "2024-11-04T22:33:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1828424763",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828424763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828424828",
      "pull_request_review_id": 2414174938,
      "id": 1828424828,
      "node_id": "PRRC_kwDOABII585s-4x8",
      "diff_hunk": "@@ -25,51 +24,73 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                };\n+\n+                if (*it == '$') {\n+                    ++it;\n+                    // Positional specifier, like %8$s\n+                    if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                    count_pos = std::max(count_pos, maybe_num);\n+                } else {\n+                    // Non-positional specifier, like %s\n+                    ++count_normal;\n+                }\n             };\n \n-            if (*it == '$') {\n-                // Positional specifier, like %8$s\n-                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n-                count_pos = std::max(count_pos, maybe_num);\n-                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            // Increase argument count and consume positional specifier, if present.\n+            add_arg();\n+\n+            // Consume flags.\n+            while (*it == '#' || *it == '0' || *it == '-' || *it == ' ' || *it == '+') ++it;\n+\n+            // Consume dynamic or static width value.\n+            if (*it == '*') {\n+                ++it;\n+                add_arg();\n             } else {\n-                // Non-positional specifier, like %s\n-                ++count_normal;\n+                while ('0' <= *it && *it <= '9') ++it;\n+            }\n+\n+            // Consume dynamic or static precision value.\n+            if (*it == '.') {\n                 ++it;\n+                if (*it == '*') {\n+                    ++it;\n+                    add_arg();\n+                } else {\n+                   while ('0' <= *it && *it <= '9') ++it;\n+                }\n             }\n+\n+            if (*it == '\\0') throw \"Format specifier incorrectly terminated by end of string\";\n+\n             // The remainder \"[flags][width][.precision][length]type\" of the\n             // specifier is not checked. Parsing continues with the next '%'.",
      "path": "src/util/string.h",
      "position": 103,
      "original_position": 103,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": 1822780992,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1822780992\r\n\r\n> Should this be removed?\r\n\r\nI think it's useful to document the format of the specifier, and it's still true that the remainder of the specifier (length and type) is not checked. Happy to update this if there's a specific suggestion, but I think the comment is still helpful and accurate so would not want to remove it.",
      "created_at": "2024-11-04T21:39:33Z",
      "updated_at": "2024-11-04T22:34:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1828424828",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828424828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": 93,
      "original_start_line": 94,
      "start_side": "RIGHT",
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828438077",
      "pull_request_review_id": 2414174938,
      "id": 1828438077,
      "node_id": "PRRC_kwDOABII585s-8A9",
      "diff_hunk": "@@ -1056,15 +1069,15 @@ inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)\n \n /// Format list of arguments to the stream according to given format string.\n template<typename... Args>\n-void format(std::ostream& out, const char* fmt, const Args&... args)\n+void format(std::ostream& out, FormatStringCheck<sizeof...(Args)> fmt, const Args&... args)\n {\n     vformat(out, fmt, makeFormatList(args...));\n }\n \n /// Format list of arguments according to the given format string and return\n /// the result as a string.\n template<typename... Args>\n-std::string format(const char* fmt, const Args&... args)\n+std::string format(FormatStringCheck<sizeof...(Args)> fmt, const Args&... args)",
      "path": "src/tinyformat.h",
      "position": 41,
      "original_position": 41,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": 1823481424,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1823481424\r\n\r\n> Why not use `FormatStringCheck<sizeof...(Args)>` in `printf` and `printfln` directly below as well?\r\n\r\nNo reason, added now.",
      "created_at": "2024-11-04T21:53:00Z",
      "updated_at": "2024-11-04T22:33:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1828438077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828438077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1080,
      "original_line": 1080,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834472950",
      "pull_request_review_id": 2423920012,
      "id": 1834472950,
      "node_id": "PRRC_kwDOABII585tV9X2",
      "diff_hunk": "@@ -25,51 +24,73 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                };\n+\n+                if (*it == '$') {\n+                    ++it;\n+                    // Positional specifier, like %8$s\n+                    if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                    count_pos = std::max(count_pos, maybe_num);\n+                } else {\n+                    // Non-positional specifier, like %s\n+                    ++count_normal;\n+                }\n             };\n \n-            if (*it == '$') {\n-                // Positional specifier, like %8$s\n-                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n-                count_pos = std::max(count_pos, maybe_num);\n-                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            // Increase argument count and consume positional specifier, if present.\n+            add_arg();\n+\n+            // Consume flags.\n+            while (*it == '#' || *it == '0' || *it == '-' || *it == ' ' || *it == '+') ++it;\n+\n+            // Consume dynamic or static width value.\n+            if (*it == '*') {\n+                ++it;\n+                add_arg();\n             } else {\n-                // Non-positional specifier, like %s\n-                ++count_normal;\n+                while ('0' <= *it && *it <= '9') ++it;\n+            }\n+\n+            // Consume dynamic or static precision value.\n+            if (*it == '.') {\n                 ++it;\n+                if (*it == '*') {\n+                    ++it;\n+                    add_arg();\n+                } else {\n+                   while ('0' <= *it && *it <= '9') ++it;\n+                }\n             }\n+\n+            if (*it == '\\0') throw \"Format specifier incorrectly terminated by end of string\";\n+\n             // The remainder \"[flags][width][.precision][length]type\" of the\n             // specifier is not checked. Parsing continues with the next '%'.",
      "path": "src/util/string.h",
      "position": 103,
      "original_position": 103,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "e53829d3952c6ed275507a66e77636aad67d106b",
      "in_reply_to_id": 1822780992,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As you say, only the length and type are no longer checked. This PR now implements rudimentary checking of flags, width and precision.\r\n```suggestion\r\n            // Length and type in \"[flags][width][.precision][length]type\"\r\n            // is not checked. Parsing continues with the next '%'.\r\n```",
      "created_at": "2024-11-08T14:15:40Z",
      "updated_at": "2024-11-08T14:17:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1834472950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834472950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": 93,
      "original_start_line": 94,
      "start_side": "RIGHT",
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834499010",
      "pull_request_review_id": 2423906139,
      "id": 1834499010,
      "node_id": "PRRC_kwDOABII585tWDvC",
      "diff_hunk": "@@ -79,7 +89,18 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n ",
      "path": "src/test/util_string_tests.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "a99194eb0f419f6ae75f758ccef5610ecc1d4439",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could add new failing cases here as well?\r\n\r\n\r\n```\r\nFailFmtWithError<2>(\"%2$*$d\", err_0_pos);\r\nFailFmtWithError<2>(\"%2$*0$d\", err_0_pos);\r\nFailFmtWithError<3>(\"%3$*2$.*$f\", err_0_pos);\r\nFailFmtWithError<3>(\"%3$*2$.*0$f\", err_0_pos);\r\n```\r\n\r\n",
      "created_at": "2024-11-08T14:31:48Z",
      "updated_at": "2024-11-08T14:55:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1834499010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834499010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834504076",
      "pull_request_review_id": 2423906139,
      "id": 1834504076,
      "node_id": "PRRC_kwDOABII585tWE-M",
      "diff_hunk": "@@ -54,12 +56,20 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n     PassFmt<1>(\"%_\");\n     PassFmt<1>(\"%\\n\");\n \n-    // The `*` specifier behavior is unsupported and can lead to runtime\n-    // errors when used in a ConstevalFormatString. Please refer to the\n-    // note in the ConstevalFormatString docs.\n-    PassFmt<1>(\"%*c\");\n-    PassFmt<2>(\"%2$*3$d\");\n-    PassFmt<1>(\"%.*f\");\n+    PassFmt<2>(\"%*c\");\n+    PassFmt<2>(\"%+*c\");\n+    PassFmt<2>(\"%.*f\");\n+    PassFmt<3>(\"%*.*f\");\n+    PassFmt<3>(\"%2$*3$d\");\n+    PassFmt<3>(\"%2$*3$.9d\");\n+    PassFmt<3>(\"%2$.*3$d\");\n+    PassFmt<3>(\"%2$9.*3$d\");\n+    PassFmt<3>(\"%2$+9.*3$d\");\n+    PassFmt<4>(\"%3$*2$.*4$f\");\n+\n+    // Make sure multiple flag characters \"- 0+\" are accepted\n+    PassFmt<3>(\"'%- 0+*.*f'\");\n+    PassFmt<3>(\"'%1$- 0+*3$.*2$f'\");\n \n     auto err_mix{\"Format specifiers must be all positional or all non-positional!\"};\n     FailFmtWithError<1>(\"%s%1$s\", err_mix);",
      "path": "src/test/util_string_tests.cpp",
      "position": 44,
      "original_position": 44,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "a99194eb0f419f6ae75f758ccef5610ecc1d4439",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same:\r\n\r\n```\r\nFailFmtWithError<2>(\"%2$*d\", err_mix);\r\nFailFmtWithError<2>(\"%*2$d\", err_mix);\r\nFailFmtWithError<2>(\"%.*3$d\", err_mix);\r\nFailFmtWithError<2>(\"%2$.*d\", err_mix);",
      "created_at": "2024-11-08T14:35:20Z",
      "updated_at": "2024-11-08T14:55:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1834504076",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834504076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834505494",
      "pull_request_review_id": 2423906139,
      "id": 1834505494,
      "node_id": "PRRC_kwDOABII585tWFUW",
      "diff_hunk": "@@ -54,12 +56,20 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n     PassFmt<1>(\"%_\");\n     PassFmt<1>(\"%\\n\");\n \n-    // The `*` specifier behavior is unsupported and can lead to runtime\n-    // errors when used in a ConstevalFormatString. Please refer to the\n-    // note in the ConstevalFormatString docs.\n-    PassFmt<1>(\"%*c\");\n-    PassFmt<2>(\"%2$*3$d\");\n-    PassFmt<1>(\"%.*f\");\n+    PassFmt<2>(\"%*c\");\n+    PassFmt<2>(\"%+*c\");\n+    PassFmt<2>(\"%.*f\");\n+    PassFmt<3>(\"%*.*f\");\n+    PassFmt<3>(\"%2$*3$d\");\n+    PassFmt<3>(\"%2$*3$.9d\");\n+    PassFmt<3>(\"%2$.*3$d\");\n+    PassFmt<3>(\"%2$9.*3$d\");\n+    PassFmt<3>(\"%2$+9.*3$d\");\n+    PassFmt<4>(\"%3$*2$.*4$f\");\n+\n+    // Make sure multiple flag characters \"- 0+\" are accepted\n+    PassFmt<3>(\"'%- 0+*.*f'\");\n+    PassFmt<3>(\"'%1$- 0+*3$.*2$f'\");\n \n     auto err_mix{\"Format specifiers must be all positional or all non-positional!\"};\n     FailFmtWithError<1>(\"%s%1$s\", err_mix);",
      "path": "src/test/util_string_tests.cpp",
      "position": 44,
      "original_position": 44,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "a99194eb0f419f6ae75f758ccef5610ecc1d4439",
      "in_reply_to_id": 1834504076,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same (below):\r\n\r\n```\r\n    FailFmtWithError<1>(\"%*c\", err_num);",
      "created_at": "2024-11-08T14:36:21Z",
      "updated_at": "2024-11-08T14:55:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1834505494",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834505494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835766554",
      "pull_request_review_id": 2425834191,
      "id": 1835766554,
      "node_id": "PRRC_kwDOABII585ta5Ma",
      "diff_hunk": "@@ -25,51 +24,72 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                }\n+\n+                if (*it == '$') {\n+                    ++it;\n+                    // Positional specifier, like %8$s\n+                    if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                    count_pos = std::max(count_pos, maybe_num);\n+                } else {\n+                    // Non-positional specifier, like %s\n+                    ++count_normal;\n+                }\n             };\n \n-            if (*it == '$') {\n-                // Positional specifier, like %8$s\n-                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n-                count_pos = std::max(count_pos, maybe_num);\n-                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n-            } else {\n-                // Non-positional specifier, like %s\n-                ++count_normal;\n+            // Increase argument count and consume positional specifier, if present.\n+            add_arg();\n+\n+            // Consume flags.\n+            while (*it == '#' || *it == '0' || *it == '-' || *it == ' ' || *it == '+') ++it;\n+\n+            auto parse_size = [&] {\n+                if (*it == '*') {\n+                    ++it;\n+                    add_arg();\n+                } else {\n+                    while ('0' <= *it && *it <= '9') ++it;",
      "path": "src/util/string.h",
      "position": 87,
      "original_position": 87,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that we have two separate number \"parsers\" (one that keeps the result and one that throws it away), we might as well extract number parsing to a local lambda like you did with the other ones.\r\n\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```patch\r\ndiff --git a/src/util/string.h b/src/util/string.h\r\n--- a/src/util/string.h\t(revision ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba)\r\n+++ b/src/util/string.h\t(date 1731267170701)\r\n@@ -45,14 +45,16 @@\r\n                 continue;\r\n             }\r\n \r\n+            auto parse_number = [&] {\r\n+                unsigned num{0};\r\n+                for (; '0' <= *it && *it <= '9'; ++it) {\r\n+                    num = num * 10 + (*it - '0');\r\n+                }\r\n+                return num;\r\n+            };\r\n+\r\n             auto add_arg = [&] {\r\n-                unsigned maybe_num{0};\r\n-                while ('0' <= *it && *it <= '9') {\r\n-                    maybe_num *= 10;\r\n-                    maybe_num += *it - '0';\r\n-                    ++it;\r\n-                }\r\n-\r\n+                unsigned maybe_num = parse_number();\r\n                 if (*it == '$') {\r\n                     ++it;\r\n                     // Positional specifier, like %8$s\r\n@@ -75,7 +77,7 @@\r\n                     ++it;\r\n                     add_arg();\r\n                 } else {\r\n-                    while ('0' <= *it && *it <= '9') ++it;\r\n+                    parse_number();\r\n                 }\r\n             };\r\n```\r\n\r\n</details>",
      "created_at": "2024-11-10T19:33:50Z",
      "updated_at": "2024-11-10T20:20:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1835766554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835766554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835770569",
      "pull_request_review_id": 2425834191,
      "id": 1835770569,
      "node_id": "PRRC_kwDOABII585ta6LJ",
      "diff_hunk": "@@ -25,51 +24,72 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }",
      "path": "src/util/string.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These are all here to check if we're inside a format string, but we don't have a `%%`, right?\r\nCould we maybe simplify that to something like:\r\n```suggestion\r\n            if (*it != '%' || *(++it) == '%') continue; // Skip escaped %%\r\n```\r\n?",
      "created_at": "2024-11-10T19:58:04Z",
      "updated_at": "2024-11-10T20:20:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1835770569",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835770569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": 36,
      "original_start_line": 36,
      "start_side": "RIGHT",
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835770704",
      "pull_request_review_id": 2425834191,
      "id": 1835770704,
      "node_id": "PRRC_kwDOABII585ta6NQ",
      "diff_hunk": "@@ -25,51 +24,72 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                }\n+\n+                if (*it == '$') {\n+                    ++it;\n+                    // Positional specifier, like %8$s\n+                    if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                    count_pos = std::max(count_pos, maybe_num);\n+                } else {\n+                    // Non-positional specifier, like %s\n+                    ++count_normal;\n+                }\n             };\n \n-            if (*it == '$') {\n-                // Positional specifier, like %8$s\n-                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n-                count_pos = std::max(count_pos, maybe_num);\n-                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n-            } else {\n-                // Non-positional specifier, like %s\n-                ++count_normal;\n+            // Increase argument count and consume positional specifier, if present.\n+            add_arg();\n+\n+            // Consume flags.\n+            while (*it == '#' || *it == '0' || *it == '-' || *it == ' ' || *it == '+') ++it;",
      "path": "src/util/string.h",
      "position": 80,
      "original_position": 80,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In C++23 this could be a simple `.contains`, but even in C++20 we should be able to group the flags to something like:\r\n```suggestion\r\n            while (\"#0- +\"sv.find(*it) != std::string_view::npos) ++it;\r\n```\r\n(we could even extract the flag in which case we could get rid of the comment)",
      "created_at": "2024-11-10T19:59:31Z",
      "updated_at": "2024-11-10T20:20:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1835770704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835770704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835773438",
      "pull_request_review_id": 2425834191,
      "id": 1835773438,
      "node_id": "PRRC_kwDOABII585ta63-",
      "diff_hunk": "@@ -178,6 +179,18 @@ namespace tfm = tinyformat;\n \n namespace tinyformat {\n \n+// Added for Bitcoin Core. Wrapper for checking format strings at compile time.\n+// Unlike ConstevalFormatString this supports std::string for runtime string\n+// formatting without compile time checks.\n+template <unsigned num_params>\n+struct FormatStringCheck {",
      "path": "src/tinyformat.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Checked and failures seem to be validated successfully from command line, but - unlike the previous versions - doesn't seem to be shown in the IDE... Weird :/",
      "created_at": "2024-11-10T20:15:11Z",
      "updated_at": "2024-11-10T20:20:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1835773438",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835773438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1836226771",
      "pull_request_review_id": 2426557755,
      "id": 1836226771,
      "node_id": "PRRC_kwDOABII585tcpjT",
      "diff_hunk": "@@ -25,51 +24,72 @@ namespace util {\n  * strings, to reduce the likelihood of tinyformat throwing exceptions at\n  * run-time. Validation is partial to try and prevent the most common errors\n  * while avoiding re-implementing the entire parsing logic.\n- *\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n- * they are not used in the codebase. Usage of these fields is not counted and\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n- * side-step this struct and call tinyformat directly.\n  */\n template <unsigned num_params>\n struct ConstevalFormatString {\n     const char* const fmt;\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    constexpr static void Detail_CheckNumFormatSpecifiers(const char* str)\n     {\n         unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n         unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n-        for (auto it{str.begin()}; it < str.end();) {\n-            if (*it != '%') {\n+        for (auto it{str}; *it != '\\0'; ++it) {\n+            if (*it == '%') {\n                 ++it;\n+            } else {\n                 continue;\n             }\n \n-            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n             if (*it == '%') {\n                 // Percent escape: %%\n-                ++it;\n                 continue;\n             }\n \n-            unsigned maybe_num{0};\n-            while ('0' <= *it && *it <= '9') {\n-                maybe_num *= 10;\n-                maybe_num += *it - '0';\n-                ++it;\n+            auto add_arg = [&] {\n+                unsigned maybe_num{0};\n+                while ('0' <= *it && *it <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it - '0';\n+                    ++it;\n+                }\n+\n+                if (*it == '$') {\n+                    ++it;\n+                    // Positional specifier, like %8$s\n+                    if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                    count_pos = std::max(count_pos, maybe_num);\n+                } else {\n+                    // Non-positional specifier, like %s\n+                    ++count_normal;\n+                }\n             };\n \n-            if (*it == '$') {\n-                // Positional specifier, like %8$s\n-                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n-                count_pos = std::max(count_pos, maybe_num);\n-                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n-            } else {\n-                // Non-positional specifier, like %s\n-                ++count_normal;\n+            // Increase argument count and consume positional specifier, if present.\n+            add_arg();\n+\n+            // Consume flags.\n+            while (*it == '#' || *it == '0' || *it == '-' || *it == ' ' || *it == '+') ++it;",
      "path": "src/util/string.h",
      "position": 80,
      "original_position": 80,
      "commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "original_commit_id": "ecc5cb9a89c6b001df839675b23d8fc1f7ac69ba",
      "in_reply_to_id": 1835770704,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Time to return to C89? ;)\r\n```suggestion\r\n            while (strchr(\"#0- +\", *it)) ++it;\r\n```",
      "created_at": "2024-11-11T09:47:27Z",
      "updated_at": "2024-11-11T09:47:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31174#discussion_r1836226771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1836226771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    }
  ]
}