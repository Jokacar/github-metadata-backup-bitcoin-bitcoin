{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
    "id": 527303668,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTI3MzAzNjY4",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20487",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/20487.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/20487.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
    "number": 20487,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Add syscall sandboxing using seccomp-bpf (Linux secure computing mode)",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add experimental syscall sandboxing using seccomp-bpf (Linux secure computing mode).\r\n\r\nEnable filtering of system calls using seccomp-bpf: allow only explicitly allowlisted (expected) syscalls to be called. \r\n\r\nThe syscall sandboxing implemented in this PR is an experimental feature currently available only under Linux x86-64.\r\n\r\nTo enable the experimental syscall sandbox the `-sandbox=<mode>` option must be passed to `bitcoind`:\r\n\r\n```\r\n  -sandbox=<mode>\r\n       Use the experimental syscall sandbox in the specified mode\r\n       (-sandbox=log-and-abort or -sandbox=abort). Allow only expected\r\n       syscalls to be used by bitcoind. Note that this is an\r\n       experimental new feature that may cause bitcoind to exit or crash\r\n       unexpectedly: use with caution. In the \"log-and-abort\" mode the\r\n       invocation of an unexpected syscall results in a debug handler\r\n       being invoked which will log the incident and terminate the\r\n       program (without executing the unexpected syscall). In the\r\n       \"abort\" mode the invocation of an unexpected syscall results in\r\n       the entire process being killed immediately by the kernel without\r\n       executing the unexpected syscall.\r\n```\r\n\r\nThe allowed syscalls are defined on a per thread basis.\r\n\r\nI've used this feature since summer 2020 and I find it to be a helpful testing/debugging addition which makes it much easier to reason about the actual capabilities required of each type of thread in Bitcoin Core.\r\n\r\n---\r\n\r\nQuick start guide:\r\n\r\n```\r\n$ ./configure\r\n$ src/bitcoind -regtest -debug=util -sandbox=log-and-abort\r\n…\r\n2021-06-09T12:34:56Z Experimental syscall sandbox enabled (-sandbox=log-and-abort): bitcoind will terminate if an unexpected (not allowlisted) syscall is invoked.\r\n…\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"addcon\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"dnsseed\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"net\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"msghand\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"opencon\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"init\"\r\n…\r\n# A simulated execve call to show the sandbox in action:\r\n2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\r\n…\r\nAborted (core dumped)\r\n$\r\n```\r\n\r\n---\r\n\r\n[About seccomp and seccomp-bpf](https://en.wikipedia.org/wiki/Seccomp):\r\n\r\n> In computer security, seccomp (short for secure computing mode) is a facility in the Linux kernel. seccomp allows a process to make a one-way transition into a \"secure\" state where it cannot make any system calls except exit(), sigreturn(), and read() and write() to already-open file descriptors. Should it attempt any other system calls, the kernel will terminate the process with SIGKILL or SIGSYS. In this sense, it does not virtualize the system's resources but isolates the process from them entirely.\r\n>\r\n> […]\r\n> \r\n> seccomp-bpf is an extension to seccomp that allows filtering of system calls using a configurable policy implemented using Berkeley Packet Filter rules. It is used by OpenSSH and vsftpd as well as the Google Chrome/Chromium web browsers on Chrome OS and Linux. (In this regard seccomp-bpf achieves similar functionality, but with more flexibility and higher performance, to the older systrace—which seems to be no longer supported for Linux.)",
    "labels": [
      {
        "id": 61889416,
        "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
        "name": "Build system",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2020-11-25T09:27:44Z",
    "updated_at": "2022-11-15T13:10:39Z",
    "closed_at": "2021-10-04T20:46:15Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-10-04T20:46:14Z",
    "merge_commit_sha": "9e530c6352c3e3d4f2936bbbb1bcb34ff9ca6378",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "practicalswift:seccomp-bpf-2020-11",
      "ref": "seccomp-bpf-2020-11",
      "sha": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 78569642,
        "node_id": "MDEwOlJlcG9zaXRvcnk3ODU2OTY0Mg==",
        "name": "bitcoin",
        "full_name": "practicalswift/bitcoin",
        "owner": {
          "login": "practicalswift",
          "id": 7826565,
          "node_id": "MDQ6VXNlcjc4MjY1NjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/practicalswift",
          "html_url": "https://github.com/practicalswift",
          "followers_url": "https://api.github.com/users/practicalswift/followers",
          "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
          "organizations_url": "https://api.github.com/users/practicalswift/orgs",
          "repos_url": "https://api.github.com/users/practicalswift/repos",
          "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/practicalswift/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/practicalswift/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/practicalswift/bitcoin",
        "archive_url": "https://api.github.com/repos/practicalswift/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/practicalswift/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/practicalswift/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/practicalswift/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/practicalswift/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/practicalswift/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/practicalswift/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/practicalswift/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/practicalswift/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/practicalswift/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/practicalswift/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/practicalswift/bitcoin/events",
        "forks_url": "https://api.github.com/repos/practicalswift/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/practicalswift/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/practicalswift/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/practicalswift/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/practicalswift/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/practicalswift/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/practicalswift/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/practicalswift/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/practicalswift/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/practicalswift/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/practicalswift/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/practicalswift/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/practicalswift/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:practicalswift/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/practicalswift/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/practicalswift/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/practicalswift/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/practicalswift/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/practicalswift/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/practicalswift/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/practicalswift/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/practicalswift/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/practicalswift/bitcoin/hooks",
        "svn_url": "https://github.com/practicalswift/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 164685,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-10-01T13:54:08Z",
        "created_at": "2017-01-10T20:09:24Z",
        "updated_at": "2022-08-28T15:39:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "35a31d5f7e9cd71a210c1ed10abc9d772ff36049",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35476,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T20:20:41Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1125,
    "deletions": 1,
    "changed_files": 27,
    "commits": 1,
    "review_comments": 66,
    "comments": 27
  },
  "events": [
    {
      "event": "commented",
      "id": 733583322,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzU4MzMyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733583322",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T09:29:48Z",
      "updated_at": "2020-11-25T09:29:48Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, nice work!",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733583322",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4037500367,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzNzUwMDM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037500367",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:01:34Z"
    },
    {
      "event": "labeled",
      "id": 4037516712,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516712",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 4037516716,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516716",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "GUI",
        "color": "02d7e1"
      }
    },
    {
      "event": "labeled",
      "id": 4037516721,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516721",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 4037516726,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516726",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 4037516732,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516732",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 4037516735,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516735",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "labeled",
      "id": 4037516736,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516736",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556823,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556823",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "GUI",
        "color": "02d7e1"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556825,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556825",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556827,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556827",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556829,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556829",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556830,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556830",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 733788354,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzc4ODM1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733788354",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T15:48:25Z",
      "updated_at": "2021-10-05T05:43:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22956](https://github.com/bitcoin/bitcoin/pull/22956) (validation: log CChainState::CheckBlockIndex() consistency checks by jonatack)\n* [#21943](https://github.com/bitcoin/bitcoin/pull/21943) (Dedup and RAII-fy the creation of a copy of CConnman::vNodes by vasild)\n* [#21878](https://github.com/bitcoin/bitcoin/pull/21878) (Make all networking code mockable by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733788354",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T17:29:49Z",
      "updated_at": "2020-11-25T17:29:49Z",
      "source": {
        "issue": {
          "id": 732761071,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTEyNjU1MzUz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20267",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20267/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20267/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20267/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20267",
          "number": 20267,
          "state": "closed",
          "state_reason": null,
          "title": "Disable and fix tests for when BDB is not compiled",
          "body": "This PR fixes tests for when BDB is not compiled. Tests which rely on or test legacy wallet behavior are disabled and skipped when BDB is not compiled. For the components of some tests that are for legacy wallet things, those parts of the tests are skipped.\r\n\r\nFor the majority of tests, changes are made so that they can be run with either legacy wallets or descriptor wallets without materially effecting the test. Most tests only need the wallet for balance and transactions, so the type of wallet is not an important part of those tests. Additionally, some tests are wallet agnostic and modified to instead use the test framework's MiniWallet.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20267",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20267",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20267.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20267.patch"
          },
          "closed_at": "2021-02-05T13:26:34Z",
          "created_at": "2020-10-29T23:56:06Z",
          "updated_at": "2022-08-16T17:03:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 733893713,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzg5MzcxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733893713",
      "actor": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T18:58:15Z",
      "updated_at": "2020-11-25T18:58:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Very cool, Concept ACK",
      "user": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733893713",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4039648855,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzOTY0ODg1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4039648855",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T19:53:55Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T20:15:45Z",
      "updated_at": "2020-11-25T20:15:45Z",
      "source": {
        "issue": {
          "id": 657010669,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ5MjA0MDU2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19522",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19522/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19522/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19522/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19522",
          "number": 19522,
          "state": "closed",
          "state_reason": null,
          "title": "build: fix building libconsensus with reduced exports for Darwin targets",
          "body": "Darwin targets do not have a `protected` visibility function attribute, see [LLVM explanation](https://github.com/llvm/llvm-project/blob/8e9a505139fbef7d2e6e9d0adfe1efc87326f9ef/clang/lib/Basic/Targets/OSTargets.h#L131). This means that the `AX_GCC_FUNC_ATTRIBUTE` check for `visibility` fails:\r\n```bash\r\nconfigure:24513: checking for __attribute__((visibility))\r\nconfigure:24537: g++ -std=c++11 -o conftest -g -O2  -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0  -Wl,-headerpad_max_install_names conftest.cpp  >&5\r\nconftest.cpp:35:56: warning: target does not support 'protected' visibility; using 'default' [-Wunsupported-visibility]\r\n                    int foo_pro( void ) __attribute__((visibility(\"protected\")));\r\n                                                       ^\r\n1 warning generated.\r\nconfigure:24537: $? = 0\r\nconfigure:24550: result: no\r\n```\r\n\r\nThis leads to `EXPORT_SYMBOL` being [defined to nothing](https://github.com/bitcoin/bitcoin/blob/f4de89edfa8be4501534fec0c662c650a4ce7ef2/src/script/bitcoinconsensus.h#L29), as `HAVE_FUNC_ATTRIBUTE_VISIBILITY` is not defined, and when building with reduced exports, you end up with a libbitcoinconsensus.dylib that doesn't export any  `_bitcoinconsensus_*` symbols.\r\n```bash\r\n➜  git:(master) nm -C src/.libs/libbitcoinconsensus.dylib | rg _bitcoinconsensus_\r\n➜  git:(master)\r\n```\r\n\r\nWe do have a [second check](https://github.com/bitcoin/bitcoin/blob/f4de89edfa8be4501534fec0c662c650a4ce7ef2/configure.ac#L882) for the `visibility` attribute, which works for Darwin as it's only testing for default visibility, however the result of this check isn't used at all. It was added in #4725, along with the `--enable-reduce-exports` option, however when libbitcoinconsensus was added in #5235, it used the results of the added `AX_GCC_FUNC_ATTRIBUTE` calls.\r\n\r\nThis PR removes our usage of the AX_GCC_FUNC_ATTRIBUTE macro entirely, in favour of our own checks in configure. This meant adding a check for `dllexport`, which I've tested as working with both [GCC](https://gcc.gnu.org/onlinedocs/gcc/Microsoft-Windows-Function-Attributes.html) and [Clang](https://releases.llvm.org/10.0.0/tools/clang/docs/AttributeReference.html#dllexport) when building for Windows. I haven't added an equivalent check for `dllimport`, as we weren't actually using the result of that check, we're just testing that `MSC_VER` was defined before using.\r\n\r\nWith these changes building a libbitcoinconsensus with reduced exports, when targeting Darwin, works as expected:\r\n```bash\r\n./autogen.sh\r\n./configure --disable-tests --disable-bench --with-utils=no --with-daemon=no --with-gui=no --disable-wallet --with-libs=yes --enable-reduce-exports\r\nmake -j8\r\n...\r\nnm -C src/.libs/libbitcoinconsensus.dylib | rg _bitcoinconsensus_\r\n000000000000a340 T _bitcoinconsensus_verify_script\r\n00000000000097e0 T _bitcoinconsensus_verify_script_with_amount\r\n000000000000a3c0 T _bitcoinconsensus_version\r\n```\r\n\r\n```python\r\n>>> import ctypes\r\n>>> consensus = ctypes.CDLL(\"src/.libs/libbitcoinconsensus.dylib\")\r\n>>> print(consensus.bitcoinconsensus_version())\r\n1\r\n>>> exit()\r\n```\r\n\r\nTODO: Modify a CI job to compile with --enable-reduce-exports and check for symbols in shared lib?",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19522",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19522",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19522.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19522.patch"
          },
          "closed_at": "2021-02-12T10:12:14Z",
          "created_at": "2020-07-15T02:20:59Z",
          "updated_at": "2022-08-16T17:04:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T21:11:05Z",
      "updated_at": "2020-11-25T21:11:05Z",
      "source": {
        "issue": {
          "id": 630098657,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDI3Mjg0MDU3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19160",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19160/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19160/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19160/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19160",
          "number": 19160,
          "state": "closed",
          "state_reason": null,
          "title": "multiprocess: Add basic spawn and IPC support",
          "body": "This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10).\r\n\r\n---\r\n\r\nThis PR adds basic process spawning and IPC method call support to `bitcoin-node` executables built with `--enable-multiprocess`[*].\r\n\r\nThese changes are used in https://github.com/bitcoin/bitcoin/pull/10102 to let node, gui, and wallet functionality run in different processes, and extended in https://github.com/bitcoin/bitcoin/pull/19460 and https://github.com/bitcoin/bitcoin/pull/19461 after that to allow gui and wallet processes to be started and stopped independently and connect to the node over a socket.\r\n\r\nThese changes can also be used to implement new functionality outside the `bitcoin-node` process like external indexes or pluggable transports (https://github.com/bitcoin/bitcoin/pull/18988). The `Ipc::spawnProcess` and `Ipc::serveProcess` methods added here are entry points for spawning a child process and serving a parent process, and being able to make bidirectional, multithreaded method calls between the processes. A simple example of this is implemented in commit \"Add echoipc RPC method and test.\"\r\n\r\nChanges in this PR aside from the echo test were originally part of #10102, but have been split and moved here for easier review, and so they can be used for other applications like external plugins.\r\n\r\nAdditional notes about this PR can be found at https://bitcoincore.reviews/19160\r\n\r\n[*] Note: the `--enable-multiprocess` feature is still experimental, and not enabled by default, and not yet supported on windows. More information can be found in [doc/multiprocess.md](https://github.com/bitcoin/bitcoin/blob/master/doc/multiprocess.md)",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 43,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19160",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19160.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19160.patch"
          },
          "closed_at": "2021-04-27T10:00:28Z",
          "created_at": "2020-06-03T15:35:41Z",
          "updated_at": "2023-07-13T18:00:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T21:29:06Z",
      "updated_at": "2020-11-25T21:29:06Z",
      "source": {
        "issue": {
          "id": 623890117,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDIyNDMxNDk3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19064",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19064/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19064/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19064/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19064",
          "number": 19064,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Cleanup thread ctor calls",
          "body": "This PR does not change behavior.\r\nIts goal is to improve readability and maintainability of the code. ",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19064",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19064",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19064.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19064.patch"
          },
          "closed_at": "2021-05-12T07:01:56Z",
          "created_at": "2020-05-24T15:45:04Z",
          "updated_at": "2022-08-18T18:31:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T21:37:20Z",
      "updated_at": "2020-11-25T21:37:20Z",
      "source": {
        "issue": {
          "id": 620849702,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDIwMDE0OTMw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19013",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19013/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19013/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19013/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19013",
          "number": 19013,
          "state": "closed",
          "state_reason": null,
          "title": "test: add v0.20.1, v0.21.0 and v22.0 to backwards compatibility test ",
          "body": "This also simplifies the tests a bit.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19013",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19013",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19013.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19013.patch"
          },
          "closed_at": "2022-02-24T16:44:13Z",
          "created_at": "2020-05-19T10:08:00Z",
          "updated_at": "2023-02-24T10:14:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T22:09:47Z",
      "updated_at": "2020-11-25T22:09:47Z",
      "source": {
        "issue": {
          "id": 604368916,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA2OTc3Mjg0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18731",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18731/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18731/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18731/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18731",
          "number": 18731,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Make CCheckQueue RAII-styled",
          "body": "This PR:\r\n- makes `CCheckQueue` RAII-styled\r\n- gets rid of two global variables:\r\n  - `scriptcheckqueue`\r\n  - `g_parallel_script_checks`\r\n\r\nThis PR is based on #18710, therefore only the last two commits should be considered.",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18731",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18731",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18731.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18731.patch"
          },
          "closed_at": "2022-04-22T14:31:40Z",
          "created_at": "2020-04-22T00:33:08Z",
          "updated_at": "2022-12-28T13:18:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T22:13:46Z",
      "updated_at": "2020-11-25T22:13:46Z",
      "source": {
        "issue": {
          "id": 603299146,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA2MTEyNjEx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18710",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18710/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18710/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18710/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18710",
          "number": 18710,
          "state": "closed",
          "state_reason": null,
          "title": "Add local thread pool to CCheckQueue",
          "body": "This PR:\r\n- gets rid of `boost::thread_group` in the `CCheckQueue` class\r\n- allows thread safety annotation usage in the `CCheckQueue` class\r\n- is alternative to #14464 (https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-616618525, https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-617291612)\r\n\r\nAlso, with this PR (I hope) it could be easier to resurrect a bunch of brilliant ideas from #9938.\r\n\r\nRelated: #17307",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 48,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18710",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18710",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18710.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18710.patch"
          },
          "closed_at": "2021-01-25T19:21:55Z",
          "created_at": "2020-04-20T14:51:38Z",
          "updated_at": "2022-08-16T17:03:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T22:38:10Z",
      "updated_at": "2020-11-25T22:38:10Z",
      "source": {
        "issue": {
          "id": 575726877,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzgzODM3MDY2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18261",
          "number": 18261,
          "state": "closed",
          "state_reason": null,
          "title": "Erlay: bandwidth-efficient transaction relay protocol",
          "body": "This is an implementation of [Erlay](https://arxiv.org/abs/1905.10518), using primitives in the BIP-330 (see the updated spec [here](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki)). Please refer to these two to understand the design. My talk on the topic is [here](https://youtu.be/YxsjdIl0034?t=670).\r\n\r\nErlay uses both flooding (announcing using INV messages to all peers) and reconciliation to announce transactions. Flooding is expensive, so Erlay seeks to use it sparingly and in strategic locations - only well-connected publicly reachable nodes flood transactions to other publicly reachable nodes via outbound connections. Since every unreachable node is directly connected to several reachable nodes, this policy ensures that a transaction is quickly propagated to be within one hop from most of the nodes in the network.\r\n\r\nAll transactions not propagated through flooding are propagated through efficient set reconciliation. To do this, every node keeps a reconciliation set for each peer, in which transactions are placed which would have been announced using INV messages absent this protocol. Every 2 seconds every node chooses a peer from its outbound connections in a predetermined order to reconcile with, resulting in both sides learning the transactions known to the other side. After every reconciliation round, the corresponding reconciliation set is cleared.\r\n\r\nI think both paper and the BIP motives the changes, but I'll mention them briefly once again here:\r\n- save 40% of the bandwidth consumed by a node\r\n- increase network connectivity for almost no bandwidth or latency cost\r\n- improves privacy as a side-effect\r\n\r\nObviously looking for review, let's try to start with a high-level concerns, and keep nits for later.\r\n\r\nP.S.\r\nPlease don't be scared of 8,000 LOC added. 7,000 of them is minisketch added as a subtree.\r\n\r\nP.P.S.\r\nMy experiments of running this code live (slightly outdated) with a script to replicate the experiment: [here1](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-599241490) and [here2](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-600388543).\r\n",
          "user": {
            "login": "naumenkogs",
            "id": 7975071,
            "node_id": "MDQ6VXNlcjc5NzUwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/naumenkogs",
            "html_url": "https://github.com/naumenkogs",
            "followers_url": "https://api.github.com/users/naumenkogs/followers",
            "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
            "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
            "repos_url": "https://api.github.com/users/naumenkogs/repos",
            "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18261",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18261.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18261.patch"
          },
          "closed_at": "2021-03-23T22:51:05Z",
          "created_at": "2020-03-04T20:01:31Z",
          "updated_at": "2022-08-16T17:22:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T23:46:15Z",
      "updated_at": "2020-11-25T23:46:15Z",
      "source": {
        "issue": {
          "id": 476597057,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzA0MDk3NTEw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16546",
          "number": 16546,
          "state": "closed",
          "state_reason": null,
          "title": "External signer support - Wallet Box edition",
          "body": "Big picture overview in [this gist](https://gist.github.com/Sjors/29d06728c685e6182828c1ce9b74483d).\r\n\r\nThis PR lets `bitcoind` call an arbitrary command `-signer=<cmd>`, e.g. a hardware wallet driver,  where it can fetch public keys, ask to display an address, and sign a transaction (using PSBT under the hood).\r\n\r\nIt's design to work with https://github.com/bitcoin-core/HWI, which supports multiple hardware wallets. Any command with the same arguments and return values will work. It simplifies the manual procedure described [here](https://github.com/bitcoin-core/HWI/blob/master/docs/bitcoin-core-usage.md).\r\n\r\nUsage is documented in [doc/external-signer.md](\r\nhttps://github.com/Sjors/bitcoin/blob/2019/08/hww-box2/doc/external-signer.md), which also describes what protocol a different signer binary should conform to.\r\n\r\nUse `--enable-external-signer` to opt in, requires Boost::Process:\r\n\r\n```\r\nOptions used to compile and link:\r\n  with wallet     = yes\r\n  with gui / qt   = no\r\n  external signer = yes\r\n```\r\n\r\nIt adds the following RPC methods:\r\n* `enumeratesigners`: asks <cmd> for a list of signers (e.g. devices) and their master key fingerprint\r\n* `signerdisplayaddress <address>`:  asks <cmd> to display an address\r\n\r\nIt enhances the following RPC methods:\r\n* `createwallet`: takes an additional `external_signer` argument and fetches keys from device\r\n* `send`: automatically sends transaction to device and waits \r\n\r\nUsage TL&DR:\r\n* clone HWI repo somewhere and launch `bitcoind -signer=../HWI/hwi.py`\r\n* check if you can see your hardware device: `bitcoin-cli enumeratesigners`\r\n* create wallet and auto import keys `bitcoin-cli createwallet \"hww\" true true \"\" true true true`\r\n* display address on device: `bitcoin-cli signerdisplayaddress ...`\r\n* to spend, use `send` RPC and approve transaction on device\r\n\r\nPrerequisites:\r\n- [x] #21127 load wallet flags before everything else\r\n- [x] #21182 remove mostly pointless BOOST_PROCESS macro\r\n\r\nPotentially useful followups:\r\n- GUI support: bitcoin-core/gui#4\r\n- bumpfee support\r\n- (automatically) verify (a subset of) keys on the device after import, through message signing",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16546",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16546",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16546.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16546.patch"
          },
          "closed_at": "2021-02-23T16:57:10Z",
          "created_at": "2019-08-04T21:42:31Z",
          "updated_at": "2021-06-11T05:32:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T23:54:34Z",
      "updated_at": "2020-11-25T23:54:34Z",
      "source": {
        "issue": {
          "id": 465981953,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk1OTE2OTY0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16365",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16365/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16365/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16365/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16365",
          "number": 16365,
          "state": "closed",
          "state_reason": null,
          "title": "Log RPC parameters (arguments) if -debug=rpcparams",
          "body": "When a developer is examining `debug.log` (or client terminal output), it's often useful to know which RPCs have been submitted to the client; this can be enabled with the `-debug=rpc` configuration option. But this prints only the method name. This PR adds `-debug=rpcparams` to enable the logging of each RPC's parameters (arguments). The parameters of certain RPCs are keys or passwords; these should not be logged.",
          "user": {
            "login": "LarryRuane",
            "id": 8321330,
            "node_id": "MDQ6VXNlcjgzMjEzMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LarryRuane",
            "html_url": "https://github.com/LarryRuane",
            "followers_url": "https://api.github.com/users/LarryRuane/followers",
            "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
            "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
            "repos_url": "https://api.github.com/users/LarryRuane/repos",
            "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16365",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16365",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16365.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16365.patch"
          },
          "closed_at": "2022-12-06T10:45:03Z",
          "created_at": "2019-07-09T20:58:19Z",
          "updated_at": "2022-12-06T10:45:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-26T07:50:52Z",
      "updated_at": "2020-11-26T07:50:52Z",
      "source": {
        "issue": {
          "id": 652547610,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTk1Mjk3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19461",
          "number": 19461,
          "state": "open",
          "state_reason": null,
          "title": "multiprocess: Add bitcoin-gui -ipcconnect option",
          "body": "This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10).\r\n\r\n---\r\n\r\n**This is based on #10102 + #19460.** The non-base commits are:\r\n\r\n- [`5f91aa3d8b47` multiprocess: Add bitcoin-gui -ipcconnect option](https://github.com/bitcoin/bitcoin/pull/19461/commits/5f91aa3d8b47cee97e625c3b5689a37dbd941eff)\r\n\r\n---\r\n\r\nBuilding on #10102, this adds an `-ipcconnect` option to `bitcoin-gui` that connects the GUI to an existing `bitcoin-node` process already running in the background instead of spawning a new `bitcoin-node` process. This allows the GUI to be started and stopped independently of the node. By default with this change, `bitcoin-gui` will check if a `<datadir>/sockets/node.sock` socket exists and try to connect to that. If that doesn't work, it will spawn a new node process and start up the same way it did before this PR.\r\n\r\nThe default `bitcoin-gui` connect option is `-ipcconnect=auto`, which tries to connect if possible as described above, and spawns a new `bitcoin-node` process if not possible. Other supported options are `-noipcconnect` to never connect to an existing node and always spawn a new one, `-ipcconnect` to require a connection and fail if it can't be established, and `-ipcconnect=unix:<socket>` to require a connection and use a custom socket path.\r\n\r\nWith this PR, basic functionality works and gui instances can connect and disconnect from a running node. But there are rough edges: If a gui process doesn't shut down cleanly, the node can see unhandled IpcExceptions, and if node command line options are passed to `bitcoin-gui` and `bitcoin-gui` connects to an exiting bitcoin-node process instead of spawning a new one, the node options will be silently ignored. \r\n\r\nThese changes require multiprocess support and this PR has no effect unless bitcoin is configured with `--enable-multiprocess` as described in [doc/multiprocess.md](https://github.com/bitcoin/bitcoin/blob/master/doc/multiprocess.md)",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19461",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19461",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19461.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19461.patch"
          },
          "created_at": "2020-07-07T19:00:11Z",
          "updated_at": "2023-05-30T16:04:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-26T07:52:48Z",
      "updated_at": "2020-11-26T07:52:48Z",
      "source": {
        "issue": {
          "id": 652543635,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTkyMDUz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19460",
          "number": 19460,
          "state": "open",
          "state_reason": null,
          "title": "multiprocess: Add bitcoin-wallet -ipcconnect option",
          "body": "This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10).\r\n\r\n---\r\n\r\n**This is based on #10102.** The non-base commits are:\r\n\r\n- [`bbefbd3c199b` multiprocess: Add -ipcconnect and -ipcbind options](https://github.com/bitcoin/bitcoin/pull/19460/commits/bbefbd3c199b189188d6427b4564b17477c6d50e)\r\n\r\n---\r\n\r\nBuilding on #10102, this adds an `-ipcconnect` option to `bitcoin-wallet` and an `-ipcbind` option to `bitcoin-node` (both enabled by default in multiprocess builds) so bitcoin node will listen on a `<datadir>/sockets/node.sock` unix socket, and `bitcoin-wallet` will connect to it.\r\n\r\nThe idea is that `bitcoin-wallet` can be extended in the future to have some online functionality. For example, there could be a `bitcoin-wallet sync` command that will update balances and sync latest transactions to an unloaded wallet, or a `bitcoin-wallet serve` subcommand that loads a wallet and serves RPC requests, or a `bitcoin-wallet shell` subcommand that allows running RPC methods interactively like the GUI console, or just general support for `bitcoin-wallet <rpc method> <rpc params>` invocations suggested https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455187379.\r\n\r\nThis PR is small and doesn't do much. The only visible change is that `bitcoin-wallet` now checks whether a node socket exists on startup and prints \"Connected to IPC address\" if it can connect it it.\r\n\r\nThe default `bitcoin-wallet` connect option is `-ipcconnect=auto`, which connects if possible as described above, and proceeds offline if not possible. Other supported options are `-noipcconnect` to disable ipc, `-ipcconnect` to require a connection and fail if it can't be established, and `-ipcconnect=unix:<socket>` to require a connection and use a custom socket path.\r\n\r\nThese changes require multiprocess support and this PR has no effect unless bitcoin is configured with `--enable-multiprocess` as described in [doc/multiprocess.md](https://github.com/bitcoin/bitcoin/blob/master/doc/multiprocess.md)\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19460",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19460",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19460.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19460.patch"
          },
          "created_at": "2020-07-07T18:53:19Z",
          "updated_at": "2023-05-30T16:04:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-26T12:20:53Z",
      "updated_at": "2020-11-26T12:20:53Z",
      "source": {
        "issue": {
          "id": 217385623,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTEyODQ2NDMx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10102/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10102/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10102/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/10102",
          "number": 10102,
          "state": "open",
          "state_reason": null,
          "title": "Multiprocess bitcoin",
          "body": "This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10).\r\n\r\n---\r\n\r\nThis PR adds an `--enable-multiprocess` configure option which builds new `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables with relevant functionality isolated into different processes. See [doc/design/multiprocess.md](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/doc/design/multiprocess.md) for usage details and future plans.\r\n\r\nThe change is implemented by adding a new [`Init`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/init.h) interface that spawns new wallet and node subprocesses that can be controlled over a [socketpair](http://man7.org/linux/man-pages/man2/socketpair.2.html) by calling [`Node`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/node.h), [`Wallet`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/wallet.h), and [`ChainClient`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/chain.h) methods. When running with split processes, you can see the IPC messages going back and forth in `-debug=1` output. Followup PR's #19460 and #19461 add `-ipcbind` and `-ipcconnect` options that allow more flexibility in how processes are connected.\r\n\r\nThe IPC protocol used is Cap'n Proto, but this could be swapped out for another protocol. Cap'n Proto types and libraries are only accessed in the [src/ipc/capnp/](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/ipc/capnp) directory, and not in any public headers or other parts of bitcoin code.\r\n\r\n---\r\n\r\nSlides from a presentation describing this change are available on [google drive](https://docs.google.com/presentation/d/1AeJ-7gD-dItUgs5yH-HoEzLvXaEWe_2ZiGUUxYIXcws/edit). Demo code used in the presentation was from an older version this PR (tag [ipc.21](https://github.com/ryanofsky/bitcoin/releases/tag/pr%2Fipc.21), [commits](https://github.com/ryanofsky/bitcoin/compare/master...pr/ipc.21)).\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 78,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/10102",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/10102.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/10102.patch"
          },
          "created_at": "2017-03-27T21:48:26Z",
          "updated_at": "2023-06-21T07:40:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 734461063,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNDQ2MTA2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734461063",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-26T20:01:17Z",
      "updated_at": "2020-11-26T20:01:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, however I have some things to improve:\r\n\r\n1. Why must it be a compile time feature? Can't we just add a cmdline option called `-enable-seccomp`. See Chromiums `--enable-unveil`.\r\n2. Don't be that seccomp specific in terms of autotools configuration and naming. Keep in mind that there is also `pledge(2)` on OpenBSD which could be a nice addition as well.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-734461063",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-27T05:04:23Z",
      "updated_at": "2020-11-27T05:04:23Z",
      "source": {
        "issue": {
          "id": 724183547,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTA1NjE1ODE4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20182",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20182/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20182/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20182/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20182",
          "number": 20182,
          "state": "closed",
          "state_reason": null,
          "title": "ci: Build with --enable-werror by default, and document exceptions",
          "body": "This PR prevents introducing of new compiler warnings in the master branch, e.g., #19986, #20162.",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 22,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20182",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20182",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20182.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20182.patch"
          },
          "closed_at": "2020-12-04T06:26:46Z",
          "created_at": "2020-10-19T00:51:43Z",
          "updated_at": "2022-02-15T10:39:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 539726171,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzI2MTcx",
      "url": null,
      "actor": null,
      "commit_id": "54df39b5c42ebf572d325c1991e5d911577b711d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-539726171",
      "submitted_at": "2020-11-27T06:05:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-04T00:30:53Z",
      "updated_at": "2020-12-04T00:30:53Z",
      "source": {
        "issue": {
          "id": 756348758,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTMxOTA3OTgz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20560",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20560/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20560/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20560/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20560",
          "number": 20560,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: Link all targets once",
          "body": "Currently the linker is invoked more than 150 times when compiling with `--enable-fuzz`. This is problematic for several reasons:\r\n\r\n* It wastes disk space north of 20 GB, as all libraries and sanitizers are linked more than 150 times\r\n* It wastes CPU time, as the link step can practically not be cached (similar to ccache for object files)\r\n* It makes it a blocker to compile the fuzz tests by default for non-fuzz builds #19388, for the aforementioned reasons\r\n* The build file is several thousand lines of code, without doing anything meaningful except listing each fuzz target in a highly verbose manner\r\n* It makes writing new fuzz tests unnecessarily hard, as build system knowledge is required; Compare that to boost unit tests, which can be added by simply editing an existing cpp file\r\n* It encourages fuzz tests that re-use the `buffer` or assume the `buffer` to be concatenations of seeds, which increases complexity of seeds and complexity for the fuzz engine to explore; Thus reducing the effectiveness of the affected fuzz targets\r\n\r\nFixes #20088 ",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20560",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20560",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20560.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20560.patch"
          },
          "closed_at": "2020-12-15T18:03:16Z",
          "created_at": "2020-12-03T16:23:15Z",
          "updated_at": "2022-08-16T17:06:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T15:19:15Z",
      "updated_at": "2020-12-07T15:19:15Z",
      "source": {
        "issue": {
          "id": 560626660,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzcxNTgzMzk4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18077",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18077/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18077/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18077/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18077",
          "number": 18077,
          "state": "closed",
          "state_reason": null,
          "title": "net: Add NAT-PMP port forwarding support",
          "body": "Close #11902\r\nThis PR is an alternative to:\r\n- #12288\r\n- #15717\r\n\r\nTo compile with NAT-PMP support on Ubuntu [`libnatpmp-dev`](https://packages.ubuntu.com/source/bionic/libnatpmp) should be available.\r\n\r\nLog excerpt:\r\n```\r\n2020-02-05T20:12:28Z [mapport] NAT-PMP: public address = 95.164.65.194\r\n2020-02-05T20:12:28Z [mapport] AddLocal(95.164.65.194:18333,3)\r\n2020-02-05T20:12:28Z [mapport] NAT-PMP: port mapping successful.\r\n```\r\n\r\nSee: [`libnatpmp`](https://miniupnp.tuxfamily.org/libnatpmp.html)\r\n\r\n---\r\n\r\nSome follow-ups are out of this PR's scope:\r\n- mention NAT-PMP library in the version message\r\n- ~integrate NAT-PMP into the GUI~ (already [added](https://github.com/bitcoin/bitcoin/pull/18077#issuecomment-589405068))",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignee": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "dongcarl",
              "id": 3445290,
              "node_id": "MDQ6VXNlcjM0NDUyOTA=",
              "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/dongcarl",
              "html_url": "https://github.com/dongcarl",
              "followers_url": "https://api.github.com/users/dongcarl/followers",
              "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
              "organizations_url": "https://api.github.com/users/dongcarl/orgs",
              "repos_url": "https://api.github.com/users/dongcarl/repos",
              "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/dongcarl/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 79,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18077",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18077",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18077.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18077.patch"
          },
          "closed_at": "2021-01-07T18:42:38Z",
          "created_at": "2020-02-05T21:02:12Z",
          "updated_at": "2022-08-16T17:11:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T20:29:22Z",
      "updated_at": "2020-12-07T20:29:22Z",
      "source": {
        "issue": {
          "id": 692676629,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDc5MjUzMjgw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19866",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19866/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19866/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19866/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19866",
          "number": 19866,
          "state": "closed",
          "state_reason": null,
          "title": "eBPF Linux tracepoints",
          "body": "Instead of writing ad-hoc logging everywhere (eg: #19509), we can take advantage of linux user static defined traces, aka. USDTs ( not the stablecoin :sweat_smile: )\r\n\r\nThe linux kernel can hook into these tracepoints at runtime, but otherwise they have little to no performance impact. Traces can pass data which can be printed externally via tools such as bpftrace. For example, here's one that prints incoming and outgoing network messages:\r\n\r\n# Examples\r\n\r\n## Network Messages\r\n\r\n\r\n```\r\n#!/usr/bin/env bpftrace\r\n\r\nBEGIN\r\n{\r\n  printf(\"bitcoin net msgs\\n\");\r\n  @start = nsecs;\r\n}\r\n\r\nusdt:./src/bitcoind:net:push_message\r\n{\r\n  $ip = str(arg0);\r\n  $peer_id = (int64)arg1;\r\n  $command = str(arg2);\r\n  $data_len = arg3;\r\n  $data = buf(arg3,arg4);\r\n  $t = (nsecs - @start) / 100000;\r\n\r\n  printf(\"%zu outbound %s %s %zu %d %r\\n\", $t, $command, $ip, $peer_id, $data_len, $data);\r\n\r\n  @outbound[$command]++;\r\n}\r\n\r\nusdt:./src/bitcoind:net:process_message\r\n{\r\n  $ip = str(arg0);\r\n  $peer_id = (int64)arg1;\r\n  $command = str(arg2);\r\n  $data_len = arg3;\r\n  $data = buf(arg3,arg4);\r\n  $t = (nsecs - @start) / 100000;\r\n\r\n  printf(\"%zu inbound %s %s %zu %d %r\\n\", $t, $command, $ip, $peer_id, $data_len, $data);\r\n\r\n  @inbound[$ip, $command]++;\r\n}\r\n\r\n```\r\n\r\n    $ sudo bpftrace netmsg.bt\r\n\r\noutput: https://jb55.com/s/b11312484b601fb3.txt\r\n\r\nif you look at the bottom of the output you can see a histogram of all the messages grouped by message type and IP. nice!\r\n\r\n## IBD Benchmarking\r\n\r\n```\r\n#!/usr/bin/env bpftrace\r\nBEGIN\r\n{\r\n  printf(\"IBD to 500,000 bench\\n\");\r\n}\r\n\r\nusdt:./src/bitcoind:CChainState:ConnectBlock\r\n{\r\n  $height = (uint32)arg0;\r\n\r\n  if ($height == 1) {\r\n    printf(\"block 1 found, starting benchmark\\n\");\r\n    @start = nsecs;\r\n  }\r\n\r\n  if ($height >= 500000) {\r\n    @end = nsecs;\r\n    @duration = @end - @start;\r\n    exit();\r\n  }\r\n}\r\n\r\nEND {\r\n  printf(\"duration %d ms\\n\", @duration / 1000000)\r\n}\r\n```\r\nThis one hooks into ConnectBlock and prints the IBD time to height 500,000 starting from the first call to ConnectBlock\r\n\r\nUserspace static tracepoints give lots of flexibility without invasive logging code. It's also more flexible than ad-hoc logging code, allowing you to instrument many different aspects of the system without having to enable per-subsystem logging.\r\n\r\nOther ideas: tracepoints for lock contention, threads, what else?\r\n\r\nLet me know what ya'll think and if this is worth adding to bitcoin.\r\n\r\n## TODO\r\n\r\n- [ ] docs?\r\n- [x] Integrate systemtap-std-dev/libsystemtap into build (provides the <sys/sdt.h> header)\r\n- [x] ~dtrace macos support? (is this still a thing?)~ going to focus on linux for now",
          "user": {
            "login": "jb55",
            "id": 45598,
            "node_id": "MDQ6VXNlcjQ1NTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jb55",
            "html_url": "https://github.com/jb55",
            "followers_url": "https://api.github.com/users/jb55/followers",
            "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
            "organizations_url": "https://api.github.com/users/jb55/orgs",
            "repos_url": "https://api.github.com/users/jb55/repos",
            "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jb55/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 30,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19866",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19866",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19866.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19866.patch"
          },
          "closed_at": "2021-01-18T21:09:30Z",
          "created_at": "2020-09-04T03:54:06Z",
          "updated_at": "2022-08-18T18:19:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-09T06:49:14Z",
      "updated_at": "2020-12-09T06:49:14Z",
      "source": {
        "issue": {
          "id": 759786737,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTM0NzI5MTU4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20605/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20605/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20605/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20605",
          "number": 20605,
          "state": "closed",
          "state_reason": null,
          "title": "init: Signal-safe instant shutdown",
          "body": "Replace the 200ms polling loop with a faster and more efficient waiting operation. This should speed up short RPC tests.\r\n\r\nThis change has been tried a few times before, but abandoned every time because solutions used a condition variable which is not safe for use in signals, as they need to be reentrant.\r\n\r\nOn UNIX-ish OSes, use a safe way: a pipe. When shutdown is requested write a dummy byte to the pipe. Waiting for shutdown is a matter of a blocking read from the pipe.\r\n\r\nOn Windows, there are no signals so using a condition variable is safe.\r\n\r\nThis only affects bitcoind. The GUI is unaffected by this change, and keeps polling as before in `BitcoinGUI::detectShutdown()`. It might be possible to listen to a pipe there, too, but I'm not sure, and it's complicated by the GUI-node abstraction.",
          "user": {
            "login": "laanwj",
            "id": 126646,
            "node_id": "MDQ6VXNlcjEyNjY0Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/laanwj",
            "html_url": "https://github.com/laanwj",
            "followers_url": "https://api.github.com/users/laanwj/followers",
            "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
            "organizations_url": "https://api.github.com/users/laanwj/orgs",
            "repos_url": "https://api.github.com/users/laanwj/repos",
            "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/laanwj/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20605",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20605.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20605.patch"
          },
          "closed_at": "2020-12-16T15:44:13Z",
          "created_at": "2020-12-08T21:14:28Z",
          "updated_at": "2022-02-15T11:09:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4116786709,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDExNjc4NjcwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4116786709",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T21:44:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4123594538,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEyMzU5NDUzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4123594538",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T07:01:48Z"
    },
    {
      "event": "commented",
      "id": 747401906,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzQwMTkwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747401906",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T12:10:42Z",
      "updated_at": "2020-12-17T12:10:42Z",
      "author_association": "MEMBER",
      "body": "> I'd suggest adding an old one but IIRC there hasn't ever been an RCE like vulnerability that could be reintroduced.\r\n\r\nMaybe the UPnP vulnerability (TALOS-2015-0035, CVE-2015-6031)? I should still have a PoC exploit somewhere. I think downgrading UPnP should be enough to reintroduce it.\r\n\r\nI don't currently have the time to play around with this but if someone is interested I can dig it up.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-747401906",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T14:24:36Z",
      "updated_at": "2020-12-17T14:24:36Z",
      "source": {
        "issue": {
          "id": 636944749,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDMzMDE5Nzc1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19245",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19245/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19245/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19245/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19245",
          "number": 19245,
          "state": "closed",
          "state_reason": null,
          "title": "Replace boost::filesystem with std::filesystem",
          "body": "## Introduction\r\n\r\nC++17 has introduced the filesystem library. [cppreference.com](https://en.cppreference.com/w/cpp/filesystem) describes very well the origin of the library:\r\n\r\n> The filesystem library was originally developed as boost.filesystem, was published as the technical specification ISO/IEC TS 18822:2015, and finally merged to ISO C++ as of C++17. The boost implementation is currently available on more compilers and platforms than the C++17 library.\r\n\r\nThis draft PR was created to gain feedback and examine what would be necessary to switch from `boost::filesystem` to `std::filesystem` in bitcoin codebase.\r\n\r\nBitcoin codebase contains `src/fs.h` which is a wrapper for the [currently used filesystem library](https://github.com/bitcoin/bitcoin/blob/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2/src/fs.h#L18). The first impression is that one may just replace `namespace fs = boost::filesystem;` with `namespace fs = std::filesystem;` and all will be good. Unfortunately, there are some differences between the [Boost's filesystem library](https://www.boost.org/doc/libs/1_70_0/libs/filesystem/doc/reference.html) and the [c++17 filesystem library](https://en.cppreference.com/w/cpp/filesystem). A nice summary by Davis Herring can be read [here](https://stackoverflow.com/questions/40899267/how-similar-are-boost-filesystem-and-the-c-standard-filesystem-library).\r\n\r\n## Differences between filesystem implementations that affects Bitcoin code\r\n\r\n1. `boost::filesystem::system_complete()` was renamed to `std::filesystem::absolute()` \\[[source](https://stackoverflow.com/a/46271698)\\]\r\n\r\n2. [boost::filesystem::absolute()](https://www.boost.org/doc/libs/1_70_0/libs/filesystem/doc/reference.html#absolute) has second `const path& base` parameter which was dropped in [std::filesystem::absolute](https://en.cppreference.com/w/cpp/filesystem/absolute) (see [reasoning](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0492r2.html#US78)).\r\n\r\n     Each such instance like [this one](https://github.com/bitcoin/bitcoin/blob/master/src/rpc/blockchain.cpp#L2284) can be fixed by changing:\r\n\r\n     `fs::path path = fs::absolute(request.params[0].get_str(), GetDataDir());`\r\n\r\n     to\r\n\r\n    `fs::path path = fs::absolute(GetDataDir() / request.params[0].get_str());` where `/` is function call of `operator/` function.\r\n\r\n     Note: Notably `path(\"foo\") / \"c:/bar\"` yields `c:/bar`. However, that's how `boost::filesystem::absolute(p, base_dir)` behaves too.\r\n\r\n3. [boost::filesystem::path::imbue()](https://www.boost.org/doc/libs/1_70_0/libs/filesystem/doc/reference.html#path-imbue) is not present in `std::filesystem::path`.\r\n\r\n4. [boost::filesystem::unique_path()](https://www.boost.org/doc/libs/1_70_0/libs/filesystem/doc/reference.html#unique_path) is not present in `std::filesystem`.\r\n\r\n5. [boost::filesystem::equivalent(path1, path2)](https://github.com/boostorg/filesystem/blob/812cb9bad3bcbb2161c7cd2c1132b51c4b29c4b9/src/operations.cpp#L1241) differs from [std::filesystem::equivalent(path1, path2)](https://github.com/llvm/llvm-project/blob/00b161b8971bc6d3cb55f13502288b8fe0dbaa42/libcxx/src/filesystem/operations.cpp#L917) as the later reports *not supported* error if one of the files does not exist whereas Boost returns `false`.\r\n    * See also [cppreference](https://en.cppreference.com/w/cpp/filesystem/equivalent).\r\n\r\n## Support for C++17 `<filesystem`>\r\n\r\n* Clang 7+ (see [[Phoronix](https://www.phoronix.com/scan.php?page=news_item&px=Filesystem-Lands-LLVM-Libcpp)][[git commit](https://github.com/llvm-mirror/libcxx/commit/a0866c5fb5020d15c69deda94d32a7f982b88dc9)])\r\n* GCC 8.1+ ([[GCC status page](https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2017)] [[git commit](https://github.com/gcc-mirror/gcc/commit/3b90ed62fb848046ed7ddef07df7c806e7f3fadb)])\r\n  * GCC 8.x requires linking with `-lstdc++fs`.\r\n\r\n## Issues & PRs that may be linked with this PR\r\n\r\nhttps://github.com/bitcoin/bitcoin/issues/13103, https://github.com/bitcoin/bitcoin/pull/13787, https://github.com/google/leveldb/pull/760, https://github.com/bitcoin/bitcoin/pull/6093\r\n\r\n## TODO\r\n\r\n* [x] Remove Boost's filesystem from https://github.com/bitcoin/bitcoin/blob/master/configure.ac (help is welcome)\r\n  * Relevant PR: https://github.com/bitcoin/bitcoin/pull/7302 & https://github.com/bitcoin/bitcoin/commit/76ac35f36d87078da62f95b4a1167ec296e37363\r\n  * Done in #19667.\r\n* [ ] [Am I missing `-lstdc++fs`](https://www.bfilipek.com/2019/05/boost-to-stdfs.html)?\r\n* [ ] What about https://github.com/bitcoin/bitcoin/pull/19933?\r\n* [ ] Address this change https://github.com/bitcoin/bitcoin/pull/19960\r\n* [ ] `unicodepath` test in  `src/test/dbwrapper_tests.cpp` seems to require some UTF-8 locale.\r\n  * See also https://github.com/bitcoin/bitcoin/blob/ae9ee5bdb18c5babbfa2875ab694df118d6a1c1b/src/util/system.cpp#L1249\r\n  * https://github.com/microsoft/STL/blob/2aa944beba9af1d72537fd5e35d402c8b830a5dc/stl/src/filesystem.cpp#L266 - C++17 in Microsoft C++ standard library\r\n  * https://docs.microsoft.com/en-us/cpp/standard-library/filesystem?view=msvc-160\r\n  * https://docs.microsoft.com/en-us/cpp/standard-library/file-system-navigation?view=msvc-160\r\n\r\n## Inspiration\r\n\r\n* https://github.com/ceptontech/filesystem\r\n* https://github.com/ceztko/u8filesystem",
          "user": {
            "login": "kiminuo",
            "id": 58662979,
            "node_id": "MDQ6VXNlcjU4NjYyOTc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kiminuo",
            "html_url": "https://github.com/kiminuo",
            "followers_url": "https://api.github.com/users/kiminuo/followers",
            "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
            "organizations_url": "https://api.github.com/users/kiminuo/orgs",
            "repos_url": "https://api.github.com/users/kiminuo/repos",
            "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kiminuo/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19245",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19245",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19245.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19245.patch"
          },
          "closed_at": "2020-12-22T14:30:23Z",
          "created_at": "2020-06-11T11:39:49Z",
          "updated_at": "2023-01-12T13:46:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T20:13:58Z",
      "updated_at": "2020-12-17T20:13:58Z",
      "source": {
        "issue": {
          "id": 769987532,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQxODQzNTI5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20685",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20685/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20685/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20685/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20685",
          "number": 20685,
          "state": "closed",
          "state_reason": null,
          "title": "Add I2P support using I2P SAM",
          "body": "Add I2P support by using the [I2P SAM](https://geti2p.net/en/docs/api/samv3) protocol. Unlike Tor, for incoming connections we get the I2P address of the peer (and they also receive ours when we are the connection initiator).\r\n\r\nTwo new options are added:\r\n\r\n```\r\n  -i2psam=<ip:port>\r\n       I2P SAM proxy to reach I2P peers and accept I2P connections (default:\r\n       none)\r\n\r\n  -i2pacceptincoming\r\n       If set and -i2psam is also set then incoming I2P connections are\r\n       accepted via the SAM proxy. If this is not set but -i2psam is set\r\n       then only outgoing connections will be made to the I2P network.\r\n       Ignored if -i2psam is not set. Notice that listening for incoming\r\n       I2P connections is done through the SAM proxy, not by binding to\r\n       a local address and port (default: true)\r\n```\r\n\r\n# Overview of the changes\r\n\r\n## Make `ReadBinary()` and `WriteBinary()` reusable\r\n\r\nWe would need to dump the I2P private key to a file and read it back later. Move those two functions out of `torcontrol.cpp`.\r\n\r\n```\r\nutil: extract {Read,Write}BinaryFile() to its own files\r\nutil: fix ReadBinaryFile() returning partial contents\r\nutil: fix WriteBinaryFile() claiming success even if error occurred\r\n```\r\n\r\n## Split `CConnman::AcceptConnection()`\r\n\r\nMost of `CConnman::AcceptConnection()` is agnostic of how the socket was accepted. The other part of it deals with the details of the `accept(2)` system call. Split those so that the protocol-agnostic part can be reused if we accept a socket by other means.\r\n\r\n```\r\nnet: check for invalid socket earlier in CConnman::AcceptConnection()\r\nnet: get the bind address earlier in CConnman::AcceptConnection()\r\nnet: isolate the protocol-agnostic part of CConnman::AcceptConnection()\r\nnet: avoid unnecessary GetBindAddress() call\r\n```\r\n\r\n## Implement the I2P [SAM](https://geti2p.net/en/docs/api/samv3) protocol (not all of it)\r\n\r\nJust the parts that would enable us to make outgoing and accept incoming I2P connections.\r\n\r\n```\r\nnet: extend CNetAddr::SetSpecial() to support I2P\r\nnet: move the constant maxWait out of InterruptibleRecv()\r\nnet: dedup MSG_NOSIGNAL and MSG_DONTWAIT definitions\r\nnet: extend Sock::Wait() to report a timeout\r\nnet: extend Sock with methods for robust send & read until terminator\r\nnet: extend Sock with a method to check whether connected\r\nnet: implement the necessary parts of the I2P SAM protocol\r\n```\r\n\r\n## Use I2P SAM to connect to and accept connections from I2P peers\r\n\r\nProfit from all of the preceding commits.\r\n\r\n```\r\ninit: introduce I2P connectivity options\r\nnet: add I2P to the reachability map\r\nnet: make outgoing I2P connections from CConnman\r\nnet: accept incoming I2P connections from CConnman\r\nnet: recognize I2P from ParseNetwork() so that -onlynet=i2p works\r\nnet: Do not skip the I2P network from GetNetworkNames()\r\n```",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 79,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20685",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20685",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20685.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20685.patch"
          },
          "closed_at": "2021-03-02T10:50:39Z",
          "created_at": "2020-12-17T12:49:55Z",
          "updated_at": "2022-08-18T18:30:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 556062566,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDYyNTY2",
      "url": null,
      "actor": null,
      "commit_id": "dbad7bdb947da66b60db057c5b03c11819438257",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-556062566",
      "submitted_at": "2020-12-20T21:19:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T20:43:43Z",
      "updated_at": "2020-12-22T20:43:43Z",
      "source": {
        "issue": {
          "id": 772987536,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTU4MDYz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20744",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20744/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20744/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20744/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20744",
          "number": 20744,
          "state": "closed",
          "state_reason": null,
          "title": "Use std::filesystem. Remove Boost Filesystem & System",
          "body": "This PR replaces our Boost Filesystem usage with [`std::filesystem`](https://en.cppreference.com/w/cpp/filesystem) and includes dropping Boost System as a dependency. It includes a squashed down version of the changes from #19245. \r\n\r\n[A macro has been added](https://github.com/bitcoin/bitcoin/commit/7002c4ade0148c3273659208ae517b79822b289d), modelling how we check for `-latomic` to facilitate linking with `-lstdc++fs` when required. This is  ~GCC < 9.1 & ~Clang < 9.0, however not always. i.e you could be using Clang 7 on top of a GCC 9 installation (i.e Ubuntu Focal) and use `<filesystem>` without passing any additional arguments. I've tested this with GCC 8 on Bionic, Clang 7 on Focal & with Apple Clang 12.0.0 on macOS.\r\n\r\nGuix build:\r\n```bash\r\nbash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha256sum\r\nc1f9b326f9be4140f00cebeae5ff8de428a2fb8ecced539fcc36c53f53bfecf4  guix-build-07269321f38e/output/aarch64-linux-gnu/SHA256SUMS.part\r\nb44aca3bcf5ea92a3a6c48c24d6f85576f425f59b73528d4d00c20e950cf2128  guix-build-07269321f38e/output/aarch64-linux-gnu/bitcoin-07269321f38e-aarch64-linux-gnu-debug.tar.gz\r\n27a5553f7bd14797293fc40c5fb131c91e98a61d5481a283f13a1d0497eb5ed8  guix-build-07269321f38e/output/aarch64-linux-gnu/bitcoin-07269321f38e-aarch64-linux-gnu.tar.gz\r\n99e55a88823f6095864a09c9eaa824e24d9ec527380eb394f751c7205b930f69  guix-build-07269321f38e/output/arm-linux-gnueabihf/SHA256SUMS.part\r\nb720b2724fa47fde584f58ed3b587f1d1183523540777fd367ab7e582605cfea  guix-build-07269321f38e/output/arm-linux-gnueabihf/bitcoin-07269321f38e-arm-linux-gnueabihf-debug.tar.gz\r\nc19c247f4e9e0d7f888ac8ba9de1c12d382f48fa828a685d4fe02818a18abd1f  guix-build-07269321f38e/output/arm-linux-gnueabihf/bitcoin-07269321f38e-arm-linux-gnueabihf.tar.gz\r\n55b49ccb38de03bb95101354a16fd8d2190abede5ccc0d9b00b40c0cd526a2f6  guix-build-07269321f38e/output/arm64-apple-darwin/SHA256SUMS.part\r\nbaa44752470a6be9acae1c2f8fd1b9bc37afb00971787ea11fbaeddc9ab7c4aa  guix-build-07269321f38e/output/arm64-apple-darwin/bitcoin-07269321f38e-arm64-apple-darwin.tar.gz\r\nad7df4d8026d5bcce1321cdccc2e1820e8a8bb7e1064ed16e20a7ea354057fd2  guix-build-07269321f38e/output/arm64-apple-darwin/bitcoin-07269321f38e-osx-unsigned.dmg\r\nf342066dc34a14d67c47779a2413a14633a996e8e7ddca89ae0184e23ef99efd  guix-build-07269321f38e/output/arm64-apple-darwin/bitcoin-07269321f38e-osx-unsigned.tar.gz\r\nf6905346a5d48f57805fb062d0247ab5007c89047070a0b3125941dd1a2b8aa6  guix-build-07269321f38e/output/dist-archive/bitcoin-07269321f38e.tar.gz\r\na1f6c4b2b118dbd89770801f0bcffd2218b82df408cd227e34c40493469bb7a2  guix-build-07269321f38e/output/powerpc64-linux-gnu/SHA256SUMS.part\r\nba8359426e523bf013d93579c1bedc57380214c8170a9743b64ec1a8a3bbccbf  guix-build-07269321f38e/output/powerpc64-linux-gnu/bitcoin-07269321f38e-powerpc64-linux-gnu-debug.tar.gz\r\nb0bb500c274a683ea28ecbc1e8f18c618a9f8acb00045f80ae43c515288402c0  guix-build-07269321f38e/output/powerpc64-linux-gnu/bitcoin-07269321f38e-powerpc64-linux-gnu.tar.gz\r\n38c85e9589e092cd3aa08996aa383c0ccd5c73208943389741355a6eb7f72537  guix-build-07269321f38e/output/powerpc64le-linux-gnu/SHA256SUMS.part\r\n50fcba7942ff48d91e84c093fda0affc17e46167fe1d5137c6e14c5c41f289d1  guix-build-07269321f38e/output/powerpc64le-linux-gnu/bitcoin-07269321f38e-powerpc64le-linux-gnu-debug.tar.gz\r\nfa08ef1ceca072e014faa95ffee945954b2976fa28f90926b87ab0e5f15f8ca5  guix-build-07269321f38e/output/powerpc64le-linux-gnu/bitcoin-07269321f38e-powerpc64le-linux-gnu.tar.gz\r\ne52dd80a9c306d6aeb544acaa1f4ed560b6b92b5184764a05026d45451aa2e94  guix-build-07269321f38e/output/riscv64-linux-gnu/SHA256SUMS.part\r\n864e0a16c485b4159cec3ee0a83b046f1b1c3bc821670011c5ac5cd09ddfb91f  guix-build-07269321f38e/output/riscv64-linux-gnu/bitcoin-07269321f38e-riscv64-linux-gnu-debug.tar.gz\r\n4a061172181322e7ad0cf06405bf74f4c8683eaba3a67ecfd46158cba7627f62  guix-build-07269321f38e/output/riscv64-linux-gnu/bitcoin-07269321f38e-riscv64-linux-gnu.tar.gz\r\n876d82251853205420dffe7237523fc6ee3d09f78bf74cc03dc71f548446f335  guix-build-07269321f38e/output/x86_64-apple-darwin/SHA256SUMS.part\r\n3f82b2e62c60eee68e7b8fc28e4792e069e3c2cd780ee2d67290ca422cdbc47c  guix-build-07269321f38e/output/x86_64-apple-darwin/bitcoin-07269321f38e-osx-unsigned.dmg\r\n4ccdd4c410cac9d627e54ce83ee4816608681735da3cb93c60c5eb70ca86337a  guix-build-07269321f38e/output/x86_64-apple-darwin/bitcoin-07269321f38e-osx-unsigned.tar.gz\r\n2179d36b2f60e28c15262d4e51f27465b5ae077f60e550345e125683ca611066  guix-build-07269321f38e/output/x86_64-apple-darwin/bitcoin-07269321f38e-osx64.tar.gz\r\nb377e72fe84b6a982b8d414d60c85e6319523dff50dc852a0ba907f6d850ddd0  guix-build-07269321f38e/output/x86_64-linux-gnu/SHA256SUMS.part\r\n8547e2f582ce05ae6a6224793b64efb2eb63f2816bf0bed5d53fcc4786274597  guix-build-07269321f38e/output/x86_64-linux-gnu/bitcoin-07269321f38e-x86_64-linux-gnu-debug.tar.gz\r\n83b64805aa39f31a6fa4c2ed41e029c3be084e6dea06b90fac1ebca5c95bce29  guix-build-07269321f38e/output/x86_64-linux-gnu/bitcoin-07269321f38e-x86_64-linux-gnu.tar.gz\r\n```",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/52",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/52",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/52/labels",
            "id": 6179837,
            "node_id": "MDk6TWlsZXN0b25lNjE3OTgzNw==",
            "number": 52,
            "state": "closed",
            "title": "23.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 123,
            "created_at": "2020-12-04T08:54:20Z",
            "updated_at": "2022-04-25T20:51:00Z",
            "closed_at": "2022-04-22T18:08:30Z"
          },
          "locked": true,
          "comments": 130,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20744",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20744",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20744.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20744.patch"
          },
          "closed_at": "2022-02-03T14:53:03Z",
          "created_at": "2020-12-22T14:27:54Z",
          "updated_at": "2023-06-17T10:06:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 760076956,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MDA3Njk1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760076956",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T09:35:08Z",
      "updated_at": "2021-01-14T09:35:08Z",
      "author_association": "MEMBER",
      "body": "> I don't currently have the time to play around with this but if someone is interested I can dig it up.\r\n\r\nAs people have asked, here you go: https://dev.visucore.com/bitcoin/2015_10_upnpc_poc.tar.xz\r\n\r\nIt's my entire working environment and contains my exploit (`poc*.py`), some notes, someone else's exploit (`upnp_exploit1.py`), and some exploitable binaries.\r\n\r\nIf you have any questions feel free to ask on IRC though I literally haven't looked at it for 5 years.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-760076956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-09T04:43:19Z",
      "updated_at": "2021-02-09T04:43:19Z",
      "source": {
        "issue": {
          "id": 797778336,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTY0NzA0ODYz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21041",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21041/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21041/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21041/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21041",
          "number": 21041,
          "state": "closed",
          "state_reason": null,
          "title": "log: Move \"Pre-allocating up to position 0x[…] in […].dat\" log message to debug category",
          "body": "Move `Pre-allocating up to position 0x[…] in […].dat` log message to debug category.\r\n\r\nAfter the cleanup of `-debug=net` log messages PR (#20724) was merged recently the console log now has very high signal to noise ratio. That's great! :)\r\n\r\nThis PR increases the signal to noise ratio slightly more by moving the most common remaining implementation detail log message (`Pre-allocating up to position 0x[…] in […].dat`) to the debug category where it belongs :)\r\n\r\nExpected standard output from `bitcoind` (when in steady state) before this patch:\r\n\r\n```\r\n$ src/bitcoind\r\n…\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n0000-00-00T00:00:00Z Pre-allocating up to position 0x0000000 in blk00000.dat\r\n0000-00-00T00:00:00Z Pre-allocating up to position 0x000000 in rev00000.dat\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n```\r\n\r\nExpected standard output from `bitcoind` (when in steady state) after this patch:\r\n\r\n```\r\n$ src/bitcoind\r\n…\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n0000-00-00T00:00:00Z UpdateTip: new best=0000000000000000000000000000000000000000000000000000000000000000 height=000000 version=0x00000000 log0_work=00.000000 tx=000000000 date='0000-00-00T00:00:00Z' progress=0.000000 cache=000.0MiB(0000000txo)\r\n```\r\n\r\nI find the latter alternative much easier to visually scan for anomalies (and more aesthetically pleasing TBH!).\r\n\r\nNon-GUI users deserve nice interfaces too :)",
          "user": {
            "login": "practicalswift",
            "id": 7826565,
            "node_id": "MDQ6VXNlcjc4MjY1NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/practicalswift",
            "html_url": "https://github.com/practicalswift",
            "followers_url": "https://api.github.com/users/practicalswift/followers",
            "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
            "organizations_url": "https://api.github.com/users/practicalswift/orgs",
            "repos_url": "https://api.github.com/users/practicalswift/repos",
            "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/practicalswift/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21041",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21041",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21041.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21041.patch"
          },
          "closed_at": "2021-02-11T18:58:49Z",
          "created_at": "2021-01-31T18:31:19Z",
          "updated_at": "2022-08-16T17:20:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-09T05:06:27Z",
      "updated_at": "2021-02-09T05:06:27Z",
      "source": {
        "issue": {
          "id": 793761007,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTYxMzk0MDUw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21007",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21007/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21007/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21007/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21007",
          "number": 21007,
          "state": "closed",
          "state_reason": null,
          "title": "bitcoind: Add -daemonwait option to wait for initialization",
          "body": "This adds a `-daemonwait` flag that does the same as `-daemon` except that it, from a user perspective, backgrounds the process only after initialization is complete. This is similar to the behaviour of some other software such as c-lightning.\r\n\r\nThis can be useful when the process launching bitcoind wants to guarantee that either the RPC server is running, or that initialization failed, before continuing. The exit code indicates the initialization result.\r\n\r\nThe use of the libc function `daemon()` is replaced by a custom implementation which is inspired by the [glibc implementation](https://github.com/lattera/glibc/blob/master/misc/daemon.c#L44), but which also creates a pipe from the child to the parent process for communication.\r\n\r\nAn additional advantage of having our own `daemon()` implementation is that no MACOS-specific pragmas are needed anymore to silence a deprecation warning.\r\n\r\nTODO:\r\n\r\n- [x] Factor out `token_read` and `token_write` to an utility, and use  them in `shutdown.cpp` as well—this is exactly the same kind of communication mechanism.\r\n\r\n    - [x] RAII-ify pipe endpoints.\r\n\r\n- [x] Improve granularity of the `configure.ac` checks. This currently  still checks for the function `daemon()` which makes no sense as  it's not used. It should check for individual functions such as\r\n  `fork()` and `setsid()` etc—the former being required, the second optional.\r\n\r\n- [-] ~~Signal propagation during initialization: if say, pressing Ctrl-C during `-daemonwait` it would be good to pass this SIGINT on to the child process instead of detaching the parent process and letting the child run free.~~ This is not necessary, see https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-769007341.\r\n\r\nFuture:\r\n\r\n- Consider if it makes sense to use this in the RPC tests (there would be no more need for \"is RPC ready\" polling loops). I think this is out of scope for this PR.",
          "user": {
            "login": "laanwj",
            "id": 126646,
            "node_id": "MDQ6VXNlcjEyNjY0Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/laanwj",
            "html_url": "https://github.com/laanwj",
            "followers_url": "https://api.github.com/users/laanwj/followers",
            "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
            "organizations_url": "https://api.github.com/users/laanwj/orgs",
            "repos_url": "https://api.github.com/users/laanwj/repos",
            "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/laanwj/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21007",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21007",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21007.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21007.patch"
          },
          "closed_at": "2021-03-11T14:28:27Z",
          "created_at": "2021-01-25T22:06:34Z",
          "updated_at": "2022-09-15T15:14:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-09T05:38:43Z",
      "updated_at": "2021-02-09T05:38:43Z",
      "source": {
        "issue": {
          "id": 782505298,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTUyMDQ5MjI1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20892",
          "number": 20892,
          "state": "open",
          "state_reason": null,
          "title": "tests: Run both descriptor and legacy tests within a single test invocation",
          "body": "Instead of having the tests only do one type or the other, depending on command line arguments, these tests should be running with both types of wallets. Any test that calls `add_wallet_options` will be run for each wallet type that it specifies a wallet option for if none are give in the command line. If a particular wallet is specified with `--legacy-wallet` or `--descriptors`, the options are still respected.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20892",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20892",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20892.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20892.patch"
          },
          "created_at": "2021-01-09T03:50:55Z",
          "updated_at": "2023-08-02T17:47:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4316748465,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMxNjc0ODQ2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4316748465",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T20:10:48Z"
    },
    {
      "event": "reviewed",
      "id": 588032516,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg4MDMyNTE2",
      "url": null,
      "actor": null,
      "commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-588032516",
      "submitted_at": "2021-02-10T20:38:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4449329668,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ0OTMyOTY2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4449329668",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-12T08:13:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4464705718,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ2NDcwNTcxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4464705718",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T13:56:57Z"
    },
    {
      "event": "renamed",
      "id": 4465182888,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDQ2NTE4Mjg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4465182888",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T15:12:28Z",
      "rename": {
        "from": "draft: Add syscall sandboxing using seccomp-bpf (Linux secure computing mode)",
        "to": "Add syscall sandboxing using seccomp-bpf (Linux secure computing mode)"
      }
    },
    {
      "event": "ready_for_review",
      "id": 4465183472,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0NDY1MTgzNDcy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4465183472",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T15:12:34Z"
    },
    {
      "event": "reviewed",
      "id": 613415315,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEzNDE1MzE1",
      "url": null,
      "actor": null,
      "commit_id": "af327aac2ed542b9f1ba26cf8fd0105d8e68659f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-613415315",
      "submitted_at": "2021-03-16T15:45:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4466588063,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ2NjU4ODA2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4466588063",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T19:47:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4466591003,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ2NjU5MTAwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4466591003",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T19:48:02Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T23:05:40Z",
      "updated_at": "2021-03-18T23:05:40Z",
      "source": {
        "issue": {
          "id": 834876394,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTk1NjE5NjA5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21467",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21467/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21467/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21467/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21467",
          "number": 21467,
          "state": "closed",
          "state_reason": null,
          "title": "Move external signer out of wallet module",
          "body": "In addition, this PR enables external signer testing on CI.\r\n\r\nThis PR moves the ExternalSigner class and RPC methods out of the wallet module.\r\n\r\nThe `enumeratesigners` RPC can be used without a wallet since #21417. With additional modifications external signers could be used without a wallet in general, e.g. via `signrawtransaction`.\r\n\r\nThe `signerdisplayaddress` RPC is ranamed to `walletdisplayaddress` because it requires wallet context. A future `displayaddress` RPC call without wallet context could take a descriptor argument.\r\n\r\nThis commit fixes a `rpc_help.py` failure when configured with `--disable-wallet`.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 148216,
              "node_id": "MDU6TGFiZWwxNDgyMTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
              "name": "Docs",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21467",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21467",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21467.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21467.patch"
          },
          "closed_at": "2021-04-13T06:35:39Z",
          "created_at": "2021-03-18T14:23:22Z",
          "updated_at": "2022-08-18T18:23:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 805185134,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTE4NTEzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/805185134",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-23T19:45:18Z",
      "updated_at": "2021-03-23T19:45:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "After a few months in draft mode this PR is now ready for code review: no longer marked as draft! :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-805185134",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-25T08:57:08Z",
      "updated_at": "2021-03-25T08:57:08Z",
      "source": {
        "issue": {
          "id": 840540283,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjAwNDEyMDM4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21527",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21527/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21527/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21527/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21527",
          "number": 21527,
          "state": "closed",
          "state_reason": null,
          "title": "net_processing: lock clean up",
          "body": "`cs_sendProcessing` is replaced by a private mutex in net_processing, non-orphan-specific things are moved out from `g_cs_orphans` and `g_cs_orphans` is replaced by a private mutex in txorphanage.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21527",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21527.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21527.patch"
          },
          "closed_at": "2022-08-29T06:54:34Z",
          "created_at": "2021-03-25T04:16:30Z",
          "updated_at": "2022-08-29T06:54:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4516887425,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUxNjg4NzQyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4516887425",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-27T09:44:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4517843411,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUxNzg0MzQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4517843411",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-28T06:10:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4517850426,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUxNzg1MDQyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4517850426",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-28T06:23:48Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-28T10:29:50Z",
      "updated_at": "2021-03-28T10:29:50Z",
      "source": {
        "issue": {
          "id": 842708875,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjAyMjE5Nzc5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21538",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21538/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21538/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21538/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21538",
          "number": 21538,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: Add fuzzing syscall sandbox: detect use of unexpected syscalls when fuzzing (\"syscall sanitizer\")",
          "body": "Add fuzzing syscall sandbox: detect use of unexpected syscalls when fuzzing.\r\n\r\nThis PR is based on #20487. Only the last commit is new to this PR.\r\n\r\nExample use:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=fuzzer --with-syscall-sandbox\r\n$ make\r\n$ FUZZ=example_fuzzing_harness src/test/fuzz/fuzz\r\n…\r\nERROR: The syscall \"socket\" (syscall number 41) is not allowed by the syscall sandbox in thread \"*unnamed*\". Please report. Exiting.\r\nterminate called without an active exception\r\n==27953== ERROR: libFuzzer: deadly signal\r\n…\r\n    #11 0x7f11a5dd0b20 in std::terminate() (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0x92b20)\r\n    #12 0x56445a4b8cb7 in (anonymous namespace)::SyscallSandboxDebugSignalHandler(int, siginfo_t*, void*) src/util/syscall_sandbox.cpp:71:5\r\n…\r\nartifact_prefix='./'; Test unit written to ./crash-78657a4e3dda0e9557c5a4f56dd9d19763459865\r\n```\r\n\r\nIn this example use of an unexpected networking syscall (`socket`) was detected when running the example harness `example_fuzzing_harness`.",
          "user": {
            "login": "practicalswift",
            "id": 7826565,
            "node_id": "MDQ6VXNlcjc4MjY1NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/practicalswift",
            "html_url": "https://github.com/practicalswift",
            "followers_url": "https://api.github.com/users/practicalswift/followers",
            "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
            "organizations_url": "https://api.github.com/users/practicalswift/orgs",
            "repos_url": "https://api.github.com/users/practicalswift/repos",
            "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/practicalswift/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21538",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21538",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21538.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21538.patch"
          },
          "closed_at": "2021-06-07T08:20:48Z",
          "created_at": "2021-03-28T10:29:50Z",
          "updated_at": "2022-08-18T18:24:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 808904532,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwODkwNDUzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808904532",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-28T14:28:51Z",
      "updated_at": "2021-03-28T14:28:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, thanks for working on this!",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-808904532",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4519632705,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUxOTYzMjcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4519632705",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-29T07:01:52Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-30T19:20:29Z",
      "updated_at": "2021-03-30T19:20:29Z",
      "source": {
        "issue": {
          "id": 834657374,
          "node_id": "MDU6SXNzdWU4MzQ2NTczNzQ=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21466",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21466/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21466/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21466/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/21466",
          "number": 21466,
          "state": "closed",
          "state_reason": "completed",
          "title": "Avoid use of \"socket\" syscall when formatting IP addresses in CNetAddr::ToString",
          "body": "When fuzzing our codebase in a restricted syscall setup I noticed that calling `CNetAddr::ToString` triggers the use of the `socket` syscall. The syscall is made indirectly via `getnameinfo`.\r\n\r\nAFAICT `getnameinfo` is used in our code only to format IPv6 addresses in their \"shortened\" form. I think our formatting only use case should be possible to fully cover without involving the kernel via `socket` :)\r\n\r\nNot a big deal of course, but it would be nice if kept the direct and indirect use of networking related syscalls such as `socket` to functions where they cannot be avoided. That would make reasoning about syscall restrictions and/or application-vs-kernel boundaries somewhat easier. \r\n\r\nThe call chain is: `CNetAddr::ToString` > `CNetAddr::ToStringIP` > `getnameinfo` > `gni_host` > `gni_host_inet`  > `gni_host_inet_numeric` > `if_indextoname` > `__opensock` > `socket`.\r\n\r\nLive demo:\r\n\r\n```\r\n$ FUZZ=netaddress src/test/fuzz/fuzz\r\n…\r\nERROR: The syscall \"socket\" (syscall number 41) is not allowed by the syscall sandbox in thread \"test\". Please report. Exiting.\r\nterminate called without an active exception\r\n==13417== ERROR: libFuzzer: deadly signal\r\n    #0 0x5581be296819 in __sanitizer_print_stack_trace compiler-rt/lib/ubsan/ubsan_diag_standalone.cpp:33\r\n    #1 0x5581be22e9f8 in fuzzer::PrintStackTrace() compiler-rt/lib/fuzzer/FuzzerUtil.cpp:210                                                                                                                                                                                        #2 0x5581be15a14a in fuzzer::Fuzzer::CrashCallback() (.part.48) compiler-rt/lib/fuzzer/FuzzerLoop.cpp:233\r\n    #3 0x5581be20ab47 in fuzzer::Fuzzer::CrashCallback() compiler-rt/lib/fuzzer/FuzzerLoop.cpp:205\r\n    #4 0x5581be20ab47 in fuzzer::Fuzzer::StaticCrashSignalCallback() compiler-rt/lib/fuzzer/FuzzerLoop.cpp:204\r\n    #5 0x7f3139b2089f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1289f)\r\n    #6 0x7f3138526f46 in __libc_signal_restore_set /build/glibc-2ORdQG/glibc-2.27/signal/../sysdeps/unix/sysv/linux/nptl-signals.h:80\r\n    #7 0x7f3138526f46 in raise /build/glibc-2ORdQG/glibc-2.27/signal/../sysdeps/unix/sysv/linux/raise.c:48\r\n    #8 0x7f31385288b0 in abort /build/glibc-2ORdQG/glibc-2.27/stdlib/abort.c:79\r\n    #9 0x7f3139db9956  (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0x8c956)\r\n    #10 0x7f3139dbfae5  (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0x92ae5)\r\n    #11 0x7f3139dbfb20 in std::terminate() (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0x92b20)\r\n    #12 0x5581bec4e6f7 in (anonymous namespace)::SyscallSandboxDebugSignalHandler(int, siginfo_t*, void*) src/util/syscall_sandbox.cpp:71:5\r\n    #13 0x7f3139b2089f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1289f)\r\n    #14 0x7f313860b076 in socket /build/glibc-2ORdQG/glibc-2.27/socket/../sysdeps/unix/syscall-template.S:78\r\n    #15 0x7f313860b2b0 in __opensock /build/glibc-2ORdQG/glibc-2.27/socket/../sysdeps/unix/sysv/linux/opensock.c:100\r\n    #16 0x7f3138626fd3 in if_indextoname /build/glibc-2ORdQG/glibc-2.27/inet/../sysdeps/unix/sysv/linux/if_index.c:226\r\n    #17 0x7f3138626abd in gni_host_inet_numeric /build/glibc-2ORdQG/glibc-2.27/inet/getnameinfo.c:354\r\n    #18 0x7f3138626abd in gni_host_inet /build/glibc-2ORdQG/glibc-2.27/inet/getnameinfo.c:389\r\n    #19 0x7f3138626abd in gni_host /build/glibc-2ORdQG/glibc-2.27/inet/getnameinfo.c:422\r\n    #20 0x7f3138626abd in getnameinfo /build/glibc-2ORdQG/glibc-2.27/inet/getnameinfo.c:539\r\n    #21 0x5581beab72e3 in CNetAddr::ToStringIP[abi:cxx11]() const src/netaddress.cpp:580:18\r\n…\r\n```",
          "user": {
            "login": "practicalswift",
            "id": 7826565,
            "node_id": "MDQ6VXNlcjc4MjY1NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/practicalswift",
            "html_url": "https://github.com/practicalswift",
            "followers_url": "https://api.github.com/users/practicalswift/followers",
            "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
            "organizations_url": "https://api.github.com/users/practicalswift/orgs",
            "repos_url": "https://api.github.com/users/practicalswift/repos",
            "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/practicalswift/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "closed_at": "2021-05-17T11:08:28Z",
          "created_at": "2021-03-18T11:00:19Z",
          "updated_at": "2022-08-18T19:57:25Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-03T01:22:13Z",
      "updated_at": "2021-04-03T01:22:13Z",
      "source": {
        "issue": {
          "id": 849394973,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjA4MTc4MDA3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21576",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21576/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21576/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21576/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21576",
          "number": 21576,
          "state": "closed",
          "state_reason": null,
          "title": "rpc, gui: bumpfee signer support",
          "body": "The `bumpfee` RPC call and GUI fee bump interface now work with an external signer.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21576",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21576",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21576.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21576.patch"
          },
          "closed_at": "2022-12-20T20:30:36Z",
          "created_at": "2021-04-02T18:38:58Z",
          "updated_at": "2023-01-02T11:07:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-03T01:24:20Z",
      "updated_at": "2021-04-03T01:24:20Z",
      "source": {
        "issue": {
          "id": 849389507,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjA4MTczNDYy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21575",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21575/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21575/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21575/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21575",
          "number": 21575,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Create blockstorage module",
          "body": "This picks up the closed pull request #21030 and is the first step toward fixing #21220.\r\n\r\nThe basic idea is to move all disk access into a separate module with benefits:\r\n* Breaking down the massive files init.cpp and validation.cpp into logical units\r\n* Creating a standalone-module to reduce the mental complexity\r\n* Pave the way to fix validation related circular dependencies\r\n* Pave the way to mock disk access for testing, especially where it is performance critical (like fuzzing)",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 219890555,
              "node_id": "MDU6TGFiZWwyMTk4OTA1NTU=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Block%20storage",
              "name": "Block storage",
              "color": "000000",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21575",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21575",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21575.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21575.patch"
          },
          "closed_at": "2021-04-13T14:00:48Z",
          "created_at": "2021-04-02T18:26:45Z",
          "updated_at": "2022-08-18T18:30:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 4586485533,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ1ODY0ODU1MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4586485533",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T08:05:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4639771578,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYzOTc3MTU3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4639771578",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-24T09:46:14Z"
    },
    {
      "event": "unlabeled",
      "id": 4639809233,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDYzOTgwOTIzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4639809233",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-24T10:31:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-24T20:20:51Z",
      "updated_at": "2021-04-24T20:20:51Z",
      "source": {
        "issue": {
          "id": 865920138,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjIxOTE0MDA4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21763",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21763/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21763/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21763/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21763",
          "number": 21763,
          "state": "closed",
          "state_reason": null,
          "title": " test: Run AppInitSanityChecks before all tests ",
          "body": "Instead of running the sanity checks as part of a single test case, run them as part of the normal setup for each test case. Benefits are:\r\n\r\n* Errors during test development (e.g. wrong datadir) are caught early in the setup\r\n* It makes the test setup procedure closer to the bitcoind setup",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21763",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21763",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21763.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21763.patch"
          },
          "closed_at": "2022-08-03T08:54:30Z",
          "created_at": "2021-04-23T09:16:45Z",
          "updated_at": "2022-08-03T08:54:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-24T20:55:25Z",
      "updated_at": "2021-04-24T20:55:25Z",
      "source": {
        "issue": {
          "id": 860937246,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjE3NjkwODE3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21727",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21727/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21727/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21727/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21727",
          "number": 21727,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Move more stuff to blockstorage",
          "body": "See #21575 ",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21727",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21727",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21727.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21727.patch"
          },
          "closed_at": "2021-05-05T14:03:19Z",
          "created_at": "2021-04-19T06:13:37Z",
          "updated_at": "2022-08-16T17:21:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640382389,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDM4MjM4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640382389",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-24T21:20:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640872535,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDg3MjUzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640872535",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T08:02:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640907966,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDkwNzk2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640907966",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T08:40:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640929750,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDkyOTc1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640929750",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T09:04:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640997407,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDk5NzQwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640997407",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T10:13:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4641012604,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MTAxMjYwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4641012604",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T10:28:20Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T14:41:51Z",
      "updated_at": "2021-04-25T14:41:51Z",
      "source": {
        "issue": {
          "id": 630157956,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDI3MzMwMDg0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19162",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19162/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19162/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19162/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19162",
          "number": 19162,
          "state": "closed",
          "state_reason": null,
          "title": "ci: tsan gui",
          "body": "Enable the gui in the tsan build",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19162",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19162",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19162.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19162.patch"
          },
          "closed_at": "2021-06-28T03:58:00Z",
          "created_at": "2020-06-03T16:49:09Z",
          "updated_at": "2022-08-27T13:19:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4641560311,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MTU2MDMxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4641560311",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T19:39:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4641560501,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MTU2MDUwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4641560501",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T19:40:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4647266114,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0NzI2NjExNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4647266114",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-26T20:37:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4648980400,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0ODk4MDQwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4648980400",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T07:03:05Z"
    },
    {
      "event": "labeled",
      "id": 4650220789,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2NTAyMjA3ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4650220789",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T11:17:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4650940903,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1MDk0MDkwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4650940903",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T13:43:00Z"
    },
    {
      "event": "unlabeled",
      "id": 4651604451,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDY1MTYwNDQ1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4651604451",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T15:30:49Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T06:14:29Z",
      "updated_at": "2021-04-28T06:14:29Z",
      "source": {
        "issue": {
          "id": 869164323,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjI0NTc0MDE4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21789",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21789/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21789/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21789/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21789",
          "number": 21789,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Remove ::Params() global from CChainState",
          "body": "The `::Params()` global is verbose and confusing. Also it makes tests a bit harder to write because they'd have to mock a global.\r\n\r\nFix all issues by simply using a member variable that points to the right params.\r\n\r\n(Can be reviewed with `--word-diff-regex=.`)",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21789",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21789",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21789.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21789.patch"
          },
          "closed_at": "2021-06-29T03:23:50Z",
          "created_at": "2021-04-27T18:51:20Z",
          "updated_at": "2022-08-18T19:51:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4654839603,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1NDgzOTYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4654839603",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T07:05:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4656301761,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1NjMwMTc2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4656301761",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T11:43:28Z"
    },
    {
      "event": "labeled",
      "id": 4689907833,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2ODk5MDc4MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4689907833",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T15:50:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4738958269,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDczODk1ODI2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4738958269",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-12T22:03:19Z"
    },
    {
      "event": "unlabeled",
      "id": 4739095850,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDczOTA5NTg1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4739095850",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-12T22:51:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-13T02:53:53Z",
      "updated_at": "2021-05-13T02:53:53Z",
      "source": {
        "issue": {
          "id": 890531901,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjQzNTQwMjQ2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21936",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21936/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21936/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21936/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21936",
          "number": 21936,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: Terminate immediately if a fuzzing harness tries to create a TCP socket (belt and suspenders)",
          "body": "Terminate immediately if a fuzzing harness ever to create a TCP socket (belt and suspenders).\r\n\r\nObviously this _should_ never happen, but if it _does_ happen we want immediate termination instead of a TCP socket :)",
          "user": {
            "login": "practicalswift",
            "id": 7826565,
            "node_id": "MDQ6VXNlcjc4MjY1NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/practicalswift",
            "html_url": "https://github.com/practicalswift",
            "followers_url": "https://api.github.com/users/practicalswift/followers",
            "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
            "organizations_url": "https://api.github.com/users/practicalswift/orgs",
            "repos_url": "https://api.github.com/users/practicalswift/repos",
            "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/practicalswift/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21936",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21936",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21936.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21936.patch"
          },
          "closed_at": "2021-05-21T07:02:43Z",
          "created_at": "2021-05-12T22:22:50Z",
          "updated_at": "2022-08-18T18:24:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-14T12:40:30Z",
      "updated_at": "2021-05-14T12:40:30Z",
      "source": {
        "issue": {
          "id": 891819098,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjQ0NjI1Nzk0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21948",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21948/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21948/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21948/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21948",
          "number": 21948,
          "state": "closed",
          "state_reason": null,
          "title": "test: Fix off-by-one in mockscheduler test RPC",
          "body": "Fixes:\r\n\r\n\r\n```\r\nfuzz: scheduler.cpp:83: void CScheduler::MockForward(std::chrono::seconds): Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.\r\n==1059066== ERROR: libFuzzer: deadly signal\r\n    #0 0x558f75449c10 in __sanitizer_print_stack_trace (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x5fec10)\r\n    #1 0x558f753f32b8 in fuzzer::PrintStackTrace() fuzzer.o\r\n    #2 0x558f753d68d3 in fuzzer::Fuzzer::CrashCallback() fuzzer.o\r\n    #3 0x7f4a3cbbb3bf  (/lib/x86_64-linux-gnu/libpthread.so.0+0x153bf)\r\n    #4 0x7f4a3c7ff18a in raise (/lib/x86_64-linux-gnu/libc.so.6+0x4618a)\r\n    #5 0x7f4a3c7de858 in abort (/lib/x86_64-linux-gnu/libc.so.6+0x25858)\r\n    #6 0x7f4a3c7de728  (/lib/x86_64-linux-gnu/libc.so.6+0x25728)\r\n    #7 0x7f4a3c7eff35 in __assert_fail (/lib/x86_64-linux-gnu/libc.so.6+0x36f35)\r\n    #8 0x558f7588a913 in CScheduler::MockForward(std::chrono::duration<long, std::ratio<1l, 1l> >) scheduler.cpp:83:5\r\n    #9 0x558f75b0e5b1 in mockscheduler()::$_7::operator()(RPCHelpMan const&, JSONRPCRequest const&) const rpc/misc.cpp:435:30\r\n    #10 0x558f75b0e5b1 in std::_Function_handler<UniValue (RPCHelpMan const&, JSONRPCRequest const&), mockscheduler()::$_7>::_M_invoke(std::_Any_data const&, RPCHelpMan const&, JSONRPCRequest const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:285:9\r\n    #11 0x558f7587a141 in std::function<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688:14\r\n    #12 0x558f7587a141 in RPCHelpMan::HandleRequest(JSONRPCRequest const&) const rpc/util.cpp:565:26\r\n    #13 0x558f756c0086 in CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const ./rpc/server.h:110:91\r\n    #14 0x558f756c0086 in std::_Function_handler<bool (JSONRPCRequest const&, UniValue&, bool), CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)>::_M_invoke(std::_Any_data const&, JSONRPCRequest const&, UniValue&, bool&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:285:9\r\n    #15 0x558f756b8592 in std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688:14\r\n    #16 0x558f756b8592 in ExecuteCommand(CRPCCommand const&, JSONRPCRequest const&, UniValue&, bool) rpc/server.cpp:480:20\r\n    #17 0x558f756b8592 in ExecuteCommands(std::vector<CRPCCommand const*, std::allocator<CRPCCommand const*> > const&, JSONRPCRequest const&, UniValue&) rpc/server.cpp:444:13\r\n    #18 0x558f756b8017 in CRPCTable::execute(JSONRPCRequest const&) const rpc/server.cpp:464:13\r\n    #19 0x558f7552457a in (anonymous namespace)::RPCFuzzTestingSetup::CallRPC(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) test/fuzz/rpc.cpp:50:25\r\n    #20 0x558f7552457a in rpc_fuzz_target(Span<unsigned char const>) test/fuzz/rpc.cpp:354:28\r\n    #21 0x558f7544cf0f in std::_Function_handler<void (Span<unsigned char const>), void (*)(Span<unsigned char const>)>::_M_invoke(std::_Any_data const&, Span<unsigned char const>&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:300:2\r\n    #22 0x558f75c05197 in std::function<void (Span<unsigned char const>)>::operator()(Span<unsigned char const>) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688:14\r\n    #23 0x558f75c05197 in LLVMFuzzerTestOneInput test/fuzz/fuzz.cpp:74:5\r\n    #24 0x558f753d8073 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\r\n    #25 0x558f753c1f72 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\r\n    #26 0x558f753c7d6a in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\r\n    #27 0x558f753f3a92 in main (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x5a8a92)\r\n    #28 0x7f4a3c7e00b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\r\n    #29 0x558f7539cc9d in _start (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x551c9d)\r\n",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21948",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21948",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21948.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21948.patch"
          },
          "closed_at": "2021-05-15T07:57:17Z",
          "created_at": "2021-05-14T10:45:37Z",
          "updated_at": "2022-08-16T17:22:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 4749760962,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NDk3NjA5NjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4749760962",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T09:11:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4749873280,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc0OTg3MzI4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4749873280",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T11:37:43Z"
    },
    {
      "event": "unlabeled",
      "id": 4749966241,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDc0OTk2NjI0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4749966241",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T13:19:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4751240169,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc1MTI0MDE2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4751240169",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-16T17:58:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4753170419,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc1MzE3MDQxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4753170419",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-17T08:42:49Z"
    },
    {
      "event": "commented",
      "id": 845414778,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTQxNDc3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845414778",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T19:27:29Z",
      "updated_at": "2021-05-20T19:33:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "@laanwj Thanks for reviewing. I believe all feedback has be addressed (sorry it took a while). Let me know if there is anything more I can do :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845414778",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "mentioned",
      "id": 4775526549,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDc3NTUyNjU0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4775526549",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T19:27:29Z"
    },
    {
      "event": "subscribed",
      "id": 4775526556,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3NzU1MjY1NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4775526556",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T19:27:29Z"
    },
    {
      "event": "labeled",
      "id": 4778064171,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NzgwNjQxNzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4778064171",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T08:54:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 845890875,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTg5MDg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845890875",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T11:40:29Z",
      "updated_at": "2021-05-21T11:40:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK!",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845890875",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4782120962,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc4MjEyMDk2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4782120962",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-22T08:47:41Z"
    },
    {
      "event": "unlabeled",
      "id": 4782170205,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDc4MjE3MDIwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4782170205",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-22T09:50:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "added_to_project",
      "id": 4784198429,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ0Nzg0MTk4NDI5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4784198429",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T02:57:41Z",
      "project_card": {
        "id": 61680680,
        "url": "https://api.github.com/projects/columns/cards/61680680",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 849291645,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTI5MTY0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849291645",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-27T03:31:18Z",
      "updated_at": "2021-05-27T03:31:18Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, great work!",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-849291645",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "reviewed",
      "id": 673399903,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjczMzk5OTAz",
      "url": null,
      "actor": null,
      "commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Very light code review ACK 3636a5c1f03fd01da2a78cad0cba7ab69cadf074 (I didn't review bpf code in detail yet) and concept ACK.\r\n\r\nGreat work here! This seems like a really nice feature.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-673399903",
      "submitted_at": "2021-06-01T18:20:29Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4834259869,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgzNDI1OTg2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4834259869",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-02T21:49:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4834286379,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgzNDI4NjM3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4834286379",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-02T21:56:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4837598608,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgzNzU5ODYwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4837598608",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-03T13:30:13Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T03:27:24Z",
      "updated_at": "2021-06-04T03:27:24Z",
      "source": {
        "issue": {
          "id": 910712903,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjYxMDk0ODA4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22144",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22144/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22144/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22144/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22144",
          "number": 22144,
          "state": "closed",
          "state_reason": null,
          "title": "Randomize message processing peer order",
          "body": "Right now, the message handling loop iterates the list of nodes always in the same order: the order they were connected in (see the `vNodes` vector). For some parts of the net processing logic, this order matters. Transaction requests are assigned explicitly to peers since #19988, but many other parts of processing work on a \"first-served-by-loop-first\" basis, such as block downloading. If peers can predict this ordering, it may be exploited to cause delays.\r\n\r\nAs there isn't anything particularly optimal about the current ordering, just make it unpredictable by randomizing.\r\n\r\nReported by Crypt-iQ.\r\n\r\n\r\n\r\n\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22144",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22144",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22144.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22144.patch"
          },
          "closed_at": "2021-06-16T03:27:41Z",
          "created_at": "2021-06-03T17:34:51Z",
          "updated_at": "2022-08-18T18:31:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4845515494,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg0NTUxNTQ5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845515494",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T22:26:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4846255045,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg0NjI1NTA0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4846255045",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-05T06:09:23Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-05T18:27:48Z",
      "updated_at": "2021-06-05T18:27:48Z",
      "source": {
        "issue": {
          "id": 912143850,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjYyMzM0NTAy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22159",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22159/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22159/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22159/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22159",
          "number": 22159,
          "state": "closed",
          "state_reason": null,
          "title": "build: Add --with-append-cxxflags option",
          "body": "This can be useful for testing. For example https://github.com/bitcoin/bitcoin/issues/22064#issuecomment-855199561 could use `--with-append-cxxflags=\"-ftrivial-auto-var-init=pattern\"` without having to specify the default arguments again (-g -O2).",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22159",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22159",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22159.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22159.patch"
          },
          "closed_at": "2021-08-18T17:20:14Z",
          "created_at": "2021-06-05T08:00:08Z",
          "updated_at": "2022-08-18T18:37:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 856569408,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjU2OTQwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856569408",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T08:27:40Z",
      "updated_at": "2021-06-08T08:28:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "I recently thought about this again and found the [following information](https://learnbchs.org/pledge.html) interesting, not sure if it was already pointed out:\r\n> A further issue with Linux sandboxes in particular (seccomp(2) and friends) is due to the instability of the Linux ecosystem itself. Generic libc functions are implemented differently depending on whether you're using Alpine (musl) or Debian (glibc). This means that the same libc function may require different system calls.\r\n\r\nWhile this is about C, it also applies to C++ in many parts. There's no guarantee that the current approaches works on all libc++ implementation. Also there is no guarantee that for example clangs libc++ might use different syscalls in future versions. This could lead to an unsustainable and unportable design of the implementation.\r\n\r\nMaybe it's better focusing on BSDs sandboxing mechanisms (pledge(2) and capsicum(2)) instead as they are more somewhat stable compared to Linux.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-856569408",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 856760930,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1Njc2MDkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856760930",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T13:20:06Z",
      "updated_at": "2021-06-08T13:20:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Maybe it's better focusing on BSDs sandboxing mechanisms (pledge(2) and capsicum(2)) instead as they are more somewhat stable compared to Linux.\r\n\r\nTurns out this won't work either due to third party libs including the C++ standard library still have that issue pointed out above. Maybe focus on FS restriction instead rather than syscall restriction",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-856760930",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 857707559,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NzcwNzU1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857707559",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T13:45:16Z",
      "updated_at": "2021-06-10T09:13:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "@emilengler \r\n\r\nThe syscall sandbox works on an allowlist basis. Thus if the kernel provides two different syscalls to achieve a certain action, and both those syscalls are used by the different standard library implementations then both syscalls should be put in the allowlist (if we want to allow said action).\r\n\r\nThat is inherent in all types of syscall sandboxing designs, no matter if Linux seccomp-bpf or some BSD equivalent is used.\r\n\r\nAs have been noted in previous discussions above syscall sandboxing is a type of feature that needs experimentation and fine-tuning for different environments to catch potential diversity in syscall use across systems. Such experimentation was required when sandboxing using seccomp-bpf was introduced in projects such as Chromium, OpenSSH and Tor, and it will be required for Bitcoin Core too. There is really no way around it :)\r\n\r\nThat's why this is labeled an experimental feature that is disabled by default, and is enabled only after \"dual opt-in\" (compile-time opt-in via `--with-sandbox` _and_ run-time opt-in via `-sandbox`). To be clear: this is very much *not* a feature for the average end-user at this stage :)\r\n\r\nI think having this feature in CI only would be a very good start: that would allow us to catch introduction of crazy syscall usage (say opening a network connection in a thread that is not supposed to do so, etc.), and get a chance to play with sandboxing in practice.\r\n\r\nFWIW I've been using this feature for roughly a year in different environments. I've found this feature to be a very helpful testing/debugging addition which makes it much easier to reason about the actual capabilities required of each type of thread in Bitcoin Core.",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-857707559",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "mentioned",
      "id": 4865154146,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg2NTE1NDE0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4865154146",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T13:45:16Z"
    },
    {
      "event": "subscribed",
      "id": 4865154155,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4NjUxNTQxNTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4865154155",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T13:45:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4879922021,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg3OTkyMjAyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4879922021",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-11T20:08:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4881039825,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg4MTAzOTgyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4881039825",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-12T09:01:29Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-13T23:05:11Z",
      "updated_at": "2021-06-13T23:05:11Z",
      "source": {
        "issue": {
          "id": 890433579,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjQzNDU1NjU5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21935",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21935/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21935/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21935/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21935",
          "number": 21935,
          "state": "closed",
          "state_reason": null,
          "title": "Enable external signer support by default, reduce #ifdef",
          "body": "This follows the introduction of GUI support in https://github.com/bitcoin-core/gui/pull/4\r\n\r\nI don't think we should expect GUI users to self compile. This also enables external signer support by default for RPC users.\r\n\r\nIn addition this PR reduces the number of `#ifdef ENABLE_EXTERNAL_SIGNER`, which also fixes #21919. When compiled with `--disable-external-signer` such wallets can't be created in RPC or GUI, but they can be loaded. Attempting any action that calls HWI will trigger an error.\r\n\r\nSide-note: this PR may or may not (currently) break CI for the GUI repository, as explained here: https://github.com/bitcoin-core/gui/pull/4#issuecomment-769859001",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 2260068353,
              "node_id": "MDU6TGFiZWwyMjYwMDY4MzUz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/interfaces",
              "name": "interfaces",
              "description": "",
              "color": "83c9fc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 31,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21935",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21935",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21935.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21935.patch"
          },
          "closed_at": "2021-06-17T04:47:58Z",
          "created_at": "2021-05-12T19:53:00Z",
          "updated_at": "2022-08-18T18:31:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 4895262614,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ4OTUyNjI2MTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4895262614",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-16T04:17:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4920934144,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDkyMDkzNDE0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4920934144",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T07:40:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4920944803,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDkyMDk0NDgwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4920944803",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T07:42:47Z"
    },
    {
      "event": "unlabeled",
      "id": 4921024171,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDkyMTAyNDE3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4921024171",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T07:58:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4921766235,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDkyMTc2NjIzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4921766235",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T10:14:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4921857875,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDkyMTg1Nzg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4921857875",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T10:32:23Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T17:28:50Z",
      "updated_at": "2021-06-22T17:28:50Z",
      "source": {
        "issue": {
          "id": 890999854,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjQzOTM2NTA1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21943",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21943/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21943/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21943/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21943",
          "number": 21943,
          "state": "closed",
          "state_reason": null,
          "title": "Dedup and RAII-fy the creation of a copy of CConnman::vNodes",
          "body": "_This is a piece of https://github.com/bitcoin/bitcoin/pull/21878, chopped off to ease review._\r\n\r\nThe following pattern was duplicated in CConnman:\r\n\r\n```cpp\r\nlock\r\ncreate a copy of vNodes, add a reference to each one \r\nunlock\r\n... use the copy ... \r\nlock\r\nrelease each node from the copy\r\nunlock\r\n```\r\n\r\nPut that code in a RAII helper that reduces it to: \r\n\r\n```cpp\r\ncreate snapshot \"snap\"\r\n... use the copy ... \r\n// release happens when \"snap\" goes out of scope\r\n",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21943",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21943",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21943.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21943.patch"
          },
          "closed_at": "2021-11-24T16:50:17Z",
          "created_at": "2021-05-13T12:30:51Z",
          "updated_at": "2022-11-26T09:59:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T17:42:08Z",
      "updated_at": "2021-06-22T17:42:08Z",
      "source": {
        "issue": {
          "id": 879275352,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjMzMDA2NDM4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21878",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21878/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21878/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21878/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21878",
          "number": 21878,
          "state": "open",
          "state_reason": null,
          "title": "Make all networking code mockable",
          "body": "_This is a roadmap PR. It can be merged, but it can also be split into separate PRs and to get proper thorough review it is split._\r\n\r\nAdd wrapper methods to the syscalls `accept()`, `setsockopt()`, `getsockname()`, `bind()`, `listen()`  in the [`Sock`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/util/sock.h#L25) class (e.g. `Sock::Accept()`). Those methods can be overriden (mocked) by unit tests ([existent example in `master`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/test/util/net.h#L75)) and by fuzz tests ([existent example in `master`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/test/fuzz/util.h#L561)).\r\n\r\nChange everybody to use [`Sock`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/util/sock.h#L25) instead of [`SOCKET`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/compat.h#L41).\r\n\r\nMove the functionality of [`CConnman::SocketEvents()`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/net.cpp#L1334) to a mockable method of the [`Sock`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/util/sock.h#L25) class.\r\n\r\n### Already merged pieces of this PR\r\n* [x] https://github.com/bitcoin/bitcoin/pull/21943\r\n* [x] https://github.com/bitcoin/bitcoin/pull/23601\r\n* [x] https://github.com/bitcoin/bitcoin/pull/21879\r\n* [x] https://github.com/bitcoin/bitcoin/pull/23604\r\n* [x] https://github.com/bitcoin/bitcoin/pull/24357\r\n* [x] https://github.com/bitcoin/bitcoin/pull/24356\r\n* [x] https://github.com/bitcoin/bitcoin/pull/25428\r\n* [x] https://github.com/bitcoin/bitcoin/pull/25426\r\n* [x] https://github.com/bitcoin/bitcoin/pull/24378\r\n* [x] https://github.com/bitcoin/bitcoin/pull/25421\r\n\r\n### Current pieces of this for review (can be reviewed/merged in any order)\r\n\r\n* [ ] https://github.com/bitcoin/bitcoin/pull/26312",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 52,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21878",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21878",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21878.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21878.patch"
          },
          "created_at": "2021-05-07T16:04:35Z",
          "updated_at": "2023-07-24T01:45:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-24T03:49:13Z",
      "updated_at": "2021-06-24T03:49:13Z",
      "source": {
        "issue": {
          "id": 421531882,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjYxNTYxNTQ3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15606",
          "number": 15606,
          "state": "closed",
          "state_reason": null,
          "title": "assumeutxo",
          "body": "**See the proposal for assumeutxo [here](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal).**\r\n\r\nTesting instructions can be found below the \"Progress\" section.\r\n\r\n---\r\n\r\n### Progress\r\n\r\nAll items here have corresponding commits here, but are unchecked if they haven't been merged yet.\r\n\r\n- [x] **Chainstate interface**\r\n  - https://github.com/bitcoin/bitcoin/pull/15976\r\n- [x] **Localize chainstate data**\r\n  - https://github.com/bitcoin/bitcoin/pull/16443\r\n- [x] **Share block data**\r\n  - https://github.com/bitcoin/bitcoin/pull/16194\r\n- [x] **Deglobalize chainstate**\r\n  - https://github.com/bitcoin/bitcoin/pull/15948\r\n- [x] **UpdateTip/CheckBlockIndex** modifications\r\n  - https://github.com/bitcoin/bitcoin/pull/21526\r\n- [x] **ChainstateManager**\r\n  - https://github.com/bitcoin/bitcoin/pull/17737\r\n- [x] **Mempool**\r\n  - https://github.com/bitcoin/bitcoin/pull/22415\r\n- [x] **LoadBlockIndex**\r\n  - https://github.com/bitcoin/bitcoin/pull/23174\r\n- [x] **Init/teardown**\r\n  - https://github.com/bitcoin/bitcoin/pull/24232\r\n  - https://github.com/bitcoin/bitcoin/pull/25667\r\n  - https://github.com/bitcoin/bitcoin/pull/25740\r\n- [x] **Wallet**: includes avoiding rescans when assumed-valid block data is in use\r\n  - https://github.com/bitcoin/bitcoin/pull/23997\r\n  - https://github.com/bitcoin/bitcoin/pull/26282\r\n- [ ] **P2P**: minor changes are made to `init.cpp` and `net_processing.cpp` to make simultaneous IBD across multiple chainstates work.\r\n  - #24008 \r\n- [ ] **Pruning**: implement correct pruning behavior when using a background chainstate\r\n- [ ] **Blockfile separation**: to prevent \"fragmentation\" in blockfile storage, have background chainstates use separate blockfiles from active snapshot chainstates to avoid interleaving heights and impairing pruning.\r\n- [ ] **Indexing**: all existing `CValidationInterface` events are given with an additional parameter, ChainstateRole, and all indexers ignore events from ChainstateRole::ASSUMEDVALID so that indexation only happens sequentially.\r\n- [ ] Raise error when both `-reindex` and assumeutxo are in use.\r\n- [ ] **RPC**: introduce RPC commands `dumptxoutset`, `loadtxoutset`, and (the probably temporary) `monitorsnapshot`.\r\n  - https://github.com/bitcoin/bitcoin/pull/16899\r\n- [ ] **Release docs & first assumeutxo commitment**: add notes and a particular assumeutxo hash value for first AU-enabled release.\r\n  - This will complete the project and allow use of UTXO snapshots for faster node bootstrap.\r\n- [ ] *(optional)* **Coinscache optimization**: allow flushing chainstate data without emptying the coins cache; results in better performance after UTXO snapshot load.\r\n  - https://github.com/bitcoin/bitcoin/pull/17487\r\n  - https://github.com/bitcoin/bitcoin/pull/27008\r\n\r\n---\r\n\r\n### Testing\r\n\r\n#### For fun (~5min)\r\n\r\nIf you want to do a quick test, you can run `./contrib/devtools/test_utxo_snapshots.sh` and follow the instructions. This is mostly obviated by the functional tests, though.\r\n\r\n#### For real (longer)\r\n\r\nIf you'd like to experience a real usage of assumeutxo, you can do that too.\r\nI've cut a new snapshot at height 788'000 (http://img.jameso.be/utxo-788000.dat - but you can do it yourself with `./contrib/devtools/utxo_snapshot.sh` if you want). Download that, and then create a datadir for testing:\r\n```sh\r\n$ cd ~/src/bitcoin  # or whatever\r\n\r\n# get the snapshot\r\n$ curl http://img.jameso.be/utxo-788000.dat > utxo-788000.dat\r\n\r\n# you'll want to do this if you like copy/pasting \r\n$ export AU_DATADIR=/home/${USER}/au-test # or wherever\r\n\r\n$ mkdir ${AU_DATADIR}\r\n$ vim ${AU_DATADIR}/bitcoin.conf\r\n\r\ndbcache=8000  # or, you know, something high\r\nblockfilterindex=1\r\ncoinstatsindex=1\r\nprune=3000\r\nlogthreadnames=1\r\n```\r\nObtain this branch, build it, and then start bitcoind:\r\n```sh\r\n$ git remote add jamesob https://github.com/jamesob/bitcoin\r\n$ git fetch jamesob utxo-dumpload-compressed\r\n$ git checkout jamesob/utxo-dumpload-compressed\r\n\r\n$ ./configure $conf_args && make  # (whatever you like to do here)\r\n\r\n# start 'er up and watch the logs\r\n$ ./src/bitcoind -datadir=${AU_DATADIR}\r\n```\r\nThen, in some other window, load the snapshot\r\n```sh\r\n$ ./src/bitcoin-cli -datadir=${AU_DATADIR} loadtxoutset $(pwd)/utxo-788000.dat\r\n```\r\n\r\nYou'll see some log messages about headers retrieval and waiting to see the snapshot in the headers chain. Once you get the full headers chain, you'll spend a decent amount of time (~10min) loading the snapshot, checking it, and flushing it to disk. After all that happens, you should be syncing to tip in pretty short order, and you'll see the occasional `[background validation]` log message go by.\r\n\r\nIn yet another window, you can check out chainstate status with\r\n```sh\r\n$ ./src/bitcoin-cli -datadir=${AU_DATADIR} getchainstates\r\n```\r\nas well as usual favorites like `getblockchaininfo`.\r\n\r\n---\r\n\r\n### Original change description\r\n\r\nFor those unfamiliar with assumeutxo, here's a brief summary from [the issue](https://github.com/bitcoin/bitcoin/issues/15605) (where any conceptual discussion not specific to this implementation should happen):\r\n\r\n> assumeutxo would be a way to initialize a node using a headers chain and a serialized version of the UTXO state which was generated from another node at some block height. A client making use of this UTXO \"snapshot\" would specify a hash and expect the content of the resulting UTXO set to yield this hash after deserialization. \r\n> \r\n> This would allow users to bootstrap a usable pruned node & wallet far more quickly (and with less disk usage) than waiting for a full initial block download to complete, since we only have to sync blocks between the base of the snapshot and the current network tip. Needless to say this is at expense of accepting a different trust model, though how different this really ends up being from `assumevalid` in effect is worth debate.\r\n\r\nIn short, this is an interesting change because it would allow nodes to get up and running within minutes given a ~3GB file (at time of writing) under an almost identical trust model to assumevalid.\r\n\r\nIn this implementation, I add a few RPC commands: `dumptxoutset` creates a UTXO snapshot and writes it to disk, and `loadtxoutset` intakes a snapshot from disk, constructs and activates chainstate based on it, and continues a from-scratch initial block download in the background for the sole purpose of validating the snapshot. Once the snapshot is validated, we throw away the chainstate used for background validation.\r\n\r\nThe assumeutxo procedure as implemented is as follows:\r\n\r\n1. A UTXO snapshot is loaded with the `loadtxoutset <path>` RPC command.\r\n1. A new chainstate (`CChainState`) is initialized using `ChainstateManager::ActivateSnapshot()`:\r\n   1. The serialized UTXO data is read in and various sanity checks are performed, e.g. compare expected coin count, recompute the hash and compare it with assumeutxo hash in source code.\r\n   1. We \"fast forward\" `new_chainstate->m_chain` to have a tip at the base of the snapshot (with or without block data). Lacking block data, we fake the `nTx` counts of the constituent `CBlockIndex` entries.\r\n   1. `LoadChainTip()` is called on the new snapshot and it is installed as our active chainstate.\r\n1. The new assumed-valid chainstate is now our active, and so that enters IBD until it is synced to the network's tip. Presumably the snapshot would be taken relatively close to the current tip but far enough away to avoid meaningful reorgs, say 10,000 blocks deep.\r\n1. Once the active chainstate is out of IBD, our old validation chain continues IBD \"in the background\" while the active chainstate services requests from most of the system.\r\n1. Once the background validation chainstate reaches a height equal the base of the snapshot, we take the hash of its UTXO set and ensure it equals the expected hash based on the snapshot. If the hashes are equivalent, we delete the validation chainstate and move on without event; if they aren't, we log loudly and fall back to the validation chainstate (we should probably just shut down).\r\n\r\nThe implicit assumption is that the background validation chain will always be a subset of the assumed-valid snapshot chain while the latter is active. We don't properly handle reorgs that go deeper than the base of the snapshot.\r\n\r\n### Changes (already merged/outdated)\r\n\r\n![chainstate-beforeafter (1)](https://user-images.githubusercontent.com/73197/54435797-a16b0780-4707-11e9-89c3-c90b5686804d.png)\r\n \r\nThe crux of this change is in removing any assumptions in the codebase that there is a single chainstate, i.e. any references to global variables `chainActive`, `pcoinsTip`, et al. need to be replaced with functions that return the relevant chainstate data at that moment in time. This change also takes `CChainState` to its logical conclusion by making it more self-contained - any references to globals like `chainActive` are removed with class-local references (`m_chain`).\r\n\r\nA few minor notes on the implementation:\r\n\r\n- When we attempt to load a wallet with a BestBlock locator lower than the base of a snapshot and the snapshot has not yet been validated, we refuse to load the wallet.\r\n\r\n- For additional notes, see [the new assumeutxo docs](https://github.com/jamesob/bitcoin/blob/utxo-dumpload-compressed/doc/assumeutxo.md).",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 66,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15606",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15606",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15606.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15606.patch"
          },
          "closed_at": "2023-05-08T15:09:24Z",
          "created_at": "2019-03-15T13:58:22Z",
          "updated_at": "2023-05-08T15:09:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-24T23:03:34Z",
      "updated_at": "2021-06-24T23:03:34Z",
      "source": {
        "issue": {
          "id": 929257688,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Njc3MTM1MjE4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22336",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22336/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22336/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22336/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22336",
          "number": 22336,
          "state": "closed",
          "state_reason": null,
          "title": "[TESTBED][NO-MERGE][POC] Use std::filesystem. Remove Boost Filesystem & System",
          "body": "This PR is meant only to test some small modifications of #20744 to fix tests.\r\n\r\n\r\nAndroid test failure: \r\n\r\n* https://github.com/android/ndk/wiki/Changelog-r22#changes - required NDK is 22, master has 21.",
          "user": {
            "login": "kiminuo",
            "id": 58662979,
            "node_id": "MDQ6VXNlcjU4NjYyOTc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kiminuo",
            "html_url": "https://github.com/kiminuo",
            "followers_url": "https://api.github.com/users/kiminuo/followers",
            "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
            "organizations_url": "https://api.github.com/users/kiminuo/orgs",
            "repos_url": "https://api.github.com/users/kiminuo/repos",
            "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kiminuo/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 231994551,
              "node_id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Scripts%20and%20tools",
              "name": "Scripts and tools",
              "color": "ffffee",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22336",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22336",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22336.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22336.patch"
          },
          "closed_at": "2021-07-16T00:42:02Z",
          "created_at": "2021-06-24T13:56:22Z",
          "updated_at": "2022-08-16T17:25:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 694252043,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk0MjUyMDQz",
      "url": null,
      "actor": null,
      "commit_id": "3131ec1fbb3db5d81502bcf349d20eb28ddb0ca4",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for all the followups! The new Setup call is easier to understand, and it's great to see configuration moved from build time to runtime so there is more usage flexibility and less chaos in the build script.\r\n\r\nMain remaining suggestion would be to rename `--with-sandbox` option to `--with-seccomp` to follow more a traditional autoconf convention of using `--with-*` options for dependencies and `--enable-*` options for features. This would also be more futureproof for supporting alternative sandboxing mechanisms on linux, and different sandboxing mechanisms on other platforms.\r\n\r\nOther suggestions:\r\n\r\n- The `--with-` option should just be automatically detected like other dependencies, and not required to be specified manually. Sandboxing is experimental, but it's already disabled by default, and doesn't need to be disabled twice as much. Autodetection would also allow dropping the cirrus CI changes in this PR and avoid the new sandboxing feature creating a new build and test variant.\r\n- The `--with-sandbox and --enable-multiprocess are currently incompatible` build error would be good to drop. The multiprocess and sandboxing features for now maybe don't work together at runtime, but there's no build conflict.\r\n- Various `#if defined(USE_SYSCALL_SANDBOX)` conditionals seem unnecessary. It seems like the only one actually needed is in `util/syscall_sandbox.cpp`\r\n- There should probably be a `TestDisallowedSandboxCall` or similar function in `syscall_sandbox.cpp` to avoid platform-specific code in `rpc/misc.cpp`\r\n- The `skip_if_bitcoind_syscall_sandbox()` function in the python framework would should probably be replaced by a `disable_syscall_sandbox()` function. It's nice how this PR changes the test framework to automatically pass `-sandbox=log-and-kill` to `bitcoind`. But for the tests that don't work with sandboxing, it would be better to just not pass the sandboxing option instead of skipping the test entirely.\r\n\r\nLight code review ACK and approach ACK 3131ec1fbb3db5d81502bcf349d20eb28ddb0ca4.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-694252043",
      "submitted_at": "2021-06-28T18:07:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "labeled",
      "id": 4951008687,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ5NTEwMDg2ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4951008687",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T04:22:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4956307013,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk1NjMwNzAxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4956307013",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T22:11:57Z"
    },
    {
      "event": "unlabeled",
      "id": 4956467791,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDk1NjQ2Nzc5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4956467791",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T23:12:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 698332234,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4MzMyMjM0",
      "url": null,
      "actor": null,
      "commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Updates look good! I started reviewing this in more detail even though more changes may be in progress. Added a few new suggestions below.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-698332234",
      "submitted_at": "2021-07-02T16:31:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4988960691,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk4ODk2MDY5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4988960691",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-07T12:51:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4988966197,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk4ODk2NjE5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4988966197",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-07T12:52:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4994348841,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NDM0ODg0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4994348841",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T11:24:59Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T12:26:52Z",
      "updated_at": "2021-07-08T12:26:52Z",
      "source": {
        "issue": {
          "id": 739100597,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTE3ODIzNTQ3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20354",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20354/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20354/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20354/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20354",
          "number": 20354,
          "state": "closed",
          "state_reason": null,
          "title": "test: Add feature_taproot.py --previous_release",
          "body": "Disabling the new consensus code at runtime is fine, but potentially fragile and incomplete. Fix that by giving the option to run with a version that has been compiled without any taproot code.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20354",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20354",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20354.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20354.patch"
          },
          "closed_at": "2021-07-14T11:12:33Z",
          "created_at": "2020-11-09T14:58:50Z",
          "updated_at": "2022-08-18T18:31:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4997391039,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NzM5MTAzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4997391039",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T22:02:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4997395974,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NzM5NTk3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4997395974",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T22:03:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4997572490,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NzU3MjQ5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4997572490",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T23:11:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4997615740,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NzYxNTc0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4997615740",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T23:30:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4999879113,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5OTg3OTExMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4999879113",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-09T11:30:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4999912986,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5OTkxMjk4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4999912986",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-09T11:39:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5000049187,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwMDA0OTE4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5000049187",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-09T12:13:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5004216669,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwNDIxNjY2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5004216669",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-11T14:25:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5004532182,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwNDUzMjE4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5004532182",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-11T21:18:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5004538336,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwNDUzODMzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5004538336",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-11T21:27:50Z"
    },
    {
      "event": "commented",
      "id": 878918411,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3ODkxODQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878918411",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T09:12:43Z",
      "updated_at": "2021-07-13T09:12:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks a lot for reviewing @ryanofsky: excellent feedback (as always). The suggested changes simplified the implementation significantly.\r\n\r\nI believe all comments have been addressed, and I think this PR should be ready for final review and testing :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-878918411",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "mentioned",
      "id": 5012408557,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTAxMjQwODU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5012408557",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T09:12:43Z"
    },
    {
      "event": "subscribed",
      "id": 5012408565,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUwMTI0MDg1NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5012408565",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T09:12:43Z"
    },
    {
      "event": "reviewed",
      "id": 712180640,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEyMTgwNjQw",
      "url": null,
      "actor": null,
      "commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 333392fbb886c56b62446490a81610ee821006e7 modulo `BuildFilter` and `SetSyscallSandboxPolicy` functions which do seem good as far as I can tell, but I don't know enough yet to vouch for what they are doing in detail.\r\n\r\nThis really does look great! It's a very tidy and self-contained implementation. I left a few comments below but they are all minor and could be ignored.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-712180640",
      "submitted_at": "2021-07-26T23:18:01Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5086877067,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA4Njg3NzA2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5086877067",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-29T15:42:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5093788320,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5Mzc4ODMyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5093788320",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T00:07:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094241563,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDI0MTU2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094241563",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T10:28:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094527187,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDUyNzE4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094527187",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T16:41:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094616819,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDYxNjgxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094616819",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T18:38:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094653140,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDY1MzE0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094653140",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T19:26:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094682169,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDY4MjE2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094682169",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T20:09:04Z"
    },
    {
      "event": "commented",
      "id": 893779975,
      "node_id": "IC_kwDOABII5841RgAH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893779975",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-05T20:38:40Z",
      "updated_at": "2021-08-05T20:38:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "I believe all feedback has been addressed: let me know if there is anything more I can do here :)\r\n\r\nConcept ACK status:\r\n* laanwj: [\"Concept ACK, nice work!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733583322)\r\n* jb55: [\"Very cool, Concept ACK\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733893713)\r\n* gmaxwell: [\"Freeking awesome!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-734512344)\r\n* jonatack: [\"Concept ACK, thanks for working on this!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-808904532)\r\n* 0xB10C: [\"Concept ACK!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845890875)\r\n* ariard: [\"Concept ACK, great work!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-849291645)\r\n* ryanofsky: \"Great work here! This seems like a really nice feature.\"",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-893779975",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5159450426,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE1OTQ1MDQyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159450426",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T07:53:16Z"
    },
    {
      "event": "reviewed",
      "id": 733009157,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMzMDA5MTU3",
      "url": null,
      "actor": null,
      "commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 4646392e628ffd958d18d32cfdc44e53290de017 again with caveat that I'm not very familiar with BPF, and wouldn't know if there was a subtle bug in the sandboxing implementation, even though the construction is pretty straightforward and makes sense as far as I can tell. Outside of the BPF filter construction, all the other build, test, config parsing and thread setup changes do look very good.\r\n\r\nChanges since last review: leaving sandboxing support in multiprocess build enabled (just disabling it specifically when needed at runtime), fixing handling of negated config options, adding many new explanatory comments and links in syscall_sandbox, adding new asserts, removing macro usages, tweaking BPF filter build code without changing the filter, adding python test --nosandbox option to be able to run tests without sandboxing.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-733009157",
      "submitted_at": "2021-08-18T15:10:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T08:35:27Z",
      "updated_at": "2021-08-19T08:35:27Z",
      "source": {
        "issue": {
          "id": 973645961,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NzE1MDYyMzI5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22736",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22736/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22736/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22736/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22736",
          "number": 22736,
          "state": "closed",
          "state_reason": null,
          "title": "log, sync: change lock contention from preprocessor directive to log category",
          "body": "To enable lock contention logging, `DEBUG_LOCKCONTENTION` has to be defined at compilation. Once built, the logging is not limited to a category and is high frequency, verbose and in all-caps. With these factors combined, it seems likely to be rarely used.\r\n\r\nThis patch:\r\n- adds a `lock` logging category\r\n- adds a timing macro in microseconds, `LOG_TIME_MICROS_WITH_CATEGORY`\r\n- updates `BCLog::LogMsg()` to omit irrelevant decimals for microseconds and skip unneeded code and math\r\n- improves the lock contention logging, drops the all-caps, and displays the duration in microseconds\r\n- removes the conditional compilation directives\r\n- allows lock contentions to be logged on startup with `-debug=lock` or at run time with `bitcoin-cli logging '[\"lock\"]'`\r\n\r\n```\r\n$ bitcoind -signet -debug=lock\r\n2021-09-01T12:40:01Z LockContention: cs_vNodes, net.cpp:1920 started\r\n2021-09-01T12:40:01Z LockContention: cs_vNodes, net.cpp:1920 completed (4μs)\r\n2021-09-01T12:40:01Z LockContention: cs_vNodes, net.cpp:1302 started\r\n2021-09-01T12:40:01Z LockContention: cs_vNodes, net.cpp:1302 completed (4μs)\r\n2021-09-01T12:40:02Z LockContention: cs_vNodes, net.cpp:2242 started\r\n2021-09-01T12:40:02Z LockContention: cs_vNodes, net.cpp:2242 completed (20μs)\r\n2021-09-01T12:43:04Z LockContention: ::cs_main, validation.cpp:4980 started\r\n2021-09-01T12:43:04Z LockContention: ::cs_main, validation.cpp:4980 completed (3μs)\r\n\r\n$ bitcoin-cli -signet logging\r\n  \"lock\": true,\r\n\r\n$ bitcoin-cli -signet logging [] '[\"lock\"]'\r\n  \"lock\": false,\r\n\r\n$ bitcoin-cli -signet logging '[\"lock\"]'\r\n  \"lock\": true,\r\n```\r\n\r\nI've tested this with Clang 13 and GCC 10.2.1, on Debian, with and without `--enable-debug`.",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 25,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22736",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22736",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22736.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22736.patch"
          },
          "closed_at": "2021-09-06T08:32:41Z",
          "created_at": "2021-08-18T13:05:38Z",
          "updated_at": "2022-09-06T23:16:13Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-20T16:08:40Z",
      "updated_at": "2021-08-20T16:08:40Z",
      "source": {
        "issue": {
          "id": 975500505,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NzE2NjQxNzkx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22754",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22754/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22754/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22754/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22754",
          "number": 22754,
          "state": "closed",
          "state_reason": null,
          "title": "Move LoadAddrman from init to addrdb",
          "body": "Init should only concern itself with the initialization order, not the detailed initialization logic of every module.\r\n\r\nDiscussed in https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691310217",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22754",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22754",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22754.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22754.patch"
          },
          "closed_at": "2021-08-21T12:33:27Z",
          "created_at": "2021-08-20T10:56:57Z",
          "updated_at": "2022-08-21T19:23:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-21T21:56:37Z",
      "updated_at": "2021-08-21T21:56:37Z",
      "source": {
        "issue": {
          "id": 976128571,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NzE3MTQ2OTgz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22762",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22762/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22762/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22762/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22762",
          "number": 22762,
          "state": "closed",
          "state_reason": null,
          "title": "Raise InitError when peers.dat is invalid or corrupted",
          "body": "peers.dat is silently erased when it can not be parsed or when it appears corrupted. Fix that by notifying the user. This might help in the following examples:\r\n\r\n* The user provided the database, but picked the wrong one.\r\n* A future version of Bitcoin Core wrote the file and it can't be read.\r\n* The file was corrupted by a logic bug in Bitcoin Core.\r\n* The file was corrupted by a disk failure.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22762",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22762",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22762.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22762.patch"
          },
          "closed_at": "2021-09-10T09:42:28Z",
          "created_at": "2021-08-21T12:41:20Z",
          "updated_at": "2022-10-30T19:09:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 738819376,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4ODE5Mzc2",
      "url": null,
      "actor": null,
      "commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-738819376",
      "submitted_at": "2021-08-25T20:53:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 738822052,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4ODIyMDUy",
      "url": null,
      "actor": null,
      "commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-738822052",
      "submitted_at": "2021-08-25T20:56:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "commented",
      "id": 905874131,
      "node_id": "IC_kwDOABII5841_orT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905874131",
      "actor": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T21:06:01Z",
      "updated_at": "2021-08-25T21:06:01Z",
      "author_association": "NONE",
      "body": "Approach ACK [4646392](https://github.com/bitcoin/bitcoin/pull/20487/commits/4646392e628ffd958d18d32cfdc44e53290de017)\r\n\r\nOther than a few minor suggestions, everything looks great! Like @ryanofsky, I'm relatively new to seccomp, but from what I've read, looks good to me. Will keep reading up on seccomp, and do a more in-depth review.\r\n\r\nNot necessarily needed in this PR: what are your thoughts on `#ifdef`ing x86_64 specific seccomp features/syscalls for easier support of other platforms like ARM and MIPS?",
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-905874131",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "mentioned",
      "id": 5209325998,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTIwOTMyNTk5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5209325998",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T21:06:01Z"
    },
    {
      "event": "subscribed",
      "id": 5209326000,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUyMDkzMjYwMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5209326000",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T21:06:01Z"
    },
    {
      "event": "commented",
      "id": 913176181,
      "node_id": "IC_kwDOABII5842bfZ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/913176181",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-05T15:31:46Z",
      "updated_at": "2021-09-05T15:31:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Approach ACK [4646392](https://github.com/bitcoin/bitcoin/pull/20487/commits/4646392e628ffd958d18d32cfdc44e53290de017)\r\n\r\nThanks for reviewing!\r\n\r\n> Not necessarily needed in this PR: what are your thoughts on `#ifdef`ing x86_64 specific seccomp features/syscalls for easier support of other platforms like ARM and MIPS?\r\n\r\nThe entire feature is currently `#ifdef`:ed on x86_64. That can be made more fine-grained in the future if/when support for this feature to the first non-x86_64 platform is added :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-913176181",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "labeled",
      "id": 5260232816,
      "node_id": "LE_lADOABII584svfUIzwAAAAE5iMhw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5260232816",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-06T10:11:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5285988073,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAE7Ecbp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5285988073",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-10T18:38:55Z"
    },
    {
      "event": "unlabeled",
      "id": 5286425536,
      "node_id": "UNLE_lADOABII584svfUIzwAAAAE7GHPA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5286425536",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-10T20:29:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5287266562,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAE7JUkC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5287266562",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-11T06:36:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5287972381,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAE7MA4d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5287972381",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-11T20:06:03Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-12T15:23:36Z",
      "updated_at": "2021-09-12T15:23:36Z",
      "source": {
        "issue": {
          "id": 994161044,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NzMyMTYxOTUw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22956",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22956/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22956/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22956/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22956",
          "number": 22956,
          "state": "closed",
          "state_reason": null,
          "title": "validation: log CChainState::CheckBlockIndex() consistency checks",
          "body": "The `-checkblockindex` configuration option performs occasional consistency checks of the block tree, chainstate, and other validation data structures.\r\n\r\nThere is currently no logging of the checks to see when they happen and their duration.\r\n\r\nThis patch:\r\n- adds a `BLOCK` logging category, as the validation category is high-frequency\r\n- logs the `CChainState::CheckBlockIndex()` consistency checks and duration\r\n\r\nExample (on signet, while catching up to chain tip):\r\n\r\n```\r\n$ ./src/bitcoind -signet -checkaddrman=10 -debug=lock -debug=block\r\n...\r\n2021-09-12T13:03:18Z [msghand] CheckBlockIndex: consistency checks started\r\n2021-09-12T13:03:18Z [opencon] Enter: lock contention cs_main, net_processing.cpp:1152 started\r\n2021-09-12T13:03:18Z [msghand] CheckBlockIndex: consistency checks completed (433.58ms)\r\n2021-09-12T13:03:18Z [msghand] CheckBlockIndex: consistency checks started\r\n2021-09-12T13:03:19Z [msghand] CheckBlockIndex: consistency checks completed (411.67ms)\r\n2021-09-12T13:03:19Z [opencon] Enter: lock contention cs_main, net_processing.cpp:1152 completed (811929μs)\r\n```\r\n\r\nTo test:\r\n\r\n`$ ./src/bitcoind -debug=block`",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22956",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22956",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22956.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22956.patch"
          },
          "closed_at": "2022-05-25T08:36:27Z",
          "created_at": "2021-09-12T13:34:44Z",
          "updated_at": "2023-05-25T10:03:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-13T01:14:12Z",
      "updated_at": "2021-09-13T01:14:12Z",
      "source": {
        "issue": {
          "id": 192504141,
          "node_id": "MDExOlB1bGxSZXF1ZXN0OTU4NDcyMjk=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9245",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9245/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9245/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9245/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/9245",
          "number": 9245,
          "state": "closed",
          "state_reason": null,
          "title": "Drop IO priority to idle while reading blocks for peer requests and startup verification",
          "body": null,
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 219890555,
              "node_id": "MDU6TGFiZWwyMTk4OTA1NTU=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Block%20storage",
              "name": "Block storage",
              "color": "000000",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 45,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9245",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/9245",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/9245.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/9245.patch"
          },
          "closed_at": "2023-06-02T14:58:55Z",
          "created_at": "2016-11-30T08:29:55Z",
          "updated_at": "2023-06-02T14:58:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5322333845,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAE9PF6V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5322333845",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-18T04:31:10Z"
    },
    {
      "event": "reviewed",
      "id": 758972971,
      "node_id": "PRR_kwDOABII584tPQIr",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758972971",
      "submitted_at": "2021-09-20T18:37:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758974028,
      "node_id": "PRR_kwDOABII584tPQZM",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758974028",
      "submitted_at": "2021-09-20T18:38:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758977541,
      "node_id": "PRR_kwDOABII584tPRQF",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758977541",
      "submitted_at": "2021-09-20T18:42:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758981977,
      "node_id": "PRR_kwDOABII584tPSVZ",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758981977",
      "submitted_at": "2021-09-20T18:47:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758987460,
      "node_id": "PRR_kwDOABII584tPTrE",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758987460",
      "submitted_at": "2021-09-20T18:53:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758989970,
      "node_id": "PRR_kwDOABII584tPUSS",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758989970",
      "submitted_at": "2021-09-20T18:56:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758992177,
      "node_id": "PRR_kwDOABII584tPU0x",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758992177",
      "submitted_at": "2021-09-20T18:58:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "commented",
      "id": 923196019,
      "node_id": "IC_kwDOABII5843Btpz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923196019",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-20T19:02:07Z",
      "updated_at": "2021-09-20T19:02:07Z",
      "author_association": "MEMBER",
      "body": "Code review and lightly tested ACK. Sorry for only getting around to this now.\r\nIt looks good to me. Found no serious issues but left some nits.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-923196019",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "reviewed",
      "id": 759009573,
      "node_id": "PRR_kwDOABII584tPZEl",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-759009573",
      "submitted_at": "2021-09-20T19:19:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5388486802,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAFBLciS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5388486802",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-30T15:11:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5394510882,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAFBibQi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5394510882",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-01T13:42:48Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ3NDdkYTNhNWI2MzliNWEzMzZiNzM3ZTdlM2NiZjA2MGNmMmVmY2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "tree": {
        "sha": "c375c8eff3a7f4b02f66247b52dfee286e7fcbae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c375c8eff3a7f4b02f66247b52dfee286e7fcbae"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e69cbac628bfdca4a8e4ead821190eaf5b6b3d07",
          "sha": "e69cbac628bfdca4a8e4ead821190eaf5b6b3d07",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e69cbac628bfdca4a8e4ead821190eaf5b6b3d07"
        }
      ],
      "message": "Add syscall sandboxing (seccomp-bpf)",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-10-01T13:51:10Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-10-01T13:53:59Z"
      },
      "sha": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5394585449,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAFBitdp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5394585449",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-01T13:54:20Z"
    },
    {
      "event": "subscribed",
      "id": 5395004315,
      "node_id": "SE_lADOABII584svfUIzwAAAAFBkTub",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5395004315",
      "actor": {
        "login": "Sidharth150",
        "id": 75365432,
        "node_id": "MDQ6VXNlcjc1MzY1NDMy",
        "avatar_url": "https://avatars.githubusercontent.com/u/75365432?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sidharth150",
        "html_url": "https://github.com/Sidharth150",
        "followers_url": "https://api.github.com/users/Sidharth150/followers",
        "following_url": "https://api.github.com/users/Sidharth150/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sidharth150/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sidharth150/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sidharth150/subscriptions",
        "organizations_url": "https://api.github.com/users/Sidharth150/orgs",
        "repos_url": "https://api.github.com/users/Sidharth150/repos",
        "events_url": "https://api.github.com/users/Sidharth150/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sidharth150/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-01T14:58:38Z"
    },
    {
      "event": "commented",
      "id": 933777772,
      "node_id": "IC_kwDOABII5843qFFs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933777772",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T19:14:22Z",
      "updated_at": "2021-10-04T19:14:22Z",
      "author_association": "MEMBER",
      "body": "Code review and lightly tested ACK 4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-933777772",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "merged",
      "id": 5406591219,
      "node_id": "ME_lADOABII584svfUIzwAAAAFCQgjz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5406591219",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9e530c6352c3e3d4f2936bbbb1bcb34ff9ca6378",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e530c6352c3e3d4f2936bbbb1bcb34ff9ca6378",
      "created_at": "2021-10-04T20:46:14Z"
    },
    {
      "event": "closed",
      "id": 5406591242,
      "node_id": "CE_lADOABII584svfUIzwAAAAFCQgkK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5406591242",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T20:46:15Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T20:57:30Z",
      "updated_at": "2021-10-04T20:57:30Z",
      "source": {
        "issue": {
          "id": 1015626793,
          "node_id": "I_kwDOABII5848iTwp",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23177",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23177/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23177/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23177/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/23177",
          "number": 23177,
          "state": "closed",
          "state_reason": "completed",
          "title": "Other platform support for Linux syscall sandboxing",
          "body": "Now that #20487 is merged, it would be nice if syscall sandboxing was extended to the other Linux platforms that have release binaries as well:\r\n\r\n- [x] `x86_64-linux-gnu` \r\n- [ ] `arm-linux-gnueabihf `\r\n- [ ] `aarch64-linux-gnu`\r\n- [ ] `riscv64-linux-gnu`\r\n- [ ] `powerpc64-linux-gnu`\r\n- [ ] `powerpc64le-linux-gnu`\r\n",
          "user": {
            "login": "laanwj",
            "id": 126646,
            "node_id": "MDQ6VXNlcjEyNjY0Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/laanwj",
            "html_url": "https://github.com/laanwj",
            "followers_url": "https://api.github.com/users/laanwj/followers",
            "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
            "organizations_url": "https://api.github.com/users/laanwj/orgs",
            "repos_url": "https://api.github.com/users/laanwj/repos",
            "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/laanwj/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 234878,
              "node_id": "MDU6TGFiZWwyMzQ4Nzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Linux/Unix",
              "name": "Linux/Unix",
              "color": "770000",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 1,
          "closed_at": "2022-04-14T04:43:15Z",
          "created_at": "2021-10-04T20:57:30Z",
          "updated_at": "2023-04-14T14:43:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T22:11:51Z",
      "updated_at": "2021-10-04T22:11:51Z",
      "source": {
        "issue": {
          "id": 1015682265,
          "node_id": "PR_kwDOABII584sqiJq",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23178",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23178/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23178/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23178/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23178",
          "number": 23178,
          "state": "closed",
          "state_reason": null,
          "title": "util: Fix GUIX build with syscall sandbox",
          "body": "Looks like we've broke the GUIX build in #20487. This attempts to fix it:\r\n\r\n- Define `__NR_statx` `__NR_getrandom` `__NR_membarrier` as some kernel headers lack them, and it's important to have the same profile independent on what kernel is used for building.\r\n- Define `SECCOMP_RET_KILL_PROCESS` as it isn't defined in the headers.",
          "user": {
            "login": "laanwj",
            "id": 126646,
            "node_id": "MDQ6VXNlcjEyNjY0Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/laanwj",
            "html_url": "https://github.com/laanwj",
            "followers_url": "https://api.github.com/users/laanwj/followers",
            "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
            "organizations_url": "https://api.github.com/users/laanwj/orgs",
            "repos_url": "https://api.github.com/users/laanwj/repos",
            "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/laanwj/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23178",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23178",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23178.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23178.patch"
          },
          "closed_at": "2021-10-05T14:50:55Z",
          "created_at": "2021-10-04T22:11:50Z",
          "updated_at": "2022-10-30T19:07:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5407170767,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCSuDP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5407170767",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "48e1f25efb9eb15a68a01428f2b5e5899a498160",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/48e1f25efb9eb15a68a01428f2b5e5899a498160",
      "created_at": "2021-10-04T23:17:56Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T00:44:18Z",
      "updated_at": "2021-10-05T00:44:18Z",
      "source": {
        "issue": {
          "id": 1015767452,
          "node_id": "PR_kwDOABII584sqzBR",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23179",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23179/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23179/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23179/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23179",
          "number": 23179,
          "state": "closed",
          "state_reason": null,
          "title": "sandbox: add `newfstatat` & `copy_file_range` to allowed filesystem syscalls",
          "body": "Similar to #23178, this is a follow up to #20487, which has broken running the unit tests for some developers. Fix this by adding `newfstatat` to the list of allowed filesystem related calls.",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23179",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23179",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23179.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23179.patch"
          },
          "closed_at": "2021-10-05T09:36:08Z",
          "created_at": "2021-10-05T00:44:17Z",
          "updated_at": "2022-10-30T19:07:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 771119135,
      "node_id": "PRR_kwDOABII584t9lgf",
      "url": null,
      "actor": null,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-771119135",
      "submitted_at": "2021-10-05T08:14:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "referenced",
      "id": 5409432848,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCbWUQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5409432848",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c79d9fb2f6e5f47dcb0ac45d66a542dad0c8e7e4",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c79d9fb2f6e5f47dcb0ac45d66a542dad0c8e7e4",
      "created_at": "2021-10-05T09:36:07Z"
    },
    {
      "event": "referenced",
      "id": 5411353797,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCirTF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5411353797",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6360e632d29549410af9c6075574f961dcee828c",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/6360e632d29549410af9c6075574f961dcee828c",
      "created_at": "2021-10-05T14:49:50Z"
    },
    {
      "event": "referenced",
      "id": 5411360875,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCitBr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5411360875",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "89b910711c004c21b7d67baa888073742f7f94f0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89b910711c004c21b7d67baa888073742f7f94f0",
      "created_at": "2021-10-05T14:50:53Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T17:43:41Z",
      "updated_at": "2021-10-05T17:43:41Z",
      "source": {
        "issue": {
          "id": 1016602481,
          "node_id": "PR_kwDOABII584staPo",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23196",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23196/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23196/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23196/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23196",
          "number": 23196,
          "state": "closed",
          "state_reason": null,
          "title": "util: Make syscall sandbox compilable with kernel 4.4.0",
          "body": "Make the new syscall sandbox compilable with kernel 4.4.0.\r\nThis defines a further syscall constant `__NR_copy_file_range` to make sure all syscalls used in the profile are available even if not defined in the kernel headers.\r\n\r\nAlso, make a few syscalls optional in the syscall name table:\r\n\r\n- `__NR_pkey_alloc`\r\n- `__NR_pkey_free`\r\n- `__NR_pkey_mprotect`\r\n- `__NR_preadv2`\r\n- `__NR_pwritev2`",
          "user": {
            "login": "laanwj",
            "id": 126646,
            "node_id": "MDQ6VXNlcjEyNjY0Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/laanwj",
            "html_url": "https://github.com/laanwj",
            "followers_url": "https://api.github.com/users/laanwj/followers",
            "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
            "organizations_url": "https://api.github.com/users/laanwj/orgs",
            "repos_url": "https://api.github.com/users/laanwj/repos",
            "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/laanwj/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23196",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23196",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23196.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23196.patch"
          },
          "closed_at": "2021-10-07T12:39:39Z",
          "created_at": "2021-10-05T17:40:55Z",
          "updated_at": "2022-10-30T19:07:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 934649621,
      "node_id": "IC_kwDOABII5843tZ8V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934649621",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T18:14:27Z",
      "updated_at": "2021-10-05T18:14:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Just curious, but merging this seems to have caused a few build problems that required followups: #23178 #23179 #23196, and I guess some test problems in local developer checkouts.\r\n\r\nI'm wondering if there are any CI improvements that might have caught these problems. Are too many of the CI builds using old kernels, and could adding CI builds with newer kernels catch these problems? Are too many of the CI builds using depends and could adding CI builds with system dependencies catch these problems? Is there some extended draftbot build that might have caught these problems?\r\n\r\nIt seems like it could make sense to run some extended CI on PRs that modify `configure.ac` or build scripts, but not clear what might have been useful in this case.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-934649621",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 934676958,
      "node_id": "IC_kwDOABII5843tgne",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934676958",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T18:48:56Z",
      "updated_at": "2021-10-05T18:49:57Z",
      "author_association": "MEMBER",
      "body": "> could adding CI builds with newer kernels catch these problems\r\n\r\nFor the record, it's not the running kernel version that makes a difference here. But the kernel headers. What would have helped find the problem is compiling with older kernel headers. We also should have done a GUIX build.\r\n\r\nIt's the first time these matter at all for our compilation. Besides `syscall(SYS_getrandom…` for random context gathering, there is no code that directly interfaces with the Linux kernel at all.\r\n\r\nI think it's a good lesson that we need to make sure to define everything we need from the kernel ourselves, to support compilation on a wide range of installations. I knew about this problem but underestimated how much it's still a problem nowadays.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-934676958",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 934703453,
      "node_id": "IC_kwDOABII5843tnFd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934703453",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T19:20:37Z",
      "updated_at": "2021-10-05T19:20:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "I just don't understand the basics here. What CI build could you theoretically add to catch these problems? Would it be a CI build with a really old kernel and really old headers? A really new kernel and new headers? An old kernel with new headers? And new kernel with old headers?",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-934703453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "referenced",
      "id": 5413712113,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCrrDx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5413712113",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5c90f6b9a3a81fdaa642a8e67e9a4f3c8e61360d",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/5c90f6b9a3a81fdaa642a8e67e9a4f3c8e61360d",
      "created_at": "2021-10-05T21:20:06Z"
    },
    {
      "event": "labeled",
      "id": 5417893958,
      "node_id": "LE_lADOABII584svfUIzwAAAAFC7oBG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5417893958",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T09:04:26Z",
      "label": {
        "name": "DrahtBot Guix build requested",
        "color": "bfd4f2"
      }
    },
    {
      "event": "unlabeled",
      "id": 5417894584,
      "node_id": "UNLE_lADOABII584svfUIzwAAAAFC7oK4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5417894584",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T09:04:31Z",
      "label": {
        "name": "DrahtBot Guix build requested",
        "color": "bfd4f2"
      }
    },
    {
      "event": "commented",
      "id": 935805691,
      "node_id": "IC_kwDOABII5843x0L7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935805691",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T09:10:20Z",
      "updated_at": "2021-10-06T09:11:05Z",
      "author_association": "MEMBER",
      "body": "> Are too many of the CI builds using old kernels, and could adding CI builds with newer kernels catch these problems?\r\n\r\nGenerally developers tend to run the latest software, so this is usually not something that will catch a lot of fish as a CI task. In fact, CI tasks with bleeding edge software might tend to break more often. (I do run them, but not part of this project).\r\n\r\n> Is there some extended draftbot build that might have caught these problems?\r\n\r\nSimply adding the \"DrahtBot Guix build requested\" label would have caught this. I think any pull request that is tagged with \"Build system\" should be Guix-built as well. As DrahtBot is running on limited resources, it might take a day or two to create the guix build, but I think this is an acceptable delay. If there is an \"emergency-fix\" devs can always do a local guix build.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-935805691",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 935894871,
      "node_id": "IC_kwDOABII5843yJ9X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935894871",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T10:06:47Z",
      "updated_at": "2021-10-06T10:06:47Z",
      "author_association": "MEMBER",
      "body": "And when it comes to preventing build errors via the CI, I think this is not something we should try to achieve at all costs. Due to compiler bugs (or just software bugs in general), there will always be at least one software configuration and build flag configuration that will fail to build. I think it is reasonable to have tests for common software configurations on the latest LTS releases of operating systems. Though, when it comes to supporting any software configuration, waiting for an actual user to report the issue instead of integrating into the CI works probably better.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-935894871",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 936143228,
      "node_id": "IC_kwDOABII5843zGl8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/936143228",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T12:29:25Z",
      "updated_at": "2021-10-06T12:29:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the replies. So is the answer to my question of what CI build would catch all these problems (#23178 #23179 #23196) that any CI build using newer kernel headers would catch all these problems? That all CI builds are using older headers and practicalswift was also using older headers, and this slipped past review?\r\n\r\nMy motivation for asking is just to understand when I am reviewing a PR what class of errors I could expect CI to catch, and what class of errors I should be testing manually or asking the PR author about. In this case, I guess I failed to ask practicalswift how is this code affected when new syscalls are added? And in the future, when I'm reviewing a PR that makes significant changes to the build system, I can request GUIX builds?\r\n\r\nI don't really have opinions on what CI should check for. I just want to understand what CI **is** checking for so I can review PRs better. For example, it is useful to know if CI is only checking old kernels and we are depending on developers to manually test newer kernels. It is also useful to know more generally if CI builds tend to use older or different dependencies than actual the GUIX release.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-936143228",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 936161133,
      "node_id": "IC_kwDOABII5843zK9t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/936161133",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T12:41:01Z",
      "updated_at": "2021-10-06T12:41:01Z",
      "author_association": "MEMBER",
      "body": "> I can request GUIX builds?\r\n\r\nSure, just add the label.\r\n\r\n> It is also useful to know more generally if CI builds tend to use older or different dependencies than actual the GUIX release.\r\n\r\nCI is a mix of cross-compile depends builds that try to mimic guix (older LTS releases with older gcc-8) and recent `clang` with native sanitizer builds from system packages (except for msan, which is also using depends). Obviously Ubuntu/Debian ship different compilers than guix, so the CI is just a proxy and not a replacement for a guix build.\r\n\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-936161133",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "removed_from_project",
      "id": 5430529668,
      "node_id": "RFPE_lADOABII584svfUIzwAAAAFDr06E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5430529668",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-07T19:07:37Z",
      "project_card": {
        "id": 61680680,
        "url": "https://api.github.com/projects/columns/cards/61680680",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-11T13:02:42Z",
      "updated_at": "2021-10-11T13:02:42Z",
      "source": {
        "issue": {
          "id": 1022522427,
          "node_id": "I_kwDOABII58488nQ7",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23248",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23248/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23248/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23248/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/23248",
          "number": 23248,
          "state": "closed",
          "state_reason": "completed",
          "title": "Bitcoin Core crashes under clang-13 libc++ with \"Bad system call (core dumped)\"",
          "body": "Steps to reproduce:\r\n* Install fresh Ubuntu Impish\r\n* Compile Bitcoin Core with `export DEBIAN_FRONTEND=noninteractive && apt update && apt install curl wget htop git vim ccache -y && git clone https://github.com/bitcoin/bitcoin.git ./bitcoin-core && cd bitcoin-core && apt install libc++abi-13-dev libc++-13-dev clang llvm gdb build-essential libtool libunwind-dev autotools-dev automake pkg-config bsdmainutils python3-zmq      make automake cmake curl g++-multilib libtool binutils-gold bsdmainutils pkg-config python3 patch bison        -y  && cd depends && make CC=clang-13 CXX=\"clang++-13 -stdlib=libc++\" NO_QT=1 NO_WALLET=1 NO_ZMQ=1 NO_UPNP=1 NO_NATPMP=1 -j $(nproc) && cd .. &&  ./autogen.sh && CONFIG_SITE=\"$PWD/depends/x86_64-pc-linux-gnu/share/config.site\" ./configure CC=clang-13 CXX=\"clang++-13 -stdlib=libc++\" && make -j $(nproc) src/bitcoind`\r\n* Run gdb: `gdb --args ./src/bitcoind -sandbox=log-and-abort -datadir=/tmp -regtest`\r\n* `run`\r\n\r\n```\r\n(gdb) run\r\nStarting program: /bitcoin-core/src/bitcoind -sandbox=log-and-abort -datadir=/tmp -regtest\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\n\r\nProgram received signal SIGSYS, Bad system call.\r\n0x00007ffff7c94cbb in mincore () at ../sysdeps/unix/syscall-template.S:117\r\n117\t../sysdeps/unix/syscall-template.S: No such file or directory.\r\n(gdb) bt\r\n#0  0x00007ffff7c94cbb in mincore () at ../sysdeps/unix/syscall-template.S:117\r\n#1  0x00007ffff7ed6a8a in ?? () from /lib/x86_64-linux-gnu/libunwind.so.8\r\n#2  0x00007ffff7ed6562 in ?? () from /lib/x86_64-linux-gnu/libunwind.so.8\r\n#3  0x00007ffff7ed6e1a in ?? () from /lib/x86_64-linux-gnu/libunwind.so.8\r\n#4  0x00007ffff7ed5dd0 in __libunwind_Unwind_RaiseException () from /lib/x86_64-linux-gnu/libunwind.so.8\r\n#5  0x00007ffff7ec1405 in __cxa_throw () from /lib/x86_64-linux-gnu/libc++abi.so.1\r\n#6  0x00007ffff7f3a865 in ?? () from /lib/x86_64-linux-gnu/libc++.so.1\r\n#7  0x00007ffff7f3a82d in std::__1::__basic_string_common<true>::__throw_out_of_range() const () from /lib/x86_64-linux-gnu/libc++.so.1\r\n#8  0x00007ffff7f3aa46 in ?? () from /lib/x86_64-linux-gnu/libc++.so.1\r\n#9  0x00007ffff7f3c124 in std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::at(unsigned long) () from /lib/x86_64-linux-gnu/libc++.so.1\r\n#10 0x0000555555946314 in sanity_test_range_fmt() ()\r\n#11 0x00005555559464ca in glibcxx_sanity_test() ()\r\n#12 0x00005555558c68df in init::SanityChecks() ()\r\n#13 0x00005555555a4e11 in AppInitSanityChecks() ()\r\n#14 0x0000555555590ecf in main ()\r\n```\r\n\r\nThere are two issues:\r\n\r\n* `log-and-abort` doesn't log\r\n* It crashes",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64585,
              "node_id": "MDU6TGFiZWw2NDU4NQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
              "name": "Bug",
              "color": "FBBAAB",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 12,
          "closed_at": "2021-10-11T14:09:37Z",
          "created_at": "2021-10-11T10:17:51Z",
          "updated_at": "2022-10-30T19:07:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-11T14:28:46Z",
      "updated_at": "2021-10-11T14:28:46Z",
      "source": {
        "issue": {
          "id": 1022753060,
          "node_id": "PR_kwDOABII584tBVNd",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23255",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23255/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23255/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23255/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23255",
          "number": 23255,
          "state": "closed",
          "state_reason": null,
          "title": "util: Add mincore and clone3 to syscall sandbox",
          "body": "Closes #23248 ",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23255",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23255",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23255.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23255.patch"
          },
          "closed_at": "2021-10-12T00:47:41Z",
          "created_at": "2021-10-11T14:09:19Z",
          "updated_at": "2022-10-30T19:07:28Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-26T15:22:56Z",
      "updated_at": "2021-10-26T15:22:56Z",
      "source": {
        "issue": {
          "id": 1036442681,
          "node_id": "I_kwDOABII5849xtw5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23363/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23363/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23363/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/23363",
          "number": 23363,
          "state": "open",
          "state_reason": "reopened",
          "title": "Discussion: Upgrading to C++20",
          "body": "(Previous discussion (C++17): https://github.com/bitcoin/bitcoin/issues/16684)\r\n\r\nWith package managers shipping newer versions of compilers and older releases of operating systems going EOL, it occurs that at some point in the future it will be almost uncontroversial to switch to C++20.\r\n\r\nSee the new features here: https://en.cppreference.com/w/cpp/compiler_support#cpp20\r\n\r\nI think noteworthy are:\r\n\r\n*  <strike>Lambdas in unevaluated contexts: It will be possible to use `Assert(...)` (a lambda) inside another lambda. </strike> (Already fixed by https://github.com/bitcoin/bitcoin/pull/24714 )\r\n*  <strike>Designated initializers: Named arguments for constructors, see also https://github.com/bitcoin/bitcoin/pull/20487#discussion_r721997392 </strike> (Already fixed by https://github.com/bitcoin/bitcoin/pull/24531)\r\n*  std::span: Replacing our `Span`, see also #23226 \r\n* Epoch for std::chrono: Being able to remove `ChronoSanityCheck` from #21110 \r\n* Remove gmtime, https://github.com/bitcoin/bitcoin/pull/27233#discussion_r1146019853\r\n* Some better deduction guides (e.g. https://github.com/bitcoin/bitcoin/blob/16d698cdcf3c4ef34bae4ccd616d0ddc4a7165d4/src/util/overloaded.h#L18 )\r\n* \"Key equivalence stuff\" (?) from #19677\r\n* consteval https://github.com/bitcoin/bitcoin/pull/26960#issuecomment-1403565628\r\n* concepts https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1246430456\r\n* https://github.com/bitcoin/bitcoin/pull/27401\r\n* https://github.com/bitcoin/bitcoin/pull/28065#discussion_r1262934214\r\n\r\nOverall this doesn't look like massive improvements, so switching to C++20 is probably low(est) priority.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/61",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61/labels",
            "id": 9334188,
            "node_id": "MI_kwDOABII584Ajm2s",
            "number": 61,
            "state": "open",
            "title": "27.0",
            "description": "",
            "creator": {
              "login": "sipa",
              "id": 548488,
              "node_id": "MDQ6VXNlcjU0ODQ4OA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sipa",
              "html_url": "https://github.com/sipa",
              "followers_url": "https://api.github.com/users/sipa/followers",
              "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
              "organizations_url": "https://api.github.com/users/sipa/orgs",
              "repos_url": "https://api.github.com/users/sipa/repos",
              "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/sipa/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 1,
            "closed_issues": 2,
            "created_at": "2023-04-27T08:01:57Z",
            "updated_at": "2023-06-29T10:50:02Z"
          },
          "locked": false,
          "comments": 9,
          "created_at": "2021-10-26T15:22:56Z",
          "updated_at": "2023-07-13T18:42:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 805901705,
      "node_id": "PRR_kwDOABII584wCRWJ",
      "url": null,
      "actor": null,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-805901705",
      "submitted_at": "2021-11-15T10:44:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-05T10:31:11Z",
      "updated_at": "2022-04-05T10:31:11Z",
      "source": {
        "issue": {
          "id": 1192945670,
          "node_id": "I_kwDOABII585HGugG",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24771",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24771/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24771/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24771/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/24771",
          "number": 24771,
          "state": "closed",
          "state_reason": "completed",
          "title": "Outcome of the syscall sandbox experiment",
          "body": "I think after having it integrated for a whlie (see #20487) it's time to reflect on the status of the experimental syscall sandbox.\r\n\r\nIt was worth a try, but personally I have come to the conclusion that it's unmaintainable, I don't think this is something we can ever enable by default for end users.\r\n\r\nIn practice it's haphazard whack-a-mole any time a syscall comes up and a crash happens. There's no structure or plan to it, nor an end in sight. See e.g #24659 #24369 #24340  #23555 #23299 #23255 #23208 #23179.\r\n\r\nThe whole idea of a syscall sandbox is fundamentally a layer violation. It's untenable when dynamic linking is involved, or dependencies we don't know A to Z, with evolving user-kernel space APIs. See also discussion here: https://github.com/bitcoin/bitcoin/pull/24758#issuecomment-1088507575\r\n\r\nI'm also not sure it addresses relevant risks in our case. The P2P thread communicates with the outside world and the scope of an exploit to gain full RCE can ostensibly be restricted by sandboxing it. However there are bigger risks within the bitcoind/-qt process itself: messing with consensus code, stealing wallet keys. A thread-based sandbox provides only minimal protection here.\r\n\r\nIt's also single platform (Linux x86_64), and all the work would basically be duplicated for each platform added as the syscalls differ subtly.",
          "user": {
            "login": "laanwj",
            "id": 126646,
            "node_id": "MDQ6VXNlcjEyNjY0Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/laanwj",
            "html_url": "https://github.com/laanwj",
            "followers_url": "https://api.github.com/users/laanwj/followers",
            "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
            "organizations_url": "https://api.github.com/users/laanwj/orgs",
            "repos_url": "https://api.github.com/users/laanwj/repos",
            "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/laanwj/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 234878,
              "node_id": "MDU6TGFiZWwyMzQ4Nzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Linux/Unix",
              "name": "Linux/Unix",
              "color": "770000",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "closed_at": "2023-06-27T22:19:32Z",
          "created_at": "2022-04-05T10:31:11Z",
          "updated_at": "2023-06-27T22:19:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "locked",
      "id": 7813838001,
      "node_id": "LOE_lADOABII584svfUIzwAAAAHRvbSx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7813838001",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-15T13:10:39Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531398564",
      "pull_request_review_id": 539726171,
      "id": 531398564,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5ODU2NA==",
      "diff_hunk": "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "54df39b5c42ebf572d325c1991e5d911577b711d",
      "in_reply_to_id": null,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not make syscomp opt-out? I think secure by default is a better idea :-)",
      "created_at": "2020-11-27T06:05:34Z",
      "updated_at": "2021-04-28T11:43:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r531398564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531398564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532381288",
      "pull_request_review_id": 540637781,
      "id": 532381288,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MTI4OA==",
      "diff_hunk": "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "54df39b5c42ebf572d325c1991e5d911577b711d",
      "in_reply_to_id": 531398564,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC there was a discussion about something similar here #17419\r\nHowever it is a bit weird and in transparent IMO to have things enabled in a dev build and others in a release build (beside some warnings of course).",
      "created_at": "2020-11-30T06:59:25Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532381288",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532381288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546437834",
      "pull_request_review_id": 556062566,
      "id": 546437834,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzNzgzNA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+/*\n+ * seccomp example for x86 (32-bit and 64-bit) with BPF macros\n+ *\n+ * Copyright (c) 2012 The Chromium OS Authors <chromium-os-dev@chromium.org>\n+ * Authors:\n+ *  Will Drewry <wad@chromium.org>\n+ *  Kees Cook <keescook@chromium.org>\n+ *\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+#ifndef _SECCOMP_BPF_H_\n+#define _SECCOMP_BPF_H_\n+\n+#define _GNU_SOURCE 1\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <errno.h>\n+#include <signal.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <sys/prctl.h>\n+#ifndef PR_SET_NO_NEW_PRIVS\n+# define PR_SET_NO_NEW_PRIVS 38\n+#endif\n+\n+#include <linux/unistd.h>\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#ifdef HAVE_LINUX_SECCOMP_H\n+# include <linux/seccomp.h>\n+#endif\n+#ifndef SECCOMP_MODE_FILTER\n+# define SECCOMP_MODE_FILTER    2 /* uses user-supplied filter. */\n+# define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */",
      "path": "src/compat/seccomp-bpf.h",
      "position": null,
      "original_position": 37,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "dbad7bdb947da66b60db057c5b03c11819438257",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note to self:\r\n\r\nWe should probably use `SECCOMP_RET_KILL_PROCESS` action (kill the entire process) instead of `SECCOMP_RET_KILL_THREAD/SECCOMP_RET_KILL` (kill the task) on syscall violation.\r\n\r\nThe `SECCOMP_RET_KILL_PROCESS` action was introduced in Linux 4.14. Could read `/proc/sys/kernel/seccomp/actions_avail` to see available actions.\r\n\r\nPerhaps this feature should be possible to enable only for systems running Linux 4.14 or newer.\r\n\r\nContext: https://lkml.org/lkml/2017/8/11/807",
      "created_at": "2020-12-20T21:19:40Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r546437834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546437834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574059971",
      "pull_request_review_id": 588032516,
      "id": 574059971,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDA1OTk3MQ==",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another self-review:\r\n\r\nInstead of opt-ing out of debug mode via an environment variable we should make it the other way around: the debug mode should be opt-in via `--enable-debug`.\r\n\r\nIn other words: `SECCOMP_RET_KILL_PROCESS` should be the default action, and `SECCOMP_RET_TRAP` should only be used if compiled with `--enable-debug`.\r\n\r\nBackground:\r\n\r\nWhen using `SECCOMP_RET_KILL_PROCESS` the kernel immediately kills off the offending process in case of a syscall violation.\r\n\r\nWhen using `SECCOMP_RET_TRAP` the kernel sends a `SIGSYS` signal to the offending process in case of a syscall violation: that allows us to print a user-friendly error message via a signal handler. Note that the attacker may be able to control the execution in the signal handler (although still with restricted syscall access), so this `SECCOMP_RET_TRAP` mode should really only be used when debugging.",
      "created_at": "2021-02-10T20:38:39Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r574059971",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574059971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595237523",
      "pull_request_review_id": 613335228,
      "id": 595237523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTIzNzUyMw==",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "in_reply_to_id": 574059971,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure on this. I do think feedback to the user is very important. I am slightly worried when if our syscall profile isn't 100% up to date (my experience is that this can *easily* happen especially with dynamically linked glibc), something starts killing the process without any means to diagnose or debug, that's extremely frustrating.",
      "created_at": "2021-03-16T14:44:28Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595237523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595237523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595250356",
      "pull_request_review_id": 613351768,
      "id": 595250356,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI1MDM1Ng==",
      "diff_hunk": "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "54df39b5c42ebf572d325c1991e5d911577b711d",
      "in_reply_to_id": 531398564,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think enabling it by default should be considered in the PR first introducing this. It is absolutely something that needs experimentation and testing and fine-tuning, in different environments.",
      "created_at": "2021-03-16T14:55:59Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595250356",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595250356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595266898",
      "pull_request_review_id": 613374088,
      "id": 595266898,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI2Njg5OA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+/*\n+ * seccomp example for x86 (32-bit and 64-bit) with BPF macros\n+ *\n+ * Copyright (c) 2012 The Chromium OS Authors <chromium-os-dev@chromium.org>\n+ * Authors:\n+ *  Will Drewry <wad@chromium.org>\n+ *  Kees Cook <keescook@chromium.org>\n+ *\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+#ifndef _SECCOMP_BPF_H_\n+#define _SECCOMP_BPF_H_\n+\n+#define _GNU_SOURCE 1\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <errno.h>\n+#include <signal.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <sys/prctl.h>\n+#ifndef PR_SET_NO_NEW_PRIVS\n+# define PR_SET_NO_NEW_PRIVS 38\n+#endif\n+\n+#include <linux/unistd.h>\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#ifdef HAVE_LINUX_SECCOMP_H\n+# include <linux/seccomp.h>\n+#endif\n+#ifndef SECCOMP_MODE_FILTER\n+# define SECCOMP_MODE_FILTER    2 /* uses user-supplied filter. */\n+# define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */",
      "path": "src/compat/seccomp-bpf.h",
      "position": null,
      "original_position": 37,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "dbad7bdb947da66b60db057c5b03c11819438257",
      "in_reply_to_id": 546437834,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now using `SECCOMP_RET_KILL_PROCESS`.",
      "created_at": "2021-03-16T15:13:14Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595266898",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595266898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595297986",
      "pull_request_review_id": 613415315,
      "id": 595297986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI5Nzk4Ng==",
      "diff_hunk": "@@ -1220,7 +1231,7 @@ AC_LINK_IFELSE(\n     [ AC_MSG_RESULT(no) ]\n )\n \n-AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n+AC_DEFINE([HAVE_SYSTEM], [(HAVE_STD__SYSTEM || HAVE_WSYSTEM) && !USE_SYSCALL_SANDBOX], [std::system or ::wsystem, and no syscall sandbox])",
      "path": "configure.ac",
      "position": null,
      "original_position": 30,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "af327aac2ed542b9f1ba26cf8fd0105d8e68659f",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This makes sense I guess, I suppose we can think of a way to make external signing work within a sandbox, but the obvious and most secure is to disable the creation of external processes.\r\n\r\nAs for notifications: just use ZMQ, or RPC based polling. No need to support process based notifications in sandbox mode imo, if you're taking security seriously you wouldn't expose that kind of escape hatch.",
      "created_at": "2021-03-16T15:45:44Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595297986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595297986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595468885",
      "pull_request_review_id": 613631493,
      "id": 595468885,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTQ2ODg4NQ==",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "in_reply_to_id": 574059971,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I guess this is the classical trade-off between security vs debuggability/ease-of-use :)\r\n\r\nMaking `SECCOMP_RET_KILL_PROCESS` the default is slightly better from a security perspective (no risk that the attacker is getting a \"second chance\" via the signal handler) whereas making `SECCOMP_RET_TRAP` the default is slightly better from a debuggability/ease-of-use perspective.\r\n\r\nI'll let others chime in here: I'll happily adjust to the consensus opinion :)\r\n\r\nThe following shows the differences in output between the two modes of operation in case of a simulated syscall violation.\r\n\r\nWhen using `./configure --enable-syscall-sandbox`:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ ./configure --enable-syscall-sandbox\r\n$ make\r\n$ src/bitcoind\r\n2021-03-16T12:34:56Z Bitcoin Core version v21.99.0-[…]-dirty (release build)\r\n…\r\nBad system call (core dumped)\r\n```\r\n\r\nWhen using `./configure --enable-syscall-sandbox --enable-debug`:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ ./configure --enable-syscall-sandbox --enable-debug\r\n$ make\r\n$ src/bitcoind\r\n2021-03-16T12:34:56Z Bitcoin Core version v21.99.0-[…]-dirty (debug build)\r\n…\r\nERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.\r\n2021-03-16T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n```\r\n",
      "created_at": "2021-03-16T19:11:12Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595468885",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595468885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632935180",
      "pull_request_review_id": 660332428,
      "id": 632935180,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNTE4MA==",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "in_reply_to_id": 574059971,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@laanwj Now updated to default to debug mode as you suggested :)\r\n\r\nUpdated OP to describe the two modes of operation:\r\n* Debug mode (enabled via `configure` flag `--with-syscall-sandbox`): If a non-allowlisted syscall is called a debug handler will be invoked. Debug info will be printed (`ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.`) and `std::terminate` is called. Note that the attacker may be able to control the execution in the signal handler (although still with restricted syscall access), so this mode should really only be used when debugging.\r\n* Kill without debug mode (enabled via `configure` flag `--with-syscall-sandbox=kill-without-debug`): If a non-allowlisted syscall is called the kernel will immediately kill the offending process.\r\n\r\n",
      "created_at": "2021-05-15T11:44:11Z",
      "updated_at": "2021-05-15T11:44:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r632935180",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632935180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643342730",
      "pull_request_review_id": 673399903,
      "id": 643342730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM0MjczMA==",
      "diff_hunk": "@@ -71,6 +71,24 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([syscall-sandbox],\n+  [AS_HELP_STRING([--with-syscall-sandbox=yes|no|kill-without-debug],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nIt seems like `-sandbox=<mode>` should be a runtime option, not a build option. This way we can build and one distribute one binary with experimental sandbox support that can be disabled or enabled in different modes, instead of having to build multiple binaries with hardcoded sandbox modes.\r\n\r\nThere still would need to be a `--with-seccomp` option to be able to build on platforms without BPF, but the implementation and use of `--with-seccomp` should simpler than this option and not require complicating the build with system/boost process/multiprocess interactions.",
      "created_at": "2021-06-01T17:28:56Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643342730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643342730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643361032",
      "pull_request_review_id": 673399903,
      "id": 643361032,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM2MTAzMg==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nNot important, but instead of hardcoding the syscall order for one platform in a packed vector, it could be less fragile to populate a `std::map<int, std::string>` of the syscalls using `SYS` or `__NR` macros, see https://stackoverflow.com/questions/23249373/how-to-obtain-linux-syscall-name-from-the-syscall-number, https://unix.stackexchange.com/questions/338650/why-are-linux-system-call-numbers-in-x86-and-x86-64-different. It should also cut back the record breaking 4301 character line length.",
      "created_at": "2021-06-01T17:51:16Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643361032",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643361032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643364191",
      "pull_request_review_id": 673399903,
      "id": 643364191,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM2NDE5MQ==",
      "diff_hunk": "@@ -1024,6 +1025,8 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n {\n #endif\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();",
      "path": "src/bitcoin-cli.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nI don't understand why these DisableFurtherSyscallSandboxRestrictions calls are added to so many binaries. It seems like they could significantly lessen the effects of sandboxing. It might make sense if there were TODO comments saying what needs to be done to remove these, or just general comments explaining why they are needed.",
      "created_at": "2021-06-01T17:55:52Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643364191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643364191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1029,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643370871",
      "pull_request_review_id": 673399903,
      "id": 643370871,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM3MDg3MQ==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nUse of std::atomic here does not seem to make sense. If multiple threads can call InstallSyscallSandboxDebugHandler for the first time simultaneously, then a `Mutex` and `LOCK` need to be used to prevent the later threads from returning before the first thread finishes calling `sigaction` and `sigprocmask`. If multiple threads can't call InstallSyscallSandboxDebugHandler for the first time simultaneously, then this can just be a normal bool instead of an atomic bool.",
      "created_at": "2021-06-01T18:06:15Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643370871",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643370871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643373661",
      "pull_request_review_id": 673399903,
      "id": 643373661,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM3MzY2MQ==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nThroughout this file is there a reason error handling code can't use normal InitError or LogPrintf functions or raise exceptions, to send errors to debug.log and the GUI instead of bypassing them and going to stderr?",
      "created_at": "2021-06-01T18:10:11Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643373661",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643373661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645694853",
      "pull_request_review_id": 676460530,
      "id": 645694853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTY5NDg1Mw==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643361032,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point! Now addressed.\r\n\r\n> It should also cut back the record breaking 4301 character line length.\r\n\r\n:D",
      "created_at": "2021-06-04T16:15:20Z",
      "updated_at": "2021-06-04T16:15:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645694853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645694853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645717458",
      "pull_request_review_id": 676491381,
      "id": 645717458,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTcxNzQ1OA==",
      "diff_hunk": "@@ -1024,6 +1025,8 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n {\n #endif\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();",
      "path": "src/bitcoin-cli.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643364191,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `DisableFurtherSyscallSandboxRestrictions` is (or rather: was) used to make any further/future `EnableSyscallSandbox` calls that be into no-ops.\r\n\r\nIn other words to \"lock\" the sandbox to the sandbox policy currently loaded. (Or disable the sandbox if no sandbox is loaded: in other words a call to `DisableFurtherSyscallSandboxRestrictions` without any preceding `EnableSyscallSandbox`.)\r\n\r\nThe quoted code above for example loads the `SyscallSandboxPolicy::INITIALIZATION` policy on `bitcoin-cli` startup and then locks that policy so that no matter what functions that `bitcoin-cli` may call that uses `EnableSyscallSandbox` we're guaranteed to run under `SyscallSandboxPolicy::INITIALIZATION`.\r\n\r\n`SyscallSandboxPolicy::INITIALIZATION` is the super-set of all sandbox policies in Bitcoin Core, so the code above basically says \"limit me to the syscall set we expect to be used in (any part of) Bitcoin Core, but make sure no further syscall sandbox restrictions are done in code I may call\" (in other words: ignore any upcoming `EnableSyscallSandbox` calls).\r\n\r\nThe above is how it used to be, and I agree that was a bit confusing, so I've now updated things:\r\n\r\nInstead of enabling the sandbox on first call to `void EnableSyscallSandbox(policy)`  I've now added a separate setup function `bool SetupSyscallSandbox(…)` (called at most once per binary) to enable the sandbox, and added a separate `void SetSyscallSandboxPolicy(policy)` to load a specific policy.\r\n\r\nIn other words the sandbox is opt-in via `bool SetupSyscallSandbox(…)`.\r\n\r\nA call to `SetupSyscallSandbox(…)` is made in `bitcoind` if `-sandbox=<mode>` is used.\r\n\r\nIn this PR I'm now limiting the syscall sandbox support to the `bitcoind` binary to keep things focused. I suggest we wait with the other binaries to keep things focused. We can gradually enable the sandbox for other binaries over time in future PR:s as we see fit when we've gained some experience with the experimental `bitcoind` syscall sandbox support. Sounds reasonable? :)",
      "created_at": "2021-06-04T16:52:18Z",
      "updated_at": "2021-06-04T16:52:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645717458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645717458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1029,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645860988",
      "pull_request_review_id": 676675684,
      "id": 645860988,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg2MDk4OA==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643370871,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed: in the updated code there is no need for locking at all since the setup is done in `SetupSyscallSandbox` which is guaranteed to only be called once. And you're absolutely right that `std::atomic<bool>` did not make much sense here :)",
      "created_at": "2021-06-04T21:22:00Z",
      "updated_at": "2021-06-04T21:22:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645860988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645860988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645864786",
      "pull_request_review_id": 676678108,
      "id": 645864786,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg2NDc4Ng==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643373661,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. The initialization/setup logic has now been moved to `init.cpp` and it is now using the expected `InitError` and `LogPrintf`. `SetSyscallSandboxPolicy` is now throwing `std::runtime_error` in case of errors.",
      "created_at": "2021-06-04T21:26:59Z",
      "updated_at": "2021-06-04T21:26:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645864786",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645864786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645886534",
      "pull_request_review_id": 676701975,
      "id": 645886534,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg4NjUzNA==",
      "diff_hunk": "@@ -71,6 +71,24 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([syscall-sandbox],\n+  [AS_HELP_STRING([--with-syscall-sandbox=yes|no|kill-without-debug],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643342730,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great feedback. Thanks!\r\n\r\nI've now added a `-sandbox=<mode>` parameter. `--with-syscall-sandbox` has been renamed `--with-sandbox`.\r\n\r\nAvailable `-sandbox` modes are:\r\n* `-sandbox=disallow-and-log` (disallow unexpected syscalls and log the violation, then continue execution)\r\n* `-sandbox=log-and-kill` (log the violation and kill the process)\r\n* `-sandbox=kill` (kill the process immediately in case of a violation (without any logging))\r\n\r\nTo enable the syscall sandbox `--with-sandbox` is required at compile time _and_ `-sandbox=<mode>` needs to be specified at run time.\r\n\r\nThis dual opt-in approach is chosen since this is an experimental feature. We can consider relaxing this in the future when this feature has matured and has been extensively tested in many different environments. Note that `--with-sandbox=no` (no sandbox support) is intentionally the default.\r\n\r\n> There still would need to be a --with-seccomp option to be able to build on platforms without BPF, but the implementation and use of --with-seccomp should simpler than this option and not require complicating the build with system/boost process/multiprocess interactions.\r\n\r\nAdding `-sandbox=<mode>` allowed for a much simpler `--with-sandbox`, but note that the system/boost process/multiprocess interaction is still there and I'm not sure what the best approach would be if we were to get rid of it:\r\n\r\n```\r\nAC_MSG_ERROR(The options --with-sandbox (which does not allow execve) and --enable-external-signer (which uses execve) are currently incompatible.)\r\n…\r\nAC_MSG_ERROR(The options --with-sandbox (which does not allow execve) and --enable-multiprocess (which uses execve) are currently incompatible.)\r\n…\r\nAC_DEFINE([HAVE_SYSTEM], [(HAVE_STD__SYSTEM || HAVE_WSYSTEM) && !USE_SYSCALL_SANDBOX], [std::system or ::wsystem, and no syscall sandbox])\r\n```\r\n\r\nIsn't say `--with-sandbox` (no `execve`) and `--enable-external-signer` (yes `execve`) mutually exclusive by design? :) \r\n\r\nOr is the suggestion to `InitError` if any \"`execve`/`HAVE_SYSTEM` depending\" option is passed to `bitcoind` when `-sandbox=<mode>` is used?\r\n\r\nAlso, note that `--with-sandbox` will make the functional test be run under the syscall sandbox (using `-sandbox=log-and-kill`). Thus if we allowed for say `--with-sandbox --enable-external-signer` then all external signer functional tests would need to be disabled, no?\r\n\r\nPlease advice :)",
      "created_at": "2021-06-04T22:25:09Z",
      "updated_at": "2021-06-04T22:32:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645886534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645886534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663119115",
      "pull_request_review_id": 698332234,
      "id": 663119115,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzExOTExNQ==",
      "diff_hunk": "@@ -71,6 +71,12 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([seccomp],\n+  [AS_HELP_STRING([--with-seccomp],\n+  [enable experimental syscall sandbox feature (default is yes if seccomp-bpf is detected under Linux x86_64)])],\n+  [use_syscall_sandbox=$withval],",
      "path": "configure.ac",
      "position": null,
      "original_position": 7,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For a little more legibility here would suggest:\r\n\r\n- Replacing current uses of `use_syscall_sandbox` with `seccomp_found` in `--with-seccomp` code\r\n- Before the `AM_CONDITIONAL`, adding\r\n```autoconf\r\ndnl Currently only enable -sandbox=<mode> feature if seccomp is found.\r\ndnl In the future, sandboxing could be also be supported with other\r\ndnl sandboxing mechanisms besides seccomp\r\nuse_syscall_sandbox=$seccomp_found\r\n  ```",
      "created_at": "2021-07-02T16:11:33Z",
      "updated_at": "2021-07-02T16:34:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663119115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663119115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663127043",
      "pull_request_review_id": 698332234,
      "id": 663127043,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzEyNzA0Mw==",
      "diff_hunk": "@@ -560,6 +561,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (\\\"disallow-and-log\\\", \\\"log-and-kill\\\" or \\\"kill\\\"). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"disallow-and-log\\\" mode an invokation of an unexpected syscall will be disallowed and logged. In the \\\"log-and-kill\\\" mode an invokation of an unexpected syscall will terminate bitcoind after logging the syscall violation. In the \\\"kill\\\" mode an invokation of an unexpected syscall will cause bitcoind to be killed immediately by the kernel.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do the syscalls actually fail in the \"disallow-and-log\" mode? Would be good to describe it in the help a little more, or change it to a more suggestive name like \"log-and-fail\" if it does fail, or something like \"log\" or \"log-warning\" if it doesn't fail.\r\n\r\nAlso should s/invokation/invocation/",
      "created_at": "2021-07-02T16:26:30Z",
      "updated_at": "2021-07-02T16:31:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663127043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663127043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665937892",
      "pull_request_review_id": 701724531,
      "id": 665937892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTkzNzg5Mg==",
      "diff_hunk": "@@ -71,6 +71,12 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([seccomp],\n+  [AS_HELP_STRING([--with-seccomp],\n+  [enable experimental syscall sandbox feature (default is yes if seccomp-bpf is detected under Linux x86_64)])],\n+  [use_syscall_sandbox=$withval],",
      "path": "configure.ac",
      "position": null,
      "original_position": 7,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "in_reply_to_id": 663119115,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea! Fixed! :)",
      "created_at": "2021-07-08T07:26:05Z",
      "updated_at": "2021-07-08T07:26:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r665937892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665937892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666533779",
      "pull_request_review_id": 702519940,
      "id": 666533779,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjUzMzc3OQ==",
      "diff_hunk": "@@ -560,6 +561,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (\\\"disallow-and-log\\\", \\\"log-and-kill\\\" or \\\"kill\\\"). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"disallow-and-log\\\" mode an invokation of an unexpected syscall will be disallowed and logged. In the \\\"log-and-kill\\\" mode an invokation of an unexpected syscall will terminate bitcoind after logging the syscall violation. In the \\\"kill\\\" mode an invokation of an unexpected syscall will cause bitcoind to be killed immediately by the kernel.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "in_reply_to_id": 663127043,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great feedback!\r\n\r\nI've decided to remove the `disallow-and-log` mode: I think the modes `log-and-kill` and `kill` should be more than enough (to start with at least).\r\n\r\n`disallow-and-log` was meant to disallow the invoked unexpected syscall (by not executing it), log the attempted syscall invocation and then continue execution. Note however that continued normal execution cannot be _guaranteed_: the exact behaviour depends on the specific error handling at the syscall invocation call site. In some cases a failed syscall will be handled gracefully and in some places it won't. The \"may or may not continue execution\" part makes this mode potentially very confusing in practice so I think it makes sense to simply remove it for now.\r\n\r\nThe typo has been fixed. Thanks!",
      "created_at": "2021-07-08T21:35:46Z",
      "updated_at": "2021-07-08T21:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r666533779",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666533779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674337310",
      "pull_request_review_id": 712180640,
      "id": 674337310,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDMzNzMxMA==",
      "diff_hunk": "@@ -11,7 +11,8 @@ export DOCKER_NAME_TAG=ubuntu:20.04\n export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+# The multiprocess feature is currently incompatible with the experimental syscall sandbox feature (-sandbox=<mode>).",
      "path": "ci/test/00_setup_env_native_multiprocess.sh",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nBoth sandboxing and multiprocess features are runtime options that can be chosen when starting bitcoin, so ideally this would not be treated as build time conflict.\r\n\r\nIdeally could drop this `--without-seccomp` flag and only disable sandboxing at runtime if is needed, but I guess this would test changes, something like a test_runner sandbox option and:\r\n\r\n```\r\nexport TEST_RUNNER_EXTRA=\"--nosandbox\"\r\n```",
      "created_at": "2021-07-21T20:52:17Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674337310",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674337310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674341092",
      "pull_request_review_id": 712180640,
      "id": 674341092,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDM0MTA5Mg==",
      "diff_hunk": "@@ -1421,6 +1427,36 @@ if test \"x$use_external_signer\" != xno; then\n fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n+dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n+dnl (such as execve when the sanitizers execute llvm-symbolizer).\n+if test x$use_sanitizers != x; then\n+    AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n+   seccomp_found=no\n+fi",
      "path": "configure.ac",
      "position": null,
      "original_position": 23,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nDo you think this will be necessary permanently? It seems like more ideally sandbox would be able to adjust itself to work with sanitizers, or give a descriptive runtime error if using -sandbox with some sanitizer mode is incompatible.",
      "created_at": "2021-07-21T20:58:23Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674341092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674341092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": 1433,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674354542",
      "pull_request_review_id": 712180640,
      "id": 674354542,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDM1NDU0Mg==",
      "diff_hunk": "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {\n+        } else {\n+            return InitError(Untranslated(\"Unknown syscall sandbox mode (-sandbox=<mode>). Available modes are \\\"log-and-kill\\\" and \\\"kill\\\".\"));\n+        }\n+        // execve(...) is not allowed by the syscall sandbox.\n+        const std::vector<std::string> features_using_execve{\n+            \"-alertnotify\",\n+            \"-blocknotify\",\n+            \"-signer\",\n+            \"-startupnotify\",\n+            \"-walletnotify\",\n+        };\n+        for (const std::string& feature_using_execve : features_using_execve) {\n+            if (args.IsArgSet(feature_using_execve)) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nShould change this to `if (!args.GetArg(feature_using_execve, \"\")).empty())`, because IsArgSet won't do the right thing for negated arguments.",
      "created_at": "2021-07-21T21:21:29Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674354542",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674354542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676915974",
      "pull_request_review_id": 712180640,
      "id": 676915974,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjkxNTk3NA==",
      "diff_hunk": "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nShould probably add `&& !args.IsArgNegated(\"-sandbox\")`",
      "created_at": "2021-07-26T20:21:40Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676915974",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676915974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676920065",
      "pull_request_review_id": 712180640,
      "id": 676920065,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjkyMDA2NQ==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nUSE_SYSCALL_SANDBOX macro seems to be used inconsistently in this file, some functions are undefined, some are undefined but don't do anything. Clean thing to do would seem to remove all uses of USE_SYSCALL_SANDBOX in this file and just not compile it when sandboxing is not supported in the build.",
      "created_at": "2021-07-26T20:27:57Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676920065",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676920065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676996958",
      "pull_request_review_id": 712180640,
      "id": 676996958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Njk5Njk1OA==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nSome of this preprocessor magic seems strange. Can you maybe add a comment explaining, or linking to documentation?",
      "created_at": "2021-07-26T22:54:53Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676996958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676996958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676998117",
      "pull_request_review_id": 712180640,
      "id": 676998117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Njk5ODExNw==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// The syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 408,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nAre these two return conditions ever expected? It would be helpful to have a comment saying one way or the other, or maybe replacing these with assert statements if they are never expected.",
      "created_at": "2021-07-26T22:57:46Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676998117",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676998117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 408,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380954",
      "pull_request_review_id": 719588166,
      "id": 680380954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MDk1NA==",
      "diff_hunk": "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {\n+        } else {\n+            return InitError(Untranslated(\"Unknown syscall sandbox mode (-sandbox=<mode>). Available modes are \\\"log-and-kill\\\" and \\\"kill\\\".\"));\n+        }\n+        // execve(...) is not allowed by the syscall sandbox.\n+        const std::vector<std::string> features_using_execve{\n+            \"-alertnotify\",\n+            \"-blocknotify\",\n+            \"-signer\",\n+            \"-startupnotify\",\n+            \"-walletnotify\",\n+        };\n+        for (const std::string& feature_using_execve : features_using_execve) {\n+            if (args.IsArgSet(feature_using_execve)) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 674354542,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Now fixed.",
      "created_at": "2021-07-31T16:47:07Z",
      "updated_at": "2021-07-31T16:47:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380954",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380978",
      "pull_request_review_id": 719588182,
      "id": 680380978,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MDk3OA==",
      "diff_hunk": "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676915974,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Now fixed.",
      "created_at": "2021-07-31T16:47:20Z",
      "updated_at": "2021-07-31T16:47:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380978",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381160",
      "pull_request_review_id": 719588277,
      "id": 680381160,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MTE2MA==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676996958,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. I've now cut down on the preprocessor use, added comments and documentation links. Hopefully this should be more clear now :)",
      "created_at": "2021-07-31T16:48:53Z",
      "updated_at": "2021-07-31T16:48:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381160",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381289",
      "pull_request_review_id": 719588342,
      "id": 680381289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MTI4OQ==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// The syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 408,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676998117,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point: they are never expected. Now `assert`:ing instead to make our expectations clear. Thanks!",
      "created_at": "2021-07-31T16:50:00Z",
      "updated_at": "2021-07-31T16:51:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 408,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680396190",
      "pull_request_review_id": 719596524,
      "id": 680396190,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM5NjE5MA==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676920065,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think not compiling it is an option since `void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)` must be present regardless of `USE_SYSCALL_SANDBOX` (to avoid `ifdef`:s at the various call sites).\r\n\r\nIf `USE_SYSCALL_SANDBOX` is defined we currently need:\r\n\r\n```c++\r\nenum class SyscallSandboxPolicy;\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\r\n[[nodiscard]] bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating);\r\nvoid TestDisallowedSandboxCall();\r\n```\r\n\r\nIf `USE_SYSCALL_SANDBOX` is not defined we only need:\r\n\r\n```c++\r\nenum class SyscallSandboxPolicy;\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\r\n```\r\n\r\nIn the latter case `SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)` is a no-op.\r\n\r\nI've now simplified the macro use so that in the case of `USE_SYSCALL_SANDBOX` not being defined we get:\r\n\r\n```c++\r\n$ cpp -I src/ src/util/syscall_sandbox.cpp | grep -vE '^(#|$)'\r\nenum class SyscallSandboxPolicy {\r\n    INITIALIZATION,\r\n    INITIALIZATION_DNS_SEED,\r\n    INITIALIZATION_LOAD_BLOCKS,\r\n    INITIALIZATION_MAP_PORT,\r\n    INITIALIZATION_TOR_CONTROL,\r\n    MESSAGE_HANDLER,\r\n    NET,\r\n    NET_ADD_CONNECTION,\r\n    NET_HTTP_SERVER,\r\n    NET_HTTP_SERVER_WORKER,\r\n    NET_OPEN_CONNECTION,\r\n    SCHEDULER,\r\n    TX_INDEX,\r\n    VALIDATION_SCRIPT_CHECK,\r\n    SHUTOFF,\r\n};\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\r\n{\r\n}\r\n```\r\n\r\nAnother option would be to add `#if defined` at all call sites along the lines of:\r\n\r\n```c++\r\n#if defined(USE_SYSCALL_SANDBOX)\r\nSetSyscallSandboxPolicy(SyscallSandboxPolicy::NET);\r\n#endif // defined(USE_SYSCALL_SANDBOX)\r\n```\r\n\r\nThese are the call sites:\r\n\r\n```\r\ngit grep SetSyscallSandbox -- \":(exclude)src/util/\"\r\nsrc/bitcoind.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SHUTOFF);\r\nsrc/checkqueue.h:                SetSyscallSandboxPolicy(SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK);\r\nsrc/httpserver.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER);\r\nsrc/httpserver.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER);\r\nsrc/index/base.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::TX_INDEX);\r\nsrc/mapport.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_MAP_PORT);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_DNS_SEED);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_OPEN_CONNECTION);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_ADD_CONNECTION);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::MESSAGE_HANDLER);\r\nsrc/node/blockstorage.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS);\r\nsrc/scheduler.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SCHEDULER);\r\nsrc/torcontrol.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL);\r\n```\r\n\r\nWDYT? :)",
      "created_at": "2021-07-31T18:51:42Z",
      "updated_at": "2021-07-31T18:51:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680396190",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680396190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406422",
      "pull_request_review_id": 719601908,
      "id": 680406422,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDQwNjQyMg==",
      "diff_hunk": "@@ -11,7 +11,8 @@ export DOCKER_NAME_TAG=ubuntu:20.04\n export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+# The multiprocess feature is currently incompatible with the experimental syscall sandbox feature (-sandbox=<mode>).",
      "path": "ci/test/00_setup_env_native_multiprocess.sh",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 674337310,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've now added  an`--nosandbox` test runner option, and `export TEST_RUNNER_EXTRA=\"--nosandbox\"` for this job.\r\n\r\nWhat would be the best way to detect usage of the multiprocess feature at runtime in `AppInitParameterInteraction`?",
      "created_at": "2021-07-31T20:34:41Z",
      "updated_at": "2021-07-31T20:34:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406422",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406872",
      "pull_request_review_id": 719602170,
      "id": 680406872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDQwNjg3Mg==",
      "diff_hunk": "@@ -1421,6 +1427,36 @@ if test \"x$use_external_signer\" != xno; then\n fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n+dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n+dnl (such as execve when the sanitizers execute llvm-symbolizer).\n+if test x$use_sanitizers != x; then\n+    AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n+   seccomp_found=no\n+fi",
      "path": "configure.ac",
      "position": null,
      "original_position": 23,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 674341092,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm planning on tackling sanitizer compatibility in a follow-up PR. It is not entirely trivial since sanitizer use is not easy to detect at runtime (AFAIK) and the different sanitizers introduce the use of different sets of syscalls, but it should hopefully be doable some way. However, I prefer keeping that outside of this PR to keep things focused on the \"standard\" non-sanitizer case first :)",
      "created_at": "2021-07-31T20:39:25Z",
      "updated_at": "2021-07-31T20:40:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406872",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": 1433,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690819238",
      "pull_request_review_id": 732340445,
      "id": 690819238,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDgxOTIzOA==",
      "diff_hunk": "@@ -11,7 +11,8 @@ export DOCKER_NAME_TAG=ubuntu:20.04\n export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+# The multiprocess feature is currently incompatible with the experimental syscall sandbox feature (-sandbox=<mode>).",
      "path": "ci/test/00_setup_env_native_multiprocess.sh",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 674337310,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406422\r\n\r\n> What would be the best way to detect usage of the multiprocess feature at runtime in `AppInitParameterInteraction`?\r\n\r\nYou could add a `bool ipc_enabled` parameter to `AppInitParameterInteraction` and pass `node.init->ipc()` as the argument value where it's called in `AppInit`, and `false` as the argument value where it's called by the test framework.\r\n\r\nHandling this in `AppInitParameterInteraction` shouldn't strictly be necessary to make tests pass, but it could be used to print a more helpful error message if there's an attempt to use `bitcoin-node` IPC functionality when sandboxing is enabled. The `echoipc` RPC method is the only IPC functionality that's merged so far, so it would be nice to make this change, but it could also be done later with #10102.\r\n",
      "created_at": "2021-08-18T00:43:05Z",
      "updated_at": "2021-08-18T00:43:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r690819238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690819238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690826401",
      "pull_request_review_id": 732348452,
      "id": 690826401,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDgyNjQwMQ==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676920065,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680396190\r\n\r\n> WDYT? :)\r\n\r\nI like your new solution, minimizing ifdefs in the implementation while also not requiring them at call sites. Conceivably syscall_sandbox could be split up multiple files to avoid using macros, but there wouldn't be a benefit with just one current sandboxing implementation.",
      "created_at": "2021-08-18T01:06:13Z",
      "updated_at": "2021-08-18T01:06:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r690826401",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690826401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696105058",
      "pull_request_review_id": 738819376,
      "id": 696105058,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjEwNTA1OA==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 512,
      "original_position": 486,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": null,
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        allowed_syscalls.emplace(__NR_brk);     // change data segment size\r\n```",
      "created_at": "2021-08-25T20:53:17Z",
      "updated_at": "2021-08-25T20:53:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r696105058",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696105058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696105492",
      "pull_request_review_id": 738819934,
      "id": 696105492,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjEwNTQ5Mg==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 512,
      "original_position": 486,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": 696105058,
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Similar for other insertions to `allowed_syscalls`",
      "created_at": "2021-08-25T20:54:00Z",
      "updated_at": "2021-08-25T20:54:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r696105492",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696105492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696107198",
      "pull_request_review_id": 738822052,
      "id": 696107198,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjEwNzE5OA==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 724,
      "original_position": 698,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": null,
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        bpf_policy.emplace_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\r\n```\r\n\r\nSimilar for other `push_back` calls to `bpf_policy`",
      "created_at": "2021-08-25T20:56:39Z",
      "updated_at": "2021-08-25T20:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r696107198",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696107198"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 724,
      "original_line": 724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702430313",
      "pull_request_review_id": 746655277,
      "id": 702430313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjQzMDMxMw==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 512,
      "original_position": 486,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": 696105058,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note that `__NR_brk` is `uint32_t` so I don't think there is any performance reason to use `emplace` here.",
      "created_at": "2021-09-05T14:07:31Z",
      "updated_at": "2021-09-05T14:07:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r702430313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702430313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702430665",
      "pull_request_review_id": 746655494,
      "id": 702430665,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjQzMDY2NQ==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 724,
      "original_position": 698,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": 696107198,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That doesn't compile :)",
      "created_at": "2021-09-05T14:10:04Z",
      "updated_at": "2021-09-05T14:10:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r702430665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702430665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 724,
      "original_line": 724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712419454",
      "pull_request_review_id": 758972971,
      "id": 712419454,
      "node_id": "PRRC_kwDOABII584qdqh-",
      "diff_hunk": "@@ -562,6 +563,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (-sandbox=log-and-kill or -sandbox=kill). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"log-and-kill\\\" mode the invocation of an unexpected syscall results in a debug handler being invoked which will log the incident and terminate the program (without executing the unexpected syscall). In the \\\"kill\\\" mode the invocation of an unexpected syscall results in the entire process being killed immediately by the kernel without executing the unexpected syscall.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would suggest shortening \"Allow only allowlisted (expected)…\" to \"Allow only expected…\"",
      "created_at": "2021-09-20T18:37:16Z",
      "updated_at": "2021-09-20T18:37:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712419454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712419454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712420229",
      "pull_request_review_id": 758974028,
      "id": 712420229,
      "node_id": "PRRC_kwDOABII584qdquF",
      "diff_hunk": "@@ -1018,6 +1023,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please add a comment in here, leaving this block empty looks as if something is missing.",
      "created_at": "2021-09-20T18:38:28Z",
      "updated_at": "2021-09-20T18:38:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712420229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712420229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712423006",
      "pull_request_review_id": 758977541,
      "id": 712423006,
      "node_id": "PRRC_kwDOABII584qdrZe",
      "diff_hunk": "@@ -1018,6 +1023,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd personally prefer \"log-and-abort\" and \"abort\" as options instead of \"log-and-kill\" and \"kill\". I know it's not a translated message, but it's slightly friendlier anyhow.",
      "created_at": "2021-09-20T18:42:34Z",
      "updated_at": "2021-09-20T18:42:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712423006",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712423006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1030,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712426402",
      "pull_request_review_id": 758981977,
      "id": 712426402,
      "node_id": "PRRC_kwDOABII584qdsOi",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+#define BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+\n+enum class SyscallSandboxPolicy {\n+    // 1. Initialization\n+    INITIALIZATION,\n+    INITIALIZATION_DNS_SEED,\n+    INITIALIZATION_LOAD_BLOCKS,\n+    INITIALIZATION_MAP_PORT,\n+    INITIALIZATION_TOR_CONTROL,",
      "path": "src/util/syscall_sandbox.h",
      "position": null,
      "original_position": 14,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think Torcontrol should be under \"initialization\", it's always active and keeps connecting to Tor and spinning up its onion service as long as bitcoind is running.",
      "created_at": "2021-09-20T18:47:35Z",
      "updated_at": "2021-09-20T18:47:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712426402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712426402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712430747",
      "pull_request_review_id": 758987460,
      "id": 712430747,
      "node_id": "PRRC_kwDOABII584qdtSb",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not entirely convinced it's a good idea to maintain a full list of Linux syscalls here. This definitely doesn't scale to multiple architectures. Yes, it's nice to able to print the name instead of the number in case of failures (that's all it's used for, right?), but this should be a rare enough event and we can look up the syscall number ourselves if a user reports something.",
      "created_at": "2021-09-20T18:53:43Z",
      "updated_at": "2021-09-20T18:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712430747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712430747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712432620",
      "pull_request_review_id": 758989970,
      "id": 712432620,
      "node_id": "PRRC_kwDOABII584qdtvs",
      "diff_hunk": "@@ -1933,6 +1969,7 @@ echo\n echo \"Options used to compile and link:\"\n echo \"  external signer = $use_external_signer\"\n echo \"  multiprocess    = $build_multiprocess\"\n+echo \"  with experimental syscall sandbox support (-sandbox=<mode>) = $use_syscall_sandbox\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 54,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is supposed to be a summary, not documentation :smile: Please shorten this to something like `echo \"  with experimental syscall sandbox support\"`",
      "created_at": "2021-09-20T18:56:28Z",
      "updated_at": "2021-09-20T18:56:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712432620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712432620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712434319",
      "pull_request_review_id": 758992177,
      "id": 712434319,
      "node_id": "PRRC_kwDOABII584qduKP",
      "diff_hunk": "@@ -160,6 +160,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::I2P, \"i2p\"},\n     {BCLog::IPC, \"ipc\"},\n     {BCLog::LOCK, \"lock\"},\n+    {BCLog::UTIL, \"util\"},",
      "path": "src/logging.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, yes, adding a util category makes sense. We might want to migrate at least \"rand\" into here as well, at some point (not in this PR though).",
      "created_at": "2021-09-20T18:58:53Z",
      "updated_at": "2021-09-20T19:15:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712434319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712434319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712447642",
      "pull_request_review_id": 759009573,
      "id": 712447642,
      "node_id": "PRRC_kwDOABII584qdxaa",
      "diff_hunk": "@@ -417,6 +418,27 @@ static RPCHelpMan setmocktime()\n     };\n }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+static RPCHelpMan invokedisallowedsyscall()\n+{\n+    return RPCHelpMan{\n+        \"invokedisallowedsyscall\",\n+        \"\\nInvoke a disallowed syscall to trigger a syscall sandbox violation. Used for testing purposes.\\n\",\n+        {},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            HelpExampleCli(\"invokedisallowedsyscall\", \"\") + HelpExampleRpc(\"invokedisallowedsyscall\", \"\")},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            if (!Params().IsTestChain()) {",
      "path": "src/rpc/misc.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea to only allow this on test chains. I was about to comment that this call (which aborts the process in an ugly way) should be behind some test flag, but this is already okay imo.",
      "created_at": "2021-09-20T19:19:36Z",
      "updated_at": "2021-09-20T19:19:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712447642",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712447642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 432,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719516876",
      "pull_request_review_id": 768013911,
      "id": 719516876,
      "node_id": "PRRC_kwDOABII584q4vTM",
      "diff_hunk": "@@ -562,6 +563,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (-sandbox=log-and-kill or -sandbox=kill). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"log-and-kill\\\" mode the invocation of an unexpected syscall results in a debug handler being invoked which will log the incident and terminate the program (without executing the unexpected syscall). In the \\\"kill\\\" mode the invocation of an unexpected syscall results in the entire process being killed immediately by the kernel without executing the unexpected syscall.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712419454,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Fixed!",
      "created_at": "2021-09-30T15:22:10Z",
      "updated_at": "2021-09-30T15:22:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719516876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719516876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517009",
      "pull_request_review_id": 768014074,
      "id": 719517009,
      "node_id": "PRRC_kwDOABII584q4vVR",
      "diff_hunk": "@@ -1018,6 +1023,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712420229,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Fixed!",
      "created_at": "2021-09-30T15:22:18Z",
      "updated_at": "2021-09-30T15:22:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719517009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517483",
      "pull_request_review_id": 768014700,
      "id": 719517483,
      "node_id": "PRRC_kwDOABII584q4vcr",
      "diff_hunk": "@@ -1018,6 +1023,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712423006,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea: \"abort\" sounds better than \"kill\". Fixed!",
      "created_at": "2021-09-30T15:22:52Z",
      "updated_at": "2021-09-30T15:22:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719517483",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1030,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517672",
      "pull_request_review_id": 768014972,
      "id": 719517672,
      "node_id": "PRRC_kwDOABII584q4vfo",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+#define BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+\n+enum class SyscallSandboxPolicy {\n+    // 1. Initialization\n+    INITIALIZATION,\n+    INITIALIZATION_DNS_SEED,\n+    INITIALIZATION_LOAD_BLOCKS,\n+    INITIALIZATION_MAP_PORT,\n+    INITIALIZATION_TOR_CONTROL,",
      "path": "src/util/syscall_sandbox.h",
      "position": null,
      "original_position": 14,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712426402,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Fixed!",
      "created_at": "2021-09-30T15:23:04Z",
      "updated_at": "2021-09-30T15:23:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719517672",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719518020",
      "pull_request_review_id": 768015459,
      "id": 719518020,
      "node_id": "PRRC_kwDOABII584q4vlE",
      "diff_hunk": "@@ -1933,6 +1969,7 @@ echo\n echo \"Options used to compile and link:\"\n echo \"  external signer = $use_external_signer\"\n echo \"  multiprocess    = $build_multiprocess\"\n+echo \"  with experimental syscall sandbox support (-sandbox=<mode>) = $use_syscall_sandbox\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 54,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712432620,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Fixed!",
      "created_at": "2021-09-30T15:23:28Z",
      "updated_at": "2021-09-30T15:23:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719518020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719518020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720280559",
      "pull_request_review_id": 769017943,
      "id": 720280559,
      "node_id": "PRRC_kwDOABII584q7pvv",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712430747,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it is only used for friendly printing of syscall names.\r\n\r\nIt might seem like a minor thing, but when developing this feature that translation (from syscall number to syscall name) has been extremely helpful. FWIW I tried developing this feature without it first and that was... very cumbersome! :)\r\n\r\nI've now added a comment clarifying how `LINUX_SYSCALLS` (previously `SYSCALLS_LINUX_X86_64`) is used:\r\n\r\n```\r\n// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\r\n// order to be able to print user friendly error messages which include the syscall name in addition\r\n// to the syscall number.\r\n//\r\n// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\r\n//\r\n// ```\r\n// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\r\n// ```\r\n//\r\n// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\r\n//\r\n// ```\r\n// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\r\n// ``\r\n//\r\n// LINUX_SYSCALLS contains two types of syscalls:\r\n// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\r\n//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\r\n//     write, open, close, etc.\r\n// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\r\n//     for which we support the syscall sandbox feature. This type of syscalls should be added to\r\n//     LINUX_SYSCALLS conditional on availability like in the following example:\r\n//         ...\r\n//         #if defined(__NR_arch_dependent_syscall)\r\n//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\r\n//         #endif // defined(__NR_arch_dependent_syscall)\r\n//         ...\r\n```\r\n\r\nNote that if `LINUX_SYSCALLS` is incomplete for some reason (new architecture or new syscall), then it will fallback on the behaviour you're suggesting (just printing the syscall number).\r\n\r\nI suggest we keep it as-is for now and revisit that decision when/if syscall sandbox support for the next architecture (non-x86-64) is added. Could that work for now? :)",
      "created_at": "2021-10-01T14:09:35Z",
      "updated_at": "2021-10-01T14:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r720280559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720280559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721635201",
      "pull_request_review_id": 770663384,
      "id": 721635201,
      "node_id": "PRRC_kwDOABII584rA0eB",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712430747,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "OK, I get your point better now, it's not needed to replicate this entire structure for every architecture, because it doesn't have the raw numbers, it uses the `__NR_` constants.\r\n\r\nI agree it can be useful, it too bad querying a syscall name isn't a standard libc call, or outside that, a standard linux command that the error message can be run through. To add insult to injury, the syscall numbers are in a different file on every architecture, it's not like you can just grep `/usr/include/unistd.h` and be done with it.\r\n\r\nThe thing is that even now, new syscalls are often added to the Linux kernel. It seems really annoying to track this. But maybe it's not needed? How often do we use a new syscall.",
      "created_at": "2021-10-04T18:57:58Z",
      "updated_at": "2021-10-04T19:11:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r721635201",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721635201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721997392",
      "pull_request_review_id": 771119135,
      "id": 721997392,
      "node_id": "PRRC_kwDOABII584rCM5Q",
      "diff_hunk": "@@ -0,0 +1,882 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\n+// order to be able to print user friendly error messages which include the syscall name in addition\n+// to the syscall number.\n+//\n+// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ```\n+//\n+// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ``\n+//\n+// LINUX_SYSCALLS contains two types of syscalls:\n+// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\n+//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\n+//     write, open, close, etc.\n+// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\n+//     for which we support the syscall sandbox feature. This type of syscalls should be added to\n+//     LINUX_SYSCALLS conditional on availability like in the following example:\n+//         ...\n+//         #if defined(__NR_arch_dependent_syscall)\n+//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\n+//         #endif // defined(__NR_arch_dependent_syscall)\n+//         ...\n+const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = LINUX_SYSCALLS.find(syscall_number);\n+    if (element != LINUX_SYSCALLS.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\n+        // Portability note: AUDIT_ARCH_X86_64 is Linux x86_64 specific.\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, AUDIT_ARCH_X86_64, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, nr)));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxAction::KILL_PROCESS:\n+            // Disallow syscall and kill the process.\n+            //\n+            // See KILL_PROCESS in seccomp-bpf.h referenced above.\n+            //\n+            // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n+            // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n+            // action was introduced in Linux 4.14.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS: Results in the entire process exiting immediately without\n+            // executing the system call.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+            break;\n+        case SyscallSandboxAction::INVOKE_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n+            //\n+            // SECCOMP_RET_TRAP: Results in the kernel sending a SIGSYS signal to the triggering\n+            // task without executing the system call.\n+            //\n+            // SECCOMP_RET_TRAP documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+} // namespace\n+\n+bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating)\n+{\n+    assert(!g_syscall_sandbox_enabled && \"SetupSyscallSandbox(...) should only be called once.\");\n+    g_syscall_sandbox_enabled = true;\n+    g_syscall_sandbox_log_violation_before_terminating = log_syscall_violation_before_terminating;\n+    if (log_syscall_violation_before_terminating) {\n+        if (!SetupSyscallSandboxDebugHandler()) {\n+            return false;\n+        }\n+    }\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION);\n+    return true;\n+}\n+\n+void TestDisallowedSandboxCall()\n+{\n+    // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n+    std::array<gid_t, 1> groups;\n+    [[maybe_unused]] int32_t ignored = getgroups(groups.size(), groups.data());\n+}\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (!g_syscall_sandbox_enabled) {\n+        return;\n+    }\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_MAP_PORT: // Thread: mapport\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxAction default_action = g_syscall_sandbox_log_violation_before_terminating ? SyscallSandboxAction::INVOKE_SIGNAL_HANDLER : SyscallSandboxAction::KILL_PROCESS;\n+    std::vector<sock_filter> filter = seccomp_policy_builder.BuildFilter(default_action);\n+    const sock_fprog prog = {\n+        .len = static_cast<uint16_t>(filter.size()),\n+        .filter = filter.data(),\n+    };",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 865,
      "original_position": 865,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://en.cppreference.com/w/cpp/language/aggregate_initialization\r\n\r\nNeither I, nor CI could find a compiler that rejects this C++20 code, so does that mean we are allowed to use it in new code now?",
      "created_at": "2021-10-05T08:14:56Z",
      "updated_at": "2021-10-05T08:14:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r721997392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721997392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722011191",
      "pull_request_review_id": 771137901,
      "id": 722011191,
      "node_id": "PRRC_kwDOABII584rCQQ3",
      "diff_hunk": "@@ -0,0 +1,882 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\n+// order to be able to print user friendly error messages which include the syscall name in addition\n+// to the syscall number.\n+//\n+// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ```\n+//\n+// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ``\n+//\n+// LINUX_SYSCALLS contains two types of syscalls:\n+// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\n+//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\n+//     write, open, close, etc.\n+// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\n+//     for which we support the syscall sandbox feature. This type of syscalls should be added to\n+//     LINUX_SYSCALLS conditional on availability like in the following example:\n+//         ...\n+//         #if defined(__NR_arch_dependent_syscall)\n+//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\n+//         #endif // defined(__NR_arch_dependent_syscall)\n+//         ...\n+const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = LINUX_SYSCALLS.find(syscall_number);\n+    if (element != LINUX_SYSCALLS.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\n+        // Portability note: AUDIT_ARCH_X86_64 is Linux x86_64 specific.\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, AUDIT_ARCH_X86_64, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, nr)));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxAction::KILL_PROCESS:\n+            // Disallow syscall and kill the process.\n+            //\n+            // See KILL_PROCESS in seccomp-bpf.h referenced above.\n+            //\n+            // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n+            // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n+            // action was introduced in Linux 4.14.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS: Results in the entire process exiting immediately without\n+            // executing the system call.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+            break;\n+        case SyscallSandboxAction::INVOKE_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n+            //\n+            // SECCOMP_RET_TRAP: Results in the kernel sending a SIGSYS signal to the triggering\n+            // task without executing the system call.\n+            //\n+            // SECCOMP_RET_TRAP documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+} // namespace\n+\n+bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating)\n+{\n+    assert(!g_syscall_sandbox_enabled && \"SetupSyscallSandbox(...) should only be called once.\");\n+    g_syscall_sandbox_enabled = true;\n+    g_syscall_sandbox_log_violation_before_terminating = log_syscall_violation_before_terminating;\n+    if (log_syscall_violation_before_terminating) {\n+        if (!SetupSyscallSandboxDebugHandler()) {\n+            return false;\n+        }\n+    }\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION);\n+    return true;\n+}\n+\n+void TestDisallowedSandboxCall()\n+{\n+    // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n+    std::array<gid_t, 1> groups;\n+    [[maybe_unused]] int32_t ignored = getgroups(groups.size(), groups.data());\n+}\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (!g_syscall_sandbox_enabled) {\n+        return;\n+    }\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_MAP_PORT: // Thread: mapport\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxAction default_action = g_syscall_sandbox_log_violation_before_terminating ? SyscallSandboxAction::INVOKE_SIGNAL_HANDLER : SyscallSandboxAction::KILL_PROCESS;\n+    std::vector<sock_filter> filter = seccomp_policy_builder.BuildFilter(default_action);\n+    const sock_fprog prog = {\n+        .len = static_cast<uint16_t>(filter.size()),\n+        .filter = filter.data(),\n+    };",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 865,
      "original_position": 865,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "in_reply_to_id": 721997392,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this is supported since clang 3.2 and gcc 4.7, but maybe not msvc?\r\n\r\nSee #23183 \r\n\r\n\r\nmsvc: `error C7555: use of designated initializers requires at least '/std:c++20'`",
      "created_at": "2021-10-05T08:32:02Z",
      "updated_at": "2021-10-05T14:28:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r722011191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722011191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/723164375",
      "pull_request_review_id": 772559976,
      "id": 723164375,
      "node_id": "PRRC_kwDOABII584rGpzX",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712430747,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> or outside that, a standard linux command\r\n\r\nIs there a standard linux command for a popular operating system? Maybe it would be enough to say: To get the syscall name, use `grep ...` on the latest Ubuntu/Debian?",
      "created_at": "2021-10-06T11:52:52Z",
      "updated_at": "2021-10-06T11:52:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r723164375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/723164375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726077081",
      "pull_request_review_id": 776180037,
      "id": 726077081,
      "node_id": "PRRC_kwDOABII584rRw6Z",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712430747,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like `gdb` is enough to print the name of the violating syscall. See for example https://github.com/bitcoin/bitcoin/issues/23248#issue-1022522427, which prints `mincore`.",
      "created_at": "2021-10-11T12:35:32Z",
      "updated_at": "2021-10-11T12:35:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r726077081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726077081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735786962",
      "pull_request_review_id": 788379266,
      "id": 735786962,
      "node_id": "PRRC_kwDOABII584r2zfS",
      "diff_hunk": "@@ -0,0 +1,882 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\n+// order to be able to print user friendly error messages which include the syscall name in addition\n+// to the syscall number.\n+//\n+// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ```\n+//\n+// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ``\n+//\n+// LINUX_SYSCALLS contains two types of syscalls:\n+// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\n+//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\n+//     write, open, close, etc.\n+// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\n+//     for which we support the syscall sandbox feature. This type of syscalls should be added to\n+//     LINUX_SYSCALLS conditional on availability like in the following example:\n+//         ...\n+//         #if defined(__NR_arch_dependent_syscall)\n+//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\n+//         #endif // defined(__NR_arch_dependent_syscall)\n+//         ...\n+const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = LINUX_SYSCALLS.find(syscall_number);\n+    if (element != LINUX_SYSCALLS.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\n+        // Portability note: AUDIT_ARCH_X86_64 is Linux x86_64 specific.\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, AUDIT_ARCH_X86_64, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, nr)));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxAction::KILL_PROCESS:\n+            // Disallow syscall and kill the process.\n+            //\n+            // See KILL_PROCESS in seccomp-bpf.h referenced above.\n+            //\n+            // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n+            // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n+            // action was introduced in Linux 4.14.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS: Results in the entire process exiting immediately without\n+            // executing the system call.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+            break;\n+        case SyscallSandboxAction::INVOKE_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n+            //\n+            // SECCOMP_RET_TRAP: Results in the kernel sending a SIGSYS signal to the triggering\n+            // task without executing the system call.\n+            //\n+            // SECCOMP_RET_TRAP documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+} // namespace\n+\n+bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating)\n+{\n+    assert(!g_syscall_sandbox_enabled && \"SetupSyscallSandbox(...) should only be called once.\");\n+    g_syscall_sandbox_enabled = true;\n+    g_syscall_sandbox_log_violation_before_terminating = log_syscall_violation_before_terminating;\n+    if (log_syscall_violation_before_terminating) {\n+        if (!SetupSyscallSandboxDebugHandler()) {\n+            return false;\n+        }\n+    }\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION);\n+    return true;\n+}\n+\n+void TestDisallowedSandboxCall()\n+{\n+    // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n+    std::array<gid_t, 1> groups;\n+    [[maybe_unused]] int32_t ignored = getgroups(groups.size(), groups.data());\n+}\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (!g_syscall_sandbox_enabled) {\n+        return;\n+    }\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_MAP_PORT: // Thread: mapport\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxAction default_action = g_syscall_sandbox_log_violation_before_terminating ? SyscallSandboxAction::INVOKE_SIGNAL_HANDLER : SyscallSandboxAction::KILL_PROCESS;\n+    std::vector<sock_filter> filter = seccomp_policy_builder.BuildFilter(default_action);\n+    const sock_fprog prog = {\n+        .len = static_cast<uint16_t>(filter.size()),\n+        .filter = filter.data(),\n+    };",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 865,
      "original_position": 865,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "in_reply_to_id": 721997392,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FYI adding `-Wpedantic` turns this into a warning:\r\n` $ g++ -Wall -std=c++17 -pedantic pedantic.cpp -c -o pedantic.o`\r\n\r\n> pedantic.cpp: In function ‘int main()’:\r\n> pedantic.cpp:8:13: warning: C++ designated initializers only available with ‘-std=c++2a’ or ‘-std=gnu++2a’ [-Wpedantic]\r\n>     8 |     foo bar{.a = 1};\r\n> \r\n\r\n\r\nI actually thought we had `-Wpedantic` on by default, I'm not sure why we don't. @fanquake @dongcarl is there an obvious reason I'm forgetting?\r\n\r\nEdit: Clang also has `-Wc++20-designator`.\r\n\r\nEdit2: pushed a quick branch to demonstrate the changes needed to build bitcoind (only, everything else untested) with `-Wpedantic`, which is meant to warn about the use of compiler exensions: https://github.com/theuni/bitcoin/tree/build-pedantic",
      "created_at": "2021-10-25T16:52:07Z",
      "updated_at": "2021-10-25T19:43:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r735786962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735786962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749202729",
      "pull_request_review_id": 805901705,
      "id": 749202729,
      "node_id": "PRRC_kwDOABII584sp-0p",
      "diff_hunk": "@@ -468,6 +471,10 @@ def get_bin_from_version(version, bin_name, bin_default):\n             extra_args = [[]] * num_nodes\n         if versions is None:\n             versions = [None] * num_nodes\n+        if self.is_syscall_sandbox_compiled() and not self.disable_syscall_sandbox:\n+            for i in range(len(extra_args)):\n+                if versions[i] is None or versions[i] >= 219900:",
      "path": "test/functional/test_framework/test_framework.py",
      "position": 23,
      "original_position": 23,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is actually not in the v22.0 binary and also not backported (yet). I made a commit to bump the version: https://github.com/bitcoin/bitcoin/pull/19013/commits/4672c1ffeae515ee457968af5235a8e4418e0df5",
      "created_at": "2021-11-15T10:44:19Z",
      "updated_at": "2021-11-15T10:44:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r749202729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749202729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 476,
      "original_line": 476,
      "side": "RIGHT"
    }
  ]
}