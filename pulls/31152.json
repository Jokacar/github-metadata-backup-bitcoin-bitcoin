{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152",
    "id": 2144378376,
    "node_id": "PR_kwDOABII585_0J4I",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31152",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31152.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31152.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31152",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31152/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/f32c34d0c3d4041a301822b27e88d6db4cbf631e",
    "number": 31152,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "functional test: Additional package evaluation coverage",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Current test coverage doesn't ensure that mempool trimming doesn't appear prior to the entire package, and not just the subpackage, is finished being submitted.\r\n\r\nAdd a scenario that covers this case, where package ancestors can make it in individually, but would be immadiately evicted if not for the package CPFP.\r\n\r\nin response to https://github.com/bitcoin/bitcoin/pull/31122#discussion_r1813272637 where if applied onto that PR's old commit, the test fails due to package failure.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2024-10-24T19:14:11Z",
    "updated_at": "2024-10-25T13:23:30Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "88a02f55d9a05cdd6d11e3b83400714cde693c74",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "instagibbs:2024-10-submitpackage_evict_cpfp_success",
      "ref": "2024-10-submitpackage_evict_cpfp_success",
      "sha": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 13910191,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMzkxMDE5MQ==",
        "name": "bitcoin",
        "full_name": "instagibbs/bitcoin",
        "owner": {
          "login": "instagibbs",
          "id": 5767891,
          "node_id": "MDQ6VXNlcjU3Njc4OTE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/instagibbs",
          "html_url": "https://github.com/instagibbs",
          "followers_url": "https://api.github.com/users/instagibbs/followers",
          "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
          "organizations_url": "https://api.github.com/users/instagibbs/orgs",
          "repos_url": "https://api.github.com/users/instagibbs/repos",
          "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/instagibbs/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/instagibbs/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/instagibbs/bitcoin",
        "archive_url": "https://api.github.com/repos/instagibbs/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/instagibbs/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/instagibbs/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/instagibbs/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/instagibbs/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/instagibbs/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/instagibbs/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/instagibbs/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/instagibbs/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/instagibbs/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/instagibbs/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/instagibbs/bitcoin/events",
        "forks_url": "https://api.github.com/repos/instagibbs/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/instagibbs/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/instagibbs/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/instagibbs/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/instagibbs/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/instagibbs/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/instagibbs/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/instagibbs/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/instagibbs/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/instagibbs/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/instagibbs/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/instagibbs/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/instagibbs/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:instagibbs/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/instagibbs/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/instagibbs/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/instagibbs/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/instagibbs/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/instagibbs/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/instagibbs/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/instagibbs/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/instagibbs/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/instagibbs/bitcoin/hooks",
        "svn_url": "https://github.com/instagibbs/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 248166,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-25T13:46:57Z",
        "created_at": "2013-10-27T20:56:53Z",
        "updated_at": "2024-08-28T03:28:00Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b95adf057a4091941c003db4f854f8212b7e99af",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36276,
        "stargazers_count": 79042,
        "watchers_count": 79042,
        "size": 270201,
        "default_branch": "master",
        "open_issues_count": 641,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-25T13:45:46Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-10-25T13:54:10Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 95,
    "deletions": 0,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 16,
    "comments": 2
  },
  "events": [
    {
      "event": "commented",
      "id": 2436158662,
      "node_id": "IC_kwDOABII586RNNTG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2436158662",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T19:14:14Z",
      "updated_at": "2024-10-25T13:23:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/31152).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Stale ACK | [sdaftuar](https://github.com/bitcoin/bitcoin/pull/31152#issuecomment-2436556487), [glozow](https://github.com/bitcoin/bitcoin/pull/31152#pullrequestreview-2393934991) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28676](https://github.com/bitcoin/bitcoin/pull/28676) ([WIP] Cluster mempool implementation by sdaftuar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#issuecomment-2436158662",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31152"
    },
    {
      "event": "labeled",
      "id": 14857515748,
      "node_id": "LE_lADOABII586btaeTzwAAAAN1k7Lk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14857515748",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T19:17:31Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 2393878103,
      "node_id": "PRR_kwDOABII586Or65X",
      "url": null,
      "actor": null,
      "commit_id": "3d66eab0566a461f6a81cabeffffaba37a4314fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good, just some comment nits.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#pullrequestreview-2393878103",
      "submitted_at": "2024-10-24T23:46:02Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14859979868,
      "node_id": "HRFPE_lADOABII586btaeTzwAAAAN1uUxc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14859979868",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T23:55:33Z"
    },
    {
      "event": "commented",
      "id": 2436556487,
      "node_id": "IC_kwDOABII586ROubH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2436556487",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-25T00:16:36Z",
      "updated_at": "2024-10-25T00:16:36Z",
      "author_association": "MEMBER",
      "body": "ACK b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#issuecomment-2436556487",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31152"
    },
    {
      "event": "reviewed",
      "id": 2393934991,
      "node_id": "PRR_kwDOABII586OsIyP",
      "url": null,
      "actor": null,
      "commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK b318959bf8c2b9b02f718649adec03f7e07ac79d, tested that adding a trim at the end of subpackage evaluation causes this to fail. Happy to reack if you take the nits.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#pullrequestreview-2393934991",
      "submitted_at": "2024-10-25T01:20:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
    },
    {
      "event": "reviewed",
      "id": 2395126516,
      "node_id": "PRR_kwDOABII586Owrr0",
      "url": null,
      "actor": null,
      "commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#pullrequestreview-2395126516",
      "submitted_at": "2024-10-25T12:22:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYzMmMzNGQwYzNkNDA0MWEzMDE4MjJiMjdlODhkNmRiNGNiZjYzMWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "tree": {
        "sha": "ef84115b52f66b78a839c44ca52dc0422f764dec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef84115b52f66b78a839c44ca52dc0422f764dec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f40e453ccdf5f75b599fc7168abd512510686c5",
          "sha": "2f40e453ccdf5f75b599fc7168abd512510686c5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2f40e453ccdf5f75b599fc7168abd512510686c5"
        }
      ],
      "message": "functional test: Additional package evaluation coverage\n\nCurrent test coverage doesn't ensure that mempool trimming\ndoesn't appear prior to the entire package, and not just\nthe subpackage, is finished being submitted.\n\nAdd a scenario that covers this case, where package\nancestors can make it in individually, but would be\nimmadiately evicted if not for the package CPFP.",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-10-25T13:22:57Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-10-24T15:58:12Z"
      },
      "sha": "f32c34d0c3d4041a301822b27e88d6db4cbf631e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14874458010,
      "node_id": "HRFPE_lADOABII586btaeTzwAAAAN2ljea",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14874458010",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-25T13:23:01Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815810879",
      "pull_request_review_id": 2393878103,
      "id": 1815810879,
      "node_id": "PRRC_kwDOABII585sOxM_",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large and\n+        # belo, which means they should trigger eviction, but child submission should result",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 37,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "3d66eab0566a461f6a81cabeffffaba37a4314fb",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"belo\"?",
      "created_at": "2024-10-24T23:36:50Z",
      "updated_at": "2024-10-24T23:46:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1815810879",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815810879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815817176",
      "pull_request_review_id": 2393878103,
      "id": 1815817176,
      "node_id": "PRRC_kwDOABII585sOyvY",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large and\n+        # belo, which means they should trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing\n+            parent_feerate = mempoolmin_feerate + Decimal(\"0.00000001\") if i == num_big_parents - 1 else mempoolmin_feerate\n+            parent = self.wallet.create_self_transfer(fee_rate=parent_feerate, target_vsize=parent_vsize, confirmed_only=True)\n+            parent_utxos.append(parent[\"new_utxo\"])\n+            package_hex.append(parent[\"hex\"])\n+            big_parent_txids.append(parent[\"txid\"])\n+            big_parent_wtxids.append(parent[\"wtxid\"])\n+            # There is room for each of these transactions independently\n+            assert node.testmempoolaccept([parent[\"hex\"]])[0][\"allowed\"]\n+\n+        # Create a child spending everything with an insane fee, bumping the package above mempool_entry_minrate\n+        child = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_utxos, fee_per_output=10000000)\n+        package_hex.append(child[\"hex\"])\n+\n+        # Package should be submitted, temporarily exceeding maxmempool, and then  evicted.",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 63,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "3d66eab0566a461f6a81cabeffffaba37a4314fb",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment isn't right, is it?  We don't expect the package to be evicted?",
      "created_at": "2024-10-24T23:44:38Z",
      "updated_at": "2024-10-24T23:46:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1815817176",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815817176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815822938",
      "pull_request_review_id": 2393896270,
      "id": 1815822938,
      "node_id": "PRRC_kwDOABII585sO0Ja",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large and\n+        # belo, which means they should trigger eviction, but child submission should result",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 37,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "3d66eab0566a461f6a81cabeffffaba37a4314fb",
      "in_reply_to_id": 1815810879,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "incomplete sent, fixed",
      "created_at": "2024-10-24T23:55:34Z",
      "updated_at": "2024-10-24T23:55:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1815822938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815822938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815823046",
      "pull_request_review_id": 2393896438,
      "id": 1815823046,
      "node_id": "PRRC_kwDOABII585sO0LG",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large and\n+        # belo, which means they should trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing\n+            parent_feerate = mempoolmin_feerate + Decimal(\"0.00000001\") if i == num_big_parents - 1 else mempoolmin_feerate\n+            parent = self.wallet.create_self_transfer(fee_rate=parent_feerate, target_vsize=parent_vsize, confirmed_only=True)\n+            parent_utxos.append(parent[\"new_utxo\"])\n+            package_hex.append(parent[\"hex\"])\n+            big_parent_txids.append(parent[\"txid\"])\n+            big_parent_wtxids.append(parent[\"wtxid\"])\n+            # There is room for each of these transactions independently\n+            assert node.testmempoolaccept([parent[\"hex\"]])[0][\"allowed\"]\n+\n+        # Create a child spending everything with an insane fee, bumping the package above mempool_entry_minrate\n+        child = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_utxos, fee_per_output=10000000)\n+        package_hex.append(child[\"hex\"])\n+\n+        # Package should be submitted, temporarily exceeding maxmempool, and then  evicted.",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 63,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "3d66eab0566a461f6a81cabeffffaba37a4314fb",
      "in_reply_to_id": 1815817176,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed thanks",
      "created_at": "2024-10-24T23:55:48Z",
      "updated_at": "2024-10-24T23:55:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1815823046",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815823046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815846424",
      "pull_request_review_id": 2393934991,
      "id": 1815846424,
      "node_id": "PRRC_kwDOABII585sO54Y",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 24,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "forgot to delete?",
      "created_at": "2024-10-25T00:43:33Z",
      "updated_at": "2024-10-25T01:20:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1815846424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815846424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": 107,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815846947",
      "pull_request_review_id": 2393934991,
      "id": 1815846947,
      "node_id": "PRRC_kwDOABII585sO6Aj",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large\n+        # which means in aggregate they could trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 49,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: to be possibly be\r\n```suggestion\r\n            # Last parent is higher feerate causing other parents to possibly\r\n            # be evicted if trimming was allowed, which would cause the package to end up failing\r\n```",
      "created_at": "2024-10-25T00:44:42Z",
      "updated_at": "2024-10-25T01:20:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1815846947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815846947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": 132,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815859993",
      "pull_request_review_id": 2393934991,
      "id": 1815859993,
      "node_id": "PRRC_kwDOABII585sO9MZ",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large\n+        # which means in aggregate they could trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing\n+            parent_feerate = mempoolmin_feerate + Decimal(\"0.00000001\") if i == num_big_parents - 1 else mempoolmin_feerate\n+            parent = self.wallet.create_self_transfer(fee_rate=parent_feerate, target_vsize=parent_vsize, confirmed_only=True)\n+            parent_utxos.append(parent[\"new_utxo\"])\n+            package_hex.append(parent[\"hex\"])\n+            big_parent_txids.append(parent[\"txid\"])\n+            big_parent_wtxids.append(parent[\"wtxid\"])\n+            # There is room for each of these transactions independently\n+            assert node.testmempoolaccept([parent[\"hex\"]])[0][\"allowed\"]\n+\n+        # Create a child spending everything with an insane fee, bumping the package above mempool_entry_minrate\n+        child = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_utxos, fee_per_output=10000000)\n+        package_hex.append(child[\"hex\"])\n+\n+        # Package should be submitted, temporarily exceeding maxmempool, but not evicted.\n+        package_res = None\n+        with node.assert_debug_log(expected_msgs=[\"rolling minimum fee bumped\"]):\n+            package_res = node.submitpackage(package=package_hex, maxfeerate=0)\n+\n+        assert_equal(package_res[\"package_msg\"], \"success\")\n+\n+        # If intra-packing trimming ends up happening anyways, we would\n+        # see this show up in effective-includes results when a parent\n+        # and child package are evaluated together as a single subpackage\n+        assert_equal(len(package_res[\"tx-results\"]), len(big_parent_wtxids) + 1)\n+        for wtxid in big_parent_wtxids + [child[\"wtxid\"]]:\n+            assert_equal(len(package_res[\"tx-results\"][wtxid][\"fees\"][\"effective-includes\"]), 1)\n+\n+        # Maximum size must never be exceeded.\n+        assert_greater_than(node.getmempoolinfo()[\"maxmempool\"], node.getmempoolinfo()[\"bytes\"])\n+\n+        # Package found in mempool still\n+        resulting_mempool_txids = node.getrawmempool()\n+        assert child[\"txid\"] in resulting_mempool_txids\n+        for txid in big_parent_txids:\n+            assert txid in resulting_mempool_txids\n+\n+        # Check every evicted tx was higher feerate than parents which evicted it\n+        eviction_set = set(mempool_txids) - set(resulting_mempool_txids) - set(big_parent_txids)\n+        parent_entries = [node.getmempoolentry(entry) for entry in big_parent_txids]\n+        max_parent_feerate = max([entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in parent_entries])",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 89,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: strictly speaking...\r\n```suggestion\r\n        max_parent_feerate = max([entry[\"fees\"][\"modified\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in parent_entries])\r\n```\r\n",
      "created_at": "2024-10-25T01:07:32Z",
      "updated_at": "2024-10-25T01:20:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1815859993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815859993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815863021",
      "pull_request_review_id": 2393934991,
      "id": 1815863021,
      "node_id": "PRRC_kwDOABII585sO97t",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate",
      "path": "test/functional/mempool_limit.py",
      "position": 12,
      "original_position": 12,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: relying on the fact that mempool min feerate isn't persisted seems a little bit brittle.\r\n",
      "created_at": "2024-10-25T01:13:51Z",
      "updated_at": "2024-10-25T01:20:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1815863021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815863021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815870276",
      "pull_request_review_id": 2393934991,
      "id": 1815870276,
      "node_id": "PRRC_kwDOABII585sO_tE",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large\n+        # which means in aggregate they could trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing\n+            parent_feerate = mempoolmin_feerate + Decimal(\"0.00000001\") if i == num_big_parents - 1 else mempoolmin_feerate\n+            parent = self.wallet.create_self_transfer(fee_rate=parent_feerate, target_vsize=parent_vsize, confirmed_only=True)\n+            parent_utxos.append(parent[\"new_utxo\"])\n+            package_hex.append(parent[\"hex\"])\n+            big_parent_txids.append(parent[\"txid\"])\n+            big_parent_wtxids.append(parent[\"wtxid\"])\n+            # There is room for each of these transactions independently\n+            assert node.testmempoolaccept([parent[\"hex\"]])[0][\"allowed\"]\n+\n+        # Create a child spending everything with an insane fee, bumping the package above mempool_entry_minrate\n+        child = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_utxos, fee_per_output=10000000)\n+        package_hex.append(child[\"hex\"])\n+\n+        # Package should be submitted, temporarily exceeding maxmempool, but not evicted.\n+        package_res = None\n+        with node.assert_debug_log(expected_msgs=[\"rolling minimum fee bumped\"]):\n+            package_res = node.submitpackage(package=package_hex, maxfeerate=0)\n+\n+        assert_equal(package_res[\"package_msg\"], \"success\")\n+\n+        # If intra-packing trimming ends up happening anyways, we would",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 70,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Comment could be clearer: This test is specifically trying to test that intra-package trimming isn't happening. We already know that a transaction with a high feerate descendant shouldn't be evicted; we specifically want to make sure that the eviction decision doesn't happen until the package is all the way in. So we check effective-includes to ensure that the transactions were evaluated separately.",
      "created_at": "2024-10-25T01:18:29Z",
      "updated_at": "2024-10-25T01:20:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1815870276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1815870276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816583968",
      "pull_request_review_id": 2395126516,
      "id": 1816583968,
      "node_id": "PRRC_kwDOABII585sRt8g",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large\n+        # which means in aggregate they could trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing\n+            parent_feerate = mempoolmin_feerate + Decimal(\"0.00000001\") if i == num_big_parents - 1 else mempoolmin_feerate\n+            parent = self.wallet.create_self_transfer(fee_rate=parent_feerate, target_vsize=parent_vsize, confirmed_only=True)\n+            parent_utxos.append(parent[\"new_utxo\"])\n+            package_hex.append(parent[\"hex\"])\n+            big_parent_txids.append(parent[\"txid\"])\n+            big_parent_wtxids.append(parent[\"wtxid\"])\n+            # There is room for each of these transactions independently\n+            assert node.testmempoolaccept([parent[\"hex\"]])[0][\"allowed\"]\n+\n+        # Create a child spending everything with an insane fee, bumping the package above mempool_entry_minrate\n+        child = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_utxos, fee_per_output=10000000)\n+        package_hex.append(child[\"hex\"])\n+\n+        # Package should be submitted, temporarily exceeding maxmempool, but not evicted.\n+        package_res = None\n+        with node.assert_debug_log(expected_msgs=[\"rolling minimum fee bumped\"]):\n+            package_res = node.submitpackage(package=package_hex, maxfeerate=0)\n+\n+        assert_equal(package_res[\"package_msg\"], \"success\")\n+\n+        # If intra-packing trimming ends up happening anyways, we would\n+        # see this show up in effective-includes results when a parent\n+        # and child package are evaluated together as a single subpackage\n+        assert_equal(len(package_res[\"tx-results\"]), len(big_parent_wtxids) + 1)\n+        for wtxid in big_parent_wtxids + [child[\"wtxid\"]]:\n+            assert_equal(len(package_res[\"tx-results\"][wtxid][\"fees\"][\"effective-includes\"]), 1)\n+\n+        # Maximum size must never be exceeded.\n+        assert_greater_than(node.getmempoolinfo()[\"maxmempool\"], node.getmempoolinfo()[\"bytes\"])\n+\n+        # Package found in mempool still\n+        resulting_mempool_txids = node.getrawmempool()\n+        assert child[\"txid\"] in resulting_mempool_txids\n+        for txid in big_parent_txids:\n+            assert txid in resulting_mempool_txids\n+\n+        # Check every evicted tx was higher feerate than parents which evicted it\n+        eviction_set = set(mempool_txids) - set(resulting_mempool_txids) - set(big_parent_txids)",
      "path": "test/functional/mempool_limit.py",
      "position": 88,
      "original_position": 87,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`- set(big_parent_txids)`\r\n\r\nI suppose this can be dropped based on the assertion above on lines 167/8?`big_parent_txids` is already in `resulting_mempool_txids `.",
      "created_at": "2024-10-25T12:22:51Z",
      "updated_at": "2024-10-25T12:22:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1816583968",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816583968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679333",
      "pull_request_review_id": 2395285701,
      "id": 1816679333,
      "node_id": "PRRC_kwDOABII585sSFOl",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large\n+        # which means in aggregate they could trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing\n+            parent_feerate = mempoolmin_feerate + Decimal(\"0.00000001\") if i == num_big_parents - 1 else mempoolmin_feerate\n+            parent = self.wallet.create_self_transfer(fee_rate=parent_feerate, target_vsize=parent_vsize, confirmed_only=True)\n+            parent_utxos.append(parent[\"new_utxo\"])\n+            package_hex.append(parent[\"hex\"])\n+            big_parent_txids.append(parent[\"txid\"])\n+            big_parent_wtxids.append(parent[\"wtxid\"])\n+            # There is room for each of these transactions independently\n+            assert node.testmempoolaccept([parent[\"hex\"]])[0][\"allowed\"]\n+\n+        # Create a child spending everything with an insane fee, bumping the package above mempool_entry_minrate\n+        child = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_utxos, fee_per_output=10000000)\n+        package_hex.append(child[\"hex\"])\n+\n+        # Package should be submitted, temporarily exceeding maxmempool, but not evicted.\n+        package_res = None\n+        with node.assert_debug_log(expected_msgs=[\"rolling minimum fee bumped\"]):\n+            package_res = node.submitpackage(package=package_hex, maxfeerate=0)\n+\n+        assert_equal(package_res[\"package_msg\"], \"success\")\n+\n+        # If intra-packing trimming ends up happening anyways, we would",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 70,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": 1815870276,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tried rephrasing",
      "created_at": "2024-10-25T13:23:01Z",
      "updated_at": "2024-10-25T13:23:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1816679333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679411",
      "pull_request_review_id": 2395285848,
      "id": 1816679411,
      "node_id": "PRRC_kwDOABII585sSFPz",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate",
      "path": "test/functional/mempool_limit.py",
      "position": 12,
      "original_position": 12,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": 1815863021,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If someone opens a PR to persist I'll push for an RPC to set it explicitly :)",
      "created_at": "2024-10-25T13:23:05Z",
      "updated_at": "2024-10-25T13:23:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1816679411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679497",
      "pull_request_review_id": 2395285977,
      "id": 1816679497,
      "node_id": "PRRC_kwDOABII585sSFRJ",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large\n+        # which means in aggregate they could trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing\n+            parent_feerate = mempoolmin_feerate + Decimal(\"0.00000001\") if i == num_big_parents - 1 else mempoolmin_feerate\n+            parent = self.wallet.create_self_transfer(fee_rate=parent_feerate, target_vsize=parent_vsize, confirmed_only=True)\n+            parent_utxos.append(parent[\"new_utxo\"])\n+            package_hex.append(parent[\"hex\"])\n+            big_parent_txids.append(parent[\"txid\"])\n+            big_parent_wtxids.append(parent[\"wtxid\"])\n+            # There is room for each of these transactions independently\n+            assert node.testmempoolaccept([parent[\"hex\"]])[0][\"allowed\"]\n+\n+        # Create a child spending everything with an insane fee, bumping the package above mempool_entry_minrate\n+        child = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_utxos, fee_per_output=10000000)\n+        package_hex.append(child[\"hex\"])\n+\n+        # Package should be submitted, temporarily exceeding maxmempool, but not evicted.\n+        package_res = None\n+        with node.assert_debug_log(expected_msgs=[\"rolling minimum fee bumped\"]):\n+            package_res = node.submitpackage(package=package_hex, maxfeerate=0)\n+\n+        assert_equal(package_res[\"package_msg\"], \"success\")\n+\n+        # If intra-packing trimming ends up happening anyways, we would\n+        # see this show up in effective-includes results when a parent\n+        # and child package are evaluated together as a single subpackage\n+        assert_equal(len(package_res[\"tx-results\"]), len(big_parent_wtxids) + 1)\n+        for wtxid in big_parent_wtxids + [child[\"wtxid\"]]:\n+            assert_equal(len(package_res[\"tx-results\"][wtxid][\"fees\"][\"effective-includes\"]), 1)\n+\n+        # Maximum size must never be exceeded.\n+        assert_greater_than(node.getmempoolinfo()[\"maxmempool\"], node.getmempoolinfo()[\"bytes\"])\n+\n+        # Package found in mempool still\n+        resulting_mempool_txids = node.getrawmempool()\n+        assert child[\"txid\"] in resulting_mempool_txids\n+        for txid in big_parent_txids:\n+            assert txid in resulting_mempool_txids\n+\n+        # Check every evicted tx was higher feerate than parents which evicted it\n+        eviction_set = set(mempool_txids) - set(resulting_mempool_txids) - set(big_parent_txids)\n+        parent_entries = [node.getmempoolentry(entry) for entry in big_parent_txids]\n+        max_parent_feerate = max([entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in parent_entries])",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 89,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": 1815859993,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "changed in both places",
      "created_at": "2024-10-25T13:23:09Z",
      "updated_at": "2024-10-25T13:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1816679497",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679569",
      "pull_request_review_id": 2395286088,
      "id": 1816679569,
      "node_id": "PRRC_kwDOABII585sSFSR",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large\n+        # which means in aggregate they could trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 49,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": 1815846947,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2024-10-25T13:23:12Z",
      "updated_at": "2024-10-25T13:23:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1816679569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": 132,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679628",
      "pull_request_review_id": 2395286207,
      "id": 1816679628,
      "node_id": "PRRC_kwDOABII585sSFTM",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))",
      "path": "test/functional/mempool_limit.py",
      "position": null,
      "original_position": 24,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": 1815846424,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "deleted",
      "created_at": "2024-10-25T13:23:15Z",
      "updated_at": "2024-10-25T13:23:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1816679628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": 107,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679967",
      "pull_request_review_id": 2395286773,
      "id": 1816679967,
      "node_id": "PRRC_kwDOABII585sSFYf",
      "diff_hunk": "@@ -85,6 +85,99 @@ def test_rbf_carveout_disallowed(self):\n         assert_equal(res[\"package_msg\"], \"transaction failed\")\n         assert \"too-long-mempool-chain\" in res[\"tx-results\"][tx_C[\"wtxid\"]][\"error\"]\n \n+    def test_mid_package_eviction_success(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check a package where each parent passes the current mempoolminfee but a parent could be evicted before getting child's descendant feerate\")\n+\n+        # Clear mempool so it can be filled with minrelay txns\n+        self.restart_node(0, extra_args=self.extra_args[0] + [\"-persistmempool=0\"])\n+        assert_equal(node.getrawmempool(), [])\n+\n+        # Restarting the node resets mempool minimum feerate\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        fill_mempool(self, node)\n+        current_info = node.getmempoolinfo()\n+        mempoolmin_feerate = current_info[\"mempoolminfee\"]\n+\n+        mempool_txids = node.getrawmempool()\n+        mempool_entries = [node.getmempoolentry(entry) for entry in mempool_txids]\n+        fees_btc_per_kvb = [entry[\"fees\"][\"base\"] / (Decimal(entry[\"vsize\"]) / 1000) for entry in mempool_entries]\n+        #mempool_maxrate = max(fees_btc_per_kvb)\n+        #mempool_maxrate = mempool_maxrate.quantize(Decimal(\"0.00000000\"))\n+        mempool_entry_minrate = min(fees_btc_per_kvb)\n+        mempool_entry_minrate = mempool_entry_minrate.quantize(Decimal(\"0.00000000\"))\n+\n+        # There is a gap, our parents will be minrate, with child bringing up descendant fee sufficiently to avoid\n+        # eviction even though parents cause eviction on their own\n+        assert_greater_than(mempool_entry_minrate, mempoolmin_feerate)\n+\n+        package_hex = []\n+        # UTXOs to be spent by the ultimate child transaction\n+        parent_utxos = []\n+\n+        # Series of parents that don't need CPFP and are submitted individually. Each one is large\n+        # which means in aggregate they could trigger eviction, but child submission should result\n+        # in them not being evicted\n+        parent_vsize = 25000\n+        num_big_parents = 3\n+        # Need to be large enough to trigger eviction\n+        # (note that the mempool usage of a tx is about three times its vsize)\n+        assert_greater_than(parent_vsize * num_big_parents * 3, current_info[\"maxmempool\"] - current_info[\"bytes\"])\n+\n+        big_parent_txids = []\n+        big_parent_wtxids = []\n+        for i in range(num_big_parents):\n+            # Last parent is higher feerate causing other parents to be possibly\n+            # be evicted if trimming was allowed, which would cause the package to end up failing\n+            parent_feerate = mempoolmin_feerate + Decimal(\"0.00000001\") if i == num_big_parents - 1 else mempoolmin_feerate\n+            parent = self.wallet.create_self_transfer(fee_rate=parent_feerate, target_vsize=parent_vsize, confirmed_only=True)\n+            parent_utxos.append(parent[\"new_utxo\"])\n+            package_hex.append(parent[\"hex\"])\n+            big_parent_txids.append(parent[\"txid\"])\n+            big_parent_wtxids.append(parent[\"wtxid\"])\n+            # There is room for each of these transactions independently\n+            assert node.testmempoolaccept([parent[\"hex\"]])[0][\"allowed\"]\n+\n+        # Create a child spending everything with an insane fee, bumping the package above mempool_entry_minrate\n+        child = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_utxos, fee_per_output=10000000)\n+        package_hex.append(child[\"hex\"])\n+\n+        # Package should be submitted, temporarily exceeding maxmempool, but not evicted.\n+        package_res = None\n+        with node.assert_debug_log(expected_msgs=[\"rolling minimum fee bumped\"]):\n+            package_res = node.submitpackage(package=package_hex, maxfeerate=0)\n+\n+        assert_equal(package_res[\"package_msg\"], \"success\")\n+\n+        # If intra-packing trimming ends up happening anyways, we would\n+        # see this show up in effective-includes results when a parent\n+        # and child package are evaluated together as a single subpackage\n+        assert_equal(len(package_res[\"tx-results\"]), len(big_parent_wtxids) + 1)\n+        for wtxid in big_parent_wtxids + [child[\"wtxid\"]]:\n+            assert_equal(len(package_res[\"tx-results\"][wtxid][\"fees\"][\"effective-includes\"]), 1)\n+\n+        # Maximum size must never be exceeded.\n+        assert_greater_than(node.getmempoolinfo()[\"maxmempool\"], node.getmempoolinfo()[\"bytes\"])\n+\n+        # Package found in mempool still\n+        resulting_mempool_txids = node.getrawmempool()\n+        assert child[\"txid\"] in resulting_mempool_txids\n+        for txid in big_parent_txids:\n+            assert txid in resulting_mempool_txids\n+\n+        # Check every evicted tx was higher feerate than parents which evicted it\n+        eviction_set = set(mempool_txids) - set(resulting_mempool_txids) - set(big_parent_txids)",
      "path": "test/functional/mempool_limit.py",
      "position": 88,
      "original_position": 87,
      "commit_id": "f32c34d0c3d4041a301822b27e88d6db4cbf631e",
      "original_commit_id": "b318959bf8c2b9b02f718649adec03f7e07ac79d",
      "in_reply_to_id": 1816583968,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a little bit of test redundancy that makes it more readable imo? leaving as is",
      "created_at": "2024-10-25T13:23:29Z",
      "updated_at": "2024-10-25T13:23:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31152#discussion_r1816679967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816679967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    }
  ]
}