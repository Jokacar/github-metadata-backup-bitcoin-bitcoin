{
  "type": "issue",
  "issue": {
    "id": 2551340657,
    "node_id": "I_kwDOABII586YEl5x",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30983",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30983/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30983/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30983/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/30983",
    "number": 30983,
    "state": "open",
    "state_reason": null,
    "title": "RFC: Multiprocess binaries and packaging options",
    "body": "Issue for discussion about ways multiprocess functionality could be packaged and released. Trying to figure out which of the 3 release options described below makes the most sense.\r\n\r\n### Binaries\r\n\r\nOne goal of the [multiprocess project](https://github.com/bitcoin/bitcoin/issues/28722) has been to provide minimal binaries that only include node, wallet, or gui code, which spawn or connect to other processes as needed to provide other functionality.\r\n\r\nThe idea implemented in #10102 is to have 3 binaries:\r\n\r\n- **`bitcoin-node`** - contains node code and libraries (leveldb), and no wallet or gui code\r\n- **`bitcoin-wallet`** - contains wallet code and libraries (sqlite), and no node or gui code\r\n- **`bitcoin-gui`** - contains gui code and libraries (qt), and no node or wallet code\r\n\r\nWhich are built differently than current binaries:\r\n\r\n- **`bitcoind`** - contains node code+libraries (leveldb) and wallet code+libraries (sqlite)\r\n- **`bitcoin-qt`** - contains node code+libraries (leveldb), wallet code+libraries (sqlite), and gui code+libraries (qt)\r\n\r\n### Original release plan\r\n\r\nMy original idea implementing this was for there to be a separate multiprocess bitcoin release with the multiprocess binaries.\r\n\r\nThe main release would be unchanged, including existing `bitcoind` and `bitcoin-qt` binaries, but there would be a separate release containing `bitcoin-node`, `bitcoin-wallet` and `bitcoin-gui` binaries. The main release would be available in the normal place like *bitcoincore.org/bin/bitcoin-core-27.1/*, and the multiprocess release would be available alongside, at *bitcoincore.org/bin/bitcoin-core-multiprocess-27.1/* or someplace similar. Then, after a release cycle or two, the multiprocess release could replace the main release if it was working well.\r\n\r\nBut this approach has some drawbacks, namely that it would be a burden for maintainers to create separate releases and make them accessible, and that it could be confusing for users to encounter two releases with different binaries. So it doesn't seem like this approach is optimal (at least not for general users, maybe it would be ok for miners using the IPC mining interface).\r\n\r\n### Release options overview\r\n\r\nTaking a step back, it seems like there are 3 possible options for releasing multiprocess functionality:\r\n\r\n1. **Side-release**: create a separate multiprocess release for multiprocess binaries, as described above.\r\n2. **Side-binaries**: add multiprocess binaries (`bitcoin-node`, `bitcoin-wallet`, `bitcoin-gui`) to existing releases alongside existing binaries (`bitcoind` and `bitcoin-qt`).\r\n3. **Combined binaries**: add multiprocess functionality to existing `bitcoind` and `bitcoin-qt` binaries that can be enabled/disabled with runtime arguments.\r\n\r\n### Release options comparison\r\n\r\nFrom discussion in recent PR's and offline, it seems like approach (3) might be favored, but it is worth considering pros and cons of the three approaches.\r\n\r\n1. **Side-release**\r\n   - Pros:\r\n     - *Opt-in*: Keeps original binaries unchanged for users who don't want multiprocess functionality.\r\n     - *Minimal binaries*: Node binary contains only node code not wallet code, gui binary contains no node or wallet code.\r\n   - Cons:\r\n     - *Extra work*: It's more work for maintainers and signers to create an extra set of packages and make them accessible.\r\n     - *Complexity*: Posting a separate release could be confusing for users.\r\n2. **Side-binaries**:\r\n   - Pros:\r\n     - *Opt-in* and *Minimal binaries*: same as previous \r\n     - *Easy to implement*: Implemented in [#30975](https://github.com/bitcoin/bitcoin/issues/30975) and basically requires no changes other than flipping cmake options.\r\n   - Cons:\r\n     - *Confusing*: This would probably be the most confusing approach for users. They would see one release with `bitcoind`, `bitcoin-qt`, `bitcoin-node`, `bitcoin-wallet`, `bitcoin-gui` binaries and not be able to easily understand how they are intended to be used.\r\n   - Potential mitigations:\r\n     - We would probably put multiprocess binaries in another folder (like `multiprocess/bin/` instead of `bin/`) so they are clearly labeled and aren't confused with the default binaries.\r\n     - We might want to rethink our approach to packaging binaries to begin with. We are already shipping a substantial collection of binaries: `bitcoin-cli`, `bitcoind`, `bitcoin-qt`, `bitcoin-tx`, `bitcoin-util`, `bitcoin-wallet`, and `test_bitcoin` which users are expected to call individually, and are probably already somewhat confusing. By contrast, git ships dozens of binaries and nobody is confused by them because they are live in a libexec directory and are wrapped with single `git` command that finds and executes the right ones. Maybe taking `git` as inspiration we could have add a unified `bitcoin` command that looks like:\r\n\r\n        ```bash\r\n        bitcoin gui [OPTIONS]             # Start a gui\r\n        bitcoin daemon [OPTIONS]          # Start a daemon\r\n        bitcoin rpc [OPTIONS] COMMAND     # Call an rpc\r\n        bitcoin wallet [OPTIONS] COMMAND  # Access a wallet\r\n        bitcoin test [OPTIONS]            # Run tests\r\n        bitcoin help\r\n        # ... and more for bitcoin-util, bitcoin-tx ...\r\n\r\n3. **Combined binaries**:\r\n   - Pros:\r\n     - *Compatibility*: Users could download and invoke `bitcoind` and `bitcoin-qt` binaries as before, not know they support IPC, not use IPC unless it's switched on by default, and there would be have runtime options to turn it on or off.\r\n   - Cons:\r\n     - *Bigger binaries and more dependencies*: Binaries will both contain node, wallet, and IPC code. There will be no non-IPC binaries users can deploy and run separately if they don't use IPC, and no node binary users can deploy and run separately if they don't use the wallet, or want to run the wallet and node on different hosts.\r\n     - *Requires code changes*: Will require some thinking about how to add runtime options to [#10102](https://github.com/bitcoin/bitcoin/pull/10102) to control whether `bitcoind` should spawn separate wallet process or run wallet code internally, and similarly whether `bitcoin-gui` should use a separate node process or run node code in the same process. Will also require updating the build system.\r\n\r\nAs mentioned, approach (3) seems favored so far, though personally I like approach (2), especially if we could have a unified `bitcoin` command.\r\n\r\nCreating this issue to get feedback and document any decisions we make.",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 1,
    "created_at": "2024-09-26T19:06:07Z",
    "updated_at": "2024-09-27T09:16:43Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 2378828326,
      "node_id": "IC_kwDOABII586Nygom",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2378828326",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-27T09:15:58Z",
      "updated_at": "2024-09-27T09:16:43Z",
      "author_association": "MEMBER",
      "body": "I like the idea of a unified `bitcoin` command.\r\n\r\nWe could start with seperate binaries for multiprocess, e.g.:\r\n\r\n* `bitcoin daemon` (for `bitcoind`)\r\n* `bitcoin daemon multiprocess` for `bitcoin-node`\r\n* `bitcoin gui` (for `bitcoin-qt`)\r\n* `bitcoin gui multiprocess` (for `bitcoin-gui`)\r\n\r\nAnd perhaps not worry about just including multiprocess in the utilities:\r\n* `bitcoin wallet` (for `bitcoin-wallet`)\r\n\r\nThen later on the `multiprocess` option could be made default and we drop the non-multiprocess binary.\r\n\r\nThe existing `bitcoind`, `bitcoin-qt` and `bitcoin-cli` and  binaries should probably stay where they are. Later on they can be changed to emit a deprecation warning \"use bitcoin daemon instead\", and then eventually deleted.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30983#issuecomment-2378828326",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30983"
    }
  ]
}