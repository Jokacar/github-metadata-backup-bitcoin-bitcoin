{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888",
    "id": 1392396596,
    "node_id": "PR_kwDOABII585S_kk0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/27888",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/27888.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/27888.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/131314b62e899f95d1863083d303b489b3212b16",
    "number": 27888,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Fuzz: a more efficient descriptor parsing target",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The current descriptor parsing fuzz target requires valid public or private keys to be provided. This is unnecessary as we are only interested in fuzzing the descriptor parsing logic here (other targets are focused on fuzzing keys serializations). And it's pretty inefficient, especially for formats that need a checksum (`xpub`, `xprv`, WIF).\r\n\r\nThis introduces a new target that mocks the keys as an index in a list of precomputed keys. Keys are represented as 2 hex characters in the descriptor. The key type (private, public, extended, ..) is deterministically based on this one-byte value. Keys are deterministically generated at target initialization. This is much more efficient and also largely reduces the size of the seeds.\r\nTL;DR: for instance instead of requiring the fuzzer to generate a `pk(xpub6DdBu7pBoyf7RjnUVhg8y6LFCfca2QAGJ39FcsgXM52Pg7eejUHLBJn4gNMey5dacyt4AjvKzdTQiuLfRdK8rSzyqZPJmNAcYZ9kVVEz4kj)` to parse a valid descriptor, it just needs to generate a `pk(03)`.\r\n\r\nNote we only mock the keys themselves, not the entire descriptor key expression. As we want to fuzz the real code that parses the rest of the key expression (origin, derivation paths, ..).\r\n\r\nThis is a target i used for reviewing #17190 and #27255, and figured it was worth PR'ing on its own since the added complexity for mocking the keys is minimal and it could help prevent introducing bugs to the descriptor parsing logic much more efficiently.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2023-06-14T13:13:09Z",
    "updated_at": "2023-07-28T10:46:57Z",
    "closed_at": "2023-07-27T17:48:39Z",
    "mergeable_state": "unknown",
    "merged_at": "2023-07-27T17:48:39Z",
    "merge_commit_sha": "cbf385058bd68e3be98edab2637a42d988e70ffe",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "darosior:efficient_desc_target",
      "ref": "efficient_desc_target",
      "sha": "131314b62e899f95d1863083d303b489b3212b16",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 168868367,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjg4NjgzNjc=",
        "name": "bitcoin",
        "full_name": "darosior/bitcoin",
        "owner": {
          "login": "darosior",
          "id": 22457751,
          "node_id": "MDQ6VXNlcjIyNDU3NzUx",
          "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/darosior",
          "html_url": "https://github.com/darosior",
          "followers_url": "https://api.github.com/users/darosior/followers",
          "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
          "organizations_url": "https://api.github.com/users/darosior/orgs",
          "repos_url": "https://api.github.com/users/darosior/repos",
          "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/darosior/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/darosior/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/darosior/bitcoin",
        "archive_url": "https://api.github.com/repos/darosior/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/darosior/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/darosior/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/darosior/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/darosior/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/darosior/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/darosior/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/darosior/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/darosior/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/darosior/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/darosior/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/darosior/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/darosior/bitcoin/events",
        "forks_url": "https://api.github.com/repos/darosior/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/darosior/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/darosior/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/darosior/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/darosior/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/darosior/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/darosior/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/darosior/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/darosior/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/darosior/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/darosior/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/darosior/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/darosior/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/darosior/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/darosior/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/darosior/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:darosior/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/darosior/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/darosior/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/darosior/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/darosior/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/darosior/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/darosior/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/darosior/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/darosior/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/darosior/bitcoin/hooks",
        "svn_url": "https://github.com/darosior/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 218780,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-28T08:31:01Z",
        "created_at": "2019-02-02T19:20:27Z",
        "updated_at": "2023-05-05T11:25:14Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d23fda05842ba4539b225bbab01b94df0060f697",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35456,
        "stargazers_count": 70555,
        "watchers_count": 70555,
        "size": 235922,
        "default_branch": "master",
        "open_issues_count": 674,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-28T10:45:06Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-07-28T10:43:45Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 144,
    "deletions": 5,
    "changed_files": 1,
    "commits": 3,
    "review_comments": 18,
    "comments": 18
  },
  "events": [
    {
      "event": "commented",
      "id": 1591186541,
      "node_id": "IC_kwDOABII585e15Rt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591186541",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T13:13:11Z",
      "updated_at": "2023-07-27T17:47:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [MarcoFalke](https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1646016856), [achow101](https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1654108231) |\n| Concept ACK | [dergoegge](https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591381981) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26573](https://github.com/bitcoin/bitcoin/pull/26573) (Wallet: don't underestimate the fees when spending a Taproot output by darosior)\n* [#26567](https://github.com/bitcoin/bitcoin/pull/26567) (Wallet: estimate the size of signed inputs using descriptors by darosior)\n* [#22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591186541",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9528837951,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAI39oc_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9528837951",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T13:41:09Z"
    },
    {
      "event": "labeled",
      "id": 9528839097,
      "node_id": "LE_lADOABII585ot-FXzwAAAAI39ou5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9528839097",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T13:41:14Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1591285878,
      "node_id": "IC_kwDOABII585e2Rh2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591285878",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T14:09:08Z",
      "updated_at": "2023-06-14T14:09:08Z",
      "author_association": "MEMBER",
      "body": "Looks like this touches non-fuzz code? No opinion if people want this, but a much simpler implementation would be to just create a copy of the buffer and inject the pre-generated static string into it. (This is basically what a fuzz engine does automatically, with the difference that you can now provide the string dictionary yourself, directly in the fuzz target).\r\n\r\nthe fuzz target would look like:\r\n\r\n```cpp\r\nauto str{fdp.ConsumeString()};\r\nif (fdp.ConsumeBool()) {\r\n  str = MockDescriptor(str);\r\n}\r\nconst auto desc = Parse(str);\r\n```\r\n\r\nWith `MockDescriptor` doing a search of `pk(xx)` and then replacing it with `pk(yy)`, where `yy=raw_pubkeys[int(xx) % raw_pubkeys.size()]` (already hex encoded).\r\n\r\nThis has the benefits of not mocking out the parsing logic, which for `GetXOnlyPubKey` is actually worthy to fuzz? Also, it allows to print the fuzz input, if needed, and use it over RPC for debugging. Finally, it doesn't touch real code, only test code.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591285878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "commented",
      "id": 1591314299,
      "node_id": "IC_kwDOABII585e2Yd7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591314299",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T14:20:03Z",
      "updated_at": "2023-06-14T14:21:29Z",
      "author_association": "MEMBER",
      "body": "In what you suggest `MockDescriptor` would basically have to reimplement all of the descriptor parsing logic to be able to detect when is a key expected and replace the hex-encoded byte by an actual key. I figured the slight modification to the descriptor code to make key parsing mockable was preferable. (Note that's what we have already in Miniscript which allows us to have an efficient `miniscript_string` fuzz target.)\r\n\r\nTo be clear this is not only about mocking `pk()` expressions but anywhere we'd expect a key.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591314299",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "unsubscribed",
      "id": 9529642428,
      "node_id": "UE_lADOABII585ot-FXzwAAAAI4As28",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9529642428",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T14:38:03Z"
    },
    {
      "event": "unlabeled",
      "id": 9529691098,
      "node_id": "UNLE_lADOABII585ot-FXzwAAAAI4A4va",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9529691098",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T14:41:19Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1591379997,
      "node_id": "IC_kwDOABII585e2ogd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591379997",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T14:49:15Z",
      "updated_at": "2023-06-14T14:49:15Z",
      "author_association": "MEMBER",
      "body": "Ok, I see. I guess another alternative would be to randomly inject random pre-generated keys at random positions in the string, absent of any logic. Then let the fuzz engine figure out the right positions via coverage feedback.\r\n\r\nNo strong opinion, just leaving random ideas that can be implemented with less code.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591379997",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "commented",
      "id": 1591381981,
      "node_id": "IC_kwDOABII585e2o_d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591381981",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T14:50:26Z",
      "updated_at": "2023-06-14T14:50:26Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nMocking seems fine to me, but I wonder if we could achieve something similar by placing (in)valid encoded keys in a fuzz dictionary (e.g. https://github.com/bitcoin-core/qa-assets/pull/122), which is also almost the same as Marco's suggestion. This would be less efficient compared to what is in this PR but the inputs would still be available for debugging over RPC. We can of course also just do both since adding to the dictionaries is very easy.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591381981",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "commented",
      "id": 1591450310,
      "node_id": "IC_kwDOABII585e25rG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591450310",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T15:16:18Z",
      "updated_at": "2023-06-14T15:16:18Z",
      "author_association": "MEMBER",
      "body": "Thanks both for throwing in ideas. Note i don't have strong opinions here either, it's just some review code that i figured could be helpful having in too. However i still don't think the approaches suggested here would be better:\r\n- Inserting valid keys at random positions in the input. I'm assuming you describe something that looks like 1) get the number of keys from the fuzzer output 2) get the positions to insert each at from the fuzzer output. I may be underestimating the fuzzer's capabilities but it sounds much less efficient.\r\n- Including valid keys in a dictionary. Again, i'm not very familiar with the inernals of fuzzing engines but i suspect this would make the fuzzer grind the key with virtually no chance of finding another valid one, wasting a lot of cycles.\r\n- I don't think keeping the raw seed human readable for debugging over RPC should generally be a goal, especially not at the expense of efficiency. To get something readable you can simply run `./src/test/fuzz/fuzz ./crash-XXXXX` with a `ToString()` printed to stdout.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591450310",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "commented",
      "id": 1591459495,
      "node_id": "IC_kwDOABII585e276n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591459495",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T15:19:12Z",
      "updated_at": "2023-06-14T15:19:12Z",
      "author_association": "MEMBER",
      "body": "Another alternative may be to just perform search-replace in the fuzz-read string before handing it to the parser? Eg anything of the form \"%XX\" where XX is two hex characters, is replaced by a lookup in a table.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591459495",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "commented",
      "id": 1591465134,
      "node_id": "IC_kwDOABII585e29Su",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591465134",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T15:21:58Z",
      "updated_at": "2023-06-14T15:21:58Z",
      "author_association": "MEMBER",
      "body": "Hmm good point. Using a distinguishable character fixes the issue of having to \"basically reimplement descriptor parsing logic\".\n------- Original Message -------\nOn Wednesday, June 14th, 2023 at 5:19 PM, Pieter Wuille ***@***.***> wrote:\n\n> Another alternative may be to just perform search-replace in the fuzz-read string before handing it to the parser? Eg anything of the form \"%XX\" where XX is two hex characters, is replaced by a lookup in a table.\n>\n> —\n> Reply to this email directly, [view it on GitHub](https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591459495), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/AFLK3F3PYOENOE2ZPE75HITXLHI7ZANCNFSM6AAAAAAZGLFYQU).\n> You are receiving this because you authored the thread.Message ID: ***@***.***>",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591465134",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "commented",
      "id": 1591485898,
      "node_id": "IC_kwDOABII585e3CXK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591485898",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T15:31:45Z",
      "updated_at": "2023-06-14T15:31:57Z",
      "author_association": "MEMBER",
      "body": "> I may be underestimating the fuzzer's capabilities but it sounds much less efficient.\r\n\r\nI am happy to run a bench, if you happen to have a bug laying around :)",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591485898",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "commented",
      "id": 1591491404,
      "node_id": "IC_kwDOABII585e3DtM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591491404",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T15:35:06Z",
      "updated_at": "2023-06-14T15:35:06Z",
      "author_association": "MEMBER",
      "body": "I don't, but i think Pieter settled the debate anyways. :)\n------- Original Message -------\nOn Wednesday, June 14th, 2023 at 5:31 PM, MacrabFalke ***@***.***> wrote:\n\n>> I may be underestimating the fuzzer's capabilities but it sounds much less efficient.\n>\n> I am happy to run a bench, if you happen to have a crash+bug laying around :)\n>\n> —\n> Reply to this email directly, [view it on GitHub](https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591485898), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/AFLK3F75QKRNVW44OITSYKLXLHKO5ANCNFSM6AAAAAAZGLFYQU).\n> You are receiving this because you authored the thread.Message ID: ***@***.***>",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591491404",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9540463931,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAI4p-07",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9540463931",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T13:24:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9540676789,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAI4qyy1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9540676789",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T13:39:59Z"
    },
    {
      "event": "labeled",
      "id": 9540677812,
      "node_id": "LE_lADOABII585ot-FXzwAAAAI4qzC0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9540677812",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T13:40:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9540955358,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAI4r2ze",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9540955358",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T14:02:43Z"
    },
    {
      "event": "commented",
      "id": 1593201932,
      "node_id": "IC_kwDOABII585e9lUM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593201932",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T14:42:42Z",
      "updated_at": "2023-06-15T15:16:33Z",
      "author_association": "MEMBER",
      "body": "Updated following @sipa's suggestion of using a marker to be able to search and replace in the descriptor string directly.\r\n\r\nThe diff is now twice smaller, and this does not touch the descriptor parsing logic anymore. After running the new `mocked_descriptor_parse` target for half a hour on my laptop i get more branch coverage for `descriptor.cpp` than with the existing corpus for `descriptor_parse`.\r\n\r\n#### [ `descriptor_parse`](http://download.darosior.ninja/dump/desc_coverage_not_mocked/src/script/index.html)\r\n![image](https://github.com/bitcoin/bitcoin/assets/22457751/0829ab07-2151-4489-8381-39d78ad827f0)\r\n\r\n####  [`mocked_descriptor_parse`](http://download.darosior.ninja/dump/desc_coverage_mocked/src/script/index.html)\r\n![image](https://github.com/bitcoin/bitcoin/assets/22457751/f8b586b8-1b5d-469d-87f4-e577df2fb930)\r\n",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1593201932",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "mentioned",
      "id": 9541428727,
      "node_id": "MEE_lADOABII585ot-FXzwAAAAI4tqX3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9541428727",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T14:42:42Z"
    },
    {
      "event": "subscribed",
      "id": 9541428752,
      "node_id": "SE_lADOABII585ot-FXzwAAAAI4tqYQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9541428752",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T14:42:42Z"
    },
    {
      "event": "unlabeled",
      "id": 9542284619,
      "node_id": "UNLE_lADOABII585ot-FXzwAAAAI4w7VL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9542284619",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T15:56:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1482059834,
      "node_id": "PRR_kwDOABII585YVnA6",
      "url": null,
      "actor": null,
      "commit_id": "8edac3d83eac41e703cd07f54919f78d375a7cb7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#pullrequestreview-1482059834",
      "submitted_at": "2023-06-15T17:12:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9548445553,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAI5Ibdx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9548445553",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-16T07:54:03Z"
    },
    {
      "event": "reviewed",
      "id": 1483996768,
      "node_id": "PRR_kwDOABII585Yc_5g",
      "url": null,
      "actor": null,
      "commit_id": "fad60fc6f6486d3b28de4bbe937e293f65d5cbd5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#pullrequestreview-1483996768",
      "submitted_at": "2023-06-16T17:22:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9560950354,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAI54IZS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9560950354",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-18T12:16:54Z"
    },
    {
      "event": "commented",
      "id": 1605526732,
      "node_id": "IC_kwDOABII585fsmTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1605526732",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-24T14:11:17Z",
      "updated_at": "2023-06-24T14:11:17Z",
      "author_association": "MEMBER",
      "body": "Suggest putting \"Fuzz\" in title, and labelling.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1605526732",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "renamed",
      "id": 9653169337,
      "node_id": "RTE_lADOABII585ot-FXzwAAAAI_X6y5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9653169337",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T14:37:00Z",
      "rename": {
        "from": "A more efficient descriptor parsing target",
        "to": "Fuzz: a more efficient descriptor parsing target"
      }
    },
    {
      "event": "labeled",
      "id": 9653169911,
      "node_id": "LE_lADOABII585ot-FXzwAAAAI_X673",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9653169911",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T14:37:03Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 9837428493,
      "node_id": "LE_lADOABII585ot-FXzwAAAAJKWz8N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9837428493",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-17T13:00:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ2MDIyOWVkZTU0ZTA1NzI0ZDQ0NGVhYmEwMmE5ZWQ3MmY1YWRhMDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d60229ede54e05724d444eaba02a9ed72f5ada02",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d60229ede54e05724d444eaba02a9ed72f5ada02",
      "tree": {
        "sha": "0de92d6e696d2179e3da2febb93b2f6ec40533e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0de92d6e696d2179e3da2febb93b2f6ec40533e6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0de92d6e696d2179e3da2febb93b2f6ec40533e6\nparent d23fda05842ba4539b225bbab01b94df0060f697\nauthor Antoine Poinsot <darosior@protonmail.com> 1684259710 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1689928813 +0200\n\nfuzz: make the parsed descriptor testing into a function\n\nWe'll be reusing it in the new target.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmS6RG0ACgkQ4T/BRc0/\nQwQSVgv/UZh7xx7Sr2QJyH2th1QCzuwkFgXOUejGafchKXvzuk/1rY6lIajiwJ3j\nXQrmQJDgLTJkgHToq7juAir0fzwMTz1pG5fgRNAXnuapoNZFEOfI6PI6saCzgJ2q\nUCG2rifLCk5589mnBtR3gWTCB5MGKQY1XfYh09z/MwgCQlzYvx8M4fcsNqL6kwB3\n10VGf3WeHlsRLb2TW0Yf76wVxduzfyKJaXW+RlMxegKUmDneqTCIOlaga+pgfSHn\n5nenVH7jQxgtgU08RpO5QGI9OdW8hz9nut6Qyn9w3QfpqhoRZkdAHLOHLr/Ve1Iv\nNAf4dJ6hqCd4WBQVUlrAiHgpx2ykb5Ff5aPivWHkGOkik4n1M92EJxB64cgidcLn\nIepu//xQko6B7agTFAwtUmGaHw0QrOysAu33hxc8MzfaXm/SxLrQrFcdlg35sLud\nR2ZWE7xTsvGL0YWmT4w2z/lZG2J4y+9nYR3V9ETevoG4YGMmQFYxCxO7h6nSthvO\nP9jIOwHi\n=1Vhs\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d23fda05842ba4539b225bbab01b94df0060f697",
          "sha": "d23fda05842ba4539b225bbab01b94df0060f697",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d23fda05842ba4539b225bbab01b94df0060f697"
        }
      ],
      "message": "fuzz: make the parsed descriptor testing into a function\n\nWe'll be reusing it in the new target.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-07-21T08:40:13Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-05-16T17:55:10Z"
      },
      "sha": "d60229ede54e05724d444eaba02a9ed72f5ada02"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9882998521,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAJNEpb5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9882998521",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T08:50:00Z"
    },
    {
      "event": "unlabeled",
      "id": 9883605008,
      "node_id": "UNLE_lADOABII585ot-FXzwAAAAJNG9gQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9883605008",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T09:55:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9883950924,
      "node_id": "LE_lADOABII585ot-FXzwAAAAJNIR9M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9883950924",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T10:35:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1645380531,
      "node_id": "IC_kwDOABII585iEoOz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1645380531",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T10:42:35Z",
      "updated_at": "2023-07-21T10:42:35Z",
      "author_association": "MEMBER",
      "body": "For testing I've injected a bug in currently uncovered code:\r\n\r\n\r\n```diff\r\ndiff --git a/src/script/descriptor.cpp b/src/script/descriptor.cpp\r\nindex 09ded5fc61..b69db182ab 100644\r\n--- a/src/script/descriptor.cpp\r\n+++ b/src/script/descriptor.cpp\r\n@@ -509,7 +509,7 @@ public:\r\n         out = \"[\" + origin_str + \"]\" + EncodeExtPubKey(xpub) + FormatHDKeypath(end_path);\r\n         if (IsRange()) {\r\n             out += \"/*\";\r\n-            assert(m_derive == DeriveType::UNHARDENED);\r\n+            assert(m_derive != DeriveType::UNHARDENED); // Injected BUG!! (bad)\r\n         }\r\n         return true;\r\n     }\r\n```\r\n\r\n...\r\n\r\nBut it looks like the fuzz target just crashed immediately anyway (see CI)\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1645380531",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9884866218,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAJNLxaq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9884866218",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T12:33:08Z"
    },
    {
      "event": "commented",
      "id": 1645525854,
      "node_id": "IC_kwDOABII585iFLte",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1645525854",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T12:44:07Z",
      "updated_at": "2023-07-21T12:44:07Z",
      "author_association": "MEMBER",
      "body": "Thanks for testing. Fixed the issue. I also introduced the bug you shared and it does make the target crash.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1645525854",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "unlabeled",
      "id": 9886181486,
      "node_id": "UNLE_lADOABII585ot-FXzwAAAAJNQyhu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9886181486",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T14:48:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1645976254,
      "node_id": "IC_kwDOABII585iG5q-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1645976254",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T16:44:28Z",
      "updated_at": "2023-07-21T17:00:50Z",
      "author_association": "MEMBER",
      "body": "Did quick check to see how many iterations it would take to find my injected bug with libfuzzer:\r\n\r\n* `-use_value_profile=1`:\r\n![pull_uvp1](https://github.com/bitcoin/bitcoin/assets/6399679/1e213972-8ac3-4c87-8dde-fa89411cfd71)\r\n\r\n* `-use_value_profile=0`:\r\n![pull_uvp0](https://github.com/bitcoin/bitcoin/assets/6399679/11c74a2f-107f-4f48-bbc9-a2b72025e91d)\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1645976254",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "reviewed",
      "id": 1541508735,
      "node_id": "PRR_kwDOABII585b4Y5_",
      "url": null,
      "actor": null,
      "commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "nice, lgtm ACK 84dee4fe690e08a5adaad1c78530666da07075d8 🦄\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: nice, lgtm ACK 84dee4fe690e08a5adaad1c78530666da07075d8 🦄\r\nag2blJR9VoWl2NoAXwUZSDU54s5hPaFz7IJt+iLlaSMLYtYwbr4/XMw4CW9xm1A+BXAn9ZXtWQxrwFSRr/COBg==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#pullrequestreview-1541508735",
      "submitted_at": "2023-07-21T17:00:13Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9887359492,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAJNVSIE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9887359492",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T17:08:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9887381885,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAJNVXl9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9887381885",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T17:11:47Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkwYTI0NzQxZTc5Y2JmMjBkNDQ1NjA1MGYwZmUzOWMzZjg4ZjUyNDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90a24741e79cbf20d4456050f0fe39c3f88f5246",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/90a24741e79cbf20d4456050f0fe39c3f88f5246",
      "tree": {
        "sha": "4f7f01b0254bdbeaa393d92367a7566c9cd44017",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f7f01b0254bdbeaa393d92367a7566c9cd44017"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4f7f01b0254bdbeaa393d92367a7566c9cd44017\nparent d60229ede54e05724d444eaba02a9ed72f5ada02\nauthor Antoine Poinsot <darosior@protonmail.com> 1684259576 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1689959670 +0200\n\nfuzz: add a new, more efficient, descriptor parsing target\n\nThis new target focuses on fuzzing the actual descriptor parsing logic\nby not requiring the fuzzer to produce valid keys (nor a valid checksum\nfor that matter).\nThis should make it much more efficient to find bugs we could introduce\nmoving forward.\n\nUsing a character as a marker (here '%') to be able to search and\nreplace in the string without having to mock the actual descriptor\nparsing logic was an insight from Pieter Wuille.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmS6vPYACgkQ4T/BRc0/\nQwRUJwv/WmkSI53XuVQs0S2rAPyWat+/XPdLEa74E84eH4MX854iGNoim6pXzBq+\nGtBryFSGCdvIiNhf9wS5PWqOOOkbmNUPe4wW+OYsIwuAbGgTYfXcSaTBmdelL/M6\nJr3WW5U3mB7CChr/GKjx+Cil35AuDzXASVqttNfPAkiSQ4qKQde1rA/zIxW95Chi\nwiCXyTF3fvWmx78PWsmdC+EUcPVqX2yV97XKmT+Al3tFzBXwBgNXcQqT1vQ5SNg4\nPtMuHLGysoTjDJlWuPChmCCpIdjh758A9AqMJV59Q4WX68LBvnFTtw5aIZ1J8/4N\n/s2ITDFwAzFlqe417NVDMnmTTCpnR+jzmHE2ND7OG5+Uac4iaoA+1OCj4TPUtXbX\nN19FEvaciWq4FOatcP6Nq7gNpRMnAd+wu9+L+Jm+UgHRit70yYdBHJCPOLu+V3Xz\nC3O7JjmihWyzeeENFf0HMnOYNVKZJOLa0peNSm6WAv2Q2a2O2tW2ZGzuL9Evya4s\nb6u9J2+8\n=geiO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d60229ede54e05724d444eaba02a9ed72f5ada02",
          "sha": "d60229ede54e05724d444eaba02a9ed72f5ada02",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d60229ede54e05724d444eaba02a9ed72f5ada02"
        }
      ],
      "message": "fuzz: add a new, more efficient, descriptor parsing target\n\nThis new target focuses on fuzzing the actual descriptor parsing logic\nby not requiring the fuzzer to produce valid keys (nor a valid checksum\nfor that matter).\nThis should make it much more efficient to find bugs we could introduce\nmoving forward.\n\nUsing a character as a marker (here '%') to be able to search and\nreplace in the string without having to mock the actual descriptor\nparsing logic was an insight from Pieter Wuille.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-07-21T17:14:30Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-05-16T17:52:56Z"
      },
      "sha": "90a24741e79cbf20d4456050f0fe39c3f88f5246"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDEzMTMxNGI2MmU4OTlmOTVkMTg2MzA4M2QzMDNiNDg5YjMyMTJiMTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/131314b62e899f95d1863083d303b489b3212b16",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/131314b62e899f95d1863083d303b489b3212b16",
      "tree": {
        "sha": "981129f25a6445882560882dc2a3da2b5583b82e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/981129f25a6445882560882dc2a3da2b5583b82e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 981129f25a6445882560882dc2a3da2b5583b82e\nparent 90a24741e79cbf20d4456050f0fe39c3f88f5246\nauthor Antoine Poinsot <darosior@protonmail.com> 1689959676 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1689959676 +0200\n\nfuzz: increase coverage of the descriptor targets\n\nOnce a descriptor is successfully parsed, execute more of its methods.\nThere is probably still room for improvements by checking for some\ninvariants, but this is a low hanging fruit that significantly increases\nthe code coverage of these targets.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmS6vQAACgkQ4T/BRc0/\nQwR1lgv+LW0Rm7/nzxBh2JPW9nVK5z48T/KMokOW2kMWBwBqYS7sZz/dCNcQT8pp\nWTXW1er2yjCDP7Y/z68rbUnH7uFLCOMf8HaJQNfn1IYsJdeEddx6BY8sLCT2s7GF\nfEJ35bxEF46e7QaWZeSyZpB0iUjcPycN97jaSacQadz/iqYG3iUMRZ07KNvd/T97\nRERdy5hscUEZKPBZMUBSkPcZxZcjTcbN1UqYVn49KY0cd8/m1bNIHTuENzAFSnS3\ns8PciWvsFWzk9ITFajXu5qLUYGAT63NRa8i7SFEDj+DUEuNCzAFYy0nf2lxoZ6q0\nMJ3WiTbOCVAFDxT+i3AZS0ejpsrvggeucogpQlPWBNthW0Uy1R8/5GoFS+7mypzv\nck6SVzxMALQn/mgK0xZB62Y7vAzWeZNll9KdcLjJ71u4R81LWgInWJa4+U+IobAX\naaUsZ1PM25ERu3l5lzmblulDZaw0bwvGUbr8SDcYZo3bzq1WpAf09+acvf90vPxB\nIa2HwW44\n=Rg9Q\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90a24741e79cbf20d4456050f0fe39c3f88f5246",
          "sha": "90a24741e79cbf20d4456050f0fe39c3f88f5246",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/90a24741e79cbf20d4456050f0fe39c3f88f5246"
        }
      ],
      "message": "fuzz: increase coverage of the descriptor targets\n\nOnce a descriptor is successfully parsed, execute more of its methods.\nThere is probably still room for improvements by checking for some\ninvariants, but this is a low hanging fruit that significantly increases\nthe code coverage of these targets.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-07-21T17:14:36Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-07-21T17:14:36Z"
      },
      "sha": "131314b62e899f95d1863083d303b489b3212b16"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9887403390,
      "node_id": "HRFPE_lADOABII585ot-FXzwAAAAJNVc1-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9887403390",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T17:15:01Z"
    },
    {
      "event": "commented",
      "id": 1646016856,
      "node_id": "IC_kwDOABII585iHDlY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1646016856",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T17:18:27Z",
      "updated_at": "2023-07-21T17:18:27Z",
      "author_association": "MEMBER",
      "body": "re-ACK 131314b62e899f95d1863083d303b489b3212b16  🐓\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: re-ACK 131314b62e899f95d1863083d303b489b3212b16  🐓\r\nPiOVYYPtzobuHwHpzUHpihKOhhWkacXf+ZxTpk/y7EwMzhRSE9kfEk+pz/XQl8QIUv2W4fuwNKvY2pFyASt8Bg==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1646016856",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "review_requested",
      "id": 9923746169,
      "node_id": "RRE_lADOABII585ot-FXzwAAAAJPgFl5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9923746169",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T12:51:05Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1654108231,
      "node_id": "IC_kwDOABII585il7BH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1654108231",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T17:47:34Z",
      "updated_at": "2023-07-27T17:47:34Z",
      "author_association": "MEMBER",
      "body": "ACK 131314b62e899f95d1863083d303b489b3212b16",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1654108231",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    },
    {
      "event": "review_request_removed",
      "id": 9938919944,
      "node_id": "RRRE_lADOABII585ot-FXzwAAAAJQZ-II",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9938919944",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T17:47:38Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "merged",
      "id": 9938930797,
      "node_id": "ME_lADOABII585ot-FXzwAAAAJQaAxt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9938930797",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cbf385058bd68e3be98edab2637a42d988e70ffe",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbf385058bd68e3be98edab2637a42d988e70ffe",
      "created_at": "2023-07-27T17:48:39Z"
    },
    {
      "event": "closed",
      "id": 9938930841,
      "node_id": "CE_lADOABII585ot-FXzwAAAAJQaAyZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9938930841",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T17:48:39Z"
    },
    {
      "event": "reviewed",
      "id": 1551590071,
      "node_id": "PRR_kwDOABII585ce2K3",
      "url": null,
      "actor": null,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#pullrequestreview-1551590071",
      "submitted_at": "2023-07-28T08:11:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
    },
    {
      "event": "head_ref_deleted",
      "id": 9945467447,
      "node_id": "HRDE_lADOABII585ot-FXzwAAAAJQy8o3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9945467447",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T08:31:01Z"
    },
    {
      "event": "commented",
      "id": 1655477388,
      "node_id": "IC_kwDOABII585irJSM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1655477388",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T10:46:57Z",
      "updated_at": "2023-07-28T10:46:57Z",
      "author_association": "MEMBER",
      "body": "`-mutate_depth=3` seems to be the best so far:\r\n\r\n![Fuzz inputs until crash](https://github.com/bitcoin/bitcoin/assets/6399679/4c038738-ca3f-4c93-9003-dddfda972914)\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1655477388",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27888"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231322655",
      "pull_request_review_id": 1482059834,
      "id": 1231322655,
      "node_id": "PRRC_kwDOABII585JZH4f",
      "diff_hunk": "@@ -3,11 +3,109 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{5};\n+//! How many keys we'll generate in total.\n+static constexpr uint8_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max()};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (uint8_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, true);",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "845810d94df83747634a60ff59635a670bba1124",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 845810d94df83747634a60ff59635a670bba1124 \"fuzz: add a new, more efficient, descriptor parsing target\"\r\n\r\nPerhaps also include uncompressed keys?",
      "created_at": "2023-06-15T17:08:30Z",
      "updated_at": "2023-06-15T17:12:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1231322655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231322655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231966560",
      "pull_request_review_id": 1483016214,
      "id": 1231966560,
      "node_id": "PRRC_kwDOABII585JblFg",
      "diff_hunk": "@@ -3,11 +3,109 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{5};\n+//! How many keys we'll generate in total.\n+static constexpr uint8_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max()};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (uint8_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, true);",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "845810d94df83747634a60ff59635a670bba1124",
      "in_reply_to_id": 1231322655,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good call, done.",
      "created_at": "2023-06-16T08:43:54Z",
      "updated_at": "2023-06-16T08:43:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1231966560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231966560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1232532164",
      "pull_request_review_id": 1483996768,
      "id": 1232532164,
      "node_id": "PRRC_kwDOABII585JdvLE",
      "diff_hunk": "@@ -3,11 +3,111 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr uint8_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max()};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (uint8_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, true);\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    if (IdIsUnCompPubKey(i)) assert(pubkey.Decompress());\n+                    keys_str[i] = HexStr(pubkey);",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "bf1d242e44b25cecb9fc25fca4c16c4ab56d5841",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fad60fc6f6486d3b28de4bbe937e293f65d5cbd5 \"fuzz: increase coverage of the descriptor targets\"\r\n\r\nThe second argument of `Set` is the compressedness, so this can be simplified a bit:\r\n\r\n```suggestion\r\n                privkey.Set(key_data, key_data + 32, IdIsCompPubKey(i));\r\n                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\r\n                    CPubKey pubkey{privkey.GetPubKey()};\r\n                    keys_str[i] = HexStr(pubkey);\r\n```",
      "created_at": "2023-06-16T17:22:43Z",
      "updated_at": "2023-06-16T17:22:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1232532164",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1232532164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": 48,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233270597",
      "pull_request_review_id": 1485063609,
      "id": 1233270597,
      "node_id": "PRRC_kwDOABII585JgjdF",
      "diff_hunk": "@@ -3,11 +3,111 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr uint8_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max()};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (uint8_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, true);\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    if (IdIsUnCompPubKey(i)) assert(pubkey.Decompress());\n+                    keys_str[i] = HexStr(pubkey);",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "bf1d242e44b25cecb9fc25fca4c16c4ab56d5841",
      "in_reply_to_id": 1232532164,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.\r\n```patch\r\ndiff --git a/src/test/fuzz/descriptor_parse.cpp b/src/test/fuzz/descriptor_parse.cpp\r\nindex 9a7b6ea308..529dadadc1 100644\r\n--- a/src/test/fuzz/descriptor_parse.cpp\r\n+++ b/src/test/fuzz/descriptor_parse.cpp\r\n@@ -45,10 +45,9 @@ public:\r\n             // an extended one.\r\n             if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\r\n                 CKey privkey;\r\n-                privkey.Set(key_data, key_data + 32, true);\r\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\r\n                 if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\r\n                     CPubKey pubkey{privkey.GetPubKey()};\r\n-                    if (IdIsUnCompPubKey(i)) assert(pubkey.Decompress());\r\n                     keys_str[i] = HexStr(pubkey);\r\n                 } else if (IdIsXOnlyPubKey(i)) {\r\n                     const XOnlyPubKey pubkey{privkey.GetPubKey()};\r\n```",
      "created_at": "2023-06-18T12:16:46Z",
      "updated_at": "2023-06-18T12:16:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1233270597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233270597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": 48,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270890988",
      "pull_request_review_id": 1541508735,
      "id": 1270890988,
      "node_id": "PRRC_kwDOABII585LwEHs",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: If you make `key_data` `std::byte`, you can avoid the c-style cast:\r\n\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/descriptor_parse.cpp b/src/test/fuzz/descriptor_parse.cpp\r\nindex 1d2b672260..84dc005575 100644\r\n--- a/src/test/fuzz/descriptor_parse.cpp\r\n+++ b/src/test/fuzz/descriptor_parse.cpp\r\n@@ -36,16 +36,16 @@ public:\r\n     //! When initializing the target, populate the list of keys.\r\n     void Init() {\r\n         // The data to use as a private key or a seed for an xprv.\r\n-        uint8_t key_data[32] = {1};\r\n+        std::array<std::byte, 32> key_data{std::byte{1}};\r\n         // Generate keys of all kinds and store them in the keys array.\r\n         for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\r\n-            key_data[31] = i;\r\n+            key_data[31] = std::byte(i);\r\n \r\n             // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\r\n             // an extended one.\r\n             if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\r\n                 CKey privkey;\r\n-                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\r\n+                privkey.Set(UCharCast(key_data.begin()), UCharCast(key_data.end()), !IdIsUnCompPubKey(i));\r\n                 if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\r\n                     CPubKey pubkey{privkey.GetPubKey()};\r\n                     keys_str[i] = HexStr(pubkey);\r\n@@ -57,7 +57,7 @@ public:\r\n                 }\r\n             } else {\r\n                 CExtKey ext_privkey;\r\n-                ext_privkey.SetSeed({(std::byte *)key_data, 32});\r\n+                ext_privkey.SetSeed(key_data);\r\n                 if (IdIsXprv(i)) {\r\n                     keys_str[i] = EncodeExtKey(ext_privkey);\r\n                 } else {\r\n",
      "created_at": "2023-07-21T16:55:22Z",
      "updated_at": "2023-07-21T17:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270890988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270890988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270892632",
      "pull_request_review_id": 1541508735,
      "id": 1270892632,
      "node_id": "PRRC_kwDOABII585LwEhY",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});\n+                if (IdIsXprv(i)) {\n+                    keys_str[i] = EncodeExtKey(ext_privkey);\n+                } else {\n+                    const CExtPubKey ext_pubkey{ext_privkey.Neuter()};\n+                    keys_str[i] = EncodeExtPubKey(ext_pubkey);\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Parse an id in the keys vectors from a 2-characters hex string.\n+    std::optional<uint8_t> IdxFromHex(std::string_view hex_characters) const {\n+        if (hex_characters.size() != 2) return {};\n+        auto idx = ParseHex(hex_characters);\n+        if (idx.size() != 1) return {};\n+        return idx[0];\n+    }\n+\n+    //! Get a valid descriptor string from a descriptor string whose keys were mocked.\n+    std::optional<std::string> GetDescriptor(std::string_view mocked_desc) const {\n+        // The smallest fragment would be \"pk(%00)\"\n+        if (mocked_desc.size() < 7) return {};\n+\n+        // The actual, valid, descriptor string to be returned.",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        // The actual, descriptor string to be returned.\r\n```\r\n\r\npretty sure it is not valid",
      "created_at": "2023-07-21T16:57:27Z",
      "updated_at": "2023-07-21T17:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270892632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270892632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270901466",
      "pull_request_review_id": 1541525589,
      "id": 1270901466,
      "node_id": "PRRC_kwDOABII585LwGra",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": 1270890988,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not avoiding them, it's hiding them behind `UCharCast`? :p \r\n\r\nIt boils down to choosing between casting to `uint8_t` or to `std::byte`, and i went for the option with less casts.",
      "created_at": "2023-07-21T17:07:13Z",
      "updated_at": "2023-07-21T17:07:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270901466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270901466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270902655",
      "pull_request_review_id": 1541527480,
      "id": 1270902655,
      "node_id": "PRRC_kwDOABII585LwG9_",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});\n+                if (IdIsXprv(i)) {\n+                    keys_str[i] = EncodeExtKey(ext_privkey);\n+                } else {\n+                    const CExtPubKey ext_pubkey{ext_privkey.Neuter()};\n+                    keys_str[i] = EncodeExtPubKey(ext_pubkey);\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Parse an id in the keys vectors from a 2-characters hex string.\n+    std::optional<uint8_t> IdxFromHex(std::string_view hex_characters) const {\n+        if (hex_characters.size() != 2) return {};\n+        auto idx = ParseHex(hex_characters);\n+        if (idx.size() != 1) return {};\n+        return idx[0];\n+    }\n+\n+    //! Get a valid descriptor string from a descriptor string whose keys were mocked.\n+    std::optional<std::string> GetDescriptor(std::string_view mocked_desc) const {\n+        // The smallest fragment would be \"pk(%00)\"\n+        if (mocked_desc.size() < 7) return {};\n+\n+        // The actual, valid, descriptor string to be returned.",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": 1270892632,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks. (And also in the function's doc comment.)",
      "created_at": "2023-07-21T17:08:45Z",
      "updated_at": "2023-07-21T17:08:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270902655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270902655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270903253",
      "pull_request_review_id": 1541528403,
      "id": 1270903253,
      "node_id": "PRRC_kwDOABII585LwHHV",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": 1270890988,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah this doesn't matter for the fuzz tests.\r\n\r\nI only left the comment, so that it would be easier if CKey::Set was changed to take `std::byte`, it would be a smaller diff in the future.",
      "created_at": "2023-07-21T17:09:32Z",
      "updated_at": "2023-07-21T17:11:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270903253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270903253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270904211",
      "pull_request_review_id": 1541529800,
      "id": 1270904211,
      "node_id": "PRRC_kwDOABII585LwHWT",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": 1270890988,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Happy to do it then.",
      "created_at": "2023-07-21T17:10:41Z",
      "updated_at": "2023-07-21T17:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270904211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270904211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270904366",
      "pull_request_review_id": 1541530069,
      "id": 1270904366,
      "node_id": "PRRC_kwDOABII585LwHYu",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});\n+                if (IdIsXprv(i)) {\n+                    keys_str[i] = EncodeExtKey(ext_privkey);\n+                } else {\n+                    const CExtPubKey ext_pubkey{ext_privkey.Neuter()};\n+                    keys_str[i] = EncodeExtPubKey(ext_pubkey);\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Parse an id in the keys vectors from a 2-characters hex string.\n+    std::optional<uint8_t> IdxFromHex(std::string_view hex_characters) const {\n+        if (hex_characters.size() != 2) return {};\n+        auto idx = ParseHex(hex_characters);\n+        if (idx.size() != 1) return {};\n+        return idx[0];\n+    }\n+\n+    //! Get a valid descriptor string from a descriptor string whose keys were mocked.\n+    std::optional<std::string> GetDescriptor(std::string_view mocked_desc) const {\n+        // The smallest fragment would be \"pk(%00)\"\n+        if (mocked_desc.size() < 7) return {};\n+\n+        // The actual, valid, descriptor string to be returned.",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": 1270892632,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in the wrong commit, though? :sweat_smile: ",
      "created_at": "2023-07-21T17:10:55Z",
      "updated_at": "2023-07-21T17:10:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270904366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270904366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270906119",
      "pull_request_review_id": 1541532825,
      "id": 1270906119,
      "node_id": "PRRC_kwDOABII585LwH0H",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": 1270890988,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.\r\n\r\n(However i just checked and `UCharCast` does indeed use C-style casts)\r\nhttps://github.com/bitcoin/bitcoin/blob/d23fda05842ba4539b225bbab01b94df0060f697/src/span.h#L272\r\n\r\nEDIT: (Oh but the const version doesn't)\r\nhttps://github.com/bitcoin/bitcoin/blob/d23fda05842ba4539b225bbab01b94df0060f697/src/span.h#L275\r\n\r\nEDIT2: should call pastapastapasta to fix this mess",
      "created_at": "2023-07-21T17:13:14Z",
      "updated_at": "2023-07-21T17:17:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270906119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270906119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270906387",
      "pull_request_review_id": 1541533290,
      "id": 1270906387,
      "node_id": "PRRC_kwDOABII585LwH4T",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});\n+                if (IdIsXprv(i)) {\n+                    keys_str[i] = EncodeExtKey(ext_privkey);\n+                } else {\n+                    const CExtPubKey ext_pubkey{ext_privkey.Neuter()};\n+                    keys_str[i] = EncodeExtPubKey(ext_pubkey);\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Parse an id in the keys vectors from a 2-characters hex string.\n+    std::optional<uint8_t> IdxFromHex(std::string_view hex_characters) const {\n+        if (hex_characters.size() != 2) return {};\n+        auto idx = ParseHex(hex_characters);\n+        if (idx.size() != 1) return {};\n+        return idx[0];\n+    }\n+\n+    //! Get a valid descriptor string from a descriptor string whose keys were mocked.\n+    std::optional<std::string> GetDescriptor(std::string_view mocked_desc) const {\n+        // The smallest fragment would be \"pk(%00)\"\n+        if (mocked_desc.size() < 7) return {};\n+\n+        // The actual, valid, descriptor string to be returned.",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": 1270892632,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":facepalm: ",
      "created_at": "2023-07-21T17:13:36Z",
      "updated_at": "2023-07-21T17:13:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270906387",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270906387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270907877",
      "pull_request_review_id": 1541535645,
      "id": 1270907877,
      "node_id": "PRRC_kwDOABII585LwIPl",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed({(std::byte *)key_data, 32});\n+                if (IdIsXprv(i)) {\n+                    keys_str[i] = EncodeExtKey(ext_privkey);\n+                } else {\n+                    const CExtPubKey ext_pubkey{ext_privkey.Neuter()};\n+                    keys_str[i] = EncodeExtPubKey(ext_pubkey);\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Parse an id in the keys vectors from a 2-characters hex string.\n+    std::optional<uint8_t> IdxFromHex(std::string_view hex_characters) const {\n+        if (hex_characters.size() != 2) return {};\n+        auto idx = ParseHex(hex_characters);\n+        if (idx.size() != 1) return {};\n+        return idx[0];\n+    }\n+\n+    //! Get a valid descriptor string from a descriptor string whose keys were mocked.\n+    std::optional<std::string> GetDescriptor(std::string_view mocked_desc) const {\n+        // The smallest fragment would be \"pk(%00)\"\n+        if (mocked_desc.size() < 7) return {};\n+\n+        // The actual, valid, descriptor string to be returned.",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "84dee4fe690e08a5adaad1c78530666da07075d8",
      "in_reply_to_id": 1270892632,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "And i can't even blame it on anything but myself this time! Fixed.",
      "created_at": "2023-07-21T17:15:33Z",
      "updated_at": "2023-07-21T17:15:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1270907877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270907877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277247979",
      "pull_request_review_id": 1551590071,
      "id": 1277247979,
      "node_id": "PRRC_kwDOABII585MIUHr",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        std::array<std::byte, 32> key_data{std::byte{1}};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = std::byte(i);\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(UCharCast(key_data.begin()), UCharCast(key_data.end()), !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed(key_data);\n+                if (IdIsXprv(i)) {\n+                    keys_str[i] = EncodeExtKey(ext_privkey);\n+                } else {\n+                    const CExtPubKey ext_pubkey{ext_privkey.Neuter()};\n+                    keys_str[i] = EncodeExtPubKey(ext_pubkey);\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Parse an id in the keys vectors from a 2-characters hex string.\n+    std::optional<uint8_t> IdxFromHex(std::string_view hex_characters) const {\n+        if (hex_characters.size() != 2) return {};\n+        auto idx = ParseHex(hex_characters);\n+        if (idx.size() != 1) return {};\n+        return idx[0];\n+    }",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": 75,
      "original_position": 75,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could just use the raw (single) byte here, but that would interfere with libFuzzer `-only_ascii=1`, which makes me wonder if this is the first ascii fuzz target and whether we should set the option somewhere somehow during input generation?",
      "created_at": "2023-07-28T08:11:30Z",
      "updated_at": "2023-07-28T08:11:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1277247979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277247979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": 72,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277370453",
      "pull_request_review_id": 1551788045,
      "id": 1277370453,
      "node_id": "PRRC_kwDOABII585MIyBV",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        std::array<std::byte, 32> key_data{std::byte{1}};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = std::byte(i);\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(UCharCast(key_data.begin()), UCharCast(key_data.end()), !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed(key_data);\n+                if (IdIsXprv(i)) {\n+                    keys_str[i] = EncodeExtKey(ext_privkey);\n+                } else {\n+                    const CExtPubKey ext_pubkey{ext_privkey.Neuter()};\n+                    keys_str[i] = EncodeExtPubKey(ext_pubkey);\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Parse an id in the keys vectors from a 2-characters hex string.\n+    std::optional<uint8_t> IdxFromHex(std::string_view hex_characters) const {\n+        if (hex_characters.size() != 2) return {};\n+        auto idx = ParseHex(hex_characters);\n+        if (idx.size() != 1) return {};\n+        return idx[0];\n+    }",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": 75,
      "original_position": 75,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "in_reply_to_id": 1277247979,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "![Fuzz inputs until crash](https://github.com/bitcoin/bitcoin/assets/6399679/d8e5e3ca-f5be-45e0-8803-8f8950690624)\r\n\r\n\r\nFunny how `-only_ascii=1` performs worse than `-only_ascii=0` (https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1645976254).",
      "created_at": "2023-07-28T10:14:48Z",
      "updated_at": "2023-07-28T10:16:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1277370453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277370453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": 72,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277371055",
      "pull_request_review_id": 1551788979,
      "id": 1277371055,
      "node_id": "PRRC_kwDOABII585MIyKv",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        std::array<std::byte, 32> key_data{std::byte{1}};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = std::byte(i);\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(UCharCast(key_data.begin()), UCharCast(key_data.end()), !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed(key_data);\n+                if (IdIsXprv(i)) {\n+                    keys_str[i] = EncodeExtKey(ext_privkey);\n+                } else {\n+                    const CExtPubKey ext_pubkey{ext_privkey.Neuter()};\n+                    keys_str[i] = EncodeExtPubKey(ext_pubkey);\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Parse an id in the keys vectors from a 2-characters hex string.\n+    std::optional<uint8_t> IdxFromHex(std::string_view hex_characters) const {\n+        if (hex_characters.size() != 2) return {};\n+        auto idx = ParseHex(hex_characters);\n+        if (idx.size() != 1) return {};\n+        return idx[0];\n+    }",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": 75,
      "original_position": 75,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "in_reply_to_id": 1277247979,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(or at least, not significantly better)",
      "created_at": "2023-07-28T10:15:27Z",
      "updated_at": "2023-07-28T10:15:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1277371055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277371055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": 72,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277371969",
      "pull_request_review_id": 1551790486,
      "id": 1277371969,
      "node_id": "PRRC_kwDOABII585MIyZB",
      "diff_hunk": "@@ -3,28 +3,167 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw (un)compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{6};\n+//! How many keys we'll generate in total.\n+static constexpr size_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max() + 1};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsUnCompPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 5; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        std::array<std::byte, 32> key_data{std::byte{1}};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (size_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = std::byte(i);\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(UCharCast(key_data.begin()), UCharCast(key_data.end()), !IdIsUnCompPubKey(i));\n+                if (IdIsCompPubKey(i) || IdIsUnCompPubKey(i)) {\n+                    CPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else if (IdIsXOnlyPubKey(i)) {\n+                    const XOnlyPubKey pubkey{privkey.GetPubKey()};\n+                    keys_str[i] = HexStr(pubkey);\n+                } else {\n+                    keys_str[i] = EncodeSecret(privkey);\n+                }\n+            } else {\n+                CExtKey ext_privkey;\n+                ext_privkey.SetSeed(key_data);\n+                if (IdIsXprv(i)) {\n+                    keys_str[i] = EncodeExtKey(ext_privkey);\n+                } else {\n+                    const CExtPubKey ext_pubkey{ext_privkey.Neuter()};\n+                    keys_str[i] = EncodeExtPubKey(ext_pubkey);\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Parse an id in the keys vectors from a 2-characters hex string.\n+    std::optional<uint8_t> IdxFromHex(std::string_view hex_characters) const {\n+        if (hex_characters.size() != 2) return {};\n+        auto idx = ParseHex(hex_characters);\n+        if (idx.size() != 1) return {};\n+        return idx[0];\n+    }",
      "path": "src/test/fuzz/descriptor_parse.cpp",
      "position": 75,
      "original_position": 75,
      "commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "original_commit_id": "131314b62e899f95d1863083d303b489b3212b16",
      "in_reply_to_id": 1277247979,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe the target returning early on non-ASCII has basically the same effect?",
      "created_at": "2023-07-28T10:16:39Z",
      "updated_at": "2023-07-28T10:16:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1277371969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277371969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
        }
      },
      "start_line": 72,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    }
  ]
}