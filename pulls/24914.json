{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914",
    "id": 912399887,
    "node_id": "PR_kwDOABII5842Yh4P",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/24914",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/24914.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/24914.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/3c83b1d884b419adece95b335b6e956e7459a7ef",
    "number": 24914,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "wallet: Load database records in a particular order",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Currently when we load a wallet, we just iterate through all of the records in the database and add them completely statelessly. However we have some records which do rely on other records being loaded before they are. To deal with this, we use `CWalletScanState` to hold things temporarily until all of the records have been read and then we load the stateful things.\r\n\r\nHowever this can be slow, and with some future improvements, can cause some pretty drastic slowdowns to retain this pattern. So this PR changes the way we load records by choosing to load the records in a particular order. This lets us do things such as loading a descriptor record, then finding and loading that descriptor's cache and key records. In the future, this will also let us use `IsMine` when loading transactions as then `IsMine` will actually be working as we now always load keys and descriptors before transactions.\r\n\r\nIn order to get records of a specific type, this PR includes some refactors to how we do database cursors. Functionality is also added to retrieve a cursor that will give us records beginning with a specified prefix.\r\n\r\nLastly, one thing that iterating the entire database let us do was to find unknown records. However even if unknown records were found, we would not do anything with this information except output a number in a log line. With this PR, we would no longer be aware of any unknown records. This does not change functionality as we don't do anything with unknown records, and having unknown records is not an error. Now we would just not be aware that unknown records even exist.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "created_at": "2022-04-18T21:18:28Z",
    "updated_at": "2024-10-29T17:10:19Z",
    "closed_at": "2023-06-27T23:03:39Z",
    "mergeable_state": "unknown",
    "merged_at": "2023-06-27T23:03:39Z",
    "merge_commit_sha": "d9c7c2fd3ec7b0fcae7e0c9423bff6c6799dd67c",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "achow101:wallet-load-order",
      "ref": "wallet-load-order",
      "sha": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 8,
        "stargazers_count": 39,
        "watchers_count": 39,
        "size": 284398,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-29T00:42:03Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2024-10-04T23:43:44Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "7ee41217b3b3fe4d8b7eb4fd1d4577b9b33d466d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36292,
        "stargazers_count": 79111,
        "watchers_count": 79111,
        "size": 270368,
        "default_branch": "master",
        "open_issues_count": 640,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-29T16:21:14Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-10-29T17:57:23Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 809,
    "deletions": 568,
    "changed_files": 5,
    "commits": 16,
    "review_comments": 306,
    "comments": 23
  },
  "events": [
    {
      "event": "labeled",
      "id": 6450461345,
      "node_id": "LE_lADOABII585H-G84zwAAAAGAejqh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6450461345",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-18T21:18:28Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 1101917684,
      "node_id": "IC_kwDOABII585Bre30",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101917684",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-19T01:59:23Z",
      "updated_at": "2023-06-27T22:39:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [MarcoFalke](https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1609730104), [furszy](https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1501871959), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1501951643) |\n| Concept ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1114604312), [pk-b2](https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1119999984), [laanwj](https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1142381108) |\n| Approach ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-958951750) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27920](https://github.com/bitcoin/bitcoin/pull/27920) (wallet: bugfix, always use apostrophe for spkm descriptor ID by furszy)\n* [#27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n* [#26836](https://github.com/bitcoin/bitcoin/pull/26836) (wallet: simplify addressbook migration and encapsulate access by furszy)\n* [#26728](https://github.com/bitcoin/bitcoin/pull/26728) (wallet: Have the wallet store the key for automatically generated descriptors by achow101)\n* [#26596](https://github.com/bitcoin/bitcoin/pull/26596) (wallet: Migrate legacy wallets to descriptor wallets without requiring BDB by achow101)\n* [#25907](https://github.com/bitcoin/bitcoin/pull/25907) (wallet: rpc to add automatically generated descriptors by achow101)\n* [#22341](https://github.com/bitcoin/bitcoin/pull/22341) (rpc: add getxpub by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1101917684",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6465279975,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGBXFfn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6465279975",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-20T18:19:59Z"
    },
    {
      "event": "labeled",
      "id": 6500374403,
      "node_id": "LE_lADOABII585H-G84zwAAAAGDc9eD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6500374403",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T16:33:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6501385825,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGDg0Zh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6501385825",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T19:16:43Z"
    },
    {
      "event": "unlabeled",
      "id": 6501912699,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAGDi1B7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6501912699",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T20:48:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1114604312,
      "node_id": "IC_kwDOABII585Cb4MY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1114604312",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-02T08:13:14Z",
      "updated_at": "2022-05-02T08:13:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1114604312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "reviewed",
      "id": 958951750,
      "node_id": "PRR_kwDOABII5845KHFG",
      "url": null,
      "actor": null,
      "commit_id": "3a27791244e75dd9836f18d58ffd2355e5ea4f88",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK.\r\nGetting rid of `CWalletScanState` and `ReadKeyValue` and moving the read logic to `WalletBatch::LoadWallet` makes the code clearer and easier to understand.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-958951750",
      "submitted_at": "2022-05-02T11:15:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "commented",
      "id": 1119999984,
      "node_id": "IC_kwDOABII585Cwdfw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1119999984",
      "actor": {
        "login": "pk-b2",
        "id": 91447896,
        "node_id": "MDQ6VXNlcjkxNDQ3ODk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/91447896?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pk-b2",
        "html_url": "https://github.com/pk-b2",
        "followers_url": "https://api.github.com/users/pk-b2/followers",
        "following_url": "https://api.github.com/users/pk-b2/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pk-b2/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pk-b2/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pk-b2/subscriptions",
        "organizations_url": "https://api.github.com/users/pk-b2/orgs",
        "repos_url": "https://api.github.com/users/pk-b2/repos",
        "events_url": "https://api.github.com/users/pk-b2/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pk-b2/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-06T20:52:28Z",
      "updated_at": "2022-05-06T20:52:28Z",
      "author_association": "NONE",
      "body": "Concept ACK",
      "user": {
        "login": "pk-b2",
        "id": 91447896,
        "node_id": "MDQ6VXNlcjkxNDQ3ODk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/91447896?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pk-b2",
        "html_url": "https://github.com/pk-b2",
        "followers_url": "https://api.github.com/users/pk-b2/followers",
        "following_url": "https://api.github.com/users/pk-b2/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pk-b2/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pk-b2/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pk-b2/subscriptions",
        "organizations_url": "https://api.github.com/users/pk-b2/orgs",
        "repos_url": "https://api.github.com/users/pk-b2/repos",
        "events_url": "https://api.github.com/users/pk-b2/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pk-b2/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1119999984",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "reviewed",
      "id": 965184731,
      "node_id": "PRR_kwDOABII5845h4zb",
      "url": null,
      "actor": null,
      "commit_id": "3a27791244e75dd9836f18d58ffd2355e5ea4f88",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "pk-b2",
        "id": 91447896,
        "node_id": "MDQ6VXNlcjkxNDQ3ODk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/91447896?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pk-b2",
        "html_url": "https://github.com/pk-b2",
        "followers_url": "https://api.github.com/users/pk-b2/followers",
        "following_url": "https://api.github.com/users/pk-b2/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pk-b2/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pk-b2/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pk-b2/subscriptions",
        "organizations_url": "https://api.github.com/users/pk-b2/orgs",
        "repos_url": "https://api.github.com/users/pk-b2/repos",
        "events_url": "https://api.github.com/users/pk-b2/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pk-b2/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-965184731",
      "submitted_at": "2022-05-06T21:00:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 965185719,
      "node_id": "PRR_kwDOABII5845h5C3",
      "url": null,
      "actor": null,
      "commit_id": "3a27791244e75dd9836f18d58ffd2355e5ea4f88",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "pk-b2",
        "id": 91447896,
        "node_id": "MDQ6VXNlcjkxNDQ3ODk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/91447896?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pk-b2",
        "html_url": "https://github.com/pk-b2",
        "followers_url": "https://api.github.com/users/pk-b2/followers",
        "following_url": "https://api.github.com/users/pk-b2/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pk-b2/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pk-b2/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pk-b2/subscriptions",
        "organizations_url": "https://api.github.com/users/pk-b2/orgs",
        "repos_url": "https://api.github.com/users/pk-b2/repos",
        "events_url": "https://api.github.com/users/pk-b2/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pk-b2/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-965185719",
      "submitted_at": "2022-05-06T21:02:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "labeled",
      "id": 6601448092,
      "node_id": "LE_lADOABII585H-G84zwAAAAGJehqc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6601448092",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-12T21:16:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6616666571,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGKYlHL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6616666571",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-16T14:25:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6616935929,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGKZm35",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6616935929",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-16T14:56:10Z"
    },
    {
      "event": "unlabeled",
      "id": 6617099151,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAGKaOuP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6617099151",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-16T15:14:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6617303089,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGKbAgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6617303089",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-16T15:39:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6628084008,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGLEIko",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6628084008",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-17T22:54:31Z"
    },
    {
      "event": "labeled",
      "id": 6634354245,
      "node_id": "LE_lADOABII585H-G84zwAAAAGLcDZF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6634354245",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-18T17:38:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6634545916,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGLcyL8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6634545916",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-18T18:07:18Z"
    },
    {
      "event": "unlabeled",
      "id": 6635365666,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAGLf6Ui",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6635365666",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-18T19:43:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1142381108,
      "node_id": "IC_kwDOABII585EF1o0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1142381108",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-31T16:51:08Z",
      "updated_at": "2022-05-31T16:51:08Z",
      "author_association": "MEMBER",
      "body": "Concept ACK on querying specifically what is needed from the database when loading. Maybe some day we don't even have to read all records into memory.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1142381108",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "reviewed",
      "id": 1001663726,
      "node_id": "PRR_kwDOABII5847tCzu",
      "url": null,
      "actor": null,
      "commit_id": "c23dfc2dbe030c941b8c60fc7e3c91ee3565c247",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, code reviewed till e2ab0797 (inclusive).",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1001663726",
      "submitted_at": "2022-06-09T17:52:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1013820695,
      "node_id": "PRR_kwDOABII5848ba0X",
      "url": null,
      "actor": null,
      "commit_id": "c23dfc2dbe030c941b8c60fc7e3c91ee3565c247",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code reviewed till a1d8d563 (non-inclusive).\r\n\r\nWhat about abstracting the cursor creation, looped read and error handling into a generic function so we can get rid-off most of the boilerplate code?\r\n\r\nQuick example that could be extended to most of the flows: https://github.com/furszy/bitcoin-core/commit/8526a87cae04a3704d86a5157894d42ecaca2ab9",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1013820695",
      "submitted_at": "2022-06-21T16:01:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6850520866,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGYUqci",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6850520866",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-21T19:47:05Z"
    },
    {
      "event": "commented",
      "id": 1162259558,
      "node_id": "IC_kwDOABII585FRqxm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1162259558",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-21T19:47:40Z",
      "updated_at": "2022-06-21T19:47:40Z",
      "author_association": "MEMBER",
      "body": "> What about abstracting the cursor creation, looped read and error handling into a generic function so we can get rid-off most of the boilerplate code?\r\n> \r\n> Quick example that could be extended to most of the flows: [furszy@8526a87](https://github.com/furszy/bitcoin-core/commit/8526a87cae04a3704d86a5157894d42ecaca2ab9)\r\n\r\nLooking into it.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1162259558",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6852023599,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGYaZUv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6852023599",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-22T00:48:40Z"
    },
    {
      "event": "commented",
      "id": 1162502096,
      "node_id": "IC_kwDOABII585FSl_Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1162502096",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-22T00:49:03Z",
      "updated_at": "2022-06-22T00:49:03Z",
      "author_association": "MEMBER",
      "body": "I've refactored the loading loop boilerplate into its own function.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1162502096",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "commented",
      "id": 1162659653,
      "node_id": "IC_kwDOABII585FTMdF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1162659653",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-22T05:30:24Z",
      "updated_at": "2022-06-22T05:30:24Z",
      "author_association": "MEMBER",
      "body": "```\r\nwallet/walletdb.cpp:912:18: error: reading variable 'm_address_book' requires holding mutex 'pwallet->cs_wallet' [-Werror,-Wthread-safety-analysis]\r\n        pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1162659653",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "labeled",
      "id": 6912493662,
      "node_id": "LE_lADOABII585H-G84zwAAAAGcBEhe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6912493662",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T16:47:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6914142636,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGcHXGs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6914142636",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T21:29:40Z"
    },
    {
      "event": "unlabeled",
      "id": 6914495086,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAGcItJu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6914495086",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T23:04:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1175727634,
      "node_id": "IC_kwDOABII585GFC4S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1175727634",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-06T03:06:15Z",
      "updated_at": "2022-07-06T03:06:15Z",
      "author_association": "MEMBER",
      "body": "Patch for the [ci error](https://github.com/bitcoin/bitcoin/pull/24914/checks?check_run_id=7140018071) \"requires holding mutex 'pwallet->cs_wallet'\": https://github.com/furszy/bitcoin/commit/b3c51af13a04eaf3a374f778dd0858ad128aa512",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1175727634",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6943939236,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGd5Bqk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6943939236",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-06T15:39:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6944311522,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGd6cji",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6944311522",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-06T16:30:28Z"
    },
    {
      "event": "reviewed",
      "id": 1030621221,
      "node_id": "PRR_kwDOABII5849bggl",
      "url": null,
      "actor": null,
      "commit_id": "4f5f90e7129fe1e2ed704d30dda0fdf5c8b4266d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Did another review round till 72089765 this time.\r\n\r\nFound that the new prefix cursor is returning an extra element that is not part of the filtered set (fix https://github.com/furszy/bitcoin/commit/e4b37e82ed19ff103f295ac5897e33e80e2f0679), which.. encouraged me to add test coverage for the new functionality: https://github.com/furszy/bitcoin/commit/0f76c4c5e989fc9eef82c46386311a7069c25bdc\r\n\r\n(note: without the fix, at the end of the test, `ssValue` contains a type that is not the expected one, which if it's unserialized will crash or UB depending to which type the code tries to unserialize it).\r\n\r\nTested on each supported db engine:\r\n\r\n1) Write two different key->value elements to db.\r\n2) Create a new prefix cursor and walk-through every returned element,\r\n   verifying that gets parsed properly.\r\n3) Try to move the cursor outside the filtered range: expect failure\r\n   and flag `complete=true`.\r\n\r\nPlus, the new test made me found one extra point: sqlite does not clear the return key and value references before write the new data (which causes the new data to be appended to the previous one if it's not cleared by the caller). Solved here: https://github.com/furszy/bitcoin/commit/558fcb0c56cb0b50a8dd2c76ed216bb0ed2af58a.\r\n\r\n\r\n\r\n",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1030621221",
      "submitted_at": "2022-07-07T16:47:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6954073092,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGefrwE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6954073092",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-07T17:52:32Z"
    },
    {
      "event": "commented",
      "id": 1178002305,
      "node_id": "IC_kwDOABII585GNuOB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1178002305",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-07T17:54:54Z",
      "updated_at": "2022-07-07T17:54:54Z",
      "author_association": "MEMBER",
      "body": "@furszy Thanks for the review. I've pulled in your test commit.\r\n\r\nOn the topic of the return values for `Next`, I'm not a fan of the current interface and I think it could be improved/rewritten with optionals. Mainly the problem is distinguishing between an error and being done.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1178002305",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "mentioned",
      "id": 6954089064,
      "node_id": "MEE_lADOABII585H-G84zwAAAAGefvpo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6954089064",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-07T17:54:54Z"
    },
    {
      "event": "subscribed",
      "id": 6954089068,
      "node_id": "SE_lADOABII585H-G84zwAAAAGefvps",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6954089068",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-07T17:54:54Z"
    },
    {
      "event": "commented",
      "id": 1178941634,
      "node_id": "IC_kwDOABII585GRTjC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1178941634",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-08T12:38:10Z",
      "updated_at": "2022-07-08T12:39:05Z",
      "author_association": "MEMBER",
      "body": "> On the topic of the return values for Next, I'm not a fan of the current interface and I think it could be improved/rewritten with optionals. Mainly the problem is distinguishing between an error and being done.\r\n\r\nProbably we could return a three states enum instead. So we can get rid of that ugly `complete` ref arg.\r\n(but yeah, no need to add it here)",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1178941634",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "reviewed",
      "id": 1040304045,
      "node_id": "PRR_kwDOABII584-Acet",
      "url": null,
      "actor": null,
      "commit_id": "431904b5c317917fad4c5171bebb14620fd1edec",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Made another review round from scratch, code reviewed till 369a042c. Getting closer 🚜 \r\n\r\nFound few bugs (same cause for all of them) inside 369a042c:\r\n\r\nThe `LoadRecords` of the `WALLETDESCRIPTOR` prefix is always returning `LOAD_OK` result even if the load internally failed (corrupted db).\r\n\r\nThe reason is the not contemplation of the result on each inner `LoadRecords` calls like `WALLETDESCRIPTORCACHE`, `WALLETDESCRIPTORLHCACHE`, `WALLETDESCRIPTORKEY` and `WALLETDESCRIPTORCKEY` in the final result (or better, after each of the `LoadRecords` calls).\r\n\r\nExample: after setting each `lh_cache_res`, `key_cache_res`, `key_res`, `ckey_res` should do:\r\n```c++\r\nif (key_res.m_result != DBErrors::LOAD_OK) {\r\n    return key_res;\r\n}\r\n\r\nor \r\n\r\nresult = std::max(result, key_res.m_result); // \"key_res\" is just the example\r\n```",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1040304045",
      "submitted_at": "2022-07-15T19:19:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1040744754,
      "node_id": "PRR_kwDOABII584-CIEy",
      "url": null,
      "actor": null,
      "commit_id": "431904b5c317917fad4c5171bebb14620fd1edec",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Another one, in 7ed39f6d:\r\n\r\nThe `corrupted_tx` variable is always false.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1040744754",
      "submitted_at": "2022-07-15T19:52:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7005223570,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGhizqS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7005223570",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-15T23:11:58Z"
    },
    {
      "event": "commented",
      "id": 1186015747,
      "node_id": "IC_kwDOABII585GsSoD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186015747",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-15T23:14:00Z",
      "updated_at": "2022-07-15T23:14:00Z",
      "author_association": "MEMBER",
      "body": "> The `LoadRecords` of the `WALLETDESCRIPTOR` prefix is always returning `LOAD_OK` result even if the load internally failed (corrupted db).\r\n\r\nGood catch. I've added `result = std::max(result, res.m_result);` for each of these.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1186015747",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "reviewed",
      "id": 1074043688,
      "node_id": "PRR_kwDOABII585ABJso",
      "url": null,
      "actor": null,
      "commit_id": "0ca1efcd748b5e6dd2c1fc286440e5a8ff5757d5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1074043688",
      "submitted_at": "2022-08-16T13:37:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7198656144,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGtEsaQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7198656144",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T16:11:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7209423401,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGttxIp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7209423401",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T21:46:02Z"
    },
    {
      "event": "labeled",
      "id": 7223212007,
      "node_id": "LE_lADOABII585H-G84zwAAAAGuiXfn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7223212007",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T15:42:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7223732017,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAGukWcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7223732017",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T16:58:25Z"
    },
    {
      "event": "unlabeled",
      "id": 7224066988,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAGuloOs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7224066988",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T17:51:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 7378354009,
      "node_id": "LE_lADOABII585H-G84zwAAAAG3yL9Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7378354009",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-13T16:35:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7416642046,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAG6EPn-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7416642046",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-19T20:06:58Z"
    },
    {
      "event": "unlabeled",
      "id": 7416826515,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAG6E8qT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7416826515",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-19T20:39:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7434064719,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAG7GtNP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7434064719",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-21T20:25:19Z"
    },
    {
      "event": "reviewed",
      "id": 1120211654,
      "node_id": "PRR_kwDOABII585CxRLG",
      "url": null,
      "actor": null,
      "commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1120211654",
      "submitted_at": "2022-09-26T15:31:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "commented",
      "id": 1258222357,
      "node_id": "IC_kwDOABII585K_vMV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1258222357",
      "actor": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-26T15:31:53Z",
      "updated_at": "2022-09-26T15:31:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "I left some code review comments.",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1258222357",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "reviewed",
      "id": 1127288236,
      "node_id": "PRR_kwDOABII585DMQ2s",
      "url": null,
      "actor": null,
      "commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1127288236",
      "submitted_at": "2022-09-30T20:25:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1129198780,
      "node_id": "PRR_kwDOABII585DTjS8",
      "url": null,
      "actor": null,
      "commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1129198780",
      "submitted_at": "2022-10-04T19:06:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7538915830,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHBWrn2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7538915830",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-06T21:50:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7539419063,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHBYme3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7539419063",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-06T23:55:34Z"
    },
    {
      "event": "reviewed",
      "id": 1162058024,
      "node_id": "PRR_kwDOABII585FQ5ko",
      "url": null,
      "actor": null,
      "commit_id": "a1a0984a67f17de0553827ec571786bc78da7ec4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Two small findings, nothing biggie.\r\nWill do another full review round in the coming days.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1162058024",
      "submitted_at": "2022-10-31T15:23:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1162188314,
      "node_id": "PRR_kwDOABII585FRZYa",
      "url": null,
      "actor": null,
      "commit_id": "a1a0984a67f17de0553827ec571786bc78da7ec4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1162188314",
      "submitted_at": "2022-10-31T16:43:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1162440397,
      "node_id": "PRR_kwDOABII585FSW7N",
      "url": null,
      "actor": null,
      "commit_id": "a1a0984a67f17de0553827ec571786bc78da7ec4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1162440397",
      "submitted_at": "2022-10-31T19:37:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1162540726,
      "node_id": "PRR_kwDOABII585FSva2",
      "url": null,
      "actor": null,
      "commit_id": "a1a0984a67f17de0553827ec571786bc78da7ec4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Aside from the previous comments, code review ACK a1a0984a",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1162540726",
      "submitted_at": "2022-10-31T20:48:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7743664457,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHNjvFJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7743664457",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-04T20:04:16Z"
    },
    {
      "event": "reviewed",
      "id": 1178179176,
      "node_id": "PRR_kwDOABII585GOZZo",
      "url": null,
      "actor": null,
      "commit_id": "a0bc6bda272e7336deb55bdbf535534ed3a40306",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1178179176",
      "submitted_at": "2022-11-13T01:50:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7845197673,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHTnDdp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7845197673",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-18T15:57:52Z"
    },
    {
      "event": "reviewed",
      "id": 1187264926,
      "node_id": "PRR_kwDOABII585GxDme",
      "url": null,
      "actor": null,
      "commit_id": "fd615c7f4ea0c71ba6b60859b6e8d0ae21d720ca",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1187264926",
      "submitted_at": "2022-11-20T13:49:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "labeled",
      "id": 7917764672,
      "node_id": "LE_lADOABII585H-G84zwAAAAHX74BA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7917764672",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T01:21:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7918160900,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHX9YwE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7918160900",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T03:06:36Z"
    },
    {
      "event": "unlabeled",
      "id": 7918229604,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAHX9phk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7918229604",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T03:26:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7918385999,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHX-PtP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7918385999",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T04:10:56Z"
    },
    {
      "event": "reviewed",
      "id": 1199285000,
      "node_id": "PRR_kwDOABII585He6MI",
      "url": null,
      "actor": null,
      "commit_id": "8dca1bd8321711c3638e2391274385f9d9a1ca70",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1199285000",
      "submitted_at": "2022-11-30T13:01:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7923305578,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHYRAxq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7923305578",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T15:38:22Z"
    },
    {
      "event": "labeled",
      "id": 7959807181,
      "node_id": "LE_lADOABII585H-G84zwAAAAHacQTN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7959807181",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-05T22:51:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7970469042,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHbE7Sy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7970469042",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T20:09:23Z"
    },
    {
      "event": "reviewed",
      "id": 1207401901,
      "node_id": "PRR_kwDOABII585H932t",
      "url": null,
      "actor": null,
      "commit_id": "3df9265949b353d9cea8e2f49a460fd72f270b49",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1207401901",
      "submitted_at": "2022-12-06T22:08:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "unlabeled",
      "id": 7971435873,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAHbInVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7971435873",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T22:12:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7971485308,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHbIzZ8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7971485308",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T22:18:39Z"
    },
    {
      "event": "reviewed",
      "id": 1212744380,
      "node_id": "PRR_kwDOABII585ISQK8",
      "url": null,
      "actor": null,
      "commit_id": "63b5344ecafa00f2a1eb53034c9d9743603f095d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1212744380",
      "submitted_at": "2022-12-11T20:17:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "commented",
      "id": 1347233530,
      "node_id": "IC_kwDOABII585QTSb6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1347233530",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-12T20:08:17Z",
      "updated_at": "2022-12-12T20:08:17Z",
      "author_association": "MEMBER",
      "body": "I've pulled the first 4 commits for the `DatabaseCursor` stuff into #26690 since I'm finding these changes to be useful elsewhere and would like them to be merged sooner.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1347233530",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "convert_to_draft",
      "id": 8018015580,
      "node_id": "CTDE_lADOABII585H-G84zwAAAAHd6TVc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8018015580",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-12T20:08:29Z"
    },
    {
      "event": "referenced",
      "id": 8336842341,
      "node_id": "REFE_lADOABII585H-G84zwAAAAHw6h5l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8336842341",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a62231bca629e945349255a1d331dd5c7a86ddd1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62231bca629e945349255a1d331dd5c7a86ddd1",
      "created_at": "2023-01-23T17:56:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8337717571,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAHw93lD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8337717571",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-23T19:51:50Z"
    },
    {
      "event": "ready_for_review",
      "id": 8337722250,
      "node_id": "RFRE_lADOABII585H-G84zwAAAAHw94uK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8337722250",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-23T19:52:31Z"
    },
    {
      "event": "referenced",
      "id": 8340464122,
      "node_id": "REFE_lADOABII585H-G84zwAAAAHxIWH6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8340464122",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3c878bbb45d3c185fa75ada4b7b5501d92a6573d",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/3c878bbb45d3c185fa75ada4b7b5501d92a6573d",
      "created_at": "2023-01-24T04:17:34Z"
    },
    {
      "event": "labeled",
      "id": 8363200158,
      "node_id": "LE_lADOABII585H-G84zwAAAAHyfE6e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8363200158",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-26T11:34:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8414299287,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAH1iASX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8414299287",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T20:18:24Z"
    },
    {
      "event": "unlabeled",
      "id": 8415239045,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAH1lluF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8415239045",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T22:29:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1291135824,
      "node_id": "PRR_kwDOABII585M9StQ",
      "url": null,
      "actor": null,
      "commit_id": "fd4306f38f939daa25ad35dd8b07511bb6eabae9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Made another half PR review round (the thirtieth one?), left few nits, nothing biggie.\r\nLet's see if we can push further to merge this one soon.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1291135824",
      "submitted_at": "2023-02-09T14:11:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8483837612,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAH5rRas",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8483837612",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-09T21:09:15Z"
    },
    {
      "event": "reviewed",
      "id": 1293227354,
      "node_id": "PRR_kwDOABII585NFRVa",
      "url": null,
      "actor": null,
      "commit_id": "c15c71335b7ac99cbee1bdac360d9a3d3dc27410",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1293227354",
      "submitted_at": "2023-02-10T14:50:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8492541328,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAH6MeWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8492541328",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-10T18:15:26Z"
    },
    {
      "event": "reviewed",
      "id": 1293795732,
      "node_id": "PRR_kwDOABII585NHcGU",
      "url": null,
      "actor": null,
      "commit_id": "70bf403ed904fb9fd3cd7b6bc4873fc006ffec9d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 70bf403",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1293795732",
      "submitted_at": "2023-02-10T18:42:20Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "labeled",
      "id": 8913450297,
      "node_id": "LE_lADOABII585H-G84zwAAAAITSHU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8913450297",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-03T14:06:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8964349520,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIWUR5Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8964349520",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-10T14:43:40Z"
    },
    {
      "event": "unlabeled",
      "id": 8964566491,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAIWVG3b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8964566491",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-10T15:09:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 8966121963,
      "node_id": "UE_lADOABII585H-G84zwAAAAIWbCnr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8966121963",
      "actor": {
        "login": "mannyg253",
        "id": 50157562,
        "node_id": "MDQ6VXNlcjUwMTU3NTYy",
        "avatar_url": "https://avatars.githubusercontent.com/u/50157562?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mannyg253",
        "html_url": "https://github.com/mannyg253",
        "followers_url": "https://api.github.com/users/mannyg253/followers",
        "following_url": "https://api.github.com/users/mannyg253/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mannyg253/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mannyg253/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mannyg253/subscriptions",
        "organizations_url": "https://api.github.com/users/mannyg253/orgs",
        "repos_url": "https://api.github.com/users/mannyg253/repos",
        "events_url": "https://api.github.com/users/mannyg253/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mannyg253/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-10T18:41:01Z"
    },
    {
      "event": "subscribed",
      "id": 8966122594,
      "node_id": "SE_lADOABII585H-G84zwAAAAIWbCxi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8966122594",
      "actor": {
        "login": "mannyg253",
        "id": 50157562,
        "node_id": "MDQ6VXNlcjUwMTU3NTYy",
        "avatar_url": "https://avatars.githubusercontent.com/u/50157562?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mannyg253",
        "html_url": "https://github.com/mannyg253",
        "followers_url": "https://api.github.com/users/mannyg253/followers",
        "following_url": "https://api.github.com/users/mannyg253/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mannyg253/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mannyg253/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mannyg253/subscriptions",
        "organizations_url": "https://api.github.com/users/mannyg253/orgs",
        "repos_url": "https://api.github.com/users/mannyg253/repos",
        "events_url": "https://api.github.com/users/mannyg253/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mannyg253/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-10T18:41:07Z"
    },
    {
      "event": "labeled",
      "id": 8984531749,
      "node_id": "LE_lADOABII585H-G84zwAAAAIXhRMl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8984531749",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T11:29:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8986353313,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIXoN6h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8986353313",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T14:25:03Z"
    },
    {
      "event": "unlabeled",
      "id": 8987295922,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAIXr0Cy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8987295922",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T15:52:02Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9136382486,
      "node_id": "LE_lADOABII585H-G84zwAAAAIgkiIW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9136382486",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-01T12:53:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9136739511,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIgl5S3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9136739511",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-01T13:55:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9136932327,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIgmoXn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9136932327",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-01T14:20:55Z"
    },
    {
      "event": "unlabeled",
      "id": 9137181541,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAIgnlNl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9137181541",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-01T14:58:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1411039219,
      "node_id": "PRR_kwDOABII585UGr_z",
      "url": null,
      "actor": null,
      "commit_id": "e17ffdddfb8fe5d5cee3d7e42042fb5e1a8dd6a8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1411039219",
      "submitted_at": "2023-05-03T14:32:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9156642879,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIhx0g_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9156642879",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-03T15:03:01Z"
    },
    {
      "event": "reviewed",
      "id": 1411147768,
      "node_id": "PRR_kwDOABII585UHGf4",
      "url": null,
      "actor": null,
      "commit_id": "00b6e0bb8466f0cd84c8dde5884e5a6ab11b9194",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 00b6e0bb",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1411147768",
      "submitted_at": "2023-05-03T15:21:31Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1411160536,
      "node_id": "PRR_kwDOABII585UHJnY",
      "url": null,
      "actor": null,
      "commit_id": "00b6e0bb8466f0cd84c8dde5884e5a6ab11b9194",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1411160536",
      "submitted_at": "2023-05-03T15:27:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9157423855,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIh0zLv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9157423855",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-03T16:12:10Z"
    },
    {
      "event": "reviewed",
      "id": 1417686210,
      "node_id": "PRR_kwDOABII585UgCzC",
      "url": null,
      "actor": null,
      "commit_id": "265b9e36b81bb2709d91e369de9ffb24e2d15de9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "diff ACK 265b9e3",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1417686210",
      "submitted_at": "2023-05-09T00:47:56Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9223645631,
      "node_id": "RRE_lADOABII585H-G84zwAAAAIlxam_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9223645631",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T15:10:10Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9223646313,
      "node_id": "RRE_lADOABII585H-G84zwAAAAIlxaxp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9223646313",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T15:10:14Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 9245804722,
      "node_id": "LE_lADOABII585H-G84zwAAAAInF8iy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9245804722",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-15T12:02:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9250635863,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAInYYBX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9250635863",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-15T20:07:04Z"
    },
    {
      "event": "unlabeled",
      "id": 9250882264,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAInZULY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9250882264",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-15T20:36:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1427524684,
      "node_id": "PRR_kwDOABII585VFkxM",
      "url": null,
      "actor": null,
      "commit_id": "988e58eb52ca402d2b1c84b4b4d0b0f58c039121",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1427524684",
      "submitted_at": "2023-05-16T01:52:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "labeled",
      "id": 9256810439,
      "node_id": "LE_lADOABII585H-G84zwAAAAInv7fH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9256810439",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T11:16:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9260046524,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIn8Ri8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9260046524",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T16:12:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9260046655,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIn8Rk_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9260046655",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T16:12:28Z"
    },
    {
      "event": "unlabeled",
      "id": 9261031747,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAIoACFD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9261031747",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T18:04:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9280946232,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIpMAA4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9280946232",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T15:12:07Z"
    },
    {
      "event": "labeled",
      "id": 9282364538,
      "node_id": "LE_lADOABII585H-G84zwAAAAIpRaR6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9282364538",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T17:51:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9291327709,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIpzmjd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9291327709",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-19T17:20:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9292193035,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIp250L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9292193035",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-19T19:28:31Z"
    },
    {
      "event": "reviewed",
      "id": 1431487191,
      "node_id": "PRR_kwDOABII585VUsLX",
      "url": null,
      "actor": null,
      "commit_id": "0a2db031d2532caa2a1b6ff5f6f2cb4bf1cdc2bf",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This looks great so far! Here is where I am in the review:\r\n\r\n- [X] 79075f970802031d42c3808351baa91d5edf9783 wallet: Add GetPrefixCursor to DatabaseBatch (1/18)\r\n- [X] 37a3e64ec84899468aab8c55fd556c93d195e322 walletdb: Consistently clear key and value streams before writing (2/18)\r\n- [X] 39bfce498a7576cd41b2b362ee7688b665472f33 test: add coverage for db cursor prefix range iteration (3/18)\r\n- [X] 3fbbdb2925a2e65b75af9116773e059dd5453afa walletdb: Refactor minversion loading (4/18)\r\n- [X] bc2d88888f8c483823c1b718deedaf08bcd97b41 walletdb: Refactor wallet flags loading (5/18)\r\n- [X] e048fe71038caddb49a5875727a14e05f6edb0d3 walletdb: Refactor key reading and loading to its own function (6/18)\r\n- [X] 4940c1cb3dca97faa2b6a4ddfab889cd4b6f00f4 walletdb: Refactor crypted key loading to its own function (7/18)\r\n- [X] 4c7d35da1d479714df6feb457ee0f723c59f71ee walletdb: Refactor encryption key loading to its own function (8/18)\r\n- [X] a43f7d436b86a3f008edfe796f0915f848bc0406 walletdb: Refactor hd chain loading to its own function (9/18)\r\n- [X] af8b890ae7c01c5f2b806948fbdf92767a9bd5c6 salvage: Remove use of ReadKeyValue in salvage (10/18)\r\n- [X] 8648511b567dfcdea7ffa5ac4595a43a768f5525 walletdb: Refactor legacy wallet record loading into its own function (11/18)\r\n- [ ] f227c81e780dd5d8bf301250b6bec118373ba076 walletdb: Refactor descriptor wallet records loading (12/18)\r\n- [ ] 6d72a673e24ad92a062d311bb6deaa497c30997c walletdb: refactor address book loading (13/18)\r\n- [ ] f51bfb43723e2a43171d7f3a8a6abfb56c2ce675 walletdb: refactor tx loading (14/18)\r\n- [ ] 59d393c5a179249879addb6f94966fdac698b249 walletdb: refactor active spkm loading (15/18)\r\n- [ ] 8bb356f9594c61fc3043ed632be7130b97238d9b walletdb: refactor defaultkey and wkey loading (16/18)\r\n- [ ] a4fc170ef692cd2e1b3f16543c96080846673d82 walletdb: refactor decryption key loading (17/18)\r\n- [ ] 0a2db031d2532caa2a1b6ff5f6f2cb4bf1cdc2bf walletdb: Remove loading code where the database is iterated (18/18)\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1431487191",
      "submitted_at": "2023-05-19T23:28:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9304989251,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIqnt5D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9304989251",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T16:55:32Z"
    },
    {
      "event": "unlabeled",
      "id": 9306032564,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAIqrsm0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9306032564",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T18:38:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9318152868,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIrZ7qk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9318152868",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T15:58:34Z"
    },
    {
      "event": "reviewed",
      "id": 1442091917,
      "node_id": "PRR_kwDOABII585V9JON",
      "url": null,
      "actor": null,
      "commit_id": "3c51e44380ba8041e5d6c4cb29b9b2c54fad0b4b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 3c51e44380ba8041e5d6c4cb29b9b2c54fad0b4b\r\n\r\nOverall changes look good, but I think two things could be done to make this easier to review:\r\n\r\n1. The main thing would be making the \"walletdb: refactor X loading\" commits self contained and not leave behind dead code that needs to be cleaned up later. It's hard to identify what code is being replaced in current commits when not all the code being replaced is actually removed.\r\n2. I think it might be good to move first 2 commits up to \"wallet: Add GetPrefixCursor to DatabaseBatch\" (422a8436089c844934903a61fcec6b7b93995c07) to a different PR. Those commits require a different kind of review than the rest of the PR, and I suspect there are probably wallet developers who'd be perfectly comfortable reviewing the rest of the PR but less comfortable acking the lower level bdb & sqlite code there.\r\n\r\nI left a bunch of review comments, but also posted a branch https://github.com/ryanofsky/bitcoin/commits/review.24914.9-edit with suggested changes to fix up the \"refactor X loading commits\"",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1442091917",
      "submitted_at": "2023-05-30T20:58:37Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9382948454,
      "node_id": "RRE_lADOABII585H-G84zwAAAAIvRG5m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9382948454",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T20:58:44Z",
      "requested_reviewer": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 9384204151,
      "node_id": "LE_lADOABII585H-G84zwAAAAIvV5d3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9384204151",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T00:44:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9384787344,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIvYH2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9384787344",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T02:48:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9384796246,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIvYKBW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9384796246",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T02:50:50Z"
    },
    {
      "event": "commented",
      "id": 1569422995,
      "node_id": "IC_kwDOABII585di36T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1569422995",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T02:56:25Z",
      "updated_at": "2023-05-31T02:56:25Z",
      "author_association": "MEMBER",
      "body": ">   1. The main thing would be making the \"walletdb: refactor X loading\" commits self contained and not leave behind dead code that needs to be cleaned up later. It's hard to identify what code is being replaced in current commits when not all the code being replaced is actually removed.\r\n\r\nI've implemented your suggestions and some additional dead code cleanups.\r\n\r\n>   2. I think it might be good to move first 2 commits up to \"wallet: Add GetPrefixCursor to DatabaseBatch\" ([422a843](https://github.com/bitcoin/bitcoin/commit/422a8436089c844934903a61fcec6b7b93995c07)) to a different PR. Those commits require a different kind of review than the rest of the PR, and I suspect there are probably wallet developers who'd be perfectly comfortable reviewing the rest of the PR but less comfortable acking the lower level bdb & sqlite code there.\r\n\r\n#27790\r\n",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1569422995",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "convert_to_draft",
      "id": 9384819095,
      "node_id": "CTDE_lADOABII585H-G84zwAAAAIvYPmX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9384819095",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T02:56:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9394762269,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIv-LId",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9394762269",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T19:45:18Z"
    },
    {
      "event": "unlabeled",
      "id": 9397915196,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAIwKM48",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9397915196",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T04:21:11Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9404493754,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIwjS-6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9404493754",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T14:52:41Z"
    },
    {
      "event": "referenced",
      "id": 9415906411,
      "node_id": "REFE_lADOABII585H-G84zwAAAAIxO1Rr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9415906411",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7f2019755d147e7e17c54f0bb61296211bb45262",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/7f2019755d147e7e17c54f0bb61296211bb45262",
      "created_at": "2023-06-02T16:00:27Z"
    },
    {
      "event": "labeled",
      "id": 9416444586,
      "node_id": "LE_lADOABII585H-G84zwAAAAIxQ4qq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9416444586",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-02T17:08:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9416692883,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIxR1ST",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9416692883",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-02T17:43:32Z"
    },
    {
      "event": "unlabeled",
      "id": 9417321668,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAIxUOzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9417321668",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-02T19:12:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9417552920,
      "node_id": "LE_lADOABII585H-G84zwAAAAIxVHQY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9417552920",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-02T19:42:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 9417822854,
      "node_id": "REFE_lADOABII585H-G84zwAAAAIxWJKG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9417822854",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1aa882af51f686d19f9e7d866ba6a2526e93de17",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/1aa882af51f686d19f9e7d866ba6a2526e93de17",
      "created_at": "2023-06-02T20:16:55Z"
    },
    {
      "event": "ready_for_review",
      "id": 9454606779,
      "node_id": "RFRE_lADOABII585H-G84zwAAAAIzidm7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9454606779",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-07T07:15:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9454612257,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAIzie8h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9454612257",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-07T07:15:45Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAxYjM1YjU1YTExOWRjN2FjOTE1ZmM2MjFlY2ViY2Q1YzUwY2NiNTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01b35b55a119dc7ac915fc621ecebcd5c50ccb55",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/01b35b55a119dc7ac915fc621ecebcd5c50ccb55",
      "tree": {
        "sha": "9391a855b4f364e21d9dcfd4fc678ee3ef03adae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9391a855b4f364e21d9dcfd4fc678ee3ef03adae"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a36134fcc7b40671d538931f621c8c15ffacc3d2",
          "sha": "a36134fcc7b40671d538931f621c8c15ffacc3d2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a36134fcc7b40671d538931f621c8c15ffacc3d2"
        }
      ],
      "message": "walletdb: Refactor minversion loading\n\nMove minversion loading to its own function in WalletBatch",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-08T09:43:21Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-12T15:35:22Z"
      },
      "sha": "01b35b55a119dc7ac915fc621ecebcd5c50ccb55"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUyOTMyYzVhZGIyOWJiOWVjNWYwYmNkZTlhMzFiNzQxMTNhMjA2NTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52932c5adb29bb9ec5f0bcde9a31b74113a20651",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/52932c5adb29bb9ec5f0bcde9a31b74113a20651",
      "tree": {
        "sha": "0887642dc005c3db3351f069900a3e7e2c9db56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0887642dc005c3db3351f069900a3e7e2c9db56c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01b35b55a119dc7ac915fc621ecebcd5c50ccb55",
          "sha": "01b35b55a119dc7ac915fc621ecebcd5c50ccb55",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/01b35b55a119dc7ac915fc621ecebcd5c50ccb55"
        }
      ],
      "message": "walletdb: Refactor wallet flags loading\n\nMove wallet flags loading to its own function in WalletBatch\n\nThe return value is changed to be TOO_NEW rather than CORRUPT when\nunknown flags are found.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-08T09:43:21Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-12T15:39:46Z"
      },
      "sha": "52932c5adb29bb9ec5f0bcde9a31b74113a20651"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9470116110,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI0doEO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9470116110",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T09:43:32Z"
    },
    {
      "event": "unlabeled",
      "id": 9472802476,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAI0n36s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9472802476",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T13:47:57Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1477609782,
      "node_id": "PRR_kwDOABII585YEok2",
      "url": null,
      "actor": null,
      "commit_id": "ce88124bf499ae9608a2607ccddc00df3d7439bc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK ce88124bf499ae9608a2607ccddc00df3d7439bc. This looks great and I would encourage others to review. It should be much simpler to review now. Basically none of the commits are adding new code anymore, just moving code from one place to another.\r\n\r\nSince my last review https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1442091917 there were a lot of internal changes to make commits self-contained, but the only changes to the final code were making `LoadHDChain` catch exceptions, dropping an unneeded new `return DBErrors::CORRUPT;` line, getting rid of unneeded `KeyType` and `KeyFilter` functions, and rebasing.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1477609782",
      "submitted_at": "2023-06-13T16:21:59Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9525834143,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI3yLGf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9525834143",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T09:14:19Z",
      "requested_reviewer": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1484872110,
      "node_id": "PRR_kwDOABII585YgVmu",
      "url": null,
      "actor": null,
      "commit_id": "ce88124bf499ae9608a2607ccddc00df3d7439bc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left one last comment, looking great otherwise.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1484872110",
      "submitted_at": "2023-06-17T18:42:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9559320217,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI5x6aZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9559320217",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-17T18:42:11Z",
      "requested_reviewer": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9559408757,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI5yQB1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9559408757",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-17T19:29:48Z"
    },
    {
      "event": "labeled",
      "id": 9559502643,
      "node_id": "LE_lADOABII585H-G84zwAAAAI5ym8z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9559502643",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-17T20:32:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 9560025402,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAI50mk6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9560025402",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-18T03:00:55Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1485113956,
      "node_id": "PRR_kwDOABII585YhQpk",
      "url": null,
      "actor": null,
      "commit_id": "27ed889890ceb29f62dc1a4082647922968012d4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 27ed8898\r\n\r\nLeft two non-blocking findings.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1485113956",
      "submitted_at": "2023-06-18T14:03:57Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9561203350,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI55GKW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9561203350",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-18T14:04:04Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1485793207,
      "node_id": "PRR_kwDOABII585Yj2e3",
      "url": null,
      "actor": null,
      "commit_id": "27ed889890ceb29f62dc1a4082647922968012d4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 27ed889890ceb29f62dc1a4082647922968012d4 👥\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: ACK 27ed889890ceb29f62dc1a4082647922968012d4 👥\r\nQwjXzK3AhLotpx6ik+g9hYFHBUWVMOMR0l2YFXJcCdLFjNY6gmwvdk9YeL2ZfkI/3yG8E0WQl1qNz2gw+5S9Bw==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1485793207",
      "submitted_at": "2023-06-19T12:13:45Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdiZTEwYWRmZjM2YzBkYzQ5YWU1NmFjNTcxYmIwMzNjYmE3YTU2NWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "tree": {
        "sha": "e1248315b34ed19039026215f6620a92faa103aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1248315b34ed19039026215f6620a92faa103aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52932c5adb29bb9ec5f0bcde9a31b74113a20651",
          "sha": "52932c5adb29bb9ec5f0bcde9a31b74113a20651",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/52932c5adb29bb9ec5f0bcde9a31b74113a20651"
        }
      ],
      "message": "walletdb: Refactor key reading and loading to its own function",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-19T15:29:14Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-13T18:42:00Z"
      },
      "sha": "7be10adff36c0dc49ae56ac571bb033cba7a565b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNjY2RlNDU5OWI1MTUwNTc3NDAwYzRmYTkwMjlmNDE0NjYxN2Y3NTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ccde4599b5150577400c4fa9029f4146617f751",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3ccde4599b5150577400c4fa9029f4146617f751",
      "tree": {
        "sha": "59a3b42947725cea56dc50eef5d53f5f94d91586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59a3b42947725cea56dc50eef5d53f5f94d91586"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7be10adff36c0dc49ae56ac571bb033cba7a565b",
          "sha": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7be10adff36c0dc49ae56ac571bb033cba7a565b"
        }
      ],
      "message": "walletdb: Refactor crypted key loading to its own function",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-19T15:35:15Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-13T19:34:23Z"
      },
      "sha": "3ccde4599b5150577400c4fa9029f4146617f751"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcyYzJhNTRlYmI5OWZhM2Q5MWQ3ZDE1YmQ4YTM4YThkMTZlMGVhNmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72c2a54ebb99fa3d91d7d15bd8a38a8d16e0ea6c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/72c2a54ebb99fa3d91d7d15bd8a38a8d16e0ea6c",
      "tree": {
        "sha": "1d2a6408818c40b3cd171820f27afde6bd3336ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d2a6408818c40b3cd171820f27afde6bd3336ba"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ccde4599b5150577400c4fa9029f4146617f751",
          "sha": "3ccde4599b5150577400c4fa9029f4146617f751",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3ccde4599b5150577400c4fa9029f4146617f751"
        }
      ],
      "message": "walletdb: Refactor encryption key loading to its own function",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-19T15:36:52Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-13T20:07:59Z"
      },
      "sha": "72c2a54ebb99fa3d91d7d15bd8a38a8d16e0ea6c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFkNzc5ZTllY2U5ODI5Njc3YzE3MzVkODg2NWYxNGIyMzQ1OWRhODA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad779e9ece9829677c1735d8865f14b23459da80",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ad779e9ece9829677c1735d8865f14b23459da80",
      "tree": {
        "sha": "06a5c26a874b9e13693b087fdc13852c1aa6c568",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06a5c26a874b9e13693b087fdc13852c1aa6c568"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72c2a54ebb99fa3d91d7d15bd8a38a8d16e0ea6c",
          "sha": "72c2a54ebb99fa3d91d7d15bd8a38a8d16e0ea6c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/72c2a54ebb99fa3d91d7d15bd8a38a8d16e0ea6c"
        }
      ],
      "message": "walletdb: Refactor hd chain loading to its own function",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-19T15:38:01Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-13T20:37:29Z"
      },
      "sha": "ad779e9ece9829677c1735d8865f14b23459da80"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9570645877,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI6dHd1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9570645877",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-19T17:03:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9570662343,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI6dLfH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9570662343",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-19T17:06:01Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDllMDc3ZDliNDIyYWMzYzM3MWZlMGY2M2RhNDBlNTA5MjE3MWEyNWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e077d9b422ac3c371fe0f63da40e5092171a25e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9e077d9b422ac3c371fe0f63da40e5092171a25e",
      "tree": {
        "sha": "f97d48477d1cb270a7e0c565edd626084b9b739b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f97d48477d1cb270a7e0c565edd626084b9b739b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad779e9ece9829677c1735d8865f14b23459da80",
          "sha": "ad779e9ece9829677c1735d8865f14b23459da80",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ad779e9ece9829677c1735d8865f14b23459da80"
        }
      ],
      "message": "salvage: Remove use of ReadKeyValue in salvage\n\nTo prepare to remove ReadKeyValue, change salvage to not use it",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-19T20:46:39Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-13T20:38:44Z"
      },
      "sha": "9e077d9b422ac3c371fe0f63da40e5092171a25e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9572372437,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI6js_V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9572372437",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-19T20:52:44Z"
    },
    {
      "event": "reviewed",
      "id": 1487059118,
      "node_id": "PRR_kwDOABII585Yoriu",
      "url": null,
      "actor": null,
      "commit_id": "54916e3fda3172ce3bb81d4213266a58a67c59f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Left another finding in https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234566557. Should be the last thing.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1487059118",
      "submitted_at": "2023-06-20T00:19:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1487596884,
      "node_id": "PRR_kwDOABII585Yqu1U",
      "url": null,
      "actor": null,
      "commit_id": "54916e3fda3172ce3bb81d4213266a58a67c59f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some nits below and here: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235077148\r\n\r\n\r\nre-ACK 54916e3fda3172ce3bb81d4213266a58a67c59f2 🌞\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: re-ACK 54916e3fda3172ce3bb81d4213266a58a67c59f2 🌞\r\nAW3a1aYFYStKNpUhe+blkBm9rJGhGF7DarXiFtWkcErw+w5nBB72npBzZtxPZ7qNy62ONR0McfKlJgiJ0YhdAg==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1487596884",
      "submitted_at": "2023-06-20T08:34:14Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9576697716,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI60M90",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9576697716",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T08:34:22Z",
      "requested_reviewer": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1487636683,
      "node_id": "PRR_kwDOABII585Yq4jL",
      "url": null,
      "actor": null,
      "commit_id": "643859ecc289885ed5f0ba67608aa69691724f46",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1487636683",
      "submitted_at": "2023-06-20T08:45:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1487856015,
      "node_id": "PRR_kwDOABII585YruGP",
      "url": null,
      "actor": null,
      "commit_id": "54916e3fda3172ce3bb81d4213266a58a67c59f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1487856015",
      "submitted_at": "2023-06-20T10:51:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9582313362,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI7Jn-S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9582313362",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T17:22:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9582323105,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI7JqWh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9582323105",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T17:23:00Z"
    },
    {
      "event": "reviewed",
      "id": 1490595441,
      "node_id": "PRR_kwDOABII585Y2K5x",
      "url": null,
      "actor": null,
      "commit_id": "0c3c7f7a7b03eb954d25ce0ad003792079385557",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 0c3c7f7a\r\n\r\nSince my last review:\r\n-> Log of noncritical errors ✓\r\n-> Removal of extra `\\n`  ✓",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1490595441",
      "submitted_at": "2023-06-21T12:27:51Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9593034651,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI7yheb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9593034651",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T12:27:59Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1601320723,
      "node_id": "IC_kwDOABII585fcjcT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601320723",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T17:54:17Z",
      "updated_at": "2023-06-21T17:54:17Z",
      "author_association": "MEMBER",
      "body": "re-ACK 0c3c7f7a7b03eb954d25ce0ad003792079385557 🍼\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: re-ACK 0c3c7f7a7b03eb954d25ce0ad003792079385557 🍼\r\nyKiEOgf+6FtUTFcknjlAZmq1YmMbu+RWfrT7PfsLhX02t8YyQdcye8ALbnHvRC2Vmo8rNpuXqlTmMb40vSVhBw==\r\n```\r\n\r\n</details>\r\n\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1601320723",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "review_request_removed",
      "id": 9596989938,
      "node_id": "RRRE_lADOABII585H-G84zwAAAAI8BnHy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9596989938",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T17:54:24Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1601349753,
      "node_id": "IC_kwDOABII585fcqh5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601349753",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T18:13:54Z",
      "updated_at": "2023-06-21T18:13:54Z",
      "author_association": "MEMBER",
      "body": "Not sure if anything needs to be done about the changed exception handling: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237398297 \r\n\r\nMaybe adjusting the error string(s) is enough?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1601349753",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9597628758,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI8EDFW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9597628758",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T18:59:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9597720576,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI8EZgA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9597720576",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T19:03:29Z"
    },
    {
      "event": "labeled",
      "id": 9597723651,
      "node_id": "LE_lADOABII585H-G84zwAAAAI8EaQD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9597723651",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T19:03:37Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9598459213,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI8HN1N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9598459213",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T19:37:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9598498685,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI8HXd9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9598498685",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T19:40:27Z"
    },
    {
      "event": "unlabeled",
      "id": 9600263907,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAI8OGbj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9600263907",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T23:01:41Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1492981592,
      "node_id": "PRR_kwDOABII585Y_RdY",
      "url": null,
      "actor": null,
      "commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1492981592",
      "submitted_at": "2023-06-22T11:28:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1493011039,
      "node_id": "PRR_kwDOABII585Y_Ypf",
      "url": null,
      "actor": null,
      "commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4 📀\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: f0eea2749bcc73cde0cabc6fee0b7981a7539cf4 📀\r\ng6grEJToJOQFdY5asSP/tSfzsPyxsg1LuOGhk77aeNGB1LRWvfDOeDcCZc4SMRjtpHnOlHutU/D9a3ENDnlCBw==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1493011039",
      "submitted_at": "2023-06-22T12:00:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9607438317,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI8pd_t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9607438317",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-22T14:30:54Z"
    },
    {
      "event": "reviewed",
      "id": 1493209056,
      "node_id": "PRR_kwDOABII585ZAI_g",
      "url": null,
      "actor": null,
      "commit_id": "c0a7fcb06c0e3161f1d6e96d4c3cc51d412fe59a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This looks like is getting close to being read to be merged, and I'm going through the changes from the beginning again to start looking more closely at the error handling in light of the new comments.\r\n\r\nI do generally think it is better to let errors accumulate and return information about all of them, not just the first one. And I think it would be better to handle more exceptions closer to where they are thrown rather than at the end in a final `catch(...)`. It seems like the PR takes a few steps backwards in these respects. But not in a major way, and not in any way that can't be improved later.\r\n\r\nI'll keep reviewing but for now just left some feedback below on LoadLegacyWalletRecords",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1493209056",
      "submitted_at": "2023-06-22T15:27:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9608961109,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI8vRxV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9608961109",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-22T16:43:33Z"
    },
    {
      "event": "commented",
      "id": 1602997031,
      "node_id": "IC_kwDOABII585fi8sn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1602997031",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-22T16:45:33Z",
      "updated_at": "2023-06-22T16:45:33Z",
      "author_association": "MEMBER",
      "body": "I've gone through and changed all of the early returns to instead update `result`.\r\n\r\nHowever I've had to add an early return after `LoadDescriptorRecords` for `UNKNOWN_DESCRIPTOR` as otherwise `LoadActiveSPKMs` will assert when the wallet has unknown descriptors. There is a comment in the code explaining this.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1602997031",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "labeled",
      "id": 9609804408,
      "node_id": "LE_lADOABII585H-G84zwAAAAI8yfp4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9609804408",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-22T18:06:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1493974358,
      "node_id": "PRR_kwDOABII585ZDD1W",
      "url": null,
      "actor": null,
      "commit_id": "0f2ab4b4e104de712dea4bb18b18f1a42a571d1c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1493974358",
      "submitted_at": "2023-06-22T20:48:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9612238584,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI87x74",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9612238584",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T00:30:16Z"
    },
    {
      "event": "reviewed",
      "id": 1495016532,
      "node_id": "PRR_kwDOABII585ZHCRU",
      "url": null,
      "actor": null,
      "commit_id": "290bc962096ca109edd038fbe2f32322ffdabb7b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 290bc962096ca109edd038fbe2f32322ffdabb7b. I reviewed pretty much from the beginning, and there is a lot here, but as far as I can tell everything looks good.\r\n\r\nI left some suggestions below, but I don't think any of them are critical.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1495016532",
      "submitted_at": "2023-06-23T14:31:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9618501928,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI9TrEo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9618501928",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T14:31:42Z",
      "requested_reviewer": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9618501956,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI9TrFE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9618501956",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T14:31:42Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9619808148,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI9Yp-U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9619808148",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T17:00:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9619867208,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI9Y4ZI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9619867208",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T17:06:32Z"
    },
    {
      "event": "reviewed",
      "id": 1498470740,
      "node_id": "PRR_kwDOABII585ZUNlU",
      "url": null,
      "actor": null,
      "commit_id": "55d4d6fa77f3a9a0cd0d7738a039855d045684cc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1498470740",
      "submitted_at": "2023-06-26T13:04:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9640566633,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI-n19p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9640566633",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T15:26:21Z"
    },
    {
      "event": "unlabeled",
      "id": 9641464263,
      "node_id": "UNLE_lADOABII585H-G84zwAAAAI-rRHH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9641464263",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T16:53:44Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1498812845,
      "node_id": "PRR_kwDOABII585ZVhGt",
      "url": null,
      "actor": null,
      "commit_id": "973d910c287867d8bb1c8041bca906c14596aeda",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 973d910c\r\n\r\nOnly left few more nits. Nothing blocking.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1498812845",
      "submitted_at": "2023-06-26T19:16:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9642936566,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI-w4j2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9642936566",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T19:17:08Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1499361716,
      "node_id": "PRR_kwDOABII585ZXnG0",
      "url": null,
      "actor": null,
      "commit_id": "973d910c287867d8bb1c8041bca906c14596aeda",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 973d910c287867d8bb1c8041bca906c14596aeda\r\n\r\nLooks good, probably ready for merge with a third ACK.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1499361716",
      "submitted_at": "2023-06-26T20:25:52Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9644674370,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI-3g1C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9644674370",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T22:05:50Z"
    },
    {
      "event": "reviewed",
      "id": 1499593012,
      "node_id": "PRR_kwDOABII585ZYfk0",
      "url": null,
      "actor": null,
      "commit_id": "7cb774048c5f04b3e20d95e794c5a350ea4eff97",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 7cb774048c5f04b3e20d95e794c5a350ea4eff97. Just more suggested error handling tweaks since last review",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1499593012",
      "submitted_at": "2023-06-26T22:35:48Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "review_requested",
      "id": 9644905019,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI-4ZI7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9644905019",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T22:35:56Z",
      "requested_reviewer": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1499603948,
      "node_id": "PRR_kwDOABII585ZYiPs",
      "url": null,
      "actor": null,
      "commit_id": "7cb774048c5f04b3e20d95e794c5a350ea4eff97",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK 7cb77404",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1499603948",
      "submitted_at": "2023-06-26T22:40:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1498715782,
      "node_id": "PRR_kwDOABII585ZVJaG",
      "url": null,
      "actor": null,
      "commit_id": "7cb774048c5f04b3e20d95e794c5a350ea4eff97",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "lgtm ACK 7cb774048c5f04b3e20d95e794c5a350ea4eff97 🍖\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: lgtm ACK 7cb774048c5f04b3e20d95e794c5a350ea4eff97 🍖\r\nwuc4npVuTb3Yb6tNza4MK7G2Z6qzHiajO9EsxCW7ib4DxRzWDxs552TGpGVPJxZ5qafuYSW65Z4/WLbHadprCA==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1498715782",
      "submitted_at": "2023-06-27T11:21:04Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "commented",
      "id": 1609403231,
      "node_id": "IC_kwDOABII585f7Ytf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609403231",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T12:26:43Z",
      "updated_at": "2023-06-27T12:26:43Z",
      "author_association": "MEMBER",
      "body": "Also, it may be good to add tests for currently untested code: https://marcofalke.github.io/b-c-cov/total.coverage/src/wallet/wallet.cpp.gcov.html#2926",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1609403231",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "commented",
      "id": 1609563472,
      "node_id": "IC_kwDOABII585f7_1Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609563472",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T13:56:39Z",
      "updated_at": "2023-06-27T13:56:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "With 3 up-to-date acks, and all the review that's happened so far, I think this looks ready to merge now. But will wait to see if @achow101 wants to respond to newest comments.\r\n\r\nI like Marco's error handling suggestions since they simplify code and just print all the errors. If it turns out there are this cases where this repeats too many errors, it seems like it would be easy to add a bit of code to LoadRecords that just compares new error messages to previous and adds `[Repeated ## times]` to the log.\r\n\r\nIt would also be great to to look at coverage link https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1609403231 and list places where we should try to add missing test coverage.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1609563472",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "mentioned",
      "id": 9652641159,
      "node_id": "MEE_lADOABII585H-G84zwAAAAI_V52H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9652641159",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T13:56:39Z"
    },
    {
      "event": "subscribed",
      "id": 9652641183,
      "node_id": "SE_lADOABII585H-G84zwAAAAI_V52f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9652641183",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T13:56:39Z"
    },
    {
      "event": "commented",
      "id": 1609571471,
      "node_id": "IC_kwDOABII585f8ByP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609571471",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T14:00:51Z",
      "updated_at": "2023-06-27T14:00:51Z",
      "author_association": "MEMBER",
      "body": "> If it turns out there are this cases where this repeats too many errors\r\n\r\nI think that'd be the case on current master as well. My comment was that  this pull may repeat the *first* error message, even though there may be a second one.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1609571471",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "commented",
      "id": 1609592218,
      "node_id": "IC_kwDOABII585f8G2a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609592218",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T14:12:16Z",
      "updated_at": "2023-06-27T14:12:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think that'd be the case on current master as well. My comment was that this pull may repeat the _first_ error message, even though there may be a second one.\r\n\r\nMakes sense, I missed that. I thought the code was only trying to print one error message, and didn't notice it would print it multiple times. I like your fix of just printing all the messages instead of printing one, but either way to fix this seems fine.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1609592218",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "commented",
      "id": 1609660812,
      "node_id": "IC_kwDOABII585f8XmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609660812",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T14:48:55Z",
      "updated_at": "2023-06-27T14:54:40Z",
      "author_association": "MEMBER",
      "body": "> Also, it may be good to add tests for currently untested code: https://marcofalke.github.io/b-c-cov/total.coverage/src/wallet/wallet.cpp.gcov.html#2926\r\n\r\nI actually have a PR planned to remove most of those lines. The string errors there are duplicated from the internal walletdb errors. We can just bubble up the error instead of swallowing it.\r\n\r\nAlso, in the unit tests, we usually call `CWallet::LoadWallet` instead of `CWallet::Create`, thus why some of those paths are untested (like the `UNKNOWN_DESCRIPTOR` one, which is tested [here](https://github.com/bitcoin/bitcoin/blob/7ee41217b3b3fe4d8b7eb4fd1d4577b9b33d466d/src/wallet/test/walletload_tests.cpp#L50)).\r\n\r\nThat being said, totally agree on adding much more coverage to the area.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1609660812",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMwYWIxMWM0OTc5M2Q1ZDU1ZDY2YzRkZWRmYTU3NmFlOGZkNjEyOWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30ab11c49793d5d55d66c4dedfa576ae8fd6129c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/30ab11c49793d5d55d66c4dedfa576ae8fd6129c",
      "tree": {
        "sha": "a4530899bbeb7f99ad6214ad9b05960f707fb610",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4530899bbeb7f99ad6214ad9b05960f707fb610"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e077d9b422ac3c371fe0f63da40e5092171a25e",
          "sha": "9e077d9b422ac3c371fe0f63da40e5092171a25e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9e077d9b422ac3c371fe0f63da40e5092171a25e"
        }
      ],
      "message": "walletdb: Refactor legacy wallet record loading into its own function\n\nInstead of loading legacy wallet records as we come across them when\niterating the database, load them explicitly.\n\nException handling for these records changes to a per-record type basis,\nrather than globally. This results in some records now failing with a\ncritical error rather than a non-critical one.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-27T15:00:47Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-12T18:27:39Z"
      },
      "sha": "30ab11c49793d5d55d66c4dedfa576ae8fd6129c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQwNWI0ZDkxNDcxMmI1ZGUzYjIzMGEwZTI5NjBlODlmNmEwYTJiMmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/405b4d914712b5de3b230a0e2960e89f6a0a2b2a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/405b4d914712b5de3b230a0e2960e89f6a0a2b2a",
      "tree": {
        "sha": "5aa3ba6fc43598c287982caf961b153a1ac4c522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5aa3ba6fc43598c287982caf961b153a1ac4c522"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30ab11c49793d5d55d66c4dedfa576ae8fd6129c",
          "sha": "30ab11c49793d5d55d66c4dedfa576ae8fd6129c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/30ab11c49793d5d55d66c4dedfa576ae8fd6129c"
        }
      ],
      "message": "walletdb: Refactor descriptor wallet records loading\n\nInstead of loading descriptor wallet records as we come across them when\niterating the database, loading them explicitly.\n\nException handling for these records changes to a per-record type basis,\nrather than globally. This results in some records now failing with a\ncritical error rather than a non-critical one.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-27T15:04:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-12T20:16:49Z"
      },
      "sha": "405b4d914712b5de3b230a0e2960e89f6a0a2b2a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFiY2MxM2RkMjQ4ODliYzFjNmFmN2IxMGRhMWRhOTZkODZhZWFmZWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abcc13dd24889bc1c6af7b10da1da96d86aeafed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/abcc13dd24889bc1c6af7b10da1da96d86aeafed",
      "tree": {
        "sha": "c235b37cb8581090fc2a02b12c926dafb11a46d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c235b37cb8581090fc2a02b12c926dafb11a46d3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/405b4d914712b5de3b230a0e2960e89f6a0a2b2a",
          "sha": "405b4d914712b5de3b230a0e2960e89f6a0a2b2a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/405b4d914712b5de3b230a0e2960e89f6a0a2b2a"
        }
      ],
      "message": "walletdb: refactor address book loading\n\nInstead of loading address book records as we come across them when\niterating the database, load them explicitly\n\nDue to exception handling changes, deserialization errors are now\ntreated as critical.\n\nThe error message for noncritical errors has also been updated to\nreflect that there's more data that could be missing than just address\nbook entries and tx data.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-27T15:04:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-12T22:25:10Z"
      },
      "sha": "abcc13dd24889bc1c6af7b10da1da96d86aeafed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZmYWJiN2ZjOTllNjA1ODRkNWYzYTJjYjAxZDM5Zjc2MTc2OWEyNWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fabb7fc99e60584d5f3a2cb01d39f761769a25d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6fabb7fc99e60584d5f3a2cb01d39f761769a25d",
      "tree": {
        "sha": "7ba297d0eff2ba939efc1791cd42735d48c337a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ba297d0eff2ba939efc1791cd42735d48c337a8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abcc13dd24889bc1c6af7b10da1da96d86aeafed",
          "sha": "abcc13dd24889bc1c6af7b10da1da96d86aeafed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/abcc13dd24889bc1c6af7b10da1da96d86aeafed"
        }
      ],
      "message": "walletdb: refactor tx loading\n\nInstead of loading tx records as we come across them when iterating the\ndatabase, load them explicitly.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-27T15:07:38Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-13T16:18:11Z"
      },
      "sha": "6fabb7fc99e60584d5f3a2cb01d39f761769a25d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM5NzhjNmQzOWNkZWI3OGZjNDcyMDc2N2I5NDNkMDNkNmE5YTM2ZDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c978c6d39cdeb78fc4720767b943d03d6a9a36d8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c978c6d39cdeb78fc4720767b943d03d6a9a36d8",
      "tree": {
        "sha": "52e6d80f112b3fa8c063d2f7980397f510d93f8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52e6d80f112b3fa8c063d2f7980397f510d93f8f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fabb7fc99e60584d5f3a2cb01d39f761769a25d",
          "sha": "6fabb7fc99e60584d5f3a2cb01d39f761769a25d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6fabb7fc99e60584d5f3a2cb01d39f761769a25d"
        }
      ],
      "message": "walletdb: refactor active spkm loading\n\nInstead of loading active spkm records as we come across them when\niterating the database, load them explicitly.\n\nDue to exception handling changes, deserialization errors are now\ntreated as critical.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-27T15:07:46Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-18T18:26:26Z"
      },
      "sha": "c978c6d39cdeb78fc4720767b943d03d6a9a36d8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMxYzAzM2U1Y2EzYjY1ZjRmNTM0NWQ1YWExN2FhZmVkZDYzN2VmNGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31c033e5ca3b65f4f5345d5aa17aafedd637ef4f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/31c033e5ca3b65f4f5345d5aa17aafedd637ef4f",
      "tree": {
        "sha": "e51c3a7a253dd64c30e96776bf9a054c578d620d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e51c3a7a253dd64c30e96776bf9a054c578d620d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c978c6d39cdeb78fc4720767b943d03d6a9a36d8",
          "sha": "c978c6d39cdeb78fc4720767b943d03d6a9a36d8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c978c6d39cdeb78fc4720767b943d03d6a9a36d8"
        }
      ],
      "message": "walletdb: refactor defaultkey and wkey loading\n\nInstead of dealing with these records when iterating the entire\ndatabase, find and handle them explicitly.\n\nLoading of OLD_KEY records is bumped up to a LOAD_FAIL error as we will\nnot be able to use these types of keys which can lead to users missing\nfunds.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-27T15:07:51Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-18T18:43:52Z"
      },
      "sha": "31c033e5ca3b65f4f5345d5aa17aafedd637ef4f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNkMjExYjNiOTk2NWI1MDcwZDY4YWRjMWEwMzA0M2Q4MmQ5MDRkNWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd211b3b9965b5070d68adc1a03043d82d904d5b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cd211b3b9965b5070d68adc1a03043d82d904d5b",
      "tree": {
        "sha": "6f834c7ac3cbb4094990470426025548ed081848",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f834c7ac3cbb4094990470426025548ed081848"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31c033e5ca3b65f4f5345d5aa17aafedd637ef4f",
          "sha": "31c033e5ca3b65f4f5345d5aa17aafedd637ef4f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/31c033e5ca3b65f4f5345d5aa17aafedd637ef4f"
        }
      ],
      "message": "walletdb: refactor decryption key loading\n\nInstead of loading decryption keys as we iterate the database, load them\nexplicitly.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-27T15:08:00Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-18T19:08:51Z"
      },
      "sha": "cd211b3b9965b5070d68adc1a03043d82d904d5b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI2MzY4NDRmNTM1Mzc5N2EwYjhlNDBhODc5NjUyYTBkMzQ1MTcyYWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2636844f5353797a0b8e40a879652a0d345172ad",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2636844f5353797a0b8e40a879652a0d345172ad",
      "tree": {
        "sha": "905c40865b26fc420edba7d58ee7efe6d859bd86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/905c40865b26fc420edba7d58ee7efe6d859bd86"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd211b3b9965b5070d68adc1a03043d82d904d5b",
          "sha": "cd211b3b9965b5070d68adc1a03043d82d904d5b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cd211b3b9965b5070d68adc1a03043d82d904d5b"
        }
      ],
      "message": "walletdb: Remove loading code where the database is iterated\n\nInstead of iterating the database to load the wallet, we now load\nparticular kinds of records in an order that we want them to be loaded.\nSo it is no longer necessary to iterate the entire database to load the\nwallet.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-27T15:08:05Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-18T18:56:23Z"
      },
      "sha": "2636844f5353797a0b8e40a879652a0d345172ad"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNjODNiMWQ4ODRiNDE5YWRlY2U5NWIzMzViNmU5NTZlNzQ1OWE3ZWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c83b1d884b419adece95b335b6e956e7459a7ef",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3c83b1d884b419adece95b335b6e956e7459a7ef",
      "tree": {
        "sha": "807cf419296ea00a0f51a428706e4555b9a6356f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/807cf419296ea00a0f51a428706e4555b9a6356f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2636844f5353797a0b8e40a879652a0d345172ad",
          "sha": "2636844f5353797a0b8e40a879652a0d345172ad",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2636844f5353797a0b8e40a879652a0d345172ad"
        }
      ],
      "message": "doc: Add release note for wallet loading changes\n\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-27T15:08:06Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-21T20:33:12Z"
      },
      "sha": "3c83b1d884b419adece95b335b6e956e7459a7ef"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9653579688,
      "node_id": "HRFPE_lADOABII585H-G84zwAAAAI_Ze-o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9653579688",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T15:08:41Z"
    },
    {
      "event": "commented",
      "id": 1609730104,
      "node_id": "IC_kwDOABII585f8og4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609730104",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T15:19:39Z",
      "updated_at": "2023-06-27T15:19:39Z",
      "author_association": "MEMBER",
      "body": "re-ACK 3c83b1d884b419adece95b335b6e956e7459a7ef 🍤\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: re-ACK 3c83b1d884b419adece95b335b6e956e7459a7ef 🍤\r\nLjPNOXHR9a4Og46x/6TZNAoki0QrUodvQbWJAyOV1qwc7WRRNkI99Gn13HSmcRTEqR3pSz6zwG+lAATKwQF8CA==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1609730104",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914"
    },
    {
      "event": "review_requested",
      "id": 9653728536,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI_aDUY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9653728536",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T15:19:47Z",
      "requested_reviewer": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9653728553,
      "node_id": "RRE_lADOABII585H-G84zwAAAAI_aDUp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9653728553",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T15:19:47Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1501871959,
      "node_id": "PRR_kwDOABII585ZhL9X",
      "url": null,
      "actor": null,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK 3c83b1d8",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1501871959",
      "submitted_at": "2023-06-27T21:21:38Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "reviewed",
      "id": 1501951643,
      "node_id": "PRR_kwDOABII585Zhfab",
      "url": null,
      "actor": null,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 3c83b1d884b419adece95b335b6e956e7459a7ef. Just Marco's suggested error handling fixes since last review",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1501951643",
      "submitted_at": "2023-06-27T22:39:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "merged",
      "id": 9657854911,
      "node_id": "ME_lADOABII585H-G84zwAAAAI_pyu_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9657854911",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d9c7c2fd3ec7b0fcae7e0c9423bff6c6799dd67c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9c7c2fd3ec7b0fcae7e0c9423bff6c6799dd67c",
      "created_at": "2023-06-27T23:03:39Z"
    },
    {
      "event": "closed",
      "id": 9657854931,
      "node_id": "CE_lADOABII585H-G84zwAAAAI_pyvT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9657854931",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T23:03:39Z"
    },
    {
      "event": "referenced",
      "id": 9683803286,
      "node_id": "REFE_lADOABII585H-G84zwAAAAJBMxyW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9683803286",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "23bcef68f2c83bf4d8ba5e28f4727c8358949e48",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/23bcef68f2c83bf4d8ba5e28f4727c8358949e48",
      "created_at": "2023-06-30T04:24:52Z"
    },
    {
      "event": "reviewed",
      "id": 1702947072,
      "node_id": "PRR_kwDOABII585lgOkA",
      "url": null,
      "actor": null,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Veiwed ",
      "user": {
        "login": "Thompson1985",
        "id": 131511127,
        "node_id": "U_kgDOB9azVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/131511127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Thompson1985",
        "html_url": "https://github.com/Thompson1985",
        "followers_url": "https://api.github.com/users/Thompson1985/followers",
        "following_url": "https://api.github.com/users/Thompson1985/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Thompson1985/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Thompson1985/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Thompson1985/subscriptions",
        "organizations_url": "https://api.github.com/users/Thompson1985/orgs",
        "repos_url": "https://api.github.com/users/Thompson1985/repos",
        "events_url": "https://api.github.com/users/Thompson1985/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Thompson1985/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1702947072",
      "submitted_at": "2023-10-29T11:56:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
    },
    {
      "event": "locked",
      "id": 14988485667,
      "node_id": "LOE_lADOABII585H-G84zwAAAAN9YiQj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14988485667",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T17:10:19Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/867213509",
      "pull_request_review_id": 965184731,
      "id": 867213509,
      "node_id": "PRRC_kwDOABII584zsKDF",
      "diff_hunk": "@@ -506,10 +494,70 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+    if (!cursor) return nullptr;\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"SQLiteDatabase: Failed to setup cursor SQL statement: %s\\n\", sqlite3_errstr(res)));\n+    }\n+\n+    return cursor;\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0x00);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        end_range.insert(end_range.begin(), std::byte(0x01));\n+    }\n+\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>(start_range, end_range);\n+    if (!cursor) return nullptr;\n+\n+    const char* stmt_text = \"SELECT key, value FROM main WHERE key >= ? AND key < ?\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3a27791244e75dd9836f18d58ffd2355e5ea4f88",
      "in_reply_to_id": null,
      "user": {
        "login": "pk-b2",
        "id": 91447896,
        "node_id": "MDQ6VXNlcjkxNDQ3ODk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/91447896?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pk-b2",
        "html_url": "https://github.com/pk-b2",
        "followers_url": "https://api.github.com/users/pk-b2/followers",
        "following_url": "https://api.github.com/users/pk-b2/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pk-b2/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pk-b2/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pk-b2/subscriptions",
        "organizations_url": "https://api.github.com/users/pk-b2/orgs",
        "repos_url": "https://api.github.com/users/pk-b2/repos",
        "events_url": "https://api.github.com/users/pk-b2/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pk-b2/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n> explain query plan SELECT key, value FROM main WHERE key >= ? AND key < ?\r\n```\r\n\r\nVerified that this uses an index avoiding a table scan\r\n\r\n```\r\nSEARCH TABLE main USING INDEX sqlite_autoindex_main_1 (key>? AND key<?)`\r\n```",
      "created_at": "2022-05-06T21:00:55Z",
      "updated_at": "2022-05-06T21:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r867213509",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/867213509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 552,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/867214239",
      "pull_request_review_id": 965185719,
      "id": 867214239,
      "node_id": "PRRC_kwDOABII584zsKOf",
      "diff_hunk": "@@ -506,10 +494,70 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+    if (!cursor) return nullptr;\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"SQLiteDatabase: Failed to setup cursor SQL statement: %s\\n\", sqlite3_errstr(res)));\n+    }\n+\n+    return cursor;\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0x00);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        end_range.insert(end_range.begin(), std::byte(0x01));\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3a27791244e75dd9836f18d58ffd2355e5ea4f88",
      "in_reply_to_id": null,
      "user": {
        "login": "pk-b2",
        "id": 91447896,
        "node_id": "MDQ6VXNlcjkxNDQ3ODk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/91447896?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pk-b2",
        "html_url": "https://github.com/pk-b2",
        "followers_url": "https://api.github.com/users/pk-b2/followers",
        "following_url": "https://api.github.com/users/pk-b2/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pk-b2/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pk-b2/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pk-b2/subscriptions",
        "organizations_url": "https://api.github.com/users/pk-b2/orgs",
        "repos_url": "https://api.github.com/users/pk-b2/repos",
        "events_url": "https://api.github.com/users/pk-b2/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pk-b2/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍 Like that approach",
      "created_at": "2022-05-06T21:02:23Z",
      "updated_at": "2022-05-06T21:02:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r867214239",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/867214239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 529,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 586,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893727842",
      "pull_request_review_id": 1001663726,
      "id": 893727842,
      "node_id": "PRRC_kwDOABII5841RTRi",
      "diff_hunk": "@@ -696,13 +694,19 @@ bool BerkeleyBatch::ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool&\n     return true;\n }\n \n-void BerkeleyBatch::CloseCursor()\n+BerkeleyCursor::~BerkeleyCursor()\n {\n     if (!m_cursor) return;\n     m_cursor->close();\n     m_cursor = nullptr;\n }\n \n+std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetCursor()\n+{\n+    if (!pdb) return nullptr;\n+    return std::make_unique<BerkeleyCursor>(m_database);\n+}",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "950c94f5ccc024c633410d624e11f874f857543d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tiny nit: maybe `GetNewCursor()`?",
      "created_at": "2022-06-09T16:34:00Z",
      "updated_at": "2022-06-09T17:52:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r893727842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893727842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 704,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 729,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893736353",
      "pull_request_review_id": 1001663726,
      "id": 893736353,
      "node_id": "PRRC_kwDOABII5841RVWh",
      "diff_hunk": "@@ -661,16 +661,14 @@ void BerkeleyDatabase::ReloadDbEnv()\n     env->ReloadDbEnv();\n }\n \n-bool BerkeleyBatch::StartCursor()\n+BerkeleyCursor::BerkeleyCursor(BerkeleyDatabase& database)\n {\n-    assert(!m_cursor);\n-    if (!pdb)\n-        return false;\n-    int ret = pdb->cursor(nullptr, &m_cursor, 0);\n-    return ret == 0;\n+    assert(database.m_db.get());\n+    int ret = database.m_db->cursor(nullptr, &m_cursor, 0);\n+    assert(ret == 0);",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "950c94f5ccc024c633410d624e11f874f857543d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 950c94f5:\r\n\r\nProbably better an exception instead of an assertion (similar to what is being done in the SQLite method).",
      "created_at": "2022-06-09T16:43:31Z",
      "updated_at": "2022-06-09T17:54:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r893736353",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893736353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893783634",
      "pull_request_review_id": 1001663726,
      "id": 893783634,
      "node_id": "PRRC_kwDOABII5841Rg5S",
      "diff_hunk": "@@ -770,6 +770,19 @@ static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "040fa33fcce7cb0ec00405ca750de01880c19b8a",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 040fa33f:\r\n\r\nBad copy here, error is `DBErrors::CORRUPT`.",
      "created_at": "2022-06-09T17:33:52Z",
      "updated_at": "2022-06-09T17:52:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r893783634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893783634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 780,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/900448270",
      "pull_request_review_id": 1010939699,
      "id": 900448270,
      "node_id": "PRRC_kwDOABII5841q8AO",
      "diff_hunk": "@@ -770,6 +770,19 @@ static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "040fa33fcce7cb0ec00405ca750de01880c19b8a",
      "in_reply_to_id": 893783634,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The original error is incorrect, it's supposed to be `TOO_NEW`.",
      "created_at": "2022-06-17T19:22:41Z",
      "updated_at": "2022-06-17T19:22:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r900448270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/900448270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 780,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902769522",
      "pull_request_review_id": 1013820695,
      "id": 902769522,
      "node_id": "PRRC_kwDOABII5841zyty",
      "diff_hunk": "@@ -828,12 +741,330 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+    std::string err;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    // Load unencrypted keys\n+    std::unique_ptr<DatabaseCursor> cursor = GetTypeCursor(batch, DBKeys::KEY);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for unencrypted keys\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    int num_keys = 0;\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next unencrypted key record for wallet database\\n\");\n+            return DBErrors::CORRUPT;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == DBKeys::KEY);\n+        if (!LoadKey(pwallet, ssKey, ssValue, err)) {\n+            result = DBErrors::CORRUPT;\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 184,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "a1d8d563d0f2ae12889bcc9002f1a532fadc9acc",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In a1d8d563:\r\n\r\nShouldn't this be a direct `return DBErrors::CORRUPT` as it was before?\r\n(same for the other one at line 807)",
      "created_at": "2022-06-21T15:31:01Z",
      "updated_at": "2022-06-21T16:01:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r902769522",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902769522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 780,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 516,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902777349",
      "pull_request_review_id": 1013820695,
      "id": 902777349,
      "node_id": "PRRC_kwDOABII5841z0oF",
      "diff_hunk": "@@ -828,12 +741,330 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+    std::string err;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    // Load unencrypted keys\n+    std::unique_ptr<DatabaseCursor> cursor = GetTypeCursor(batch, DBKeys::KEY);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for unencrypted keys\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    int num_keys = 0;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "a1d8d563d0f2ae12889bcc9002f1a532fadc9acc",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`num_keys` isn't being increased.",
      "created_at": "2022-06-21T15:38:06Z",
      "updated_at": "2022-06-21T16:01:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r902777349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902777349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902777939",
      "pull_request_review_id": 1013820695,
      "id": 902777939,
      "node_id": "PRRC_kwDOABII5841z0xT",
      "diff_hunk": "@@ -828,12 +741,330 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+    std::string err;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    // Load unencrypted keys\n+    std::unique_ptr<DatabaseCursor> cursor = GetTypeCursor(batch, DBKeys::KEY);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for unencrypted keys\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    int num_keys = 0;\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next unencrypted key record for wallet database\\n\");\n+            return DBErrors::CORRUPT;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == DBKeys::KEY);\n+        if (!LoadKey(pwallet, ssKey, ssValue, err)) {\n+            result = DBErrors::CORRUPT;\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+        }\n+    }\n+    cursor.reset();\n+\n+    // Load encrypted keys\n+    cursor = GetTypeCursor(batch, DBKeys::CRYPTED_KEY);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for crypted keys\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    int num_ckeys = 0;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 196,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "a1d8d563d0f2ae12889bcc9002f1a532fadc9acc",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`num_ckeys` isn't being increased.",
      "created_at": "2022-06-21T15:38:39Z",
      "updated_at": "2022-06-21T16:01:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r902777939",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902777939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 529,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902999240",
      "pull_request_review_id": 1014147885,
      "id": 902999240,
      "node_id": "PRRC_kwDOABII58410qzI",
      "diff_hunk": "@@ -828,12 +741,330 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+    std::string err;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    // Load unencrypted keys\n+    std::unique_ptr<DatabaseCursor> cursor = GetTypeCursor(batch, DBKeys::KEY);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for unencrypted keys\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    int num_keys = 0;\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next unencrypted key record for wallet database\\n\");\n+            return DBErrors::CORRUPT;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == DBKeys::KEY);\n+        if (!LoadKey(pwallet, ssKey, ssValue, err)) {\n+            result = DBErrors::CORRUPT;\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 184,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "a1d8d563d0f2ae12889bcc9002f1a532fadc9acc",
      "in_reply_to_id": 902769522,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, If you trace the code, it doesn't actually immediately return `DBErrors::CORRPUT`. Instead it does `result = DBErrors::CORRUPT`, continues with reading the rest of the records, and returns `result` towards the end.",
      "created_at": "2022-06-21T19:38:56Z",
      "updated_at": "2022-06-21T19:38:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r902999240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902999240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 780,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 516,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903005613",
      "pull_request_review_id": 1014157057,
      "id": 903005613,
      "node_id": "PRRC_kwDOABII58410sWt",
      "diff_hunk": "@@ -696,13 +694,19 @@ bool BerkeleyBatch::ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool&\n     return true;\n }\n \n-void BerkeleyBatch::CloseCursor()\n+BerkeleyCursor::~BerkeleyCursor()\n {\n     if (!m_cursor) return;\n     m_cursor->close();\n     m_cursor = nullptr;\n }\n \n+std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetCursor()\n+{\n+    if (!pdb) return nullptr;\n+    return std::make_unique<BerkeleyCursor>(m_database);\n+}",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "950c94f5ccc024c633410d624e11f874f857543d",
      "in_reply_to_id": 893727842,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. Also renamed `GetPrefixCursor` to `GetNewPrefixCursor`.",
      "created_at": "2022-06-21T19:47:13Z",
      "updated_at": "2022-06-21T19:47:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r903005613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903005613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 704,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 729,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903005674",
      "pull_request_review_id": 1014157131,
      "id": 903005674,
      "node_id": "PRRC_kwDOABII58410sXq",
      "diff_hunk": "@@ -661,16 +661,14 @@ void BerkeleyDatabase::ReloadDbEnv()\n     env->ReloadDbEnv();\n }\n \n-bool BerkeleyBatch::StartCursor()\n+BerkeleyCursor::BerkeleyCursor(BerkeleyDatabase& database)\n {\n-    assert(!m_cursor);\n-    if (!pdb)\n-        return false;\n-    int ret = pdb->cursor(nullptr, &m_cursor, 0);\n-    return ret == 0;\n+    assert(database.m_db.get());\n+    int ret = database.m_db->cursor(nullptr, &m_cursor, 0);\n+    assert(ret == 0);",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "950c94f5ccc024c633410d624e11f874f857543d",
      "in_reply_to_id": 893736353,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-06-21T19:47:18Z",
      "updated_at": "2022-06-21T19:47:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r903005674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903005674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903005771",
      "pull_request_review_id": 1014157266,
      "id": 903005771,
      "node_id": "PRRC_kwDOABII58410sZL",
      "diff_hunk": "@@ -828,12 +741,330 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+    std::string err;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    // Load unencrypted keys\n+    std::unique_ptr<DatabaseCursor> cursor = GetTypeCursor(batch, DBKeys::KEY);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for unencrypted keys\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    int num_keys = 0;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "a1d8d563d0f2ae12889bcc9002f1a532fadc9acc",
      "in_reply_to_id": 902777349,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-06-21T19:47:25Z",
      "updated_at": "2022-06-21T19:47:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r903005771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903005771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903005815",
      "pull_request_review_id": 1014157337,
      "id": 903005815,
      "node_id": "PRRC_kwDOABII58410sZ3",
      "diff_hunk": "@@ -828,12 +741,330 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+    std::string err;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    // Load unencrypted keys\n+    std::unique_ptr<DatabaseCursor> cursor = GetTypeCursor(batch, DBKeys::KEY);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for unencrypted keys\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    int num_keys = 0;\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next unencrypted key record for wallet database\\n\");\n+            return DBErrors::CORRUPT;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == DBKeys::KEY);\n+        if (!LoadKey(pwallet, ssKey, ssValue, err)) {\n+            result = DBErrors::CORRUPT;\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+        }\n+    }\n+    cursor.reset();\n+\n+    // Load encrypted keys\n+    cursor = GetTypeCursor(batch, DBKeys::CRYPTED_KEY);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for crypted keys\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    int num_ckeys = 0;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 196,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "a1d8d563d0f2ae12889bcc9002f1a532fadc9acc",
      "in_reply_to_id": 902777939,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-06-21T19:47:28Z",
      "updated_at": "2022-06-21T19:47:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r903005815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903005815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 529,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915201717",
      "pull_request_review_id": 1030621221,
      "id": 915201717,
      "node_id": "PRRC_kwDOABII5842jN61",
      "diff_hunk": "@@ -472,27 +470,17 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n     return res == SQLITE_ROW;\n }\n \n-bool SQLiteBatch::StartCursor()\n-{\n-    assert(!m_cursor_init);\n-    if (!m_database.m_db) return false;\n-    m_cursor_init = true;\n-    return true;\n-}\n-\n-bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+bool SQLiteCursor::Next(CDataStream& key, CDataStream& value, bool& complete)\n {\n     complete = false;\n \n-    if (!m_cursor_init) return false;\n-\n     int res = sqlite3_step(m_cursor_stmt);\n     if (res == SQLITE_DONE) {\n         complete = true;\n         return true;\n     }\n     if (res != SQLITE_ROW) {\n-        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        LogPrintf(\"SQLiteCursor::Next: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tiny nit:\r\n```suggestion\r\n        LogPrintf(\"%s: Unable to execute cursor step: %s\\n\", __func__, sqlite3_errstr(res));\r\n```",
      "created_at": "2022-07-06T19:51:19Z",
      "updated_at": "2022-07-07T16:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r915201717",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915201717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915202937",
      "pull_request_review_id": 1030621221,
      "id": 915202937,
      "node_id": "PRRC_kwDOABII5842jON5",
      "diff_hunk": "@@ -506,10 +494,30 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  sqlite3_errstr(res));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should log `SQLiteCursor` now, not `SQLiteBatch`.\r\n```suggestion\r\n        LogPrintf(\"%s: cursor closed but could not finalize cursor statement: %s\\n\", __func__, sqlite3_errstr(res));\r\n```",
      "created_at": "2022-07-06T19:52:57Z",
      "updated_at": "2022-07-07T16:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r915202937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915202937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 502,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915204516",
      "pull_request_review_id": 1030621221,
      "id": 915204516,
      "node_id": "PRRC_kwDOABII5842jOmk",
      "diff_hunk": "@@ -690,13 +688,19 @@ bool BerkeleyBatch::ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool&\n     return true;\n }\n \n-void BerkeleyBatch::CloseCursor()\n+BerkeleyCursor::~BerkeleyCursor()\n {\n     if (!m_cursor) return;",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could delete this line, `m_cursor` will never be null.",
      "created_at": "2022-07-06T19:55:07Z",
      "updated_at": "2022-07-07T16:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r915204516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915204516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 691,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915208527",
      "pull_request_review_id": 1030621221,
      "id": 915208527,
      "node_id": "PRRC_kwDOABII5842jPlP",
      "diff_hunk": "@@ -14,19 +14,27 @@ struct bilingual_str;\n namespace wallet {\n class SQLiteDatabase;\n \n+class SQLiteCursor : public DatabaseCursor\n+{\n+public:\n+    sqlite3_stmt* m_cursor_stmt{nullptr};",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: what about making the cursor private and passing a `sqlite3_stmt` pointer to the constructor?",
      "created_at": "2022-07-06T20:00:37Z",
      "updated_at": "2022-07-07T16:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r915208527",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915208527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915211634",
      "pull_request_review_id": 1030621221,
      "id": 915211634,
      "node_id": "PRRC_kwDOABII5842jQVy",
      "diff_hunk": "@@ -506,10 +494,30 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+    if (!cursor) return nullptr;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: this line can be removed.",
      "created_at": "2022-07-06T20:04:53Z",
      "updated_at": "2022-07-07T16:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r915211634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915211634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915214759",
      "pull_request_review_id": 1030621221,
      "id": 915214759,
      "node_id": "PRRC_kwDOABII5842jRGn",
      "diff_hunk": "@@ -506,10 +494,30 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+    if (!cursor) return nullptr;\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"SQLiteDatabase: Failed to setup cursor SQL statement: %s\\n\", sqlite3_errstr(res)));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n             \"%s: Failed to setup cursor SQL statement: %s\\n\", __func__ sqlite3_errstr(res)));\r\n```\r\n",
      "created_at": "2022-07-06T20:09:24Z",
      "updated_at": "2022-07-07T16:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r915214759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915214759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 596,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915838986",
      "pull_request_review_id": 1030621221,
      "id": 915838986,
      "node_id": "PRRC_kwDOABII5842lpgK",
      "diff_hunk": "@@ -655,7 +655,8 @@ void BerkeleyDatabase::ReloadDbEnv()\n     env->ReloadDbEnv();\n }\n \n-BerkeleyCursor::BerkeleyCursor(BerkeleyDatabase& database)\n+BerkeleyCursor::BerkeleyCursor(BerkeleyDatabase& database, Span<std::byte> prefix)\n+    : m_key_prefix(prefix.begin(), prefix.end()), m_first(true)",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "72089765046bff6ade39f2c4f7763da9467b1494",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\ncould default initialize `m_first` in the field declaration.",
      "created_at": "2022-07-07T12:54:35Z",
      "updated_at": "2022-07-07T16:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r915838986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915838986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915997364",
      "pull_request_review_id": 1030621221,
      "id": 915997364,
      "node_id": "PRRC_kwDOABII5842mQK0",
      "diff_hunk": "@@ -685,6 +692,11 @@ bool BerkeleyCursor::Next(CDataStream& ssKey, CDataStream& ssValue, bool& comple\n     ssValue.SetType(SER_DISK);\n     ssValue.clear();\n     ssValue.write({AsBytePtr(datValue.get_data()), datValue.get_size()});\n+\n+    if (!m_key_prefix.empty() && std::mismatch(ssKey.begin(), ssKey.end(), m_key_prefix.begin(), m_key_prefix.end()).second != m_key_prefix.end()) {\n+        complete = true;\n+    }",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "72089765046bff6ade39f2c4f7763da9467b1494",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 72089765:\r\n\r\nWith this code, at the end of the range, `Next` returns one extra element pair that is not part of the range set. So, if the `complete` flag is not checked by the caller first and the `ssValue` tries to be unserialized, a runtime error will be thrown (different value type).\r\n\r\nWould suggest to move this block above the `ssKey` and `ssValue` return values sets; so the function doesn't return elements that aren't in the filtered range, and directly return false:\r\n\r\n```c++\r\nSpan<const std::byte> raw_key = {AsBytePtr(datKey.get_data()), datKey.get_size()};\r\nif (!m_key_prefix.empty() && std::mismatch(raw_key.begin(), raw_key.end(), m_key_prefix.begin(), m_key_prefix.end()).second != m_key_prefix.end()) {\r\n    complete = true;\r\n    return false;\r\n}\r\n\r\nssKey.SetType(SER_DISK);\r\nssKey.clear();\r\nssKey.write(raw_key);\r\n// bla bla, all good..\r\nreturn true;\r\n```\r\n\r\nCommit here: https://github.com/furszy/bitcoin/commit/e4b37e82ed19ff103f295ac5897e33e80e2f0679",
      "created_at": "2022-07-07T15:17:36Z",
      "updated_at": "2022-07-07T16:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r915997364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915997364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 696,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 698,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916120588",
      "pull_request_review_id": 1031933364,
      "id": 916120588,
      "node_id": "PRRC_kwDOABII5842muQM",
      "diff_hunk": "@@ -14,19 +14,27 @@ struct bilingual_str;\n namespace wallet {\n class SQLiteDatabase;\n \n+class SQLiteCursor : public DatabaseCursor\n+{\n+public:\n+    sqlite3_stmt* m_cursor_stmt{nullptr};",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": 915208527,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tried doing that but kept running into issues with allocating the memory for it as the underlying object would have to survive the scope in which it was originally created. It was just easier to do it in the struct directly.",
      "created_at": "2022-07-07T17:30:28Z",
      "updated_at": "2022-07-07T17:32:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r916120588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916120588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916123506",
      "pull_request_review_id": 1031937519,
      "id": 916123506,
      "node_id": "PRRC_kwDOABII5842mu9y",
      "diff_hunk": "@@ -690,13 +688,19 @@ bool BerkeleyBatch::ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool&\n     return true;\n }\n \n-void BerkeleyBatch::CloseCursor()\n+BerkeleyCursor::~BerkeleyCursor()\n {\n     if (!m_cursor) return;",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": 915204516,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Leaving it as belt-and-suspenders in case something happens to it in the future.",
      "created_at": "2022-07-07T17:34:13Z",
      "updated_at": "2022-07-07T17:34:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r916123506",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916123506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 691,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138045",
      "pull_request_review_id": 1031959758,
      "id": 916138045,
      "node_id": "PRRC_kwDOABII5842myg9",
      "diff_hunk": "@@ -472,27 +470,17 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n     return res == SQLITE_ROW;\n }\n \n-bool SQLiteBatch::StartCursor()\n-{\n-    assert(!m_cursor_init);\n-    if (!m_database.m_db) return false;\n-    m_cursor_init = true;\n-    return true;\n-}\n-\n-bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+bool SQLiteCursor::Next(CDataStream& key, CDataStream& value, bool& complete)\n {\n     complete = false;\n \n-    if (!m_cursor_init) return false;\n-\n     int res = sqlite3_step(m_cursor_stmt);\n     if (res == SQLITE_DONE) {\n         complete = true;\n         return true;\n     }\n     if (res != SQLITE_ROW) {\n-        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        LogPrintf(\"SQLiteCursor::Next: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": 915201717,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-07T17:52:12Z",
      "updated_at": "2022-07-07T17:52:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r916138045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138094",
      "pull_request_review_id": 1031959911,
      "id": 916138094,
      "node_id": "PRRC_kwDOABII5842myhu",
      "diff_hunk": "@@ -506,10 +494,30 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  sqlite3_errstr(res));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": 915202937,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-07T17:52:16Z",
      "updated_at": "2022-07-07T17:52:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r916138094",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 502,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138191",
      "pull_request_review_id": 1031960169,
      "id": 916138191,
      "node_id": "PRRC_kwDOABII5842myjP",
      "diff_hunk": "@@ -506,10 +494,30 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+    if (!cursor) return nullptr;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": 915211634,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-07T17:52:23Z",
      "updated_at": "2022-07-07T17:52:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r916138191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138244",
      "pull_request_review_id": 1031960327,
      "id": 916138244,
      "node_id": "PRRC_kwDOABII5842mykE",
      "diff_hunk": "@@ -506,10 +494,30 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+    if (!cursor) return nullptr;\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"SQLiteDatabase: Failed to setup cursor SQL statement: %s\\n\", sqlite3_errstr(res)));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": 915214759,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-07T17:52:27Z",
      "updated_at": "2022-07-07T17:52:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r916138244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 596,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138289",
      "pull_request_review_id": 1031960489,
      "id": 916138289,
      "node_id": "PRRC_kwDOABII5842mykx",
      "diff_hunk": "@@ -655,7 +655,8 @@ void BerkeleyDatabase::ReloadDbEnv()\n     env->ReloadDbEnv();\n }\n \n-BerkeleyCursor::BerkeleyCursor(BerkeleyDatabase& database)\n+BerkeleyCursor::BerkeleyCursor(BerkeleyDatabase& database, Span<std::byte> prefix)\n+    : m_key_prefix(prefix.begin(), prefix.end()), m_first(true)",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "72089765046bff6ade39f2c4f7763da9467b1494",
      "in_reply_to_id": 915838986,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-07T17:52:31Z",
      "updated_at": "2022-07-07T17:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r916138289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138519",
      "pull_request_review_id": 1031961177,
      "id": 916138519,
      "node_id": "PRRC_kwDOABII5842myoX",
      "diff_hunk": "@@ -685,6 +692,11 @@ bool BerkeleyCursor::Next(CDataStream& ssKey, CDataStream& ssValue, bool& comple\n     ssValue.SetType(SER_DISK);\n     ssValue.clear();\n     ssValue.write({AsBytePtr(datValue.get_data()), datValue.get_size()});\n+\n+    if (!m_key_prefix.empty() && std::mismatch(ssKey.begin(), ssKey.end(), m_key_prefix.begin(), m_key_prefix.end()).second != m_key_prefix.end()) {\n+        complete = true;\n+    }",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "72089765046bff6ade39f2c4f7763da9467b1494",
      "in_reply_to_id": 915997364,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-07T17:52:48Z",
      "updated_at": "2022-07-07T17:52:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r916138519",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/916138519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 696,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 698,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922170911",
      "pull_request_review_id": 1040304045,
      "id": 922170911,
      "node_id": "PRRC_kwDOABII58429zYf",
      "diff_hunk": "@@ -678,13 +685,20 @@ bool BerkeleyCursor::Next(CDataStream& ssKey, CDataStream& ssValue, bool& comple\n     else if (datKey.get_data() == nullptr || datValue.get_data() == nullptr)\n         return false;\n \n+    Span<const std::byte> raw_key = {AsBytePtr(datKey.get_data()), datKey.get_size()};\n+    if (!m_key_prefix.empty() && std::mismatch(raw_key.begin(), raw_key.end(), m_key_prefix.begin(), m_key_prefix.end()).second != m_key_prefix.end()) {\n+        complete = true;\n+        return false;\n+    }\n+\n     // Convert to streams\n     ssKey.SetType(SER_DISK);\n     ssKey.clear();\n     ssKey.write({AsBytePtr(datKey.get_data()), datKey.get_size()});",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c704f8348820eeabf8e1230d81e026a14fd8b3fc",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    ssKey.write(raw_key);\r\n```",
      "created_at": "2022-07-15T13:33:48Z",
      "updated_at": "2022-07-15T19:19:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922170911",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922170911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922172352",
      "pull_request_review_id": 1040304045,
      "id": 922172352,
      "node_id": "PRRC_kwDOABII58429zvA",
      "diff_hunk": "@@ -187,11 +187,16 @@ class SafeDbt final\n \n class BerkeleyCursor : public DatabaseCursor\n {\n-private:\n+protected:",
      "path": "src/wallet/bdb.h",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c704f8348820eeabf8e1230d81e026a14fd8b3fc",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this change shouldn't be needed.",
      "created_at": "2022-07-15T13:35:30Z",
      "updated_at": "2022-07-15T19:19:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922172352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922172352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922394666",
      "pull_request_review_id": 1040304045,
      "id": 922394666,
      "node_id": "PRRC_kwDOABII5842-qAq",
      "diff_hunk": "@@ -828,12 +733,255 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    result.m_result = DBErrors::LOAD_OK;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "ba1d48a2939570ea369554ff790c12300e9fd7b1",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: unnecessary set. `m_result` member is default initialized to `LOAD_OK`.",
      "created_at": "2022-07-15T17:49:17Z",
      "updated_at": "2022-07-15T19:19:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922394666",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922394666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922401748",
      "pull_request_review_id": 1040304045,
      "id": 922401748,
      "node_id": "PRRC_kwDOABII5842-rvU",
      "diff_hunk": "@@ -828,12 +733,255 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    result.m_result = DBErrors::LOAD_OK;\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\");",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 217,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "ba1d48a2939570ea369554ff790c12300e9fd7b1",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`LoadRecords` now is logging this:\r\n```suggestion\r\n            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\r\n```",
      "created_at": "2022-07-15T17:59:05Z",
      "updated_at": "2022-07-15T19:19:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922401748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922401748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 821,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922403557",
      "pull_request_review_id": 1040304045,
      "id": 922403557,
      "node_id": "PRRC_kwDOABII5842-sLl",
      "diff_hunk": "@@ -828,12 +733,255 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    result.m_result = DBErrors::LOAD_OK;\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);",
      "path": "src/wallet/walletdb.cpp",
      "position": 494,
      "original_position": 196,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "ba1d48a2939570ea369554ff790c12300e9fd7b1",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not return early here?:\r\n```c++\r\nif (key_res.m_result != DBErrors::LOAD_OK) {\r\n    return key_res.m_result;\r\n}\r\n```\r\n\r\n(Same for the crypted keys)",
      "created_at": "2022-07-15T18:01:54Z",
      "updated_at": "2022-07-15T19:19:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922403557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922403557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 567,
      "original_line": 567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922436250",
      "pull_request_review_id": 1040304045,
      "id": 922436250,
      "node_id": "PRRC_kwDOABII5842-0Ka",
      "diff_hunk": "@@ -974,6 +887,171 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        value >> desc;\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        std::map<CKeyID, CKey> descriptor_keys;\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &num_keys, &descriptor_keys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\");",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 229,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "369a042c738f71c88038584ff392f4ac8121b087",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`LoadRecords` logs the corrupt errors.\r\n```suggestion\r\n                err = \"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\";\r\n```\r\n\r\n(Same for the other ones below)",
      "created_at": "2022-07-15T18:46:46Z",
      "updated_at": "2022-07-15T19:19:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922436250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922436250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 982,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922440904",
      "pull_request_review_id": 1040304045,
      "id": 922440904,
      "node_id": "PRRC_kwDOABII5842-1TI",
      "diff_hunk": "@@ -974,6 +887,171 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        value >> desc;\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        std::map<CKeyID, CKey> descriptor_keys;\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &num_keys, &descriptor_keys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            CKey privkey;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            num_keys++;\n+            value >> pkey;\n+            value >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            if (!privkey.Load(pkey, pubkey, true))\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            descriptor_keys.insert(std::make_pair(pubkey.GetID(), privkey));\n+            return DBErrors::LOAD_OK;\n+        });\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> descriptor_crypt_keys;\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &num_ckeys, &descriptor_crypt_keys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor encrypted key CPubKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            std::vector<unsigned char> privkey;\n+            value >> privkey;\n+            num_ckeys++;\n+\n+            descriptor_crypt_keys.insert(std::make_pair(pubkey.GetID(), std::make_pair(pubkey, privkey)));",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 281,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "369a042c738f71c88038584ff392f4ac8121b087",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same as above here:\r\n```c++\r\nspk_man->AddCryptedKey(pubkey.GetID(), pubkey, privkey);\r\n```",
      "created_at": "2022-07-15T18:54:01Z",
      "updated_at": "2022-07-15T19:19:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922440904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922440904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1034,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922442482",
      "pull_request_review_id": 1040304045,
      "id": 922442482,
      "node_id": "PRRC_kwDOABII5842-1ry",
      "diff_hunk": "@@ -974,6 +887,171 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        value >> desc;\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        std::map<CKeyID, CKey> descriptor_keys;\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &num_keys, &descriptor_keys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            CKey privkey;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            num_keys++;\n+            value >> pkey;\n+            value >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            if (!privkey.Load(pkey, pubkey, true))\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            descriptor_keys.insert(std::make_pair(pubkey.GetID(), privkey));\n+            return DBErrors::LOAD_OK;\n+        });\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> descriptor_crypt_keys;\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &num_ckeys, &descriptor_crypt_keys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor encrypted key CPubKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            std::vector<unsigned char> privkey;\n+            value >> privkey;\n+            num_ckeys++;\n+\n+            descriptor_crypt_keys.insert(std::make_pair(pubkey.GetID(), std::make_pair(pubkey, privkey)));\n+            return DBErrors::LOAD_OK;\n+        });\n+        num_ckeys = ckey_res.m_records;\n+\n+        // Set the descriptor keys\n+        for (auto desc_key_pair : descriptor_keys) {\n+            spk_man->AddKey(desc_key_pair.first, desc_key_pair.second);\n+        }\n+        for (auto desc_key_pair : descriptor_crypt_keys) {\n+            spk_man->AddCryptedKey(desc_key_pair.first, desc_key_pair.second.first, desc_key_pair.second.second);\n+        }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "369a042c738f71c88038584ff392f4ac8121b087",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could remove this two loops, the map and vector need If the keys are added to the spkm inside each `LoadRecords` (check above, left a comment there).",
      "created_at": "2022-07-15T18:56:25Z",
      "updated_at": "2022-07-15T19:19:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922442482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922442482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1039,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922475618",
      "pull_request_review_id": 1040744754,
      "id": 922475618,
      "node_id": "PRRC_kwDOABII5842-9xi",
      "diff_hunk": "@@ -1080,6 +1029,90 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256> upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                pwallet->WalletLogPrintf(\"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\");\n+                result = DBErrors::CORRUPT;\n+                return false;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7ed39f6d344516cef2023fbfaeb99444b8c5c6d0",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Missing `corrupted_tx = true` set here.",
      "created_at": "2022-07-15T19:51:45Z",
      "updated_at": "2022-07-15T19:52:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922475618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922475618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1052,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1024,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922492905",
      "pull_request_review_id": 1040769618,
      "id": 922492905,
      "node_id": "PRRC_kwDOABII5842_B_p",
      "diff_hunk": "@@ -828,12 +733,255 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    result.m_result = DBErrors::LOAD_OK;\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);",
      "path": "src/wallet/walletdb.cpp",
      "position": 494,
      "original_position": 196,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "ba1d48a2939570ea369554ff790c12300e9fd7b1",
      "in_reply_to_id": 922403557,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is the retain the current behavior where we generally go through all the records in the wallet regardless of whether they are corrupt, and just report the worst result at the end. This allows us to check all of the records for corruption.",
      "created_at": "2022-07-15T20:22:52Z",
      "updated_at": "2022-07-15T20:22:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922492905",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922492905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 567,
      "original_line": 567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922570997",
      "pull_request_review_id": 1040880432,
      "id": 922570997,
      "node_id": "PRRC_kwDOABII5842_VD1",
      "diff_hunk": "@@ -678,13 +685,20 @@ bool BerkeleyCursor::Next(CDataStream& ssKey, CDataStream& ssValue, bool& comple\n     else if (datKey.get_data() == nullptr || datValue.get_data() == nullptr)\n         return false;\n \n+    Span<const std::byte> raw_key = {AsBytePtr(datKey.get_data()), datKey.get_size()};\n+    if (!m_key_prefix.empty() && std::mismatch(raw_key.begin(), raw_key.end(), m_key_prefix.begin(), m_key_prefix.end()).second != m_key_prefix.end()) {\n+        complete = true;\n+        return false;\n+    }\n+\n     // Convert to streams\n     ssKey.SetType(SER_DISK);\n     ssKey.clear();\n     ssKey.write({AsBytePtr(datKey.get_data()), datKey.get_size()});",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c704f8348820eeabf8e1230d81e026a14fd8b3fc",
      "in_reply_to_id": 922170911,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-15T23:12:01Z",
      "updated_at": "2022-07-15T23:12:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922570997",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922570997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571016",
      "pull_request_review_id": 1040880459,
      "id": 922571016,
      "node_id": "PRRC_kwDOABII5842_VEI",
      "diff_hunk": "@@ -187,11 +187,16 @@ class SafeDbt final\n \n class BerkeleyCursor : public DatabaseCursor\n {\n-private:\n+protected:",
      "path": "src/wallet/bdb.h",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c704f8348820eeabf8e1230d81e026a14fd8b3fc",
      "in_reply_to_id": 922172352,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-15T23:12:06Z",
      "updated_at": "2022-07-15T23:12:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922571016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571042",
      "pull_request_review_id": 1040880495,
      "id": 922571042,
      "node_id": "PRRC_kwDOABII5842_VEi",
      "diff_hunk": "@@ -828,12 +733,255 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    result.m_result = DBErrors::LOAD_OK;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "ba1d48a2939570ea369554ff790c12300e9fd7b1",
      "in_reply_to_id": 922394666,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-15T23:12:12Z",
      "updated_at": "2022-07-15T23:12:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922571042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571322",
      "pull_request_review_id": 1040880827,
      "id": 922571322,
      "node_id": "PRRC_kwDOABII5842_VI6",
      "diff_hunk": "@@ -828,12 +733,255 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    result.m_result = DBErrors::LOAD_OK;\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\");",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 217,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "ba1d48a2939570ea369554ff790c12300e9fd7b1",
      "in_reply_to_id": 922401748,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done here and elsewhere.",
      "created_at": "2022-07-15T23:13:04Z",
      "updated_at": "2022-07-15T23:13:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922571322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 821,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571426",
      "pull_request_review_id": 1040880957,
      "id": 922571426,
      "node_id": "PRRC_kwDOABII5842_VKi",
      "diff_hunk": "@@ -974,6 +887,171 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        value >> desc;\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        std::map<CKeyID, CKey> descriptor_keys;\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &num_keys, &descriptor_keys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            CKey privkey;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            num_keys++;\n+            value >> pkey;\n+            value >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            if (!privkey.Load(pkey, pubkey, true))\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            descriptor_keys.insert(std::make_pair(pubkey.GetID(), privkey));\n+            return DBErrors::LOAD_OK;\n+        });\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> descriptor_crypt_keys;\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &num_ckeys, &descriptor_crypt_keys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor encrypted key CPubKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            std::vector<unsigned char> privkey;\n+            value >> privkey;\n+            num_ckeys++;\n+\n+            descriptor_crypt_keys.insert(std::make_pair(pubkey.GetID(), std::make_pair(pubkey, privkey)));",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 281,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "369a042c738f71c88038584ff392f4ac8121b087",
      "in_reply_to_id": 922440904,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-15T23:13:22Z",
      "updated_at": "2022-07-15T23:13:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922571426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1034,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571458",
      "pull_request_review_id": 1040880997,
      "id": 922571458,
      "node_id": "PRRC_kwDOABII5842_VLC",
      "diff_hunk": "@@ -974,6 +887,171 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        value >> desc;\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        std::map<CKeyID, CKey> descriptor_keys;\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &num_keys, &descriptor_keys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            CKey privkey;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            num_keys++;\n+            value >> pkey;\n+            value >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            if (!privkey.Load(pkey, pubkey, true))\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            descriptor_keys.insert(std::make_pair(pubkey.GetID(), privkey));\n+            return DBErrors::LOAD_OK;\n+        });\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> descriptor_crypt_keys;\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &num_ckeys, &descriptor_crypt_keys] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                pwallet->WalletLogPrintf(\"Error reading wallet database: descriptor encrypted key CPubKey corrupt\\n\");\n+                return DBErrors::CORRUPT;\n+            }\n+            std::vector<unsigned char> privkey;\n+            value >> privkey;\n+            num_ckeys++;\n+\n+            descriptor_crypt_keys.insert(std::make_pair(pubkey.GetID(), std::make_pair(pubkey, privkey)));\n+            return DBErrors::LOAD_OK;\n+        });\n+        num_ckeys = ckey_res.m_records;\n+\n+        // Set the descriptor keys\n+        for (auto desc_key_pair : descriptor_keys) {\n+            spk_man->AddKey(desc_key_pair.first, desc_key_pair.second);\n+        }\n+        for (auto desc_key_pair : descriptor_crypt_keys) {\n+            spk_man->AddCryptedKey(desc_key_pair.first, desc_key_pair.second.first, desc_key_pair.second.second);\n+        }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "369a042c738f71c88038584ff392f4ac8121b087",
      "in_reply_to_id": 922442482,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-15T23:13:28Z",
      "updated_at": "2022-07-15T23:13:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922571458",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1039,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571481",
      "pull_request_review_id": 1040881028,
      "id": 922571481,
      "node_id": "PRRC_kwDOABII5842_VLZ",
      "diff_hunk": "@@ -1080,6 +1029,90 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256> upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                pwallet->WalletLogPrintf(\"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\");\n+                result = DBErrors::CORRUPT;\n+                return false;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7ed39f6d344516cef2023fbfaeb99444b8c5c6d0",
      "in_reply_to_id": 922475618,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-07-15T23:13:32Z",
      "updated_at": "2022-07-15T23:13:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r922571481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/922571481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1052,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1024,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/946727807",
      "pull_request_review_id": 1074043688,
      "id": 946727807,
      "node_id": "PRRC_kwDOABII5844bet_",
      "diff_hunk": "@@ -92,9 +103,21 @@ class DatabaseBatch\n         return HasKey(std::move(ssKey));\n     }\n \n-    virtual bool StartCursor() = 0;\n-    virtual bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) = 0;\n-    virtual void CloseCursor() = 0;\n+    virtual std::unique_ptr<DatabaseCursor> GetNewCursor() = 0;\n+    bool StartCursor()\n+    {\n+        m_cursor = std::move(GetNewCursor());",
      "path": "src/wallet/db.h",
      "position": null,
      "original_position": 32,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "94584601f12c51b3a781c84536f6b56be1ea8077",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        m_cursor = GetNewCursor();\r\n```\r\nI think this `std::move` on a temporary isn't needed? The compiler says (commit 94584601f12c51b3a781c84536f6b56be1ea8077)\r\n```\r\nIn file included from ./wallet/walletdb.h:10:\r\n./wallet/db.h:109:20: warning: moving a temporary object prevents copy elision [-Wpessimizing-move]\r\n        m_cursor = std::move(GetNewCursor());\r\n                   ^\r\n./wallet/db.h:109:20: note: remove std::move call here\r\n        m_cursor = std::move(GetNewCursor());\r\n                   ^~~~~~~~~~              ~\r\n```",
      "created_at": "2022-08-16T12:42:43Z",
      "updated_at": "2022-08-16T13:37:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r946727807",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/946727807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980023946",
      "pull_request_review_id": 1120211654,
      "id": 980023946,
      "node_id": "PRRC_kwDOABII5846afqK",
      "diff_hunk": "@@ -506,10 +497,69 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  __func__, sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 10cf25c112ff4ac7bcece87a821996004cec2b24, less verbose\r\n```suggestion\r\n    auto cursor = std::make_unique<SQLiteCursor>();\r\n```",
      "created_at": "2022-09-26T13:16:48Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980023946",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980023946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980025026",
      "pull_request_review_id": 1120211654,
      "id": 980025026,
      "node_id": "PRRC_kwDOABII5846af7C",
      "diff_hunk": "@@ -506,10 +497,69 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  __func__, sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"%s: Failed to setup cursor SQL statement: %s\\n\", __func__, sqlite3_errstr(res)));\n+    }\n+\n+    return cursor;\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0x00);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        end_range.insert(end_range.begin(), std::byte(0x01));\n+    }\n+\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>(start_range, end_range);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be, less verbose\r\n```suggestion\r\n    auto cursor = std::make_unique<SQLiteCursor>(start_range, end_range);\r\n```",
      "created_at": "2022-09-26T13:17:46Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980025026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980025026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980028053",
      "pull_request_review_id": 1120211654,
      "id": 980028053,
      "node_id": "PRRC_kwDOABII5846agqV",
      "diff_hunk": "@@ -14,19 +14,36 @@ struct bilingual_str;\n namespace wallet {\n class SQLiteDatabase;\n \n+/** RAII class that provides a database cursor */\n+class SQLiteCursor : public DatabaseCursor",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 10cf25c112ff4ac7bcece87a821996004cec2b24: I know this hasn't been done in other RAII classes but wouldn't it be better to delete copy and copy assignment operators to avoid potential double frees?",
      "created_at": "2022-09-26T13:20:36Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980028053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980028053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980029822",
      "pull_request_review_id": 1120211654,
      "id": 980029822,
      "node_id": "PRRC_kwDOABII5846ahF-",
      "diff_hunk": "@@ -14,19 +14,36 @@ struct bilingual_str;\n namespace wallet {\n class SQLiteDatabase;\n \n+/** RAII class that provides a database cursor */\n+class SQLiteCursor : public DatabaseCursor\n+{\n+public:\n+    sqlite3_stmt* m_cursor_stmt{nullptr};\n+    // Copies of the prefix things for the prefix cursor.\n+    // Prevents SQLite from accessing temp variables for the prefix things.\n+    std::vector<std::byte> m_prefix_range_start;\n+    std::vector<std::byte> m_prefix_range_end;\n+\n+    explicit SQLiteCursor() {}\n+    explicit SQLiteCursor(std::vector<std::byte> start_range, std::vector<std::byte> end_range)",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 15,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be\r\n```suggestion\r\n    explicit SQLiteCursor(const std::vector<std::byte>& start_range, const std::vector<std::byte>& end_range)\r\n```",
      "created_at": "2022-09-26T13:22:11Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980029822",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980029822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980030921",
      "pull_request_review_id": 1120211654,
      "id": 980030921,
      "node_id": "PRRC_kwDOABII5846ahXJ",
      "diff_hunk": "@@ -297,401 +297,556 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 264,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in c3181a344c7e80ca233be47e7b44a1074c382498\r\n`ssKey` and `strErr` are now unused",
      "created_at": "2022-09-26T13:23:04Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980030921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980030921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980034855",
      "pull_request_review_id": 1120211654,
      "id": 980034855,
      "node_id": "PRRC_kwDOABII5846aiUn",
      "diff_hunk": "@@ -297,401 +297,556 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    CHDChain chain;\n+    ssValue >> chain;\n+    pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n-            }\n+bool WalletBatch::IsKeyType(const std::string& strType)\n+{\n+    return (strType == DBKeys::KEY ||\n+            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n+}\n \n-            wss.nCKeys++;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, CDataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n                     }\n-                    internal = path[1] == (1 | 0x80000000);\n-                    index = path[2] & ~0x80000000;\n                 }\n \n-                // Insert a new CHDChain, or get the one that already exists\n-                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n-                CHDChain& chain = ins.first->second;\n-                if (ins.second) {\n-                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n-                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n-                    chain.seed_id = keyMeta.hd_seed_id;\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n-                if (internal) {\n-                    chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n-                    chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n-                } else {\n-                    chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n             }\n-        } else if (strType == DBKeys::WATCHMETA) {\n-            CScript script;\n-            ssKey >> script;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n-        } else if (strType == DBKeys::DEFAULTKEY) {\n-            // We don't want or need the default key, but if there is one set,\n-            // we want to make sure that it is valid so that we can detect corruption\n-            CPubKey vchPubKey;\n-            ssValue >> vchPubKey;\n-            if (!vchPubKey.IsValid()) {\n-                strErr = \"Error reading wallet database: Default Key corrupt\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::POOL) {\n-            int64_t nIndex;\n-            ssKey >> nIndex;\n-            CKeyPool keypool;\n-            ssValue >> keypool;\n-\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n-        } else if (strType == DBKeys::CSCRIPT) {\n-            uint160 hash;\n-            ssKey >> hash;\n-            CScript script;\n-            ssValue >> script;\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::ORDERPOSNEXT) {\n-            ssValue >> pwallet->nOrderPosNext;\n-        } else if (strType == DBKeys::DESTDATA) {\n-            std::string strAddress, strKey, strValue;\n-            ssKey >> strAddress;\n-            ssKey >> strKey;\n-            ssValue >> strValue;\n-            pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n-        } else if (strType == DBKeys::HDCHAIN) {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n-        } else if (strType == DBKeys::OLD_KEY) {\n-            strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n-            return false;\n-        } else if (strType == DBKeys::ACTIVEEXTERNALSPK || strType == DBKeys::ACTIVEINTERNALSPK) {\n-            uint8_t type;\n-            ssKey >> type;\n-            uint256 id;\n-            ssValue >> id;\n \n-            bool internal = strType == DBKeys::ACTIVEINTERNALSPK;\n-            auto& spk_mans = internal ? wss.m_active_internal_spks : wss.m_active_external_spks;\n-            if (spk_mans.count(static_cast<OutputType>(type)) > 0) {\n-                strErr = \"Multiple ScriptPubKeyMans specified for a single type\";\n-                return false;\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto ins = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins.first->second;\n+            if (ins.second) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 636,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5444f78824c8b44776acb3523c8a591d2abb570d\r\n```suggestion\r\n            auto [ins, inserted] = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\r\n            CHDChain& chain = ins->second;\r\n            if (inserted) {\r\n```",
      "created_at": "2022-09-26T13:26:27Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980034855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980034855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 632,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 634,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980036012",
      "pull_request_review_id": 1120211654,
      "id": 980036012,
      "node_id": "PRRC_kwDOABII5846aims",
      "diff_hunk": "@@ -297,401 +297,556 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    CHDChain chain;\n+    ssValue >> chain;\n+    pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n-            }\n+bool WalletBatch::IsKeyType(const std::string& strType)\n+{\n+    return (strType == DBKeys::KEY ||\n+            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n+}\n \n-            wss.nCKeys++;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, CDataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n                     }\n-                    internal = path[1] == (1 | 0x80000000);\n-                    index = path[2] & ~0x80000000;\n                 }\n \n-                // Insert a new CHDChain, or get the one that already exists\n-                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n-                CHDChain& chain = ins.first->second;\n-                if (ins.second) {\n-                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n-                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n-                    chain.seed_id = keyMeta.hd_seed_id;\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n-                if (internal) {\n-                    chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n-                    chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n-                } else {\n-                    chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n             }\n-        } else if (strType == DBKeys::WATCHMETA) {\n-            CScript script;\n-            ssKey >> script;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n-        } else if (strType == DBKeys::DEFAULTKEY) {\n-            // We don't want or need the default key, but if there is one set,\n-            // we want to make sure that it is valid so that we can detect corruption\n-            CPubKey vchPubKey;\n-            ssValue >> vchPubKey;\n-            if (!vchPubKey.IsValid()) {\n-                strErr = \"Error reading wallet database: Default Key corrupt\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::POOL) {\n-            int64_t nIndex;\n-            ssKey >> nIndex;\n-            CKeyPool keypool;\n-            ssValue >> keypool;\n-\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n-        } else if (strType == DBKeys::CSCRIPT) {\n-            uint160 hash;\n-            ssKey >> hash;\n-            CScript script;\n-            ssValue >> script;\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::ORDERPOSNEXT) {\n-            ssValue >> pwallet->nOrderPosNext;\n-        } else if (strType == DBKeys::DESTDATA) {\n-            std::string strAddress, strKey, strValue;\n-            ssKey >> strAddress;\n-            ssKey >> strKey;\n-            ssValue >> strValue;\n-            pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n-        } else if (strType == DBKeys::HDCHAIN) {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n-        } else if (strType == DBKeys::OLD_KEY) {\n-            strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n-            return false;\n-        } else if (strType == DBKeys::ACTIVEEXTERNALSPK || strType == DBKeys::ACTIVEINTERNALSPK) {\n-            uint8_t type;\n-            ssKey >> type;\n-            uint256 id;\n-            ssValue >> id;\n \n-            bool internal = strType == DBKeys::ACTIVEINTERNALSPK;\n-            auto& spk_mans = internal ? wss.m_active_internal_spks : wss.m_active_external_spks;\n-            if (spk_mans.count(static_cast<OutputType>(type)) > 0) {\n-                strErr = \"Multiple ScriptPubKeyMans specified for a single type\";\n-                return false;\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto ins = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins.first->second;\n+            if (ins.second) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n             }\n-            spk_mans[static_cast<OutputType>(type)] = id;\n-        } else if (strType == DBKeys::WALLETDESCRIPTOR) {\n-            uint256 id;\n-            ssKey >> id;\n-            WalletDescriptor desc;\n-            try {\n-                ssValue >> desc;\n-            } catch (const std::ios_base::failure& e) {\n-                strErr = e.what();\n-                wss.descriptor_unknown = true;\n-                return false;\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n             }\n-            if (wss.m_descriptor_caches.count(id) == 0) {\n-                wss.m_descriptor_caches[id] = DescriptorCache();\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);\n+\n+    // Set inactive chains\n+    if (hd_chains.size() > 0) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 666,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5444f78824c8b44776acb3523c8a591d2abb570d\r\n```suggestion\r\n    if (!hd_chains.empty()) {\r\n```",
      "created_at": "2022-09-26T13:27:13Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980036012",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980036012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980038494",
      "pull_request_review_id": 1120211654,
      "id": 980038494,
      "node_id": "PRRC_kwDOABII5846ajNe",
      "diff_hunk": "@@ -297,401 +297,556 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    CHDChain chain;\n+    ssValue >> chain;\n+    pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n-            }\n+bool WalletBatch::IsKeyType(const std::string& strType)\n+{\n+    return (strType == DBKeys::KEY ||\n+            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n+}\n \n-            wss.nCKeys++;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, CDataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n                     }\n-                    internal = path[1] == (1 | 0x80000000);\n-                    index = path[2] & ~0x80000000;\n                 }\n \n-                // Insert a new CHDChain, or get the one that already exists\n-                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n-                CHDChain& chain = ins.first->second;\n-                if (ins.second) {\n-                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n-                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n-                    chain.seed_id = keyMeta.hd_seed_id;\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n-                if (internal) {\n-                    chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n-                    chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n-                } else {\n-                    chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n             }\n-        } else if (strType == DBKeys::WATCHMETA) {\n-            CScript script;\n-            ssKey >> script;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n-        } else if (strType == DBKeys::DEFAULTKEY) {\n-            // We don't want or need the default key, but if there is one set,\n-            // we want to make sure that it is valid so that we can detect corruption\n-            CPubKey vchPubKey;\n-            ssValue >> vchPubKey;\n-            if (!vchPubKey.IsValid()) {\n-                strErr = \"Error reading wallet database: Default Key corrupt\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::POOL) {\n-            int64_t nIndex;\n-            ssKey >> nIndex;\n-            CKeyPool keypool;\n-            ssValue >> keypool;\n-\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n-        } else if (strType == DBKeys::CSCRIPT) {\n-            uint160 hash;\n-            ssKey >> hash;\n-            CScript script;\n-            ssValue >> script;\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::ORDERPOSNEXT) {\n-            ssValue >> pwallet->nOrderPosNext;\n-        } else if (strType == DBKeys::DESTDATA) {\n-            std::string strAddress, strKey, strValue;\n-            ssKey >> strAddress;\n-            ssKey >> strKey;\n-            ssValue >> strValue;\n-            pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n-        } else if (strType == DBKeys::HDCHAIN) {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n-        } else if (strType == DBKeys::OLD_KEY) {\n-            strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n-            return false;\n-        } else if (strType == DBKeys::ACTIVEEXTERNALSPK || strType == DBKeys::ACTIVEINTERNALSPK) {\n-            uint8_t type;\n-            ssKey >> type;\n-            uint256 id;\n-            ssValue >> id;\n \n-            bool internal = strType == DBKeys::ACTIVEINTERNALSPK;\n-            auto& spk_mans = internal ? wss.m_active_internal_spks : wss.m_active_external_spks;\n-            if (spk_mans.count(static_cast<OutputType>(type)) > 0) {\n-                strErr = \"Multiple ScriptPubKeyMans specified for a single type\";\n-                return false;\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto ins = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins.first->second;\n+            if (ins.second) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n             }\n-            spk_mans[static_cast<OutputType>(type)] = id;\n-        } else if (strType == DBKeys::WALLETDESCRIPTOR) {\n-            uint256 id;\n-            ssKey >> id;\n-            WalletDescriptor desc;\n-            try {\n-                ssValue >> desc;\n-            } catch (const std::ios_base::failure& e) {\n-                strErr = e.what();\n-                wss.descriptor_unknown = true;\n-                return false;\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n             }\n-            if (wss.m_descriptor_caches.count(id) == 0) {\n-                wss.m_descriptor_caches[id] = DescriptorCache();\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);\n+\n+    // Set inactive chains\n+    if (hd_chains.size() > 0) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (!legacy_spkm) {\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\\n\");\n+            return DBErrors::CORRUPT;\n+        }\n+        for (const auto& chain_pair : hd_chains) {\n+            if (chain_pair.first != pwallet->GetLegacyScriptPubKeyMan()->GetHDChain().seed_id) {\n+                pwallet->GetLegacyScriptPubKeyMan()->AddInactiveHDChain(chain_pair.second);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 674,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5444f78824c8b44776acb3523c8a591d2abb570d\r\n```suggestion\r\n        for (const auto& [hd_seed_id, chain] : hd_chains) {\r\n            if (hd_seed_id != pwallet->GetLegacyScriptPubKeyMan()->GetHDChain().seed_id) {\r\n                pwallet->GetLegacyScriptPubKeyMan()->AddInactiveHDChain(chain);\r\n```",
      "created_at": "2022-09-26T13:29:02Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980038494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980038494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 657,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980044405",
      "pull_request_review_id": 1120211654,
      "id": 980044405,
      "node_id": "PRRC_kwDOABII5846akp1",
      "diff_hunk": "@@ -701,77 +856,228 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             if (Hash(to_hash) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n \n-            if (!key.Load(pkey, pubkey, true))\n+            if (!privkey.Load(pkey, pubkey, true))\n             {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n-            wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n-        } else if (strType == DBKeys::WALLETDESCRIPTORCKEY) {\n+            spk_man->AddKey(pubkey.GetID(), privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_res.m_result);\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &num_ckeys, &spk_man] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n             uint256 desc_id;\n             CPubKey pubkey;\n-            ssKey >> desc_id;\n-            ssKey >> pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n             if (!pubkey.IsValid())\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor encrypted key CPubKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n             std::vector<unsigned char> privkey;\n-            ssValue >> privkey;\n-            wss.nCKeys++;\n+            value >> privkey;\n+            num_ckeys++;\n \n-            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::LOCKED_UTXO) {\n-            uint256 hash;\n-            uint32_t n;\n-            ssKey >> hash;\n-            ssKey >> n;\n-            pwallet->LockCoin(COutPoint(hash, n));\n-        } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n-                   strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n-                   strType != DBKeys::VERSION && strType != DBKeys::SETTINGS &&\n-                   strType != DBKeys::FLAGS) {\n-            wss.m_unknown_records++;\n-        }\n-    } catch (const std::exception& e) {\n-        if (strErr.empty()) {\n-            strErr = e.what();\n-        }\n-        return false;\n-    } catch (...) {\n-        if (strErr.empty()) {\n-            strErr = \"Caught unknown exception in ReadKeyValue\";\n+            spk_man->AddCryptedKey(pubkey.GetID(), pubkey, privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, ckey_res.m_result);\n+        num_ckeys = ckey_res.m_records;\n+\n+        return result;\n+    });\n+\n+    pwallet->WalletLogPrintf(\"Descriptors: %u, Descriptor Keys: %u plaintext, %u encrypted, %u total.\\n\",\n+           desc_res.m_records, num_keys, num_ckeys, num_keys + num_ckeys);\n+\n+    return desc_res.m_result;\n+}\n+\n+static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load name record\n+    LoadResult name_res = LoadRecords(pwallet, batch, DBKeys::NAME,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress;\n+        key >> strAddress;\n+        std::string label;\n+        value >> label;\n+        pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (name_res.m_result != DBErrors::LOAD_OK) return name_res.m_result;\n+\n+    // Load purpose record\n+    LoadResult purpose_res = LoadRecords(pwallet, batch, DBKeys::PURPOSE,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress;\n+        key >> strAddress;\n+        value >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (purpose_res.m_result != DBErrors::LOAD_OK) return purpose_res.m_result;\n+\n+    // Load destination data record\n+    LoadResult dest_res = LoadRecords(pwallet, batch, DBKeys::DESTDATA,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress, strKey, strValue;\n+        key >> strAddress;\n+        key >> strKey;\n+        value >> strValue;\n+        pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (dest_res.m_result != DBErrors::LOAD_OK) return dest_res.m_result;\n+\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256> upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;\n+            }\n         }\n-        return false;\n-    }\n-    return true;\n+        return result;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+\n+    // Load locked utxo record\n+    LoadResult locked_utxo_res = LoadRecords(pwallet, batch, DBKeys::LOCKED_UTXO,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        uint256 hash;\n+        uint32_t n;\n+        key >> hash;\n+        key >> n;\n+        pwallet->LockCoin(COutPoint(hash, n));\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+    if (result != DBErrors::LOAD_OK) return result;\n+\n+    // Load orderposnext record\n+    batch.Read(DBKeys::ORDERPOSNEXT, pwallet->nOrderPosNext);\n+\n+    return DBErrors::LOAD_OK;\n }\n \n-bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn)\n+static DBErrors LoadActiveSPKMs(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n-    CWalletScanState dummy_wss;\n-    LOCK(pwallet->cs_wallet);\n-    return ReadKeyValue(pwallet, ssKey, ssValue, dummy_wss, strType, strErr, filter_fn);\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load spk records\n+    std::set<std::pair<OutputType, bool>> seen_spks;\n+    for (auto& spk_key : {DBKeys::ACTIVEEXTERNALSPK, DBKeys::ACTIVEINTERNALSPK}) {\n+        LoadResult spkm_res = LoadRecords(pwallet, batch, spk_key,\n+            [&seen_spks, &spk_key] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint8_t output_type;\n+            key >> output_type;\n+            uint256 id;\n+            value >> id;\n+\n+            bool internal = spk_key == DBKeys::ACTIVEINTERNALSPK;\n+            auto [it, insert] = seen_spks.emplace(static_cast<OutputType>(output_type), internal);\n+            if (!insert) {\n+                err = \"Multiple ScriptpubKeyMans specified for a single type\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+            pwallet->LoadActiveScriptPubKeyMan(id, static_cast<OutputType>(output_type), /*internal=*/internal);\n+            return DBErrors::LOAD_OK;\n+        });\n+        if (spkm_res.m_result != DBErrors::LOAD_OK) return spkm_res.m_result;\n+    }\n+    return DBErrors::LOAD_OK;\n }\n \n-bool WalletBatch::IsKeyType(const std::string& strType)\n+static DBErrors LoadDecryptionKeys(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n-    return (strType == DBKeys::KEY ||\n-            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load decryption key (mkey) records\n+    LoadResult mkey_res = LoadRecords(pwallet, batch, DBKeys::MASTER_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadEncryptionKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    return mkey_res.m_result;;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 1153,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 69f987e8ecbf8e8d3202c3ad118501aa1d6399e3: i had to do it\r\n```suggestion\r\n    return mkey_res.m_result;\r\n```",
      "created_at": "2022-09-26T13:34:16Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980044405",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980044405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1073,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980171004",
      "pull_request_review_id": 1120211654,
      "id": 980171004,
      "node_id": "PRRC_kwDOABII5846bDj8",
      "diff_hunk": "@@ -506,10 +497,69 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  __func__, sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"%s: Failed to setup cursor SQL statement: %s\\n\", __func__, sqlite3_errstr(res)));\n+    }\n+\n+    return cursor;\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0x00);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        end_range.insert(end_range.begin(), std::byte(0x01));\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Considering `prefix` is a UTF-8 encoded string:\r\nhttps://github.com/bitcoin/bitcoin/blob/f227e153e80c8c50c30d76e1ac638d7206c7ff61/src/wallet/walletdb.cpp#L30-L61\r\n\r\nis it useful to check for trailing `0xFF` bytes? Simply incrementing the last byte could reduce code complexity.\r\n```suggestion\r\n    end_range.back() = std::byte(static_cast<unsigned char>(end_range.back()) + 1);\r\n```",
      "created_at": "2022-09-26T15:14:03Z",
      "updated_at": "2022-09-26T15:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980171004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980171004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 536,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 586,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980256311",
      "pull_request_review_id": 1120544368,
      "id": 980256311,
      "node_id": "PRRC_kwDOABII5846bYY3",
      "diff_hunk": "@@ -506,10 +494,30 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+    if (!cursor) return nullptr;\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"SQLiteDatabase: Failed to setup cursor SQL statement: %s\\n\", sqlite3_errstr(res)));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "d1316204a783a1eed1ef6b7d7fe0680c5b6368d3",
      "in_reply_to_id": 915214759,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's still there :grimacing: ",
      "created_at": "2022-09-26T16:17:13Z",
      "updated_at": "2022-09-26T16:17:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980256311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980256311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 596,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984898374",
      "pull_request_review_id": 1127288236,
      "id": 984898374,
      "node_id": "PRRC_kwDOABII5846tFtG",
      "diff_hunk": "@@ -506,10 +497,69 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  __func__, sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"%s: Failed to setup cursor SQL statement: %s\\n\", __func__, sqlite3_errstr(res)));\n+    }\n+\n+    return cursor;\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0x00);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        end_range.insert(end_range.begin(), std::byte(0x01));\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980171004,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r980171004\r\n\r\n> Considering `prefix` is a UTF-8 encoded string:\r\n\r\nJust IMO, but I think it is better to have a little code complexity here and do prefix lookups correctly for all binary strings, than to make it subtly or unexpectedly fail for non-utf8 strings. There's a tradeoff but in this case it seems better to make the API implementation a little more complex if it can avoid making API usage more complex or error prone.",
      "created_at": "2022-09-30T19:38:49Z",
      "updated_at": "2022-09-30T20:25:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r984898374",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984898374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 536,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 586,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984911106",
      "pull_request_review_id": 1127288236,
      "id": 984911106,
      "node_id": "PRRC_kwDOABII5846tI0C",
      "diff_hunk": "@@ -519,6 +523,45 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0x00);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        end_range.insert(end_range.begin(), std::byte(0x01));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be)\r\n\r\nThe handling of this last condition doesn't seem right. For example if you are looking for keys with prefix `X'FFFF'`, the right condition to check for is simply `key >= X'FFFF'`. It is not `key >= X'FFFF' AND key < X'01FFFF'`.\r\n\r\nYou could fix this by replacing this line with `end_range.clear()`. Then in the `end_range.empty()` case below, prepare the SQL statement `WHERE key >= {begin_range}` instead of `WHERE key >= {begin_range} AND key < {end_range}`.\r\n\r\nThis would fix the prefix scan for prefixes that consist of `0xff` bytes. It would also fix the prefix scan for empty prefixes (by returning all rows), so you could drop the `if (prefix.empty()) return nullptr;` error above too.\r\n\r\nRelated to this, I previously implemented an sqlite prefix scan more simply using the sqlite `instr` function in https://github.com/bitcoin/bitcoin/commit/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e#diff-d43e46c8f7010dde905ec31057a1c5c2674df9be11683f98a21546377f2cd706 from #18608. But probably the approach in this PR is more efficient, unless the sql interpreter is doing some fancy rewriting.\r\n",
      "created_at": "2022-09-30T19:59:50Z",
      "updated_at": "2022-09-30T20:25:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r984911106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984911106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985149717",
      "pull_request_review_id": 1127570935,
      "id": 985149717,
      "node_id": "PRRC_kwDOABII5846uDEV",
      "diff_hunk": "@@ -506,10 +497,69 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  __func__, sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"%s: Failed to setup cursor SQL statement: %s\\n\", __func__, sqlite3_errstr(res)));\n+    }\n+\n+    return cursor;\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0x00);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        end_range.insert(end_range.begin(), std::byte(0x01));\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980171004,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Alright, in this case I think a unit test with a prefix with a trailing `0xFF` should be added.\r\n\r\nEdit: this doesn't seem necessary considering https://github.com/bitcoin/bitcoin/pull/24914#discussion_r984911106.",
      "created_at": "2022-10-01T22:04:18Z",
      "updated_at": "2022-10-01T22:05:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r985149717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985149717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 536,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 586,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986358462",
      "pull_request_review_id": 1129198780,
      "id": 986358462,
      "node_id": "PRRC_kwDOABII5846yqK-",
      "diff_hunk": "@@ -92,9 +103,21 @@ class DatabaseBatch\n         return HasKey(std::move(ssKey));\n     }\n \n-    virtual bool StartCursor() = 0;\n-    virtual bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) = 0;\n-    virtual void CloseCursor() = 0;\n+    virtual std::unique_ptr<DatabaseCursor> GetNewCursor() = 0;\n+    bool StartCursor()\n+    {\n+        m_cursor = GetNewCursor();\n+        return m_cursor != nullptr;  ",
      "path": "src/wallet/db.h",
      "position": null,
      "original_position": 33,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "10cf25c112ff4ac7bcece87a821996004cec2b24",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Introduce DatabaseCursor RAII class for managing cursor\" (10cf25c112ff4ac7bcece87a821996004cec2b24)\r\n\r\ntrailing whitespace",
      "created_at": "2022-10-04T01:27:56Z",
      "updated_at": "2022-10-04T19:06:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r986358462",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986358462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987171148",
      "pull_request_review_id": 1129198780,
      "id": 987171148,
      "node_id": "PRRC_kwDOABII58461wlM",
      "diff_hunk": "@@ -102,6 +102,7 @@ class DatabaseBatch\n     }\n \n     virtual std::unique_ptr<DatabaseCursor> GetNewCursor() = 0;\n+    virtual std::unique_ptr<DatabaseCursor> GetNewPrefixCursor(CDataStream& prefix) = 0;",
      "path": "src/wallet/db.h",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be)\r\n\r\nCan `prefix` just be `Span<const std::byte>`? It seems like a prefix scan should only require an array of bytes to function, not a full `CDataStream` object, much less a nonconst one.",
      "created_at": "2022-10-04T17:45:48Z",
      "updated_at": "2022-10-04T19:06:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r987171148",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987171148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987183146",
      "pull_request_review_id": 1129198780,
      "id": 987183146,
      "node_id": "PRRC_kwDOABII58461zgq",
      "diff_hunk": "@@ -3677,24 +3677,25 @@ bool CWallet::MigrateToSQLite(bilingual_str& error)\n \n     // Get all of the records for DB type migration\n     std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::unique_ptr<DatabaseCursor> cursor = batch->GetNewCursor();\n     std::vector<std::pair<SerializeData, SerializeData>> records;\n-    if (!batch->StartCursor()) {\n+    if (!cursor) {\n         error = _(\"Error: Unable to begin reading all records in the database\");\n         return false;\n     }\n     bool complete = false;\n     while (true) {\n         CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n         CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n-        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        bool ret = cursor->Next(ss_key, ss_value, complete);\n         if (!ret) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "5a8b0f16681bf8f755e84567e7ecee2feb28336c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Have cursor users use DatabaseCursor directly\" (5a8b0f16681bf8f755e84567e7ecee2feb28336c)\r\n\r\nCode pre-exists this PR, and I guess it works, but this line should probably say `if (complete || !ret)`. It's not clear that the Next function would or should failure if the end of the stream is hit.\r\n\r\nChanging this also would make it clearer that this break is intended to handle two different conditions, and it would also make this code more similar to other code calling `ReadAtCursor`/`Next`",
      "created_at": "2022-10-04T17:59:03Z",
      "updated_at": "2022-10-04T19:06:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r987183146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987183146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987194757",
      "pull_request_review_id": 1129198780,
      "id": 987194757,
      "node_id": "PRRC_kwDOABII584612WF",
      "diff_hunk": "@@ -477,13 +477,16 @@ bool SQLiteCursor::Next(CDataStream& key, CDataStream& value, bool& complete)\n     int res = sqlite3_step(m_cursor_stmt);\n     if (res == SQLITE_DONE) {\n         complete = true;\n-        return true;\n+        return false;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be)\r\n\r\nNote to reviewers: this change seems safe because all of the cursor next callers except for one (in `MigrateToSQLite`) check the `complete` output variable before they use this return value.\r\n\r\nI do think more ideally this function would return something like a `util::Result<bool>` or an `enum { SUCCESS, FAILURE, DONE }` so the failure and done cases don't overlap.",
      "created_at": "2022-10-04T18:12:45Z",
      "updated_at": "2022-10-04T19:06:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r987194757",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987194757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 480,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987226534",
      "pull_request_review_id": 1129198780,
      "id": 987226534,
      "node_id": "PRRC_kwDOABII58461-Gm",
      "diff_hunk": "@@ -668,9 +669,15 @@ bool BerkeleyCursor::Next(CDataStream& ssKey, CDataStream& ssValue, bool& comple\n     complete = false;\n     if (m_cursor == nullptr) return false;\n     // Read at cursor\n-    SafeDbt datKey;\n+    SafeDbt datKey(m_key_prefix.data(), m_key_prefix.size());",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be)\r\n\r\nI don't understand how `datKey` can be used to return the key data if it is now initialized to be a pointer to the `m_key_prefix` buffer instead of being a freestanding Dbt object that has the DB_DBT_MALLOC flag set and can allocate its own memory. If the keys are longer than the prefix how would they fit in `datKey` now?\r\n\r\nProbably I am missing something if the code works, but I would expect it look more like:\r\n\r\n```c++\r\nif (!m_first && !m_key_prefix.empty()) {\r\n    SafeDbt prefix{m_key_prefix.data(), m_key_prefix.size()};\r\n    m_cursor->get(prefix, value, DB_SET_RANGE);\r\n}\r\nret = m_cursor->get(datKey, datValue, first ? DB_CURRENT : DB_NEXT);\r\nm_first = false;\r\n```\r\n\r\nIn case I'm not missing something and there is a problem with this code, there was a [`BerkeleyBatch::ErasePrefix`](https://github.com/bitcoin/bitcoin/commit/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e#diff-b06753f6e4621f5bcd6cd27fed4137e70a262596b08f7f3a1416ea21977c53d4) function in #18608 that did something very similar and could be an example.",
      "created_at": "2022-10-04T18:51:40Z",
      "updated_at": "2022-10-04T19:06:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r987226534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987226534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989509937",
      "pull_request_review_id": 1133676864,
      "id": 989509937,
      "node_id": "PRRC_kwDOABII5846-rkx",
      "diff_hunk": "@@ -668,9 +669,15 @@ bool BerkeleyCursor::Next(CDataStream& ssKey, CDataStream& ssValue, bool& comple\n     complete = false;\n     if (m_cursor == nullptr) return false;\n     // Read at cursor\n-    SafeDbt datKey;\n+    SafeDbt datKey(m_key_prefix.data(), m_key_prefix.size());",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": 987226534,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AFAICT it just overwrites the `datKey.data` with a pointer to newly allocated memory. There's nothing that indicates that this doesn't work (i.e. no tests fail and wallets load succesfully).",
      "created_at": "2022-10-06T21:50:15Z",
      "updated_at": "2022-10-06T21:50:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989509937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989509937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510289",
      "pull_request_review_id": 1133677328,
      "id": 989510289,
      "node_id": "PRRC_kwDOABII5846-rqR",
      "diff_hunk": "@@ -506,10 +497,69 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  __func__, sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980023946,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-10-06T21:50:52Z",
      "updated_at": "2022-10-06T21:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989510289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510315",
      "pull_request_review_id": 1133677367,
      "id": 989510315,
      "node_id": "PRRC_kwDOABII5846-rqr",
      "diff_hunk": "@@ -506,10 +497,69 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     return true;\n }\n \n-void SQLiteBatch::CloseCursor()\n+SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);\n     sqlite3_reset(m_cursor_stmt);\n-    m_cursor_init = false;\n+    int res = sqlite3_finalize(m_cursor_stmt);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: cursor closed but could not finalize cursor statement: %s\\n\",\n+                  __func__, sqlite3_errstr(res));\n+    }\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n+{\n+    if (!m_database.m_db) return nullptr;\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>();\n+\n+    const char* stmt_text = \"SELECT key, value FROM main\";\n+    int res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\n+            \"%s: Failed to setup cursor SQL statement: %s\\n\", __func__, sqlite3_errstr(res)));\n+    }\n+\n+    return cursor;\n+}\n+\n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0x00);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        end_range.insert(end_range.begin(), std::byte(0x01));\n+    }\n+\n+    std::unique_ptr<SQLiteCursor> cursor = std::make_unique<SQLiteCursor>(start_range, end_range);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980025026,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-10-06T21:50:56Z",
      "updated_at": "2022-10-06T21:50:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989510315",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510615",
      "pull_request_review_id": 1133677792,
      "id": 989510615,
      "node_id": "PRRC_kwDOABII5846-rvX",
      "diff_hunk": "@@ -14,19 +14,36 @@ struct bilingual_str;\n namespace wallet {\n class SQLiteDatabase;\n \n+/** RAII class that provides a database cursor */\n+class SQLiteCursor : public DatabaseCursor",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980028053,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in `DatabaseCursor`. AFAIK that should also delete in the child classes.",
      "created_at": "2022-10-06T21:51:27Z",
      "updated_at": "2022-10-06T21:51:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989510615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510661",
      "pull_request_review_id": 1133677848,
      "id": 989510661,
      "node_id": "PRRC_kwDOABII5846-rwF",
      "diff_hunk": "@@ -14,19 +14,36 @@ struct bilingual_str;\n namespace wallet {\n class SQLiteDatabase;\n \n+/** RAII class that provides a database cursor */\n+class SQLiteCursor : public DatabaseCursor\n+{\n+public:\n+    sqlite3_stmt* m_cursor_stmt{nullptr};\n+    // Copies of the prefix things for the prefix cursor.\n+    // Prevents SQLite from accessing temp variables for the prefix things.\n+    std::vector<std::byte> m_prefix_range_start;\n+    std::vector<std::byte> m_prefix_range_end;\n+\n+    explicit SQLiteCursor() {}\n+    explicit SQLiteCursor(std::vector<std::byte> start_range, std::vector<std::byte> end_range)",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 15,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980029822,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-10-06T21:51:32Z",
      "updated_at": "2022-10-06T21:51:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989510661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510727",
      "pull_request_review_id": 1133677935,
      "id": 989510727,
      "node_id": "PRRC_kwDOABII5846-rxH",
      "diff_hunk": "@@ -297,401 +297,556 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 264,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980030921,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2022-10-06T21:51:38Z",
      "updated_at": "2022-10-06T21:51:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989510727",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510830",
      "pull_request_review_id": 1133678111,
      "id": 989510830,
      "node_id": "PRRC_kwDOABII5846-ryu",
      "diff_hunk": "@@ -297,401 +297,556 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    CHDChain chain;\n+    ssValue >> chain;\n+    pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n-            }\n+bool WalletBatch::IsKeyType(const std::string& strType)\n+{\n+    return (strType == DBKeys::KEY ||\n+            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n+}\n \n-            wss.nCKeys++;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, CDataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n                     }\n-                    internal = path[1] == (1 | 0x80000000);\n-                    index = path[2] & ~0x80000000;\n                 }\n \n-                // Insert a new CHDChain, or get the one that already exists\n-                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n-                CHDChain& chain = ins.first->second;\n-                if (ins.second) {\n-                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n-                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n-                    chain.seed_id = keyMeta.hd_seed_id;\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n-                if (internal) {\n-                    chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n-                    chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n-                } else {\n-                    chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n             }\n-        } else if (strType == DBKeys::WATCHMETA) {\n-            CScript script;\n-            ssKey >> script;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n-        } else if (strType == DBKeys::DEFAULTKEY) {\n-            // We don't want or need the default key, but if there is one set,\n-            // we want to make sure that it is valid so that we can detect corruption\n-            CPubKey vchPubKey;\n-            ssValue >> vchPubKey;\n-            if (!vchPubKey.IsValid()) {\n-                strErr = \"Error reading wallet database: Default Key corrupt\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::POOL) {\n-            int64_t nIndex;\n-            ssKey >> nIndex;\n-            CKeyPool keypool;\n-            ssValue >> keypool;\n-\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n-        } else if (strType == DBKeys::CSCRIPT) {\n-            uint160 hash;\n-            ssKey >> hash;\n-            CScript script;\n-            ssValue >> script;\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::ORDERPOSNEXT) {\n-            ssValue >> pwallet->nOrderPosNext;\n-        } else if (strType == DBKeys::DESTDATA) {\n-            std::string strAddress, strKey, strValue;\n-            ssKey >> strAddress;\n-            ssKey >> strKey;\n-            ssValue >> strValue;\n-            pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n-        } else if (strType == DBKeys::HDCHAIN) {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n-        } else if (strType == DBKeys::OLD_KEY) {\n-            strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n-            return false;\n-        } else if (strType == DBKeys::ACTIVEEXTERNALSPK || strType == DBKeys::ACTIVEINTERNALSPK) {\n-            uint8_t type;\n-            ssKey >> type;\n-            uint256 id;\n-            ssValue >> id;\n \n-            bool internal = strType == DBKeys::ACTIVEINTERNALSPK;\n-            auto& spk_mans = internal ? wss.m_active_internal_spks : wss.m_active_external_spks;\n-            if (spk_mans.count(static_cast<OutputType>(type)) > 0) {\n-                strErr = \"Multiple ScriptPubKeyMans specified for a single type\";\n-                return false;\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto ins = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins.first->second;\n+            if (ins.second) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 636,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980034855,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-10-06T21:51:51Z",
      "updated_at": "2022-10-06T21:51:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989510830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 632,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 634,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510855",
      "pull_request_review_id": 1133678151,
      "id": 989510855,
      "node_id": "PRRC_kwDOABII5846-rzH",
      "diff_hunk": "@@ -297,401 +297,556 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    CHDChain chain;\n+    ssValue >> chain;\n+    pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n-            }\n+bool WalletBatch::IsKeyType(const std::string& strType)\n+{\n+    return (strType == DBKeys::KEY ||\n+            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n+}\n \n-            wss.nCKeys++;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, CDataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n                     }\n-                    internal = path[1] == (1 | 0x80000000);\n-                    index = path[2] & ~0x80000000;\n                 }\n \n-                // Insert a new CHDChain, or get the one that already exists\n-                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n-                CHDChain& chain = ins.first->second;\n-                if (ins.second) {\n-                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n-                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n-                    chain.seed_id = keyMeta.hd_seed_id;\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n-                if (internal) {\n-                    chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n-                    chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n-                } else {\n-                    chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n             }\n-        } else if (strType == DBKeys::WATCHMETA) {\n-            CScript script;\n-            ssKey >> script;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n-        } else if (strType == DBKeys::DEFAULTKEY) {\n-            // We don't want or need the default key, but if there is one set,\n-            // we want to make sure that it is valid so that we can detect corruption\n-            CPubKey vchPubKey;\n-            ssValue >> vchPubKey;\n-            if (!vchPubKey.IsValid()) {\n-                strErr = \"Error reading wallet database: Default Key corrupt\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::POOL) {\n-            int64_t nIndex;\n-            ssKey >> nIndex;\n-            CKeyPool keypool;\n-            ssValue >> keypool;\n-\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n-        } else if (strType == DBKeys::CSCRIPT) {\n-            uint160 hash;\n-            ssKey >> hash;\n-            CScript script;\n-            ssValue >> script;\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::ORDERPOSNEXT) {\n-            ssValue >> pwallet->nOrderPosNext;\n-        } else if (strType == DBKeys::DESTDATA) {\n-            std::string strAddress, strKey, strValue;\n-            ssKey >> strAddress;\n-            ssKey >> strKey;\n-            ssValue >> strValue;\n-            pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n-        } else if (strType == DBKeys::HDCHAIN) {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n-        } else if (strType == DBKeys::OLD_KEY) {\n-            strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n-            return false;\n-        } else if (strType == DBKeys::ACTIVEEXTERNALSPK || strType == DBKeys::ACTIVEINTERNALSPK) {\n-            uint8_t type;\n-            ssKey >> type;\n-            uint256 id;\n-            ssValue >> id;\n \n-            bool internal = strType == DBKeys::ACTIVEINTERNALSPK;\n-            auto& spk_mans = internal ? wss.m_active_internal_spks : wss.m_active_external_spks;\n-            if (spk_mans.count(static_cast<OutputType>(type)) > 0) {\n-                strErr = \"Multiple ScriptPubKeyMans specified for a single type\";\n-                return false;\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto ins = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins.first->second;\n+            if (ins.second) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n             }\n-            spk_mans[static_cast<OutputType>(type)] = id;\n-        } else if (strType == DBKeys::WALLETDESCRIPTOR) {\n-            uint256 id;\n-            ssKey >> id;\n-            WalletDescriptor desc;\n-            try {\n-                ssValue >> desc;\n-            } catch (const std::ios_base::failure& e) {\n-                strErr = e.what();\n-                wss.descriptor_unknown = true;\n-                return false;\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n             }\n-            if (wss.m_descriptor_caches.count(id) == 0) {\n-                wss.m_descriptor_caches[id] = DescriptorCache();\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);\n+\n+    // Set inactive chains\n+    if (hd_chains.size() > 0) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 666,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980036012,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-10-06T21:51:55Z",
      "updated_at": "2022-10-06T21:51:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989510855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510894",
      "pull_request_review_id": 1133678214,
      "id": 989510894,
      "node_id": "PRRC_kwDOABII5846-rzu",
      "diff_hunk": "@@ -297,401 +297,556 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    CHDChain chain;\n+    ssValue >> chain;\n+    pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n-            }\n+bool WalletBatch::IsKeyType(const std::string& strType)\n+{\n+    return (strType == DBKeys::KEY ||\n+            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n+}\n \n-            wss.nCKeys++;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, CDataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n                     }\n-                    internal = path[1] == (1 | 0x80000000);\n-                    index = path[2] & ~0x80000000;\n                 }\n \n-                // Insert a new CHDChain, or get the one that already exists\n-                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n-                CHDChain& chain = ins.first->second;\n-                if (ins.second) {\n-                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n-                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n-                    chain.seed_id = keyMeta.hd_seed_id;\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n-                if (internal) {\n-                    chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n-                    chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n-                } else {\n-                    chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n                 }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n             }\n-        } else if (strType == DBKeys::WATCHMETA) {\n-            CScript script;\n-            ssKey >> script;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n-        } else if (strType == DBKeys::DEFAULTKEY) {\n-            // We don't want or need the default key, but if there is one set,\n-            // we want to make sure that it is valid so that we can detect corruption\n-            CPubKey vchPubKey;\n-            ssValue >> vchPubKey;\n-            if (!vchPubKey.IsValid()) {\n-                strErr = \"Error reading wallet database: Default Key corrupt\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::POOL) {\n-            int64_t nIndex;\n-            ssKey >> nIndex;\n-            CKeyPool keypool;\n-            ssValue >> keypool;\n-\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n-        } else if (strType == DBKeys::CSCRIPT) {\n-            uint160 hash;\n-            ssKey >> hash;\n-            CScript script;\n-            ssValue >> script;\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::ORDERPOSNEXT) {\n-            ssValue >> pwallet->nOrderPosNext;\n-        } else if (strType == DBKeys::DESTDATA) {\n-            std::string strAddress, strKey, strValue;\n-            ssKey >> strAddress;\n-            ssKey >> strKey;\n-            ssValue >> strValue;\n-            pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n-        } else if (strType == DBKeys::HDCHAIN) {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n-        } else if (strType == DBKeys::OLD_KEY) {\n-            strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n-            return false;\n-        } else if (strType == DBKeys::ACTIVEEXTERNALSPK || strType == DBKeys::ACTIVEINTERNALSPK) {\n-            uint8_t type;\n-            ssKey >> type;\n-            uint256 id;\n-            ssValue >> id;\n \n-            bool internal = strType == DBKeys::ACTIVEINTERNALSPK;\n-            auto& spk_mans = internal ? wss.m_active_internal_spks : wss.m_active_external_spks;\n-            if (spk_mans.count(static_cast<OutputType>(type)) > 0) {\n-                strErr = \"Multiple ScriptPubKeyMans specified for a single type\";\n-                return false;\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto ins = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins.first->second;\n+            if (ins.second) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n             }\n-            spk_mans[static_cast<OutputType>(type)] = id;\n-        } else if (strType == DBKeys::WALLETDESCRIPTOR) {\n-            uint256 id;\n-            ssKey >> id;\n-            WalletDescriptor desc;\n-            try {\n-                ssValue >> desc;\n-            } catch (const std::ios_base::failure& e) {\n-                strErr = e.what();\n-                wss.descriptor_unknown = true;\n-                return false;\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n             }\n-            if (wss.m_descriptor_caches.count(id) == 0) {\n-                wss.m_descriptor_caches[id] = DescriptorCache();\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);\n+\n+    // Set inactive chains\n+    if (hd_chains.size() > 0) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (!legacy_spkm) {\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\\n\");\n+            return DBErrors::CORRUPT;\n+        }\n+        for (const auto& chain_pair : hd_chains) {\n+            if (chain_pair.first != pwallet->GetLegacyScriptPubKeyMan()->GetHDChain().seed_id) {\n+                pwallet->GetLegacyScriptPubKeyMan()->AddInactiveHDChain(chain_pair.second);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 674,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980038494,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-10-06T21:52:00Z",
      "updated_at": "2022-10-06T21:52:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989510894",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 657,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510938",
      "pull_request_review_id": 1133678266,
      "id": 989510938,
      "node_id": "PRRC_kwDOABII5846-r0a",
      "diff_hunk": "@@ -701,77 +856,228 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             if (Hash(to_hash) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n \n-            if (!key.Load(pkey, pubkey, true))\n+            if (!privkey.Load(pkey, pubkey, true))\n             {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n-            wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n-        } else if (strType == DBKeys::WALLETDESCRIPTORCKEY) {\n+            spk_man->AddKey(pubkey.GetID(), privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_res.m_result);\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &num_ckeys, &spk_man] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n             uint256 desc_id;\n             CPubKey pubkey;\n-            ssKey >> desc_id;\n-            ssKey >> pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n             if (!pubkey.IsValid())\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor encrypted key CPubKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n             std::vector<unsigned char> privkey;\n-            ssValue >> privkey;\n-            wss.nCKeys++;\n+            value >> privkey;\n+            num_ckeys++;\n \n-            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::LOCKED_UTXO) {\n-            uint256 hash;\n-            uint32_t n;\n-            ssKey >> hash;\n-            ssKey >> n;\n-            pwallet->LockCoin(COutPoint(hash, n));\n-        } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n-                   strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n-                   strType != DBKeys::VERSION && strType != DBKeys::SETTINGS &&\n-                   strType != DBKeys::FLAGS) {\n-            wss.m_unknown_records++;\n-        }\n-    } catch (const std::exception& e) {\n-        if (strErr.empty()) {\n-            strErr = e.what();\n-        }\n-        return false;\n-    } catch (...) {\n-        if (strErr.empty()) {\n-            strErr = \"Caught unknown exception in ReadKeyValue\";\n+            spk_man->AddCryptedKey(pubkey.GetID(), pubkey, privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, ckey_res.m_result);\n+        num_ckeys = ckey_res.m_records;\n+\n+        return result;\n+    });\n+\n+    pwallet->WalletLogPrintf(\"Descriptors: %u, Descriptor Keys: %u plaintext, %u encrypted, %u total.\\n\",\n+           desc_res.m_records, num_keys, num_ckeys, num_keys + num_ckeys);\n+\n+    return desc_res.m_result;\n+}\n+\n+static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load name record\n+    LoadResult name_res = LoadRecords(pwallet, batch, DBKeys::NAME,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress;\n+        key >> strAddress;\n+        std::string label;\n+        value >> label;\n+        pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (name_res.m_result != DBErrors::LOAD_OK) return name_res.m_result;\n+\n+    // Load purpose record\n+    LoadResult purpose_res = LoadRecords(pwallet, batch, DBKeys::PURPOSE,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress;\n+        key >> strAddress;\n+        value >> pwallet->m_address_book[DecodeDestination(strAddress)].purpose;\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (purpose_res.m_result != DBErrors::LOAD_OK) return purpose_res.m_result;\n+\n+    // Load destination data record\n+    LoadResult dest_res = LoadRecords(pwallet, batch, DBKeys::DESTDATA,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress, strKey, strValue;\n+        key >> strAddress;\n+        key >> strKey;\n+        value >> strValue;\n+        pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (dest_res.m_result != DBErrors::LOAD_OK) return dest_res.m_result;\n+\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256> upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;\n+            }\n         }\n-        return false;\n-    }\n-    return true;\n+        return result;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+\n+    // Load locked utxo record\n+    LoadResult locked_utxo_res = LoadRecords(pwallet, batch, DBKeys::LOCKED_UTXO,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        uint256 hash;\n+        uint32_t n;\n+        key >> hash;\n+        key >> n;\n+        pwallet->LockCoin(COutPoint(hash, n));\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+    if (result != DBErrors::LOAD_OK) return result;\n+\n+    // Load orderposnext record\n+    batch.Read(DBKeys::ORDERPOSNEXT, pwallet->nOrderPosNext);\n+\n+    return DBErrors::LOAD_OK;\n }\n \n-bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn)\n+static DBErrors LoadActiveSPKMs(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n-    CWalletScanState dummy_wss;\n-    LOCK(pwallet->cs_wallet);\n-    return ReadKeyValue(pwallet, ssKey, ssValue, dummy_wss, strType, strErr, filter_fn);\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load spk records\n+    std::set<std::pair<OutputType, bool>> seen_spks;\n+    for (auto& spk_key : {DBKeys::ACTIVEEXTERNALSPK, DBKeys::ACTIVEINTERNALSPK}) {\n+        LoadResult spkm_res = LoadRecords(pwallet, batch, spk_key,\n+            [&seen_spks, &spk_key] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint8_t output_type;\n+            key >> output_type;\n+            uint256 id;\n+            value >> id;\n+\n+            bool internal = spk_key == DBKeys::ACTIVEINTERNALSPK;\n+            auto [it, insert] = seen_spks.emplace(static_cast<OutputType>(output_type), internal);\n+            if (!insert) {\n+                err = \"Multiple ScriptpubKeyMans specified for a single type\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+            pwallet->LoadActiveScriptPubKeyMan(id, static_cast<OutputType>(output_type), /*internal=*/internal);\n+            return DBErrors::LOAD_OK;\n+        });\n+        if (spkm_res.m_result != DBErrors::LOAD_OK) return spkm_res.m_result;\n+    }\n+    return DBErrors::LOAD_OK;\n }\n \n-bool WalletBatch::IsKeyType(const std::string& strType)\n+static DBErrors LoadDecryptionKeys(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n-    return (strType == DBKeys::KEY ||\n-            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load decryption key (mkey) records\n+    LoadResult mkey_res = LoadRecords(pwallet, batch, DBKeys::MASTER_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadEncryptionKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    return mkey_res.m_result;;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 1153,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b7167d0d65363780615d7b2442ca46816126ad50",
      "in_reply_to_id": 980044405,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-10-06T21:52:03Z",
      "updated_at": "2022-10-06T21:52:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989510938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989510938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1073,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989511064",
      "pull_request_review_id": 1133678406,
      "id": 989511064,
      "node_id": "PRRC_kwDOABII5846-r2Y",
      "diff_hunk": "@@ -92,9 +103,21 @@ class DatabaseBatch\n         return HasKey(std::move(ssKey));\n     }\n \n-    virtual bool StartCursor() = 0;\n-    virtual bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) = 0;\n-    virtual void CloseCursor() = 0;\n+    virtual std::unique_ptr<DatabaseCursor> GetNewCursor() = 0;\n+    bool StartCursor()\n+    {\n+        m_cursor = GetNewCursor();\n+        return m_cursor != nullptr;  ",
      "path": "src/wallet/db.h",
      "position": null,
      "original_position": 33,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "10cf25c112ff4ac7bcece87a821996004cec2b24",
      "in_reply_to_id": 986358462,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2022-10-06T21:52:14Z",
      "updated_at": "2022-10-06T21:52:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989511064",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989511064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989511127",
      "pull_request_review_id": 1133678505,
      "id": 989511127,
      "node_id": "PRRC_kwDOABII5846-r3X",
      "diff_hunk": "@@ -3677,24 +3677,25 @@ bool CWallet::MigrateToSQLite(bilingual_str& error)\n \n     // Get all of the records for DB type migration\n     std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::unique_ptr<DatabaseCursor> cursor = batch->GetNewCursor();\n     std::vector<std::pair<SerializeData, SerializeData>> records;\n-    if (!batch->StartCursor()) {\n+    if (!cursor) {\n         error = _(\"Error: Unable to begin reading all records in the database\");\n         return false;\n     }\n     bool complete = false;\n     while (true) {\n         CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n         CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n-        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        bool ret = cursor->Next(ss_key, ss_value, complete);\n         if (!ret) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "5a8b0f16681bf8f755e84567e7ecee2feb28336c",
      "in_reply_to_id": 987183146,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-10-06T21:52:22Z",
      "updated_at": "2022-10-06T21:52:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989511127",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989511127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989523042",
      "pull_request_review_id": 1133694641,
      "id": 989523042,
      "node_id": "PRRC_kwDOABII5846-uxi",
      "diff_hunk": "@@ -668,9 +669,15 @@ bool BerkeleyCursor::Next(CDataStream& ssKey, CDataStream& ssValue, bool& comple\n     complete = false;\n     if (m_cursor == nullptr) return false;\n     // Read at cursor\n-    SafeDbt datKey;\n+    SafeDbt datKey(m_key_prefix.data(), m_key_prefix.size());",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": 987226534,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> AFAICT it just overwrites the `datKey.data` with a pointer to newly allocated memory. There's nothing that indicates that this doesn't work (i.e. no tests fail and wallets load succesfully).\r\n\r\nI don't see how it could allocate memory if the [DB_DBT_MALLOC flag is not set](https://github.com/bitcoin/bitcoin/blob/15bc973d0db48a8d5f44abfec4664dcf58de21e8/src/wallet/bdb.cpp#L223-L231)\r\n\r\nI didn't get far enough in the PR to see if this has test coverage, but I guess you are pretty confident tests would fail if this was not working. It just seems like a mystery how it could work.",
      "created_at": "2022-10-06T22:14:45Z",
      "updated_at": "2022-10-06T22:14:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989523042",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989523042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989539780",
      "pull_request_review_id": 1133717521,
      "id": 989539780,
      "node_id": "PRRC_kwDOABII5846-y3E",
      "diff_hunk": "@@ -668,9 +669,15 @@ bool BerkeleyCursor::Next(CDataStream& ssKey, CDataStream& ssValue, bool& comple\n     complete = false;\n     if (m_cursor == nullptr) return false;\n     // Read at cursor\n-    SafeDbt datKey;\n+    SafeDbt datKey(m_key_prefix.data(), m_key_prefix.size());",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": 987226534,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Considering that many prefixes are shorter than entire keys, if there was a problem here, I would expect deserialization of keys to be throwing exceptions, and that would cause any test that calls `loadwallet` to fail, which would result in a ton of test failures. Given that that doesn't happen, I don't think there's any issue here.",
      "created_at": "2022-10-06T22:50:34Z",
      "updated_at": "2022-10-06T22:50:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989539780",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989539780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989566426",
      "pull_request_review_id": 1133752215,
      "id": 989566426,
      "node_id": "PRRC_kwDOABII5846-5Xa",
      "diff_hunk": "@@ -519,6 +523,45 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0x00);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        end_range.insert(end_range.begin(), std::byte(0x01));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": 984911106,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested.",
      "created_at": "2022-10-06T23:55:50Z",
      "updated_at": "2022-10-06T23:55:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989566426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989566426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989566840",
      "pull_request_review_id": 1133752767,
      "id": 989566840,
      "node_id": "PRRC_kwDOABII5846-5d4",
      "diff_hunk": "@@ -102,6 +102,7 @@ class DatabaseBatch\n     }\n \n     virtual std::unique_ptr<DatabaseCursor> GetNewCursor() = 0;\n+    virtual std::unique_ptr<DatabaseCursor> GetNewPrefixCursor(CDataStream& prefix) = 0;",
      "path": "src/wallet/db.h",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": 987171148,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A `CDataStream` is needed to produce the correct prefix as all of the `DBKeys` are strings serialized with length prefixes. So `CDataStream`s need to be made for the prefixes anyways, and it's easier to just pass that straight in.",
      "created_at": "2022-10-06T23:57:02Z",
      "updated_at": "2022-10-06T23:57:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989566840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989566840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989575967",
      "pull_request_review_id": 1133764668,
      "id": 989575967,
      "node_id": "PRRC_kwDOABII5846-7sf",
      "diff_hunk": "@@ -477,13 +477,16 @@ bool SQLiteCursor::Next(CDataStream& key, CDataStream& value, bool& complete)\n     int res = sqlite3_step(m_cursor_stmt);\n     if (res == SQLITE_DONE) {\n         complete = true;\n-        return true;\n+        return false;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": 987194757,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that's something that could be done in a followup.",
      "created_at": "2022-10-07T00:23:52Z",
      "updated_at": "2022-10-07T00:23:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989575967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989575967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 480,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009538582",
      "pull_request_review_id": 1162058024,
      "id": 1009538582,
      "node_id": "PRRC_kwDOABII5848LFYW",
      "diff_hunk": "@@ -981,6 +888,177 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &num_keys, &spk_man] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 239,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "6106b02d7c02c235e72738a4cadb81a82903e8d8",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 6106b02d:\r\n\r\nNo need to pass `num_keys` to this function.  The variable is overwritten below with the `key_res.m_records` field (`LoadRecords` returns the read records number).",
      "created_at": "2022-10-31T15:14:21Z",
      "updated_at": "2022-10-31T15:23:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1009538582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009538582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 987,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009540762",
      "pull_request_review_id": 1162058024,
      "id": 1009540762,
      "node_id": "PRRC_kwDOABII5848LF6a",
      "diff_hunk": "@@ -981,6 +888,177 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &num_keys, &spk_man] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+            CKey privkey;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            num_keys++;\n+            value >> pkey;\n+            value >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            if (!privkey.Load(pkey, pubkey, true))\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+            spk_man->AddKey(pubkey.GetID(), privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_res.m_result);\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &num_ckeys, &spk_man] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 284,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "6106b02d7c02c235e72738a4cadb81a82903e8d8",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 6106b02d:\r\n\r\nSame as above, no need to pass `num_ckeys` into this lambda.",
      "created_at": "2022-10-31T15:16:17Z",
      "updated_at": "2022-10-31T15:23:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1009540762",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009540762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009626693",
      "pull_request_review_id": 1162188314,
      "id": 1009626693,
      "node_id": "PRRC_kwDOABII5848La5F",
      "diff_hunk": "@@ -836,6 +741,246 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n+            }\n+\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto [ins, inserted] = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins->second;\n+            if (inserted) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n+            }\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+            }\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);\n+\n+    // Set inactive chains\n+    if (!hd_chains.empty()) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (!legacy_spkm) {\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\\n\");\n+            return DBErrors::CORRUPT;\n+        }\n+        for (const auto& [hd_seed_id, chain] : hd_chains) {\n+            if (hd_seed_id != pwallet->GetLegacyScriptPubKeyMan()->GetHDChain().seed_id) {\n+                pwallet->GetLegacyScriptPubKeyMan()->AddInactiveHDChain(chain);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 314,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "541cc8a772a67f6362b4f9137498acff173f4014",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 541cc8a7:\r\n\r\ntiny nit:\r\n```suggestion\r\n            if (hd_seed_id != legacy_spkm->GetHDChain().seed_id) {\r\n                legacy_spkm->AddInactiveHDChain(chain);\r\n```\r\n\r\n(could also save the active chain seed id into a variable so we don't call the getter on every iteration)",
      "created_at": "2022-10-31T16:34:32Z",
      "updated_at": "2022-10-31T16:43:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1009626693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009626693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 925,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 926,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009792108",
      "pull_request_review_id": 1162440397,
      "id": 1009792108,
      "node_id": "PRRC_kwDOABII5848MDRs",
      "diff_hunk": "@@ -981,6 +888,177 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);",
      "path": "src/wallet/walletdb.cpp",
      "position": 920,
      "original_position": 234,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "6106b02d7c02c235e72738a4cadb81a82903e8d8",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 6106b02:\r\n\r\nThis is a non-issue, just a conceptual talk:\r\nShouldn't the cache be set after load the unencrypted/crypted keys?. Because, with it, we could validate that all the pubkeys inside the cache actually exist on the wallet at load time.",
      "created_at": "2022-10-31T19:37:37Z",
      "updated_at": "2022-10-31T19:37:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1009792108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009792108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": 860,
      "original_start_line": 979,
      "start_side": "RIGHT",
      "line": 863,
      "original_line": 863,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014426101",
      "pull_request_review_id": 1169136220,
      "id": 1014426101,
      "node_id": "PRRC_kwDOABII5848dun1",
      "diff_hunk": "@@ -981,6 +888,177 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &num_keys, &spk_man] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 239,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "6106b02d7c02c235e72738a4cadb81a82903e8d8",
      "in_reply_to_id": 1009538582,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-11-04T20:04:11Z",
      "updated_at": "2022-11-04T20:04:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1014426101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014426101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 987,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014426157",
      "pull_request_review_id": 1169136311,
      "id": 1014426157,
      "node_id": "PRRC_kwDOABII5848duot",
      "diff_hunk": "@@ -981,6 +888,177 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &num_keys, &spk_man] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+            CKey privkey;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            num_keys++;\n+            value >> pkey;\n+            value >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            if (!privkey.Load(pkey, pubkey, true))\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+            spk_man->AddKey(pubkey.GetID(), privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_res.m_result);\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &num_ckeys, &spk_man] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 284,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "6106b02d7c02c235e72738a4cadb81a82903e8d8",
      "in_reply_to_id": 1009540762,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-11-04T20:04:17Z",
      "updated_at": "2022-11-04T20:04:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1014426157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014426157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014426205",
      "pull_request_review_id": 1169136364,
      "id": 1014426205,
      "node_id": "PRRC_kwDOABII5848dupd",
      "diff_hunk": "@@ -836,6 +741,246 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n+            }\n+\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto [ins, inserted] = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins->second;\n+            if (inserted) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n+            }\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+            }\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);\n+\n+    // Set inactive chains\n+    if (!hd_chains.empty()) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (!legacy_spkm) {\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\\n\");\n+            return DBErrors::CORRUPT;\n+        }\n+        for (const auto& [hd_seed_id, chain] : hd_chains) {\n+            if (hd_seed_id != pwallet->GetLegacyScriptPubKeyMan()->GetHDChain().seed_id) {\n+                pwallet->GetLegacyScriptPubKeyMan()->AddInactiveHDChain(chain);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 314,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "541cc8a772a67f6362b4f9137498acff173f4014",
      "in_reply_to_id": 1009626693,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-11-04T20:04:22Z",
      "updated_at": "2022-11-04T20:04:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1014426205",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014426205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 925,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 926,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014427208",
      "pull_request_review_id": 1169137918,
      "id": 1014427208,
      "node_id": "PRRC_kwDOABII5848du5I",
      "diff_hunk": "@@ -981,6 +888,177 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);",
      "path": "src/wallet/walletdb.cpp",
      "position": 920,
      "original_position": 234,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "6106b02d7c02c235e72738a4cadb81a82903e8d8",
      "in_reply_to_id": 1009792108,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps, but it doesn't particularly matter. The cache is only used for lookup if available, it it's incorrect, it just means the things derivation needs are not available and so it can't derive.",
      "created_at": "2022-11-04T20:06:00Z",
      "updated_at": "2022-11-04T20:06:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1014427208",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014427208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": 860,
      "original_start_line": 979,
      "start_side": "RIGHT",
      "line": 863,
      "original_line": 863,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020827933",
      "pull_request_review_id": 1178179176,
      "id": 1020827933,
      "node_id": "PRRC_kwDOABII58482Jkd",
      "diff_hunk": "@@ -647,9 +656,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> strValue;\n             pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n         } else if (strType == DBKeys::HDCHAIN) {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+            if (!LoadHDChain(pwallet, ssKey, ssValue, strErr)) return false;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "a0bc6bda272e7336deb55bdbf535534ed3a40306",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Commit a0bc6bda272e7336deb55bdbf535534ed3a40306 currently doesn't compile, since the call to `LoadHDChain(...)` has too many arguments:\r\n```suggestion\r\n            if (!LoadHDChain(pwallet, ssValue)) return false;\r\n```",
      "created_at": "2022-11-13T01:50:21Z",
      "updated_at": "2022-11-13T01:50:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1020827933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020827933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1026604734",
      "pull_request_review_id": 1186363991,
      "id": 1026604734,
      "node_id": "PRRC_kwDOABII5849ML6-",
      "diff_hunk": "@@ -647,9 +656,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> strValue;\n             pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n         } else if (strType == DBKeys::HDCHAIN) {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+            if (!LoadHDChain(pwallet, ssKey, ssValue, strErr)) return false;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "a0bc6bda272e7336deb55bdbf535534ed3a40306",
      "in_reply_to_id": 1020827933,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2022-11-18T15:57:50Z",
      "updated_at": "2022-11-18T15:57:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1026604734",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1026604734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027288086",
      "pull_request_review_id": 1187264926,
      "id": 1027288086,
      "node_id": "PRRC_kwDOABII5849OywW",
      "diff_hunk": "@@ -867,6 +867,16 @@ BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n     TestUnloadWallet(std::move(wallet));\n }\n \n+class FailCursor : public DatabaseCursor\n+{\n+private:\n+    bool m_pass{true};\n+\n+public:\n+    explicit FailCursor(bool pass) : m_pass(pass) {}\n+    bool Next(CDataStream& key, CDataStream& value, bool& complete) override { return m_pass; }",
      "path": "src/wallet/test/wallet_tests.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f91be0848d82a67ab7917e9e199ec145998e5222",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in f91be084:\r\n\r\nI'm not sure that this line make much sense. Return true without setting any key, value, nor the complete flag sounds like something that could cause a bug in the future. Might be better to just return false for now.\r\n(same for the `DummyCursor` class)",
      "created_at": "2022-11-20T13:13:28Z",
      "updated_at": "2022-11-20T13:49:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1027288086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027288086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 877,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027291138",
      "pull_request_review_id": 1187264926,
      "id": 1027291138,
      "node_id": "PRRC_kwDOABII5849OzgC",
      "diff_hunk": "@@ -836,6 +741,246 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n+            }\n+\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto [ins, inserted] = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins->second;\n+            if (inserted) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n+            }\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+            }\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 303,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b51b3fb4585ebf01f6d7eca3e80c57ed6ed8d587",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "small bug in b51b3fb4:\r\n\r\nWe just read the keymeta records, the result update has to be against `keymeta_res.m_result`, not `script_res`.",
      "created_at": "2022-11-20T13:32:17Z",
      "updated_at": "2022-11-20T13:49:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1027291138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027291138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027292254",
      "pull_request_review_id": 1187264926,
      "id": 1027292254,
      "node_id": "PRRC_kwDOABII5849Ozxe",
      "diff_hunk": "@@ -1085,12 +1034,99 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256> upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;\n+            }\n+        }\n+        return result;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+\n+    // Load locked utxo record\n+    LoadResult locked_utxo_res = LoadRecords(pwallet, batch, DBKeys::LOCKED_UTXO,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        uint256 hash;\n+        uint32_t n;\n+        key >> hash;\n+        key >> n;\n+        pwallet->LockCoin(COutPoint(hash, n));\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, tx_res.m_result);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 152,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "327dfbfd9799e516ae25a513396e496013abd2b2",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 327dfbfd:\r\n\r\nJust loaded the locked utxo, this should be `locked_utxo_res.m_result`, not `tx_res.m_result`.",
      "created_at": "2022-11-20T13:39:48Z",
      "updated_at": "2022-11-20T13:49:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1027292254",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027292254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035485055",
      "pull_request_review_id": 1198624664,
      "id": 1035485055,
      "node_id": "PRRC_kwDOABII5849uD9_",
      "diff_hunk": "@@ -867,6 +867,16 @@ BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n     TestUnloadWallet(std::move(wallet));\n }\n \n+class FailCursor : public DatabaseCursor\n+{\n+private:\n+    bool m_pass{true};\n+\n+public:\n+    explicit FailCursor(bool pass) : m_pass(pass) {}\n+    bool Next(CDataStream& key, CDataStream& value, bool& complete) override { return m_pass; }",
      "path": "src/wallet/test/wallet_tests.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f91be0848d82a67ab7917e9e199ec145998e5222",
      "in_reply_to_id": 1027288086,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-11-30T03:06:33Z",
      "updated_at": "2022-11-30T03:06:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1035485055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035485055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 877,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035485085",
      "pull_request_review_id": 1198624710,
      "id": 1035485085,
      "node_id": "PRRC_kwDOABII5849uD-d",
      "diff_hunk": "@@ -836,6 +741,246 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        bool complete;\n+        bool ret = cursor->Next(ssKey, ssValue, complete);\n+        if (complete) {\n+            break;\n+        } else if (!ret) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadCryptedKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n+            }\n+\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto [ins, inserted] = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins->second;\n+            if (inserted) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n+            }\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+            }\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 303,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b51b3fb4585ebf01f6d7eca3e80c57ed6ed8d587",
      "in_reply_to_id": 1027291138,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2022-11-30T03:06:39Z",
      "updated_at": "2022-11-30T03:06:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1035485085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035485085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035485103",
      "pull_request_review_id": 1198624743,
      "id": 1035485103,
      "node_id": "PRRC_kwDOABII5849uD-v",
      "diff_hunk": "@@ -1085,12 +1034,99 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256> upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;\n+            }\n+        }\n+        return result;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+\n+    // Load locked utxo record\n+    LoadResult locked_utxo_res = LoadRecords(pwallet, batch, DBKeys::LOCKED_UTXO,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        uint256 hash;\n+        uint32_t n;\n+        key >> hash;\n+        key >> n;\n+        pwallet->LockCoin(COutPoint(hash, n));\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, tx_res.m_result);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 152,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "327dfbfd9799e516ae25a513396e496013abd2b2",
      "in_reply_to_id": 1027292254,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2022-11-30T03:06:43Z",
      "updated_at": "2022-11-30T03:06:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1035485103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035485103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035941728",
      "pull_request_review_id": 1199285000,
      "id": 1035941728,
      "node_id": "PRRC_kwDOABII5849vzdg",
      "diff_hunk": "@@ -867,6 +867,16 @@ BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n     TestUnloadWallet(std::move(wallet));\n }\n \n+class FailCursor : public DatabaseCursor\n+{\n+private:\n+    bool m_pass{true};",
      "path": "src/wallet/test/wallet_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8dca1bd8321711c3638e2391274385f9d9a1ca70",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "CI is complaining because of this unused private field.",
      "created_at": "2022-11-30T13:01:39Z",
      "updated_at": "2022-11-30T13:01:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1035941728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035941728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041506907",
      "pull_request_review_id": 1207401901,
      "id": 1041506907,
      "node_id": "PRRC_kwDOABII584-FCJb",
      "diff_hunk": "@@ -69,12 +69,11 @@ bool DumpWallet(const ArgsManager& args, CWallet& wallet, bilingual_str& error)\n         while (true) {\n             CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n             CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n-            bool complete;\n-            ret = cursor->Next(ss_key, ss_value, complete);\n-            if (complete) {\n+            DatabaseCursor::Status status = cursor->Next(ss_key, ss_value);\n+            if (status == DatabaseCursor::Status::DONE) {\n                 ret = true;\n                 break;\n-            } else if (!ret) {\n+            } else if (status == DatabaseCursor::Status::FAIL) {",
      "path": "src/wallet/dump.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c8c9b74fd415ef82fe3e598b971a29a8fd7bc093",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c8c9b74f:\r\n\r\nbug here, as the `ret` variable is initialized to true, need to set `ret=false` when the returned status is FAIL.",
      "created_at": "2022-12-06T22:03:56Z",
      "updated_at": "2022-12-06T22:08:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1041506907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041506907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041518559",
      "pull_request_review_id": 1207419219,
      "id": 1041518559,
      "node_id": "PRRC_kwDOABII584-FE_f",
      "diff_hunk": "@@ -69,12 +69,11 @@ bool DumpWallet(const ArgsManager& args, CWallet& wallet, bilingual_str& error)\n         while (true) {\n             CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n             CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n-            bool complete;\n-            ret = cursor->Next(ss_key, ss_value, complete);\n-            if (complete) {\n+            DatabaseCursor::Status status = cursor->Next(ss_key, ss_value);\n+            if (status == DatabaseCursor::Status::DONE) {\n                 ret = true;\n                 break;\n-            } else if (!ret) {\n+            } else if (status == DatabaseCursor::Status::FAIL) {",
      "path": "src/wallet/dump.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c8c9b74fd415ef82fe3e598b971a29a8fd7bc093",
      "in_reply_to_id": 1041506907,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-12-06T22:18:35Z",
      "updated_at": "2022-12-06T22:18:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1041518559",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041518559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1045285161",
      "pull_request_review_id": 1212744380,
      "id": 1045285161,
      "node_id": "PRRC_kwDOABII584-Tckp",
      "diff_hunk": "@@ -156,6 +182,11 @@ class WalletDatabase\n     virtual std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) = 0;\n };\n \n+class DummyCursor : public DatabaseCursor\n+{\n+    bool Next(CDataStream& key, CDataStream& value, bool& complete) override { return false; }",
      "path": "src/wallet/db.h",
      "position": null,
      "original_position": 56,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "2c7b214cbc06ac07311add940925683c779e49b4",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Obviously it doesn't matter, since all tests still pass, but just for the sake of understanding the code better: is this change from returning `true` (compared to the earlier `DummyBatch::ReadAtCursor` method that is removed below) to `false` intended here? `true` would IMHO be a more logical choice for a cursor belonging to a database that never fails.",
      "created_at": "2022-12-11T19:29:05Z",
      "updated_at": "2022-12-11T20:17:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1045285161",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1045285161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1045285979",
      "pull_request_review_id": 1212744380,
      "id": 1045285979,
      "node_id": "PRRC_kwDOABII584-Tcxb",
      "diff_hunk": "@@ -661,16 +661,14 @@ void BerkeleyDatabase::ReloadDbEnv()\n     env->ReloadDbEnv();\n }\n \n-bool BerkeleyBatch::StartCursor()\n+BerkeleyCursor::BerkeleyCursor(BerkeleyDatabase& database)\n {\n-    assert(!m_cursor);\n-    if (!pdb)\n-        return false;\n-    int ret = pdb->cursor(nullptr, &m_cursor, 0);\n-    return ret == 0;\n+    assert(database.m_db.get());\n+    int ret = database.m_db->cursor(nullptr, &m_cursor, 0);\n+    assert(ret == 0);",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "950c94f5ccc024c633410d624e11f874f857543d",
      "in_reply_to_id": 893736353,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like the assertion is still there? Considering the documentation saying _\"The DB->cursor function may fail and return a non-zero error for errors specified for other Berkeley DB and C library or system functions.\"_ (http://web.mit.edu/ghudson/dev/nokrb/third/db/docs/api_c/db_cursor.html), I'd also agree that throwing an exception would be preferred.",
      "created_at": "2022-12-11T19:36:13Z",
      "updated_at": "2022-12-11T20:17:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1045285979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1045285979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1045289682",
      "pull_request_review_id": 1212744380,
      "id": 1045289682,
      "node_id": "PRRC_kwDOABII584-TdrS",
      "diff_hunk": "@@ -882,9 +888,7 @@ class FailBatch : public DatabaseBatch\n     void Flush() override {}\n     void Close() override {}\n \n-    bool StartCursor() override { return true; }\n-    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override { return false; }\n-    void CloseCursor() override {}\n+    std::unique_ptr<DatabaseCursor> GetNewCursor() override { return std::make_unique<FailCursor>(m_pass); }",
      "path": "src/wallet/test/wallet_tests.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "2c7b214cbc06ac07311add940925683c779e49b4",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    std::unique_ptr<DatabaseCursor> GetNewCursor() override { return std::make_unique<FailCursor>(); }\r\n```\r\nOtherwise, compiling the second commit (2c7b214cbc06ac07311add940925683c779e49b4) fails:\r\n<details>\r\n<summary>Compiler output</summary>\r\n\r\n```\r\n  CXX      wallet/test/test_test_bitcoin-scriptpubkeyman_tests.o\r\nIn file included from wallet/test/wallet_tests.cpp:5:\r\nIn file included from ./wallet/wallet.h:10:\r\nIn file included from ./fs.h:8:\r\nIn file included from ./tinyformat.h:144:\r\nIn file included from /usr/include/c++/v1/algorithm:653:\r\nIn file included from /usr/include/c++/v1/functional:500:\r\nIn file included from /usr/include/c++/v1/__functional/function.h:20:\r\nIn file included from /usr/include/c++/v1/__memory/shared_ptr.h:25:\r\n/usr/include/c++/v1/__memory/unique_ptr.h:728:32: error: no matching constructor for initialization of 'wallet::wallet_tests::FailCursor'\r\n    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));\r\n                               ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nwallet/test/wallet_tests.cpp:891:75: note: in instantiation of function template specialization 'std::make_unique<wallet::wallet_tests::FailCursor, bool &>' requested here\r\n    std::unique_ptr<DatabaseCursor> GetNewCursor() override { return std::make_unique<FailCursor>(m_pass); }\r\n                                                                          ^\r\nwallet/test/wallet_tests.cpp:870:7: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'bool' to 'const wallet::wallet_tests::FailCursor' for 1st argument\r\nclass FailCursor : public DatabaseCursor\r\n      ^\r\nwallet/test/wallet_tests.cpp:870:7: note: candidate constructor (the implicit default constructor) not viable: requires 0 arguments, but 1 was provided\r\n1 error generated.\r\n```\r\n\r\n</details>",
      "created_at": "2022-12-11T20:07:48Z",
      "updated_at": "2022-12-11T20:17:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1045289682",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1045289682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1045292759",
      "pull_request_review_id": 1212751128,
      "id": 1045292759,
      "node_id": "PRRC_kwDOABII584-TebX",
      "diff_hunk": "@@ -156,6 +182,11 @@ class WalletDatabase\n     virtual std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) = 0;\n };\n \n+class DummyCursor : public DatabaseCursor\n+{\n+    bool Next(CDataStream& key, CDataStream& value, bool& complete) override { return false; }",
      "path": "src/wallet/db.h",
      "position": null,
      "original_position": 56,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "2c7b214cbc06ac07311add940925683c779e49b4",
      "in_reply_to_id": 1045285161,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Check this https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1027288086.\r\nAs we usually run this code inside a loop until it fails or return `complete=true`, if it never fails, then it can become a bug in the future.",
      "created_at": "2022-12-11T20:34:18Z",
      "updated_at": "2022-12-11T20:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1045292759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1045292759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101461382",
      "pull_request_review_id": 1291135824,
      "id": 1101461382,
      "node_id": "PRRC_kwDOABII585BpveG",
      "diff_hunk": "@@ -516,6 +520,53 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "0e45584e4e7345846b2b8e115d3b549a0b1a694d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0e45584e:\r\nThis emptiness check is done for sqlite but not for bdb.\r\nAs this is a logical error, what if we throw an exception instead of returning a nullptr?",
      "created_at": "2023-02-09T13:27:15Z",
      "updated_at": "2023-02-09T14:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1101461382",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101461382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101471335",
      "pull_request_review_id": 1291135824,
      "id": 1101471335,
      "node_id": "PRRC_kwDOABII585Bpx5n",
      "diff_hunk": "@@ -516,6 +520,53 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        // If the prefix is all 0xff bytes, clear end_range as we won't need it\n+        end_range.clear();\n+    }\n+\n+    auto cursor = std::make_unique<SQLiteCursor>(start_range, end_range);\n+    if (!cursor) return nullptr;\n+\n+    int res = SQLITE_OK;\n+    if (end_range.empty()) {\n+        const char* stmt_text = \"SELECT key, value FROM main WHERE key >= ?\";\n+        res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    } else {\n+        const char* stmt_text = \"SELECT key, value FROM main WHERE key >= ? AND key < ?\";\n+        res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "0e45584e4e7345846b2b8e115d3b549a0b1a694d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0e45584e:\r\n\r\nstyling tiny nit (no need to do if you don't have to re-touch the area):\r\n```c++\r\nconst char* stmt_text = end_range.empty() ? \"SELECT key, value FROM main WHERE key >= ?\" :\r\n                            \"SELECT key, value FROM main WHERE key >= ? AND key < ?\";\r\nres = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\r\n```",
      "created_at": "2023-02-09T13:36:09Z",
      "updated_at": "2023-02-09T14:11:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1101471335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101471335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 550,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101489903",
      "pull_request_review_id": 1291135824,
      "id": 1101489903,
      "node_id": "PRRC_kwDOABII585Bp2bv",
      "diff_hunk": "@@ -136,21 +137,34 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\n \n     DbTxn* ptxn = env->TxnBegin();\n     CWallet dummyWallet(nullptr, \"\", gArgs, CreateDummyWalletDatabase());\n+    LOCK(dummyWallet.cs_wallet);",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "414457710d6efc2943803c3d4b018c49d10db9e1",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 41445771:\r\n\r\nThis lock isn't needed. `LoadKey`, `LoadCryptedKey`, `LoadEncryptionKey` and `LoadHDChain` lock the wallet mutex internally.",
      "created_at": "2023-02-09T13:52:16Z",
      "updated_at": "2023-02-09T14:11:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1101489903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101489903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101501646",
      "pull_request_review_id": 1291135824,
      "id": 1101501646,
      "node_id": "PRRC_kwDOABII585Bp5TO",
      "diff_hunk": "@@ -842,6 +747,269 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9bd810a3948bf18b51d35f38195e06e07c67749e",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 9bd810a3:\r\n\r\nCould return here, shouldn't continue iterating the db if a `CORRUPT` record was found.",
      "created_at": "2023-02-09T14:01:00Z",
      "updated_at": "2023-02-09T14:11:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1101501646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101501646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 785,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101998341",
      "pull_request_review_id": 1291972372,
      "id": 1101998341,
      "node_id": "PRRC_kwDOABII585BrykF",
      "diff_hunk": "@@ -842,6 +747,269 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9bd810a3948bf18b51d35f38195e06e07c67749e",
      "in_reply_to_id": 1101501646,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, this was intentional in order to avoid changing current behavior as little as possible. Right now, we will continue to read all records even if a corrupt one is found, so that all corrupt records can be found and reported to the user. So this doesn't return early in order to preserve that behavior.",
      "created_at": "2023-02-09T20:40:58Z",
      "updated_at": "2023-02-09T20:40:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1101998341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1101998341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 785,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102027380",
      "pull_request_review_id": 1292023694,
      "id": 1102027380,
      "node_id": "PRRC_kwDOABII585Br5p0",
      "diff_hunk": "@@ -516,6 +520,53 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "0e45584e4e7345846b2b8e115d3b549a0b1a694d",
      "in_reply_to_id": 1101461382,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added the check to bdb. I've also changed the check to use `Assume`. This is basically equivalent with throwing an exception here since the only way to reach it is through programming errors.",
      "created_at": "2023-02-09T21:10:24Z",
      "updated_at": "2023-02-09T21:10:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1102027380",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102027380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102027507",
      "pull_request_review_id": 1292023845,
      "id": 1102027507,
      "node_id": "PRRC_kwDOABII585Br5rz",
      "diff_hunk": "@@ -516,6 +520,53 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (prefix.empty()) return nullptr;\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        // If the prefix is all 0xff bytes, clear end_range as we won't need it\n+        end_range.clear();\n+    }\n+\n+    auto cursor = std::make_unique<SQLiteCursor>(start_range, end_range);\n+    if (!cursor) return nullptr;\n+\n+    int res = SQLITE_OK;\n+    if (end_range.empty()) {\n+        const char* stmt_text = \"SELECT key, value FROM main WHERE key >= ?\";\n+        res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    } else {\n+        const char* stmt_text = \"SELECT key, value FROM main WHERE key >= ? AND key < ?\";\n+        res = sqlite3_prepare_v2(m_database.m_db, stmt_text, -1, &cursor->m_cursor_stmt, nullptr);\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "0e45584e4e7345846b2b8e115d3b549a0b1a694d",
      "in_reply_to_id": 1101471335,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested.",
      "created_at": "2023-02-09T21:10:31Z",
      "updated_at": "2023-02-09T21:10:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1102027507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102027507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 550,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102027625",
      "pull_request_review_id": 1292023954,
      "id": 1102027625,
      "node_id": "PRRC_kwDOABII585Br5tp",
      "diff_hunk": "@@ -136,21 +137,34 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\n \n     DbTxn* ptxn = env->TxnBegin();\n     CWallet dummyWallet(nullptr, \"\", gArgs, CreateDummyWalletDatabase());\n+    LOCK(dummyWallet.cs_wallet);",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "414457710d6efc2943803c3d4b018c49d10db9e1",
      "in_reply_to_id": 1101489903,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2023-02-09T21:10:36Z",
      "updated_at": "2023-02-09T21:10:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1102027625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102027625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102044608",
      "pull_request_review_id": 1292048113,
      "id": 1102044608,
      "node_id": "PRRC_kwDOABII585Br93A",
      "diff_hunk": "@@ -842,6 +747,269 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9bd810a3948bf18b51d35f38195e06e07c67749e",
      "in_reply_to_id": 1101501646,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Right now, we will continue to read all records even if a corrupt one is found, so that all corrupt records can be found and reported to the user\r\n\r\nWe print all corrupt records of one type, not all the corrupted records. Right now, some flows return due corruption right after finish reading all the records of one type, while others continue for a bit longer.\r\n\r\nI'm just not so convinced that worth to log all corrupted records. I don't see much of a benefit for the user, might worth for debugging but in that case, might be better to have an RPC command or an external tool that scans the .dat file and dumps overall info about the wallet (including the corrupted info etc).\r\n\r\nBut no problem, all good if it's to preserve the current behavior. This PR is already doing a lot. Let's keep moving forward.\r\n\r\n\r\n----------\r\n\r\nSide not, I just had a dejavú. Most likely, we had this convo earlier in the PR and I forgot it.. (my bad if that is the case).",
      "created_at": "2023-02-09T21:31:44Z",
      "updated_at": "2023-02-09T21:32:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1102044608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102044608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 785,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102801460",
      "pull_request_review_id": 1293227354,
      "id": 1102801460,
      "node_id": "PRRC_kwDOABII585Bu2o0",
      "diff_hunk": "@@ -842,6 +747,269 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            CDataStream key(SER_DISK, CLIENT_VERSION);\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            CDataStream prefix(0, 0);\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(value, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 216,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "4f83673a5bff56b9742553248837bc7b9602dec3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 4f83673a:\r\n\r\ntiny styling nit (no need to do it if you don't re-touch):\r\n```c++\r\nreturn LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\r\n```\r\n\r\n(same for the encrypted keys load)",
      "created_at": "2023-02-10T14:00:53Z",
      "updated_at": "2023-02-10T14:50:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1102801460",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102801460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 831,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 834,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102834540",
      "pull_request_review_id": 1293227354,
      "id": 1102834540,
      "node_id": "PRRC_kwDOABII585Bu-ts",
      "diff_hunk": "@@ -1010,6 +917,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);",
      "path": "src/wallet/walletdb.cpp",
      "position": 864,
      "original_position": 188,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "cf4a765eb00d7ccb9ad709b004c79869f33cce89",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In cf4a765e:\r\n\r\nThis assertion is new to the code, could return a corruption error instead of abort the soft.\r\n(same applies to the similar assertions added to all the other descriptor records)",
      "created_at": "2023-02-10T14:31:29Z",
      "updated_at": "2023-02-10T14:50:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1102834540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102834540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 817,
      "original_line": 817,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102853448",
      "pull_request_review_id": 1293227354,
      "id": 1102853448,
      "node_id": "PRRC_kwDOABII585BvDVI",
      "diff_hunk": "@@ -1114,12 +1063,99 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256> upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "890143f2ec66718f6a1681a6c6e1f364f51630e0",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 890143f2:\r\n\r\n`upgraded_txs` is a return arg, needs to be passed by reference.",
      "created_at": "2023-02-10T14:49:03Z",
      "updated_at": "2023-02-10T14:50:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1102853448",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1102853448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1066,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103070505",
      "pull_request_review_id": 1293747325,
      "id": 1103070505,
      "node_id": "PRRC_kwDOABII585Bv4Up",
      "diff_hunk": "@@ -1010,6 +917,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);",
      "path": "src/wallet/walletdb.cpp",
      "position": 864,
      "original_position": 188,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "cf4a765eb00d7ccb9ad709b004c79869f33cce89",
      "in_reply_to_id": 1102834540,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It wouldn't be corruption error, it would be a (major) bug in SQLite. We're requesting records by a prefix which includes the id, and then checking that that part of the record contains the same id. The only way this could go wrong is that the prefix retrieval is incorrect, so I think `assert` is appropriate here and for the other descriptor records.",
      "created_at": "2023-02-10T18:09:43Z",
      "updated_at": "2023-02-10T18:09:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1103070505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103070505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 817,
      "original_line": 817,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103075348",
      "pull_request_review_id": 1293754351,
      "id": 1103075348,
      "node_id": "PRRC_kwDOABII585Bv5gU",
      "diff_hunk": "@@ -842,6 +747,269 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            CDataStream key(SER_DISK, CLIENT_VERSION);\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            CDataStream prefix(0, 0);\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(value, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        if (!LoadKey(pwallet, key, value, err)) {\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 216,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "4f83673a5bff56b9742553248837bc7b9602dec3",
      "in_reply_to_id": 1102801460,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-02-10T18:15:23Z",
      "updated_at": "2023-02-10T18:15:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1103075348",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103075348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 831,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 834,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103075467",
      "pull_request_review_id": 1293754512,
      "id": 1103075467,
      "node_id": "PRRC_kwDOABII585Bv5iL",
      "diff_hunk": "@@ -1114,12 +1063,99 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256> upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "890143f2ec66718f6a1681a6c6e1f364f51630e0",
      "in_reply_to_id": 1102853448,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-02-10T18:15:31Z",
      "updated_at": "2023-02-10T18:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1103075467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103075467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1066,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103101915",
      "pull_request_review_id": 1293792317,
      "id": 1103101915,
      "node_id": "PRRC_kwDOABII585Bv__b",
      "diff_hunk": "@@ -1010,6 +917,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);",
      "path": "src/wallet/walletdb.cpp",
      "position": 864,
      "original_position": 188,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "cf4a765eb00d7ccb9ad709b004c79869f33cce89",
      "in_reply_to_id": 1102834540,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah true, nvm then.",
      "created_at": "2023-02-10T18:39:51Z",
      "updated_at": "2023-02-10T18:39:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1103101915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103101915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 817,
      "original_line": 817,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1159260427",
      "pull_request_review_id": 1374020106,
      "id": 1159260427,
      "node_id": "PRRC_kwDOABII585FGOkL",
      "diff_hunk": "@@ -668,9 +669,15 @@ bool BerkeleyCursor::Next(CDataStream& ssKey, CDataStream& ssValue, bool& comple\n     complete = false;\n     if (m_cursor == nullptr) return false;\n     // Read at cursor\n-    SafeDbt datKey;\n+    SafeDbt datKey(m_key_prefix.data(), m_key_prefix.size());",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9b3bcb411b5742d6579d95b5e6aa2ad3f7592be",
      "in_reply_to_id": 987226534,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r989523042\r\n\r\n> I don't see how it could allocate memory if the [DB_DBT_MALLOC flag is not set](https://github.com/bitcoin/bitcoin/blob/15bc973d0db48a8d5f44abfec4664dcf58de21e8/src/wallet/bdb.cpp#L223-L231)\r\n\r\nI went down a rabbithole trying to answer a question in another PR (https://github.com/bitcoin/bitcoin/pull/27224/files#r1150232826), and finally figured out how this could work...\r\n\r\nIt turns the DB_DBT_MALLOC flag is not a switch that controls whether BDB mallocs a new pointer for you or if it uses the pointer that you provide. BDB will malloc a new pointer whether or not you not pass DB_DBT_MALLOC. But you pass it, you are responsible for freeing the pointer, and if you don't pass it, BDB will manage the memory as part of the cursor object so you don't have to free it yourself. If you don't want BDB to malloc memory to return the key, you can pass it a different DB_DBT_USERMEM flag instead.\r\n\r\nThis does raises the question of whether it is ok to call memory_cleanse on memory that is owned by the cursor and should probably be read-only. But maybe it doesn't need to be read-only, or doesn't need to be read-only as long as you are done with the key and about to advance the cursor.",
      "created_at": "2023-04-06T04:04:13Z",
      "updated_at": "2023-04-06T04:04:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1159260427",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1159260427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183773763",
      "pull_request_review_id": 1411039219,
      "id": 1183773763,
      "node_id": "PRRC_kwDOABII585GjvRD",
      "diff_hunk": "@@ -194,9 +194,8 @@ class BerkeleyCursor : public DatabaseCursor\n     bool m_first{true};\n \n public:\n-    // Constructor for cursor for all records\n-    explicit BerkeleyCursor(BerkeleyDatabase& database, BerkeleyBatch* batch=nullptr) : BerkeleyCursor(database, batch, {}) {}\n-    // Constructor for cursor for records matching the prefix",
      "path": "src/wallet/bdb.h",
      "position": null,
      "original_position": 6,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f76830e546bdcb45bd03dbfd102d6f6837c97e3d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f76830e5:\r\n\r\nThis db cursor changes need to be in the first commit as it's currently not compiling.",
      "created_at": "2023-05-03T14:32:12Z",
      "updated_at": "2023-05-03T14:58:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1183773763",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183773763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 197,
      "start_side": "LEFT",
      "line": null,
      "original_line": 197,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183817443",
      "pull_request_review_id": 1411107127,
      "id": 1183817443,
      "node_id": "PRRC_kwDOABII585Gj57j",
      "diff_hunk": "@@ -194,9 +194,8 @@ class BerkeleyCursor : public DatabaseCursor\n     bool m_first{true};\n \n public:\n-    // Constructor for cursor for all records\n-    explicit BerkeleyCursor(BerkeleyDatabase& database, BerkeleyBatch* batch=nullptr) : BerkeleyCursor(database, batch, {}) {}\n-    // Constructor for cursor for records matching the prefix",
      "path": "src/wallet/bdb.h",
      "position": null,
      "original_position": 6,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f76830e546bdcb45bd03dbfd102d6f6837c97e3d",
      "in_reply_to_id": 1183773763,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, fixed.",
      "created_at": "2023-05-03T15:02:58Z",
      "updated_at": "2023-05-03T15:02:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1183817443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183817443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 197,
      "start_side": "LEFT",
      "line": null,
      "original_line": 197,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183848909",
      "pull_request_review_id": 1411160536,
      "id": 1183848909,
      "node_id": "PRRC_kwDOABII585GkBnN",
      "diff_hunk": "@@ -716,6 +728,13 @@ std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetNewCursor()\n     return std::make_unique<BerkeleyCursor>(m_database);\n }\n \n+std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (!pdb) return nullptr;\n+    Assume(!prefix.empty());\n+    return std::make_unique<BerkeleyCursor>(m_database, /*batch=*/nullptr, prefix);",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "543d23fa5d4b4459069f29eee9ecdc47e11f3163",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note:\r\nIf this is used in a read-write process, I'm quite sure that it will suffer from the same problematic tackled in #27556.",
      "created_at": "2023-05-03T15:27:25Z",
      "updated_at": "2023-05-03T15:27:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1183848909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183848909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 735,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183913027",
      "pull_request_review_id": 1411268478,
      "id": 1183913027,
      "node_id": "PRRC_kwDOABII585GkRRD",
      "diff_hunk": "@@ -716,6 +728,13 @@ std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetNewCursor()\n     return std::make_unique<BerkeleyCursor>(m_database);\n }\n \n+std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    if (!pdb) return nullptr;\n+    Assume(!prefix.empty());\n+    return std::make_unique<BerkeleyCursor>(m_database, /*batch=*/nullptr, prefix);",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "543d23fa5d4b4459069f29eee9ecdc47e11f3163",
      "in_reply_to_id": 1183848909,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-05-03T16:14:37Z",
      "updated_at": "2023-05-03T16:14:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1183913027",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183913027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 735,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194474475",
      "pull_request_review_id": 1427524684,
      "id": 1194474475,
      "node_id": "PRRC_kwDOABII585HMjvr",
      "diff_hunk": "@@ -507,6 +511,7 @@ DatabaseCursor::Status SQLiteCursor::Next(DataStream& key, DataStream& value)\n \n SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (42cce1d43be0e662783abf4af60283c352297eac)\r\n\r\nWould be good to log an error if this fails",
      "created_at": "2023-05-16T00:24:15Z",
      "updated_at": "2023-05-16T01:52:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1194474475",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194474475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 541,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194486646",
      "pull_request_review_id": 1427524684,
      "id": 1194486646,
      "node_id": "PRRC_kwDOABII585HMmt2",
      "diff_hunk": "@@ -530,6 +535,49 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    Assume(!prefix.empty());\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (42cce1d43be0e662783abf4af60283c352297eac)\r\n\r\nC++ doesn't actually require that a byte is 8 bits, so it would be more correct to write this as `if (*it == std::byte(std::numeric_limits<unsigned char>::max()))`\r\n`",
      "created_at": "2023-05-16T00:49:05Z",
      "updated_at": "2023-05-16T01:52:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1194486646",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194486646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 550,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194495172",
      "pull_request_review_id": 1427524684,
      "id": 1194495172,
      "node_id": "PRRC_kwDOABII585HMozE",
      "diff_hunk": "@@ -15,12 +15,21 @@ struct bilingual_str;\n namespace wallet {\n class SQLiteDatabase;\n \n+/** RAII class that provides a database cursor */\n class SQLiteCursor : public DatabaseCursor\n {\n public:\n     sqlite3_stmt* m_cursor_stmt{nullptr};\n+    // Copies of the prefix things for the prefix cursor.\n+    // Prevents SQLite from accessing temp variables for the prefix things.\n+    std::vector<std::byte> m_prefix_range_start;\n+    std::vector<std::byte> m_prefix_range_end;\n \n     explicit SQLiteCursor() {}\n+    explicit SQLiteCursor(const std::vector<std::byte>& start_range, const std::vector<std::byte>& end_range)\n+        : m_prefix_range_start(start_range),\n+        m_prefix_range_end(end_range)\n+    {}",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 18,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (42cce1d43be0e662783abf4af60283c352297eac)\r\n\r\nUsing const references here forces vectors to be copied. Passing the argument by value would give the caller option to avoid copies:\r\n\r\n```c++\r\n    explicit SQLiteCursor(std::vector<std::byte> start_range, std::vector<std::byte> end_range)\r\n        : m_prefix_range_start(std::move(start_range)),\r\n        m_prefix_range_end(std::move(end_range))\r\n    {}\r\n```\r\n\r\nPassing arguments by value instead of const reference is usually a good pattern for functions inserting the arguments into a data structure.",
      "created_at": "2023-05-16T01:09:33Z",
      "updated_at": "2023-05-16T01:52:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1194495172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194495172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 29,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194511676",
      "pull_request_review_id": 1427524684,
      "id": 1194511676,
      "node_id": "PRRC_kwDOABII585HMs08",
      "diff_hunk": "@@ -61,6 +61,27 @@ CTxDestination getNewDestination(CWallet& w, OutputType output_type)\n     return *Assert(w.GetNewDestination(output_type, \"\"));\n }\n \n+MockableCursor::MockableCursor(const std::map<SerializeData, SerializeData>& records, bool pass, Span<std::byte> prefix)\n+{\n+    m_pass = pass;\n+\n+    // Start the cursor at the first value that is greater than or equal to the prefix\n+    m_cursor = records.lower_bound(SerializeData(prefix.begin(), prefix.end()));\n+\n+    // The end cursor is the first item that is greater than or equal to the prefix + 1 (when interpreted as an integer)\n+    SerializeData end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    m_cursor_end = records.lower_bound(end_range);",
      "path": "src/wallet/test/util.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (42cce1d43be0e662783abf4af60283c352297eac)\r\n\r\nI think you can just do:\r\n\r\n```c++\r\nm_cursor_end = records.upper_bound(SerializeData(prefix.begin(), prefix.end()));\r\n```\r\n\r\nor\r\n\r\n```c++\r\nstd::tie(m_cursor, m_cursor_end) = records.equal_range(SerializeData(prefix.begin(), prefix.end()));\r\n```\r\n\r\nAnd don't need the for loop.",
      "created_at": "2023-05-16T01:44:23Z",
      "updated_at": "2023-05-16T01:52:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1194511676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194511676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1195390653",
      "pull_request_review_id": 1428931765,
      "id": 1195390653,
      "node_id": "PRRC_kwDOABII585HQDa9",
      "diff_hunk": "@@ -507,6 +511,7 @@ DatabaseCursor::Status SQLiteCursor::Next(DataStream& key, DataStream& value)\n \n SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": 1194474475,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The [docs](https://sqlite.org/c3ref/clear_bindings.html) don't say what the return values may be. I think SQLite itself will also log an error using the `ErrorLogCallback` that we during initialization.",
      "created_at": "2023-05-16T16:04:04Z",
      "updated_at": "2023-05-16T16:04:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1195390653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1195390653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 541,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1195399114",
      "pull_request_review_id": 1428944670,
      "id": 1195399114,
      "node_id": "PRRC_kwDOABII585HQFfK",
      "diff_hunk": "@@ -61,6 +61,27 @@ CTxDestination getNewDestination(CWallet& w, OutputType output_type)\n     return *Assert(w.GetNewDestination(output_type, \"\"));\n }\n \n+MockableCursor::MockableCursor(const std::map<SerializeData, SerializeData>& records, bool pass, Span<std::byte> prefix)\n+{\n+    m_pass = pass;\n+\n+    // Start the cursor at the first value that is greater than or equal to the prefix\n+    m_cursor = records.lower_bound(SerializeData(prefix.begin(), prefix.end()));\n+\n+    // The end cursor is the first item that is greater than or equal to the prefix + 1 (when interpreted as an integer)\n+    SerializeData end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    m_cursor_end = records.lower_bound(end_range);",
      "path": "src/wallet/test/util.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": 1194511676,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think `upper_bound` or `equal_range` will work. They will find the upper bound to be the first item that is greater than our prefix, but any record with the right prefix and is longer than the prefix will be greater than it, so we end up actually only getting the record(s) that exactly match the prefix.",
      "created_at": "2023-05-16T16:11:22Z",
      "updated_at": "2023-05-16T16:11:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1195399114",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1195399114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1195406721",
      "pull_request_review_id": 1428955917,
      "id": 1195406721,
      "node_id": "PRRC_kwDOABII585HQHWB",
      "diff_hunk": "@@ -530,6 +535,49 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(CDataStream& prefix)\n+{\n+    Assume(!prefix.empty());\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": 1194486646,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-05-16T16:18:01Z",
      "updated_at": "2023-05-16T16:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1195406721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1195406721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 550,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1195406793",
      "pull_request_review_id": 1428956026,
      "id": 1195406793,
      "node_id": "PRRC_kwDOABII585HQHXJ",
      "diff_hunk": "@@ -15,12 +15,21 @@ struct bilingual_str;\n namespace wallet {\n class SQLiteDatabase;\n \n+/** RAII class that provides a database cursor */\n class SQLiteCursor : public DatabaseCursor\n {\n public:\n     sqlite3_stmt* m_cursor_stmt{nullptr};\n+    // Copies of the prefix things for the prefix cursor.\n+    // Prevents SQLite from accessing temp variables for the prefix things.\n+    std::vector<std::byte> m_prefix_range_start;\n+    std::vector<std::byte> m_prefix_range_end;\n \n     explicit SQLiteCursor() {}\n+    explicit SQLiteCursor(const std::vector<std::byte>& start_range, const std::vector<std::byte>& end_range)\n+        : m_prefix_range_start(start_range),\n+        m_prefix_range_end(end_range)\n+    {}",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 18,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": 1194495172,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-05-16T16:18:05Z",
      "updated_at": "2023-05-16T16:18:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1195406793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1195406793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 29,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1196995145",
      "pull_request_review_id": 1431487191,
      "id": 1196995145,
      "node_id": "PRRC_kwDOABII585HWLJJ",
      "diff_hunk": "@@ -507,6 +511,7 @@ DatabaseCursor::Status SQLiteCursor::Next(DataStream& key, DataStream& value)\n \n SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": 1194474475,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1195390653\r\n\r\n\r\n> The [docs](https://sqlite.org/c3ref/clear_bindings.html) don't say what the return values may be. I think SQLite itself will also log an error using the `ErrorLogCallback` that we during initialization.\r\n\r\nIs it safe to assume from https://www.sqlite.org/rescode.html that this is supposed to return SQLITE_OK? I just think it's useful to at least log behavior we are not expecting, even if we don't know it is an error to help debugging. If you disagree though thats fine.",
      "created_at": "2023-05-17T20:00:22Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1196995145",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1196995145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 541,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198901016",
      "pull_request_review_id": 1431487191,
      "id": 1198901016,
      "node_id": "PRRC_kwDOABII585HdccY",
      "diff_hunk": "@@ -61,6 +61,27 @@ CTxDestination getNewDestination(CWallet& w, OutputType output_type)\n     return *Assert(w.GetNewDestination(output_type, \"\"));\n }\n \n+MockableCursor::MockableCursor(const std::map<SerializeData, SerializeData>& records, bool pass, Span<std::byte> prefix)\n+{\n+    m_pass = pass;\n+\n+    // Start the cursor at the first value that is greater than or equal to the prefix\n+    m_cursor = records.lower_bound(SerializeData(prefix.begin(), prefix.end()));\n+\n+    // The end cursor is the first item that is greater than or equal to the prefix + 1 (when interpreted as an integer)\n+    SerializeData end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    m_cursor_end = records.lower_bound(end_range);",
      "path": "src/wallet/test/util.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": 1194511676,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1195399114\r\n\r\n> I don't think `upper_bound` or `equal_range` will work. They will find the upper bound to be the first item that is greater than our prefix, but any record with the right prefix and is longer than the prefix will be greater than it, so we end up actually only getting the record(s) that exactly match the prefix.\r\n\r\nOops, you're right. But I think the following is an elegant way to make `equal_range` work (implementation based on https://stackoverflow.com/questions/44717939/elegant-way-to-find-keys-with-given-prefix-in-stdmap-or-elements-in-stdset):\r\n\r\n``` diff\r\ndiff --git a/src/wallet/test/util.cpp b/src/wallet/test/util.cpp\r\nindex f14f451b52b8..0256d3fafbf6 100644\r\n--- a/src/wallet/test/util.cpp\r\n+++ b/src/wallet/test/util.cpp\r\n@@ -61,25 +61,15 @@ CTxDestination getNewDestination(CWallet& w, OutputType output_type)\r\n     return *Assert(w.GetNewDestination(output_type, \"\"));\r\n }\r\n \r\n-MockableCursor::MockableCursor(const std::map<SerializeData, SerializeData>& records, bool pass, Span<std::byte> prefix)\r\n+// BytePrefix object compares equal with other byte spans beginning with the same prefix.\r\n+struct BytePrefix { Span<const std::byte> prefix; };\r\n+bool operator<(BytePrefix a, Span<const std::byte> b) { return a.prefix < b.subspan(0, std::min(a.prefix.size(), b.size())); }\r\n+bool operator<(Span<const std::byte> a, BytePrefix b) { return a.subspan(0, std::min(a.size(), b.prefix.size())) < b.prefix; }\r\n+\r\n+MockableCursor::MockableCursor(const MockableData& records, bool pass, Span<std::byte> prefix)\r\n {\r\n     m_pass = pass;\r\n-\r\n-    // Start the cursor at the first value that is greater than or equal to the prefix\r\n-    m_cursor = records.lower_bound(SerializeData(prefix.begin(), prefix.end()));\r\n-\r\n-    // The end cursor is the first item that is greater than or equal to the prefix + 1 (when interpreted as an integer)\r\n-    SerializeData end_range(prefix.begin(), prefix.end());\r\n-    auto it = end_range.rbegin();\r\n-    for (; it != end_range.rend(); ++it) {\r\n-        if (*it == std::byte(std::numeric_limits<unsigned char>::max())) {\r\n-            *it = std::byte(0);\r\n-            continue;\r\n-        }\r\n-        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\r\n-        break;\r\n-    }\r\n-    m_cursor_end = records.lower_bound(end_range);\r\n+    std::tie(m_cursor, m_cursor_end) = records.equal_range(BytePrefix{prefix});\r\n }\r\n \r\n DatabaseCursor::Status MockableCursor::Next(DataStream& key, DataStream& value)\r\n@@ -165,7 +155,7 @@ bool MockableBatch::ErasePrefix(Span<const std::byte> prefix)\r\n     return true;\r\n }\r\n \r\n-std::unique_ptr<WalletDatabase> CreateMockableWalletDatabase(std::map<SerializeData, SerializeData> records)\r\n+std::unique_ptr<WalletDatabase> CreateMockableWalletDatabase(MockableData records)\r\n {\r\n     return std::make_unique<MockableDatabase>(records);\r\n }\r\ndiff --git a/src/wallet/test/util.h b/src/wallet/test/util.h\r\nindex 75f9b46c2a1d..3fdf40d13ccb 100644\r\n--- a/src/wallet/test/util.h\r\n+++ b/src/wallet/test/util.h\r\n@@ -32,15 +32,17 @@ std::string getnewaddress(CWallet& w);\r\n /** Returns a new destination, of an specific type, from the wallet */\r\n CTxDestination getNewDestination(CWallet& w, OutputType output_type);\r\n \r\n+using MockableData = std::map<SerializeData, SerializeData, std::less<>>;\r\n+\r\n class MockableCursor: public DatabaseCursor\r\n {\r\n public:\r\n-    std::map<SerializeData, SerializeData>::const_iterator m_cursor;\r\n-    std::map<SerializeData, SerializeData>::const_iterator m_cursor_end;\r\n+    MockableData::const_iterator m_cursor;\r\n+    MockableData::const_iterator m_cursor_end;\r\n     bool m_pass;\r\n \r\n-    explicit MockableCursor(const std::map<SerializeData, SerializeData>& records, bool pass) : m_cursor(records.begin()), m_cursor_end(records.end()), m_pass(pass) {}\r\n-    MockableCursor(const std::map<SerializeData, SerializeData>& records, bool pass, Span<std::byte> prefix);\r\n+    explicit MockableCursor(const MockableData& records, bool pass) : m_cursor(records.begin()), m_cursor_end(records.end()), m_pass(pass) {}\r\n+    MockableCursor(const MockableData& records, bool pass, Span<std::byte> prefix);\r\n     ~MockableCursor() {}\r\n \r\n     Status Next(DataStream& key, DataStream& value) override;\r\n@@ -49,7 +51,7 @@ public:\r\n class MockableBatch : public DatabaseBatch\r\n {\r\n private:\r\n-    std::map<SerializeData, SerializeData>& m_records;\r\n+    MockableData& m_records;\r\n     bool m_pass;\r\n \r\n     bool ReadKey(DataStream&& key, DataStream& value) override;\r\n@@ -59,7 +61,7 @@ private:\r\n     bool ErasePrefix(Span<const std::byte> prefix) override;\r\n \r\n public:\r\n-    explicit MockableBatch(std::map<SerializeData, SerializeData>& records, bool pass) : m_records(records), m_pass(pass) {}\r\n+    explicit MockableBatch(MockableData& records, bool pass) : m_records(records), m_pass(pass) {}\r\n     ~MockableBatch() {}\r\n \r\n     void Flush() override {}\r\n@@ -82,10 +84,10 @@ public:\r\n class MockableDatabase : public WalletDatabase\r\n {\r\n public:\r\n-    std::map<SerializeData, SerializeData> m_records;\r\n+    MockableData m_records;\r\n     bool m_pass{true};\r\n \r\n-    MockableDatabase(std::map<SerializeData, SerializeData> records = {}) : WalletDatabase(), m_records(records) {}\r\n+    MockableDatabase(MockableData records = {}) : WalletDatabase(), m_records(records) {}\r\n     ~MockableDatabase() {};\r\n \r\n     void Open() override {}\r\n@@ -105,7 +107,7 @@ public:\r\n     std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override { return std::make_unique<MockableBatch>(m_records, m_pass); }\r\n };\r\n \r\n-std::unique_ptr<WalletDatabase> CreateMockableWalletDatabase(std::map<SerializeData, SerializeData> records = {});\r\n+std::unique_ptr<WalletDatabase> CreateMockableWalletDatabase(MockableData records = {});\r\n \r\n MockableDatabase& GetMockableDatabase(CWallet& wallet);\r\n } // namespace wallet\r\ndiff --git a/src/wallet/test/walletload_tests.cpp b/src/wallet/test/walletload_tests.cpp\r\nindex 6823eafdfa7f..c1ff7baae117 100644\r\n--- a/src/wallet/test/walletload_tests.cpp\r\n+++ b/src/wallet/test/walletload_tests.cpp\r\n@@ -83,7 +83,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_load_ckey, TestingSetup)\r\n {\r\n     SerializeData ckey_record_key;\r\n     SerializeData ckey_record_value;\r\n-    std::map<SerializeData, SerializeData> records;\r\n+    MockableData records;\r\n \r\n     {\r\n         // Context setup.\r\n```\r\n\r\n",
      "created_at": "2023-05-19T12:25:16Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1198901016",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198901016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198931499",
      "pull_request_review_id": 1431487191,
      "id": 1198931499,
      "node_id": "PRRC_kwDOABII585Hdj4r",
      "diff_hunk": "@@ -78,5 +86,63 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    options.create_flags = WALLET_FLAG_DESCRIPTORS;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\"};",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "83b4e50291a0bd2c45f370cb18bb479d8f73bc71",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"test: add coverage for db cursor prefix range iteration\" (83b4e50291a0bd2c45f370cb18bb479d8f73bc71)\r\n\r\nI think you need to add a case like `\"\\xff\\xff\"`  to test sqlite code without a `key < end_range` condition\r\n\r\nWould also consider squashing this commit into earlier commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (57f35c90d2ebbc657a781ba3918398720b4319eb) because it's helpful to see test code calling a new function in the same commit that introduces the function.",
      "created_at": "2023-05-19T12:59:44Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1198931499",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198931499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198934920",
      "pull_request_review_id": 1431487191,
      "id": 1198934920,
      "node_id": "PRRC_kwDOABII585HdkuI",
      "diff_hunk": "@@ -78,5 +86,63 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    options.create_flags = WALLET_FLAG_DESCRIPTORS;",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "83b4e50291a0bd2c45f370cb18bb479d8f73bc71",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"test: add coverage for db cursor prefix range iteration\" (83b4e50291a0bd2c45f370cb18bb479d8f73bc71)\r\n\r\nSetting this flag seems unnecessary and unrelated to the test",
      "created_at": "2023-05-19T13:03:22Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1198934920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198934920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198941380",
      "pull_request_review_id": 1431487191,
      "id": 1198941380,
      "node_id": "PRRC_kwDOABII585HdmTE",
      "diff_hunk": "@@ -770,6 +770,19 @@ static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "040fa33fcce7cb0ec00405ca750de01880c19b8a",
      "in_reply_to_id": 893783634,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor wallet flags loading\" (c825d7c85b0353bdfdf9968272bf5b6cc78c9f12)\r\n\r\n> The original error is incorrect, it's supposed to be `TOO_NEW`.\r\n\r\nWould be good to note that this change is intentional in the commit message\r\n",
      "created_at": "2023-05-19T13:10:15Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1198941380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198941380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 780,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198953172",
      "pull_request_review_id": 1431487191,
      "id": 1198953172,
      "node_id": "PRRC_kwDOABII585HdpLU",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;",
      "path": "src/wallet/walletdb.cpp",
      "position": 96,
      "original_position": 19,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a91609e508a5a19d05691e3c2f1ef3bafc4c57e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor key reading and loading to its own function\" (e048fe71038caddb49a5875727a14e05f6edb0d3)\r\n\r\nNote: there is a slight change in behavior this commit which could be noted in the commit message.\r\n\r\nIf this deserialization fails, or if any error conditions are hit below, `wss.nKeys++` will not be incremented anymore. This seems ok, but previously `wss.nKeys++` included the total number of keys found, even ones that could not be loaded.",
      "created_at": "2023-05-19T13:22:18Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1198953172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198953172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 316,
      "original_line": 316,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198957038",
      "pull_request_review_id": 1431487191,
      "id": 1198957038,
      "node_id": "PRRC_kwDOABII585HdqHu",
      "diff_hunk": "@@ -386,6 +386,45 @@ bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::str\n     return true;\n }\n \n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n+            }\n+        }\n+\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))",
      "path": "src/wallet/walletdb.cpp",
      "position": 228,
      "original_position": 29,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "59ac3bccffe3fda352dc068fa3a0b507ed9a73d6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor crypted key loading to its own function\" (59ac3bccffe3fda352dc068fa3a0b507ed9a73d6)\r\n\r\nSimilar to previous commit, now `wss.nCKeys` will not be incremented if this fails. Change in behavior could be noted in commit message.",
      "created_at": "2023-05-19T13:26:07Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1198957038",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198957038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 392,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198965953",
      "pull_request_review_id": 1431487191,
      "id": 1198965953,
      "node_id": "PRRC_kwDOABII585HdsTB",
      "diff_hunk": "@@ -461,6 +461,9 @@ bool LoadHDChain(CWallet* pwallet, CDataStream& ssValue)\n     return true;\n }\n \n+//! Callback for filtering key types to deserialize in ReadKeyValue\n+using KeyFilterFn = std::function<bool(const std::string&)>;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c48aa9d0df7e34493a666c55e060304ef262d4b9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"salvage: Remove use of ReadKeyValue in salvage\" (c48aa9d0df7e34493a666c55e060304ef262d4b9)\r\n\r\nNo need to move KeyFilterFn here, can just drop it entirely:\r\n\r\n```diff\r\ndiff --git a/src/wallet/walletdb.cpp b/src/wallet/walletdb.cpp\r\nindex 5d3ced0ad225..6ab29379fb26 100644\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -461,22 +461,15 @@ bool LoadHDChain(CWallet* pwallet, CDataStream& ssValue)\r\n     return true;\r\n }\r\n \r\n-//! Callback for filtering key types to deserialize in ReadKeyValue\r\n-using KeyFilterFn = std::function<bool(const std::string&)>;\r\n-\r\n static bool\r\n ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\r\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n+             CWalletScanState &wss, std::string& strType, std::string& strErr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n {\r\n     try {\r\n         // Unserialize\r\n         // Taking advantage of the fact that pair serialization\r\n         // is just the two items serialized one after the other\r\n         ssKey >> strType;\r\n-        // If we have a filter, check if this matches the filter\r\n-        if (filter_fn && !filter_fn(strType)) {\r\n-            return true;\r\n-        }\r\n         // Legacy entries in descriptor wallets are not allowed, abort immediately\r\n         if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\r\n             wss.unexpected_legacy_entry = true;\r\n```\r\n\r\nEDIT: I guess this is deleted later anyway, but it would be a little cleaner to remove it this commit.",
      "created_at": "2023-05-19T13:34:47Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1198965953",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198965953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1199487534",
      "pull_request_review_id": 1431487191,
      "id": 1199487534,
      "node_id": "PRRC_kwDOABII585Hfrou",
      "diff_hunk": "@@ -861,6 +766,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 146,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8648511b567dfcdea7ffa5ac4595a43a768f5525",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor legacy wallet record loading into its own function\" (8648511b567dfcdea7ffa5ac4595a43a768f5525)\r\n\r\nWhat's the reason for using (0, 0) flags here and other places instead of (SER_DISK, CLIENT_VERSION) flags used elsewhere? Having a code comment about this somewhere would be very helpful for understanding. It seems a little dodgy to get rid of SER_DISK flag if present or future code might rely on it.",
      "created_at": "2023-05-19T23:01:17Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1199487534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1199487534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 783,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1199488667",
      "pull_request_review_id": 1431487191,
      "id": 1199488667,
      "node_id": "PRRC_kwDOABII585Hfr6b",
      "diff_hunk": "@@ -43,18 +43,18 @@ struct WalletContext;\n static const bool DEFAULT_FLUSHWALLET = true;\n \n /** Error statuses for the wallet database */\n-enum class DBErrors\n+enum class DBErrors : int",
      "path": "src/wallet/walletdb.h",
      "position": 9,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8648511b567dfcdea7ffa5ac4595a43a768f5525",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor legacy wallet record loading into its own function\" (8648511b567dfcdea7ffa5ac4595a43a768f5525)\r\n\r\nWould be helpful to have a code comment here saying enum number values are significant because if there are different error codes from reading different rows of the database, the error code with the highest number is the one that will be returned.",
      "created_at": "2023-05-19T23:05:04Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1199488667",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1199488667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1199490724",
      "pull_request_review_id": 1431487191,
      "id": 1199490724,
      "node_id": "PRRC_kwDOABII585Hfsak",
      "diff_hunk": "@@ -546,96 +546,17 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n             }\n         } else if (strType == DBKeys::WATCHS) {\n             wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n         } else if (strType == DBKeys::KEY) {\n-            if (!LoadKey(pwallet, ssKey, ssValue, strErr)) return false;\n             wss.nKeys++;\n         } else if (strType == DBKeys::MASTER_KEY) {\n             if (!LoadEncryptionKey(pwallet, ssKey, ssValue, strErr)) return false;\n         } else if (strType == DBKeys::CRYPTED_KEY) {\n-            if (!LoadCryptedKey(pwallet, ssKey, ssValue, strErr)) return false;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8648511b567dfcdea7ffa5ac4595a43a768f5525",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor legacy wallet record loading into its own function\" (8648511b567dfcdea7ffa5ac4595a43a768f5525)\r\n\r\nIt looks like in this commit, the side-effect in previous commit \"walletdb: Refactor key reading and loading to its own function\" (e048fe71038caddb49a5875727a14e05f6edb0d3) of changing the `wss.nKeys` value in case of key errors is partially reverted, because now the number of keys is incremented unconditionally, while the previous commit added more conditions. \r\n\r\nWould suggest changing previous commit to just increment `wss.nKeys++` unconditionally, so that behavior doesn't change here and this commit is simpler.\r\n\r\nSame comment applies to `wss.nCKeys` and commit \"walletdb: Refactor crypted key loading to its own function\" (4940c1cb3dca97faa2b6a4ddfab889cd4b6f00f4)\r\n\r\nThe `wss.nKeyMeta` count also changes here if there is a deserialization exception. It would be good to note this in the commit message for this commit.",
      "created_at": "2023-05-19T23:11:48Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1199490724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1199490724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 562,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1199493269",
      "pull_request_review_id": 1431487191,
      "id": 1199493269,
      "node_id": "PRRC_kwDOABII585HftCV",
      "diff_hunk": "@@ -842,6 +747,269 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9bd810a3948bf18b51d35f38195e06e07c67749e",
      "in_reply_to_id": 1101501646,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1102044608\r\n\r\nIn commit \"walletdb: Refactor legacy wallet record loading into its own function\" (8648511b567dfcdea7ffa5ac4595a43a768f5525)\r\n\r\n> We print all corrupt records of one type, not all the corrupted records\r\n\r\nI guess I disagree a little, but I think it is good to log errors about everything we know is corrupt, even if we don't log errors about things we can't know are corrupt.\r\n\r\nRegardless, if there is a change in behavior here I think it would be good mention what's changing in the commit message.",
      "created_at": "2023-05-19T23:21:31Z",
      "updated_at": "2023-05-19T23:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1199493269",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1199493269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 785,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200766163",
      "pull_request_review_id": 1437031147,
      "id": 1200766163,
      "node_id": "PRRC_kwDOABII585HkjzT",
      "diff_hunk": "@@ -861,6 +766,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 146,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8648511b567dfcdea7ffa5ac4595a43a768f5525",
      "in_reply_to_id": 1199487534,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For serializing the strings for the prefix, the stream type and client version don't matter so I just didn't use them.",
      "created_at": "2023-05-22T16:44:00Z",
      "updated_at": "2023-05-22T16:44:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200766163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200766163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 783,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200777487",
      "pull_request_review_id": 1437048279,
      "id": 1200777487,
      "node_id": "PRRC_kwDOABII585HkmkP",
      "diff_hunk": "@@ -507,6 +511,7 @@ DatabaseCursor::Status SQLiteCursor::Next(DataStream& key, DataStream& value)\n \n SQLiteCursor::~SQLiteCursor()\n {\n+    sqlite3_clear_bindings(m_cursor_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": 1194474475,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's fine to leave it as is.",
      "created_at": "2023-05-22T16:55:14Z",
      "updated_at": "2023-05-22T16:55:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200777487",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200777487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 541,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200777808",
      "pull_request_review_id": 1437048766,
      "id": 1200777808,
      "node_id": "PRRC_kwDOABII585HkmpQ",
      "diff_hunk": "@@ -61,6 +61,27 @@ CTxDestination getNewDestination(CWallet& w, OutputType output_type)\n     return *Assert(w.GetNewDestination(output_type, \"\"));\n }\n \n+MockableCursor::MockableCursor(const std::map<SerializeData, SerializeData>& records, bool pass, Span<std::byte> prefix)\n+{\n+    m_pass = pass;\n+\n+    // Start the cursor at the first value that is greater than or equal to the prefix\n+    m_cursor = records.lower_bound(SerializeData(prefix.begin(), prefix.end()));\n+\n+    // The end cursor is the first item that is greater than or equal to the prefix + 1 (when interpreted as an integer)\n+    SerializeData end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(0xff)) {\n+            *it = std::byte(0);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    m_cursor_end = records.lower_bound(end_range);",
      "path": "src/wallet/test/util.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "42cce1d43be0e662783abf4af60283c352297eac",
      "in_reply_to_id": 1194511676,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adopted these suggestions.",
      "created_at": "2023-05-22T16:55:35Z",
      "updated_at": "2023-05-22T16:55:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200777808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200777808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200778103",
      "pull_request_review_id": 1437049333,
      "id": 1200778103,
      "node_id": "PRRC_kwDOABII585Hkmt3",
      "diff_hunk": "@@ -78,5 +86,63 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    options.create_flags = WALLET_FLAG_DESCRIPTORS;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\"};",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "83b4e50291a0bd2c45f370cb18bb479d8f73bc71",
      "in_reply_to_id": 1198931499,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added the case and squashed.",
      "created_at": "2023-05-22T16:55:51Z",
      "updated_at": "2023-05-22T16:55:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200778103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200778103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200778268",
      "pull_request_review_id": 1437049579,
      "id": 1200778268,
      "node_id": "PRRC_kwDOABII585Hkmwc",
      "diff_hunk": "@@ -78,5 +86,63 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    options.create_flags = WALLET_FLAG_DESCRIPTORS;",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "83b4e50291a0bd2c45f370cb18bb479d8f73bc71",
      "in_reply_to_id": 1198934920,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2023-05-22T16:55:56Z",
      "updated_at": "2023-05-22T16:55:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200778268",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200778268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200779393",
      "pull_request_review_id": 1437051169,
      "id": 1200779393,
      "node_id": "PRRC_kwDOABII585HknCB",
      "diff_hunk": "@@ -770,6 +770,19 @@ static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "040fa33fcce7cb0ec00405ca750de01880c19b8a",
      "in_reply_to_id": 893783634,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a line in the commit message.",
      "created_at": "2023-05-22T16:56:37Z",
      "updated_at": "2023-05-22T16:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200779393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200779393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 780,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200783492",
      "pull_request_review_id": 1437057465,
      "id": 1200783492,
      "node_id": "PRRC_kwDOABII585HkoCE",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;",
      "path": "src/wallet/walletdb.cpp",
      "position": 96,
      "original_position": 19,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a91609e508a5a19d05691e3c2f1ef3bafc4c57e",
      "in_reply_to_id": 1198953172,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed it to increment unconditionally as mentioned below. Ultimately, `wss` gets removed so I don't think the correctness of this counting particularly matters.\r\n\r\nAdditionally, the current behavior doesn't use the counts when there are failures, so having it be inaccurate in such cases shouldn't matter.",
      "created_at": "2023-05-22T16:58:36Z",
      "updated_at": "2023-05-22T16:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200783492",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200783492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 316,
      "original_line": 316,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200784032",
      "pull_request_review_id": 1437058284,
      "id": 1200784032,
      "node_id": "PRRC_kwDOABII585HkoKg",
      "diff_hunk": "@@ -386,6 +386,45 @@ bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::str\n     return true;\n }\n \n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n+            }\n+        }\n+\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))",
      "path": "src/wallet/walletdb.cpp",
      "position": 228,
      "original_position": 29,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "59ac3bccffe3fda352dc068fa3a0b507ed9a73d6",
      "in_reply_to_id": 1198957038,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to increment unconditionally.",
      "created_at": "2023-05-22T16:58:46Z",
      "updated_at": "2023-05-22T16:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200784032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200784032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 392,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200784391",
      "pull_request_review_id": 1437058800,
      "id": 1200784391,
      "node_id": "PRRC_kwDOABII585HkoQH",
      "diff_hunk": "@@ -461,6 +461,9 @@ bool LoadHDChain(CWallet* pwallet, CDataStream& ssValue)\n     return true;\n }\n \n+//! Callback for filtering key types to deserialize in ReadKeyValue\n+using KeyFilterFn = std::function<bool(const std::string&)>;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c48aa9d0df7e34493a666c55e060304ef262d4b9",
      "in_reply_to_id": 1198965953,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-05-22T16:58:53Z",
      "updated_at": "2023-05-22T16:58:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200784391",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200784391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200784861",
      "pull_request_review_id": 1437059497,
      "id": 1200784861,
      "node_id": "PRRC_kwDOABII585HkoXd",
      "diff_hunk": "@@ -43,18 +43,18 @@ struct WalletContext;\n static const bool DEFAULT_FLUSHWALLET = true;\n \n /** Error statuses for the wallet database */\n-enum class DBErrors\n+enum class DBErrors : int",
      "path": "src/wallet/walletdb.h",
      "position": 9,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8648511b567dfcdea7ffa5ac4595a43a768f5525",
      "in_reply_to_id": 1199488667,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment.",
      "created_at": "2023-05-22T16:59:03Z",
      "updated_at": "2023-05-22T16:59:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200784861",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200784861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200786113",
      "pull_request_review_id": 1437061143,
      "id": 1200786113,
      "node_id": "PRRC_kwDOABII585HkorB",
      "diff_hunk": "@@ -546,96 +546,17 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n             }\n         } else if (strType == DBKeys::WATCHS) {\n             wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n         } else if (strType == DBKeys::KEY) {\n-            if (!LoadKey(pwallet, ssKey, ssValue, strErr)) return false;\n             wss.nKeys++;\n         } else if (strType == DBKeys::MASTER_KEY) {\n             if (!LoadEncryptionKey(pwallet, ssKey, ssValue, strErr)) return false;\n         } else if (strType == DBKeys::CRYPTED_KEY) {\n-            if (!LoadCryptedKey(pwallet, ssKey, ssValue, strErr)) return false;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8648511b567dfcdea7ffa5ac4595a43a768f5525",
      "in_reply_to_id": 1199490724,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to increment unconditionally, but these counters all get dropped in a later commit anyways.",
      "created_at": "2023-05-22T16:59:24Z",
      "updated_at": "2023-05-22T16:59:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200786113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1200786113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 562,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1201618467",
      "pull_request_review_id": 1438746369,
      "id": 1201618467,
      "node_id": "PRRC_kwDOABII585Hnz4j",
      "diff_hunk": "@@ -861,6 +766,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 146,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8648511b567dfcdea7ffa5ac4595a43a768f5525",
      "in_reply_to_id": 1199487534,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can just use `DataStream` for that, which comes with compile-time checks to enforce that both values are in fact never read, and thus can be omitted completely.\r\n\r\nAlso, in the same commit, is there a reason why you are changing `DataStream ssKey` to `CDataStream ssKey`? That seems like a step backward, no?",
      "created_at": "2023-05-23T06:48:23Z",
      "updated_at": "2023-05-23T06:48:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1201618467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1201618467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 783,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202616997",
      "pull_request_review_id": 1440081750,
      "id": 1202616997,
      "node_id": "PRRC_kwDOABII585Hrnql",
      "diff_hunk": "@@ -861,6 +766,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, CDataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    CDataStream prefix(0, 0);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 146,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8648511b567dfcdea7ffa5ac4595a43a768f5525",
      "in_reply_to_id": 1199487534,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point.\r\n\r\nI've changed the prefix to be made with a `DataStream` and for `GetPrefixCursor` to take `Span<const std::byte>` rather than a stream. Also updated to use `DataStream key` everywhere, I think that got lost in a rebase.",
      "created_at": "2023-05-23T15:59:32Z",
      "updated_at": "2023-05-23T15:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1202616997",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202616997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 783,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204298801",
      "pull_request_review_id": 1442091917,
      "id": 1204298801,
      "node_id": "PRRC_kwDOABII585HyCQx",
      "diff_hunk": "@@ -716,6 +728,13 @@ std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetNewCursor()\n     return std::make_unique<BerkeleyCursor>(m_database, *this);\n }\n \n+std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetNewPrefixCursor(Span<const std::byte> prefix)\n+{\n+    if (!pdb) return nullptr;\n+    Assume(!prefix.empty());",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "422a8436089c844934903a61fcec6b7b93995c07",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (422a8436089c844934903a61fcec6b7b93995c07)\r\n\r\nIf prefix being non-empty is a requirement, it would be good to add this `Assume` to the `MockableBatch` cursor as well, so all of the implementations of this method consistently reject empty prefixes, and test cases don't appear to work with the mock database and then fail with real databases.\r\n\r\nAlternately you could consider just moving the `Assume` checks out of the GetNewPrefixCursor methods into the into LoadRecords / LoadLegacyWalletRecords functions calling those methods. This would make the database code less fragile and basically catch same programming errors at a higher level in the wallet.",
      "created_at": "2023-05-24T14:46:01Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1204298801",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204298801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204326544",
      "pull_request_review_id": 1442091917,
      "id": 1204326544,
      "node_id": "PRRC_kwDOABII585HyJCQ",
      "diff_hunk": "@@ -410,60 +476,8 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n                 pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n             }\n         } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n-\n             wss.nKeys++;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "82e025297ba8939660b15fad738be723d783165e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor key reading and loading to its own function\" (82e025297ba8939660b15fad738be723d783165e)\r\n\r\nNote for other reviewers: There appears to be a slight change of behavior because now `wss.nKeys` will be incremented if the public key is not valid. This doesn't actually change behavior because counts are not used if there are any failures:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/214f8f18b310e3af88eba6a005439ae423ccd76a/src/wallet/walletdb.cpp#L932-L933\r\n\r\nAlso `wss` variable is removed later anyway (https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1200783492)",
      "created_at": "2023-05-24T14:58:46Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1204326544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204326544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204957277",
      "pull_request_review_id": 1442091917,
      "id": 1204957277,
      "node_id": "PRRC_kwDOABII585H0jBd",
      "diff_hunk": "@@ -452,6 +452,15 @@ bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue\n     return true;\n }\n \n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssValue)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f079b7580d4e7fa0d373decd1ffd7144abb83bab",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor hd chain loading to its own function\" (f079b7580d4e7fa0d373decd1ffd7144abb83bab)\r\n\r\nSeems ok, but is there a rationale for previous commits catching exceptions in the refactored functions and this commit not catching exceptions?",
      "created_at": "2023-05-25T03:36:31Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1204957277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204957277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1205489696",
      "pull_request_review_id": 1442091917,
      "id": 1205489696,
      "node_id": "PRRC_kwDOABII585H2lAg",
      "diff_hunk": "@@ -188,15 +189,27 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\n         DataStream ssKey{row.first};\n         CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n         std::string strType, strErr;\n-        bool fReadOK;\n-        {\n-            // Required in LoadKeyMetadata():\n-            LOCK(dummyWallet.cs_wallet);\n-            fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue, strType, strErr, KeyFilter);\n-        }\n+\n+        // We only care about KEY, MASTER_KEY, CRYPTED_KEY, and HDCHAIN types\n+        ssKey >> strType;\n         if (!KeyFilter(strType)) {\n             continue;\n         }\n+        bool fReadOK = false;\n+        if (strType == DBKeys::KEY) {\n+            fReadOK = LoadKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::CRYPTED_KEY) {\n+            fReadOK = LoadCryptedKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::MASTER_KEY) {\n+            fReadOK = LoadEncryptionKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::HDCHAIN) {\n+            fReadOK = LoadHDChain(&dummyWallet, ssValue);",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9d974b7f4136c04f35091438f5e78e17d77299b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"salvage: Remove use of ReadKeyValue in salvage\" (e9d974b7f4136c04f35091438f5e78e17d77299b)\r\n\r\nI guess this will no longer catch std::exception, but that is ok?",
      "created_at": "2023-05-25T13:01:38Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1205489696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1205489696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1205886280",
      "pull_request_review_id": 1442091917,
      "id": 1205886280,
      "node_id": "PRRC_kwDOABII585H4F1I",
      "diff_hunk": "@@ -1014,7 +1168,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     try {\n         pwallet->UpgradeKeyMetadata();\n     } catch (...) {\n-        result = DBErrors::CORRUPT;\n+        return DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 431,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b3425cc31feba14c5a0b0c4532437f12b5a901ff",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor legacy wallet record loading into its own function\" (b3425cc31feba14c5a0b0c4532437f12b5a901ff)\r\n\r\nWhat its this change doing? It seems unrelated to the commit and maybe would be better as a separate commit with an explanation.",
      "created_at": "2023-05-25T18:41:01Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1205886280",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1205886280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1017,
      "start_side": "LEFT",
      "line": null,
      "original_line": 1171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1206093314",
      "pull_request_review_id": 1442091917,
      "id": 1206093314,
      "node_id": "PRRC_kwDOABII585H44YC",
      "diff_hunk": "@@ -726,77 +873,246 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n \n             if (Hash(to_hash) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n \n-            if (!key.Load(pkey, pubkey, true))\n+            if (!privkey.Load(pkey, pubkey, true))\n             {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n-            wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n-        } else if (strType == DBKeys::WALLETDESCRIPTORCKEY) {\n+            spk_man->AddKey(pubkey.GetID(), privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_res.m_result);\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &spk_man] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n             uint256 desc_id;\n             CPubKey pubkey;\n-            ssKey >> desc_id;\n-            ssKey >> pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n             if (!pubkey.IsValid())\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor encrypted key CPubKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n             std::vector<unsigned char> privkey;\n-            ssValue >> privkey;\n-            wss.nCKeys++;\n+            value >> privkey;\n \n-            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::LOCKED_UTXO) {\n-            uint256 hash;\n-            uint32_t n;\n-            ssKey >> hash;\n-            ssKey >> n;\n-            pwallet->LockCoin(COutPoint(hash, n));\n-        } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n-                   strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n-                   strType != DBKeys::VERSION && strType != DBKeys::SETTINGS &&\n-                   strType != DBKeys::FLAGS) {\n-            wss.m_unknown_records++;\n+            spk_man->AddCryptedKey(pubkey.GetID(), pubkey, privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, ckey_res.m_result);\n+        num_ckeys = ckey_res.m_records;\n+\n+        return result;\n+    });\n+\n+    pwallet->WalletLogPrintf(\"Descriptors: %u, Descriptor Keys: %u plaintext, %u encrypted, %u total.\\n\",\n+           desc_res.m_records, num_keys, num_ckeys, num_keys + num_ckeys);\n+\n+    return desc_res.m_result;\n+}\n+\n+static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load name record\n+    LoadResult name_res = LoadRecords(pwallet, batch, DBKeys::NAME,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress;\n+        key >> strAddress;\n+        std::string label;\n+        value >> label;\n+        pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (name_res.m_result != DBErrors::LOAD_OK) return name_res.m_result;\n+\n+    // Load purpose record\n+    LoadResult purpose_res = LoadRecords(pwallet, batch, DBKeys::PURPOSE,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress;\n+        key >> strAddress;\n+        std::string purpose_str;\n+        value >> purpose_str;\n+        std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n+        if (!purpose) {\n+            pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n         }\n-    } catch (const std::exception& e) {\n-        if (strErr.empty()) {\n-            strErr = e.what();\n+        pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (purpose_res.m_result != DBErrors::LOAD_OK) return purpose_res.m_result;\n+\n+    // Load destination data record\n+    LoadResult dest_res = LoadRecords(pwallet, batch, DBKeys::DESTDATA,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress, strKey, strValue;\n+        key >> strAddress;\n+        key >> strKey;\n+        value >> strValue;\n+        const CTxDestination& dest{DecodeDestination(strAddress)};\n+        if (strKey.compare(\"used\") == 0) {\n+            // Load \"used\" key indicating if an IsMine address has\n+            // previously been spent from with avoid_reuse option enabled.\n+            // The strValue is not used for anything currently, but could\n+            // hold more information in the future. Current values are just\n+            // \"1\" or \"p\" for present (which was written prior to\n+            // f5ba424cd44619d9b9be88b8593d69a7ba96db26).\n+            pwallet->LoadAddressPreviouslySpent(dest);\n+        } else if (strKey.compare(0, 2, \"rr\") == 0) {\n+            // Load \"rr##\" keys where ## is a decimal number, and strValue\n+            // is a serialized RecentRequestEntry object.\n+            pwallet->LoadAddressReceiveRequest(dest, strKey.substr(2), strValue);\n         }\n-        return false;\n-    } catch (...) {\n-        if (strErr.empty()) {\n-            strErr = \"Caught unknown exception in ReadKeyValue\";\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (dest_res.m_result != DBErrors::LOAD_OK) return dest_res.m_result;\n+\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 1131,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3c51e44380ba8041e5d6c4cb29b9b2c54fad0b4b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: refactor tx loading\" (ad3ae8b6f4b2f3430b9d6c1b5bcf2627be15d961)\r\n\r\nIt's confusing that this commit leaves behind dead code implementing the same logic as the new code. Would suggest getting rid of it:\r\n\r\n```diff\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -300,11 +300,8 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\r\n \r\n class CWalletScanState {\r\n public:\r\n-    bool fAnyUnordered{false};\r\n-    std::vector<uint256> vWalletUpgrade;\r\n     std::map<OutputType, uint256> m_active_external_spks;\r\n     std::map<OutputType, uint256> m_active_internal_spks;\r\n-    bool tx_corrupt{false};\r\n \r\n     CWalletScanState() = default;\r\n };\r\n@@ -1134,7 +1131,6 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\r\n {\r\n     CWalletScanState wss;\r\n     bool fNoncriticalErrors = false;\r\n-    bool rescan_required = false;\r\n     DBErrors result = DBErrors::LOAD_OK;\r\n     bool any_unordered = false;\r\n     std::vector<uint256> upgraded_txs;\r\n@@ -1205,17 +1201,9 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\r\n                 if (strType == DBKeys::MASTER_KEY ||\r\n                     strType == DBKeys::DEFAULTKEY) {\r\n                     result = DBErrors::CORRUPT;\r\n-                } else if (wss.tx_corrupt) {\r\n-                    pwallet->WalletLogPrintf(\"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\");\r\n-                    // Set tx_corrupt back to false so that the error is only printed once (per corrupt tx)\r\n-                    wss.tx_corrupt = false;\r\n-                    result = DBErrors::CORRUPT;\r\n                 } else {\r\n                     // Leave other errors alone, if we try to fix them we might make things worse.\r\n                     fNoncriticalErrors = true; // ... but do warn the user there is something wrong.\r\n-                    if (strType == DBKeys::TX)\r\n-                        // Rescan if there is a bad transaction record:\r\n-                        rescan_required = true;\r\n                 }\r\n             }\r\n             if (!strErr.empty())\r\n@@ -1233,9 +1221,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\r\n         pwallet->LoadActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /*internal=*/true);\r\n     }\r\n \r\n-    if (rescan_required && result == DBErrors::LOAD_OK) {\r\n-        result = DBErrors::NEED_RESCAN;\r\n-    } else if (fNoncriticalErrors && result == DBErrors::LOAD_OK) {\r\n+    if (fNoncriticalErrors && result == DBErrors::LOAD_OK) {\r\n         result = DBErrors::NONCRITICAL_ERROR;\r\n     }\r\n \r\n```",
      "created_at": "2023-05-25T23:44:21Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1206093314",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1206093314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1051,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1206095209",
      "pull_request_review_id": 1442091917,
      "id": 1206095209,
      "node_id": "PRRC_kwDOABII585H441p",
      "diff_hunk": "@@ -1017,6 +924,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 168,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "51518daa60952f31c34013c643feb8fe11c9777e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor descriptor wallet records loading\" (51518daa60952f31c34013c643feb8fe11c9777e)\r\n\r\nThis commit is leaving behind dead code, including another copy of this print statement. Would be better to get rid of it here:\r\n\r\n```diff\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -310,11 +310,7 @@ public:\r\n     std::vector<uint256> vWalletUpgrade;\r\n     std::map<OutputType, uint256> m_active_external_spks;\r\n     std::map<OutputType, uint256> m_active_internal_spks;\r\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\r\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\r\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\r\n     bool tx_corrupt{false};\r\n-    bool descriptor_unknown{false};\r\n \r\n     CWalletScanState() = default;\r\n };\r\n@@ -1157,13 +1153,6 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\r\n                     // Set tx_corrupt back to false so that the error is only printed once (per corrupt tx)\r\n                     wss.tx_corrupt = false;\r\n                     result = DBErrors::CORRUPT;\r\n-                } else if (wss.descriptor_unknown) {\r\n-                    strErr = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\r\n-                    strErr += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\r\n-                            \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\r\n-                    strErr += \"Please try running the latest software version\";\r\n-                    pwallet->WalletLogPrintf(\"%s\\n\", strErr);\r\n-                    return DBErrors::UNKNOWN_DESCRIPTOR;\r\n                 } else {\r\n                     // Leave other errors alone, if we try to fix them we might make things worse.\r\n                     fNoncriticalErrors = true; // ... but do warn the user there is something wrong.\r\n\r\n```\r\n\r\n\r\n",
      "created_at": "2023-05-25T23:49:06Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1206095209",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1206095209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 781,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1206097033",
      "pull_request_review_id": 1442091917,
      "id": 1206097033,
      "node_id": "PRRC_kwDOABII585H45SJ",
      "diff_hunk": "@@ -803,6 +803,19 @@ static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "ede0c95237e47de8a93af229f33f0cbedf5780fd",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor wallet flags loading\" (ede0c95237e47de8a93af229f33f0cbedf5780fd)\r\n\r\nIt seems good that this commit is changing the error code from CORRUPT to TOO_NEW when there are recognized flags, but it is confusing that this still leaves behind more code below that attempts to do this same thing. It would be good to remove that code as part of this commit:\r\n\r\n```diff\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -880,9 +880,6 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\r\n                 // we assume the user can live with:\r\n                 if (IsKeyType(strType) || strType == DBKeys::DEFAULTKEY) {\r\n                     result = DBErrors::CORRUPT;\r\n-                } else if (strType == DBKeys::FLAGS) {\r\n-                    // reading the wallet flags can only fail if unknown flags are present\r\n-                    result = DBErrors::TOO_NEW;\r\n                 } else if (wss.tx_corrupt) {\r\n                     pwallet->WalletLogPrintf(\"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\");\r\n                     // Set tx_corrupt back to false so that the error is only printed once (per corrupt tx)\r\n\r\n```",
      "created_at": "2023-05-25T23:53:47Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1206097033",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1206097033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 813,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1210572680",
      "pull_request_review_id": 1442091917,
      "id": 1210572680,
      "node_id": "PRRC_kwDOABII585IJ9-I",
      "diff_hunk": "@@ -854,6 +760,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(value, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": 492,
      "original_position": 213,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b3425cc31feba14c5a0b0c4532437f12b5a901ff",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor legacy wallet record loading into its own function\" (b3425cc31feba14c5a0b0c4532437f12b5a901ff)\r\n\r\nThere is still another LoadKey call above on line 544, so is this loading the keys twice?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b3425cc31feba14c5a0b0c4532437f12b5a901ff/src/wallet/walletdb.cpp#L542-L544\r\n\r\nIt seems like the call on line 544 should be dropped at the same time this is added.\r\n\r\nIn general it would make this commit a lot clearer if it removed code that wasn't needed and didn't leave dead code behind. Would suggest:\r\n\r\n```diff\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -312,10 +312,8 @@ public:\r\n     std::map<uint256, DescriptorCache> m_descriptor_caches;\r\n     std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\r\n     std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\r\n-    std::map<uint160, CHDChain> m_hd_chains;\r\n     bool tx_corrupt{false};\r\n     bool descriptor_unknown{false};\r\n-    bool unexpected_legacy_entry{false};\r\n \r\n     CWalletScanState() = default;\r\n };\r\n@@ -470,10 +468,8 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\r\n         // Taking advantage of the fact that pair serialization\r\n         // is just the two items serialized one after the other\r\n         ssKey >> strType;\r\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\r\n         if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\r\n-            wss.unexpected_legacy_entry = true;\r\n-            return false;\r\n+            return true;\r\n         }\r\n         if (strType == DBKeys::NAME) {\r\n             std::string strAddress;\r\n@@ -541,7 +537,6 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\r\n             wss.nWatchKeys++;\r\n         } else if (strType == DBKeys::KEY) {\r\n             wss.nKeys++;\r\n-            if (!LoadKey(pwallet, ssKey, ssValue, strErr)) return false;\r\n         } else if (strType == DBKeys::MASTER_KEY) {\r\n             if (!LoadEncryptionKey(pwallet, ssKey, ssValue, strErr)) return false;\r\n         } else if (strType == DBKeys::CRYPTED_KEY) {\r\n@@ -1069,17 +1064,9 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\r\n             std::string strType, strErr;\r\n             if (!ReadKeyValue(pwallet, ssKey, ssValue, wss, strType, strErr))\r\n             {\r\n-                if (wss.unexpected_legacy_entry) {\r\n-                    strErr = strprintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. \", pwallet->GetName());\r\n-                    strErr += \"The wallet might have been tampered with or created with malicious intent.\";\r\n-                    pwallet->WalletLogPrintf(\"%s\\n\", strErr);\r\n-                    return DBErrors::UNEXPECTED_LEGACY_ENTRY;\r\n-                }\r\n                 // losing keys is considered a catastrophic error, anything else\r\n                 // we assume the user can live with:\r\n-                if (strType == DBKeys::KEY ||\r\n-                    strType == DBKeys::MASTER_KEY ||\r\n-                    strType == DBKeys::CRYPTED_KEY||\r\n+                if (strType == DBKeys::MASTER_KEY ||\r\n                     strType == DBKeys::DEFAULTKEY) {\r\n                     result = DBErrors::CORRUPT;\r\n                 } else if (wss.tx_corrupt) {\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2023-05-30T17:04:50Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1210572680",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1210572680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 565,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1210761024",
      "pull_request_review_id": 1442091917,
      "id": 1210761024,
      "node_id": "PRRC_kwDOABII585IKr9A",
      "diff_hunk": "@@ -188,15 +189,27 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\n         DataStream ssKey{row.first};\n         CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n         std::string strType, strErr;\n-        bool fReadOK;\n-        {\n-            // Required in LoadKeyMetadata():\n-            LOCK(dummyWallet.cs_wallet);\n-            fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue, strType, strErr, KeyFilter);\n-        }\n+\n+        // We only care about KEY, MASTER_KEY, CRYPTED_KEY, and HDCHAIN types\n+        ssKey >> strType;\n         if (!KeyFilter(strType)) {\n             continue;\n         }\n+        bool fReadOK = false;\n+        if (strType == DBKeys::KEY) {\n+            fReadOK = LoadKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::CRYPTED_KEY) {\n+            fReadOK = LoadCryptedKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::MASTER_KEY) {\n+            fReadOK = LoadEncryptionKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::HDCHAIN) {\n+            fReadOK = LoadHDChain(&dummyWallet, ssValue);\n+        } else {\n+            // This is a bug\n+            CHECK_NONFATAL(false);",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9d974b7f4136c04f35091438f5e78e17d77299b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"salvage: Remove use of ReadKeyValue in salvage\" (e9d974b7f4136c04f35091438f5e78e17d77299b)\r\n\r\nIt's unnecessarily complicated to call KeyFilter, then repeat the same filtering and raise an error if the filtering is different. Would suggest just getting rid of the KeyFilter function here:\r\n\r\n```diff\r\n--- a/src/wallet/salvage.cpp\r\n+++ b/src/wallet/salvage.cpp\r\n@@ -19,11 +19,6 @@ static const char *HEADER_END = \"HEADER=END\";\r\n static const char *DATA_END = \"DATA=END\";\r\n typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\r\n \r\n-static bool KeyFilter(const std::string& type)\r\n-{\r\n-    return WalletBatch::IsKeyType(type) || type == DBKeys::HDCHAIN;\r\n-}\r\n-\r\n class DummyCursor : public DatabaseCursor\r\n {\r\n     Status Next(DataStream& key, DataStream& value) override { return Status::FAIL; }\r\n@@ -192,9 +187,6 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\r\n \r\n         // We only care about KEY, MASTER_KEY, CRYPTED_KEY, and HDCHAIN types\r\n         ssKey >> strType;\r\n-        if (!KeyFilter(strType)) {\r\n-            continue;\r\n-        }\r\n         bool fReadOK = false;\r\n         if (strType == DBKeys::KEY) {\r\n             fReadOK = LoadKey(&dummyWallet, ssKey, ssValue, strErr);\r\n@@ -205,8 +197,6 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\r\n         } else if (strType == DBKeys::HDCHAIN) {\r\n             fReadOK = LoadHDChain(&dummyWallet, ssValue);\r\n         } else {\r\n-            // This is a bug\r\n-            CHECK_NONFATAL(false);\r\n             continue;\r\n         }\r\n \r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -823,12 +823,6 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\r\n     return true;\r\n }\r\n \r\n-bool WalletBatch::IsKeyType(const std::string& strType)\r\n-{\r\n-    return (strType == DBKeys::KEY ||\r\n-            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\r\n-}\r\n-\r\n static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n {\r\n     AssertLockHeld(pwallet->cs_wallet);\r\n@@ -916,7 +910,10 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\r\n                 }\r\n                 // losing keys is considered a catastrophic error, anything else\r\n                 // we assume the user can live with:\r\n-                if (IsKeyType(strType) || strType == DBKeys::DEFAULTKEY) {\r\n+                if (strType == DBKeys::KEY ||\r\n+                    strType == DBKeys::MASTER_KEY ||\r\n+                    strType == DBKeys::CRYPTED_KEY||\r\n+                    strType == DBKeys::DEFAULTKEY) {\r\n                     result = DBErrors::CORRUPT;\r\n                 } else if (wss.tx_corrupt) {\r\n                     pwallet->WalletLogPrintf(\"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\");\r\n--- a/src/wallet/walletdb.h\r\n+++ b/src/wallet/walletdb.h\r\n@@ -276,8 +276,6 @@ public:\r\n     DBErrors LoadWallet(CWallet* pwallet);\r\n     DBErrors FindWalletTxHashes(std::vector<uint256>& tx_hashes);\r\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\r\n-    /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\r\n-    static bool IsKeyType(const std::string& strType);\r\n \r\n     //! write the hdchain model (external chain child index counter)\r\n     bool WriteHDChain(const CHDChain& chain);\r\n```\r\n\r\n",
      "created_at": "2023-05-30T19:58:05Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1210761024",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1210761024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1210777446",
      "pull_request_review_id": 1442091917,
      "id": 1210777446,
      "node_id": "PRRC_kwDOABII585IKv9m",
      "diff_hunk": "@@ -1155,6 +1143,34 @@ static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vecto\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadActiveSPKMs(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load spk records\n+    std::set<std::pair<OutputType, bool>> seen_spks;",
      "path": "src/wallet/walletdb.cpp",
      "position": 1202,
      "original_position": 28,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8a4362f9bcf213164f43395faa164e50aab9363b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: refactor active spkm loading\" (8a4362f9bcf213164f43395faa164e50aab9363b)\r\n\r\nThere's still some dead code left behind this commit:\r\n\r\n```diff\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -300,8 +300,6 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\r\n \r\n class CWalletScanState {\r\n public:\r\n-    std::map<OutputType, uint256> m_active_external_spks;\r\n-    std::map<OutputType, uint256> m_active_internal_spks;\r\n \r\n     CWalletScanState() = default;\r\n };\r\n\r\n```",
      "created_at": "2023-05-30T20:13:32Z",
      "updated_at": "2023-05-30T20:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1210777446",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1210777446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1099,
      "original_line": 1099,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211031592",
      "pull_request_review_id": 1452127882,
      "id": 1211031592,
      "node_id": "PRRC_kwDOABII585ILuAo",
      "diff_hunk": "@@ -716,6 +728,13 @@ std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetNewCursor()\n     return std::make_unique<BerkeleyCursor>(m_database, *this);\n }\n \n+std::unique_ptr<DatabaseCursor> BerkeleyBatch::GetNewPrefixCursor(Span<const std::byte> prefix)\n+{\n+    if (!pdb) return nullptr;\n+    Assume(!prefix.empty());",
      "path": "src/wallet/bdb.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "422a8436089c844934903a61fcec6b7b93995c07",
      "in_reply_to_id": 1204298801,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved the `Assume` to `LoadRecords`.",
      "created_at": "2023-05-31T02:50:53Z",
      "updated_at": "2023-05-31T02:50:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211031592",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211031592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211031688",
      "pull_request_review_id": 1452128005,
      "id": 1211031688,
      "node_id": "PRRC_kwDOABII585ILuCI",
      "diff_hunk": "@@ -452,6 +452,15 @@ bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue\n     return true;\n }\n \n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssValue)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f079b7580d4e7fa0d373decd1ffd7144abb83bab",
      "in_reply_to_id": 1204957277,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, added the exception handling back.",
      "created_at": "2023-05-31T02:51:09Z",
      "updated_at": "2023-05-31T02:51:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211031688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211031688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211031768",
      "pull_request_review_id": 1452128068,
      "id": 1211031768,
      "node_id": "PRRC_kwDOABII585ILuDY",
      "diff_hunk": "@@ -188,15 +189,27 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\n         DataStream ssKey{row.first};\n         CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n         std::string strType, strErr;\n-        bool fReadOK;\n-        {\n-            // Required in LoadKeyMetadata():\n-            LOCK(dummyWallet.cs_wallet);\n-            fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue, strType, strErr, KeyFilter);\n-        }\n+\n+        // We only care about KEY, MASTER_KEY, CRYPTED_KEY, and HDCHAIN types\n+        ssKey >> strType;\n         if (!KeyFilter(strType)) {\n             continue;\n         }\n+        bool fReadOK = false;\n+        if (strType == DBKeys::KEY) {\n+            fReadOK = LoadKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::CRYPTED_KEY) {\n+            fReadOK = LoadCryptedKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::MASTER_KEY) {\n+            fReadOK = LoadEncryptionKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::HDCHAIN) {\n+            fReadOK = LoadHDChain(&dummyWallet, ssValue);",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9d974b7f4136c04f35091438f5e78e17d77299b",
      "in_reply_to_id": 1205489696,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added it back.",
      "created_at": "2023-05-31T02:51:17Z",
      "updated_at": "2023-05-31T02:51:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211031768",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211031768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211031914",
      "pull_request_review_id": 1452128315,
      "id": 1211031914,
      "node_id": "PRRC_kwDOABII585ILuFq",
      "diff_hunk": "@@ -1014,7 +1168,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     try {\n         pwallet->UpgradeKeyMetadata();\n     } catch (...) {\n-        result = DBErrors::CORRUPT;\n+        return DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 431,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b3425cc31feba14c5a0b0c4532437f12b5a901ff",
      "in_reply_to_id": 1205886280,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Don't remember, undone. Probably a bad rebase?",
      "created_at": "2023-05-31T02:51:40Z",
      "updated_at": "2023-05-31T02:51:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211031914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211031914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1017,
      "start_side": "LEFT",
      "line": null,
      "original_line": 1171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032001",
      "pull_request_review_id": 1452128415,
      "id": 1211032001,
      "node_id": "PRRC_kwDOABII585ILuHB",
      "diff_hunk": "@@ -726,77 +873,246 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n \n             if (Hash(to_hash) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n \n-            if (!key.Load(pkey, pubkey, true))\n+            if (!privkey.Load(pkey, pubkey, true))\n             {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n-            wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n-        } else if (strType == DBKeys::WALLETDESCRIPTORCKEY) {\n+            spk_man->AddKey(pubkey.GetID(), privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_res.m_result);\n+        num_keys = key_res.m_records;\n+\n+        // Get encrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCKEY, id);\n+        LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCKEY, prefix,\n+            [&id, &spk_man] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n             uint256 desc_id;\n             CPubKey pubkey;\n-            ssKey >> desc_id;\n-            ssKey >> pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n             if (!pubkey.IsValid())\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+                err = \"Error reading wallet database: descriptor encrypted key CPubKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n             }\n             std::vector<unsigned char> privkey;\n-            ssValue >> privkey;\n-            wss.nCKeys++;\n+            value >> privkey;\n \n-            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::LOCKED_UTXO) {\n-            uint256 hash;\n-            uint32_t n;\n-            ssKey >> hash;\n-            ssKey >> n;\n-            pwallet->LockCoin(COutPoint(hash, n));\n-        } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n-                   strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n-                   strType != DBKeys::VERSION && strType != DBKeys::SETTINGS &&\n-                   strType != DBKeys::FLAGS) {\n-            wss.m_unknown_records++;\n+            spk_man->AddCryptedKey(pubkey.GetID(), pubkey, privkey);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, ckey_res.m_result);\n+        num_ckeys = ckey_res.m_records;\n+\n+        return result;\n+    });\n+\n+    pwallet->WalletLogPrintf(\"Descriptors: %u, Descriptor Keys: %u plaintext, %u encrypted, %u total.\\n\",\n+           desc_res.m_records, num_keys, num_ckeys, num_keys + num_ckeys);\n+\n+    return desc_res.m_result;\n+}\n+\n+static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load name record\n+    LoadResult name_res = LoadRecords(pwallet, batch, DBKeys::NAME,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress;\n+        key >> strAddress;\n+        std::string label;\n+        value >> label;\n+        pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (name_res.m_result != DBErrors::LOAD_OK) return name_res.m_result;\n+\n+    // Load purpose record\n+    LoadResult purpose_res = LoadRecords(pwallet, batch, DBKeys::PURPOSE,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress;\n+        key >> strAddress;\n+        std::string purpose_str;\n+        value >> purpose_str;\n+        std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n+        if (!purpose) {\n+            pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n         }\n-    } catch (const std::exception& e) {\n-        if (strErr.empty()) {\n-            strErr = e.what();\n+        pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (purpose_res.m_result != DBErrors::LOAD_OK) return purpose_res.m_result;\n+\n+    // Load destination data record\n+    LoadResult dest_res = LoadRecords(pwallet, batch, DBKeys::DESTDATA,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        std::string strAddress, strKey, strValue;\n+        key >> strAddress;\n+        key >> strKey;\n+        value >> strValue;\n+        const CTxDestination& dest{DecodeDestination(strAddress)};\n+        if (strKey.compare(\"used\") == 0) {\n+            // Load \"used\" key indicating if an IsMine address has\n+            // previously been spent from with avoid_reuse option enabled.\n+            // The strValue is not used for anything currently, but could\n+            // hold more information in the future. Current values are just\n+            // \"1\" or \"p\" for present (which was written prior to\n+            // f5ba424cd44619d9b9be88b8593d69a7ba96db26).\n+            pwallet->LoadAddressPreviouslySpent(dest);\n+        } else if (strKey.compare(0, 2, \"rr\") == 0) {\n+            // Load \"rr##\" keys where ## is a decimal number, and strValue\n+            // is a serialized RecentRequestEntry object.\n+            pwallet->LoadAddressReceiveRequest(dest, strKey.substr(2), strValue);\n         }\n-        return false;\n-    } catch (...) {\n-        if (strErr.empty()) {\n-            strErr = \"Caught unknown exception in ReadKeyValue\";\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (dest_res.m_result != DBErrors::LOAD_OK) return dest_res.m_result;\n+\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 1131,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3c51e44380ba8041e5d6c4cb29b9b2c54fad0b4b",
      "in_reply_to_id": 1206093314,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested.",
      "created_at": "2023-05-31T02:51:50Z",
      "updated_at": "2023-05-31T02:51:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211032001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1051,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032031",
      "pull_request_review_id": 1452128462,
      "id": 1211032031,
      "node_id": "PRRC_kwDOABII585ILuHf",
      "diff_hunk": "@@ -1017,6 +924,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 168,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "51518daa60952f31c34013c643feb8fe11c9777e",
      "in_reply_to_id": 1206095209,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested.",
      "created_at": "2023-05-31T02:51:55Z",
      "updated_at": "2023-05-31T02:51:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211032031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 781,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032083",
      "pull_request_review_id": 1452128520,
      "id": 1211032083,
      "node_id": "PRRC_kwDOABII585ILuIT",
      "diff_hunk": "@@ -803,6 +803,19 @@ static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "ede0c95237e47de8a93af229f33f0cbedf5780fd",
      "in_reply_to_id": 1206097033,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested.",
      "created_at": "2023-05-31T02:52:00Z",
      "updated_at": "2023-05-31T02:52:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211032083",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 813,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032129",
      "pull_request_review_id": 1452128556,
      "id": 1211032129,
      "node_id": "PRRC_kwDOABII585ILuJB",
      "diff_hunk": "@@ -854,6 +760,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(value, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": 492,
      "original_position": 213,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b3425cc31feba14c5a0b0c4532437f12b5a901ff",
      "in_reply_to_id": 1210572680,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested.",
      "created_at": "2023-05-31T02:52:05Z",
      "updated_at": "2023-05-31T02:52:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211032129",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 565,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032152",
      "pull_request_review_id": 1452128595,
      "id": 1211032152,
      "node_id": "PRRC_kwDOABII585ILuJY",
      "diff_hunk": "@@ -188,15 +189,27 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\n         DataStream ssKey{row.first};\n         CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n         std::string strType, strErr;\n-        bool fReadOK;\n-        {\n-            // Required in LoadKeyMetadata():\n-            LOCK(dummyWallet.cs_wallet);\n-            fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue, strType, strErr, KeyFilter);\n-        }\n+\n+        // We only care about KEY, MASTER_KEY, CRYPTED_KEY, and HDCHAIN types\n+        ssKey >> strType;\n         if (!KeyFilter(strType)) {\n             continue;\n         }\n+        bool fReadOK = false;\n+        if (strType == DBKeys::KEY) {\n+            fReadOK = LoadKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::CRYPTED_KEY) {\n+            fReadOK = LoadCryptedKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::MASTER_KEY) {\n+            fReadOK = LoadEncryptionKey(&dummyWallet, ssKey, ssValue, strErr);\n+        } else if (strType == DBKeys::HDCHAIN) {\n+            fReadOK = LoadHDChain(&dummyWallet, ssValue);\n+        } else {\n+            // This is a bug\n+            CHECK_NONFATAL(false);",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "e9d974b7f4136c04f35091438f5e78e17d77299b",
      "in_reply_to_id": 1210761024,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested.",
      "created_at": "2023-05-31T02:52:09Z",
      "updated_at": "2023-05-31T02:52:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211032152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032186",
      "pull_request_review_id": 1452128658,
      "id": 1211032186,
      "node_id": "PRRC_kwDOABII585ILuJ6",
      "diff_hunk": "@@ -1155,6 +1143,34 @@ static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vecto\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadActiveSPKMs(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load spk records\n+    std::set<std::pair<OutputType, bool>> seen_spks;",
      "path": "src/wallet/walletdb.cpp",
      "position": 1202,
      "original_position": 28,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8a4362f9bcf213164f43395faa164e50aab9363b",
      "in_reply_to_id": 1210777446,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested.",
      "created_at": "2023-05-31T02:52:14Z",
      "updated_at": "2023-05-31T02:52:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1211032186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211032186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1099,
      "original_line": 1099,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233107623",
      "pull_request_review_id": 1484872110,
      "id": 1233107623,
      "node_id": "PRRC_kwDOABII585Jf7qn",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(value, value);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 237,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "0506cc23143064ff4847c34c6a5734df54d661f5",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0506cc23:\r\nThe key nor the value are used here but this should be `(key, value)` instead of `(value, value)`.",
      "created_at": "2023-06-17T18:37:36Z",
      "updated_at": "2023-06-17T18:42:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233107623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233107623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 816,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233118189",
      "pull_request_review_id": 1484885621,
      "id": 1233118189,
      "node_id": "PRRC_kwDOABII585Jf-Pt",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(value, value);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 237,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "0506cc23143064ff4847c34c6a5734df54d661f5",
      "in_reply_to_id": 1233107623,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oops, fixed",
      "created_at": "2023-06-17T19:29:11Z",
      "updated_at": "2023-06-17T19:29:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233118189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233118189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 816,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233294599",
      "pull_request_review_id": 1485113956,
      "id": 1233294599,
      "node_id": "PRRC_kwDOABII585JgpUH",
      "diff_hunk": "@@ -5,6 +5,7 @@\n \n #include <streams.h>\n #include <util/fs.h>\n+#include <util/check.h>",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c729f1143f80c875f110ed5b5b8969ab94f9df24",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c729f114:\r\nSince you removed the `CHECK_NONFATAL` call, this include is no longer needed.",
      "created_at": "2023-06-18T13:32:54Z",
      "updated_at": "2023-06-18T14:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233294599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233294599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233306525",
      "pull_request_review_id": 1485113956,
      "id": 1233306525,
      "node_id": "PRRC_kwDOABII585JgsOd",
      "diff_hunk": "@@ -1008,6 +907,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 192,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c0545c60944a32b7842e28d8d4ab35db4a5c40a3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c0545c6:\r\n\r\nAs the prefix is part of the key, could use a `DataStream` here too.",
      "created_at": "2023-06-18T13:54:02Z",
      "updated_at": "2023-06-18T14:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233306525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233306525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 910,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 778,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233777306",
      "pull_request_review_id": 1485793207,
      "id": 1233777306,
      "node_id": "PRRC_kwDOABII585JifKa",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3814b9a07aba1d1a1a0ef2c4bd470bcb25669db7",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in 3814b9a07aba1d1a1a0ef2c4bd470bcb25669db7:\r\n\r\n\r\nOnly CTransaction uses the legacy serialization code in the wallet, so everything else can just use the slimmed-down version, aka `DataStream`:\r\n\r\n```diff\r\ndiff --git a/src/wallet/walletdb.cpp b/src/wallet/walletdb.cpp\r\nindex a8728b46ce..3958211da8 100644\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -320,7 +320,7 @@ public:\r\n     CWalletScanState() = default;\r\n };\r\n \r\n-bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)\r\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\r\n {\r\n     LOCK(pwallet->cs_wallet);\r\n     try {\r\ndiff --git a/src/wallet/walletdb.h b/src/wallet/walletdb.h\r\nindex 55a36c4722..4228d428fa 100644\r\n--- a/src/wallet/walletdb.h\r\n+++ b/src/wallet/walletdb.h\r\n@@ -306,7 +306,7 @@ using KeyFilterFn = std::function<bool(const std::string&)>;\r\n //! Unserialize a given Key-Value pair and load it into the wallet\r\n bool ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr);\r\n \r\n-bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr);\r\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr);\r\n } // namespace wallet\r\n \r\n #endif // BITCOIN_WALLET_WALLETDB_H\r\n",
      "created_at": "2023-06-19T09:25:24Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233777306",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233777306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 323,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233797043",
      "pull_request_review_id": 1485793207,
      "id": 1233797043,
      "node_id": "PRRC_kwDOABII585Jij-z",
      "diff_hunk": "@@ -386,6 +386,45 @@ bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::str\n     return true;\n }\n \n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "39a7f252699680cd1588be944ef15bff9e5a8157",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Style nit in 39a7f252699680cd1588be944ef15bff9e5a8157:\r\n\r\nSame?",
      "created_at": "2023-06-19T09:40:42Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233797043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233797043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233798168",
      "pull_request_review_id": 1485793207,
      "id": 1233798168,
      "node_id": "PRRC_kwDOABII585JikQY",
      "diff_hunk": "@@ -425,6 +425,33 @@ bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, s\n     return true;\n }\n \n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3f0ab45a08ce33518e5bc275fce5c9f0cb713543",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in 3f0ab45a08ce33518e5bc275fce5c9f0cb713543:\r\n\r\nSame?",
      "created_at": "2023-06-19T09:41:35Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233798168",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233798168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 428,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233799141",
      "pull_request_review_id": 1485793207,
      "id": 1233799141,
      "node_id": "PRRC_kwDOABII585Jikfl",
      "diff_hunk": "@@ -452,6 +452,22 @@ bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue\n     return true;\n }\n \n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b634ac2b8a0a9d33afd32535630a693ccf17f49a",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in b634ac2b8a0a9d33afd32535630a693ccf17f49a:\r\n\r\nSame?",
      "created_at": "2023-06-19T09:42:29Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233799141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233799141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233803845",
      "pull_request_review_id": 1485793207,
      "id": 1233803845,
      "node_id": "PRRC_kwDOABII585JilpF",
      "diff_hunk": "@@ -188,15 +184,22 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\n         DataStream ssKey{row.first};\n         CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c729f1143f80c875f110ed5b5b8969ab94f9df24",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unrelated in c729f1143f80c875f110ed5b5b8969ab94f9df24:\r\n\r\nCan probably switch to `DataStream` here, because `CTransaction` are not read by salvage and the slimmed-down `DataStream` is enough?",
      "created_at": "2023-06-19T09:45:35Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233803845",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233803845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233874240",
      "pull_request_review_id": 1485793207,
      "id": 1233874240,
      "node_id": "PRRC_kwDOABII585Ji21A",
      "diff_hunk": "@@ -477,10 +473,8 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n         // Taking advantage of the fact that pair serialization\n         // is just the two items serialized one after the other\n         ssKey >> strType;\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n         if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n-            return false;\n+            return true;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 1a3e49106ec42506f435d604addf56978ac93765: Maybe add a comment that this was already checked in `LoadLegacyWalletRecords` and is dead code?",
      "created_at": "2023-06-19T10:41:01Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233874240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233874240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 477,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233901761",
      "pull_request_review_id": 1485793207,
      "id": 1233901761,
      "node_id": "PRRC_kwDOABII585Ji9jB",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 277,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 1a3e49106ec42506f435d604addf56978ac93765: Any reason to change this from NONCRITICAL_ERROR to CORRUPT?",
      "created_at": "2023-06-19T11:07:53Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233901761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233901761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909320",
      "pull_request_review_id": 1485793207,
      "id": 1233909320,
      "node_id": "PRRC_kwDOABII585Ji_ZI",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 276,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in https://github.com/bitcoin/bitcoin/commit/1a3e49106ec42506f435d604addf56978ac93765: Any reason to change this from `strErr` to `err` when the code is only supposed to be moved? Also, any reason to add two `\\n\\n`, when one is sufficient and was used previously?",
      "created_at": "2023-06-19T11:15:27Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233909320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 855,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909412",
      "pull_request_review_id": 1485793207,
      "id": 1233909412,
      "node_id": "PRRC_kwDOABII585Ji_ak",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 317,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in https://github.com/bitcoin/bitcoin/commit/1a3e49106ec42506f435d604addf56978ac93765: Any reason to change this from `strErr` to `err` when the code is only supposed to be moved? Also, any reason to add two `\\n\\n`, when one is sufficient and was used previously?",
      "created_at": "2023-06-19T11:15:34Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233909412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909559",
      "pull_request_review_id": 1485793207,
      "id": 1233909559,
      "node_id": "PRRC_kwDOABII585Ji_c3",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 327,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in https://github.com/bitcoin/bitcoin/commit/1a3e49106ec42506f435d604addf56978ac93765: Any reason to change this from `strErr` to `err` when the code is only supposed to be moved? Also, any reason to add two `\\n\\n`, when one is sufficient and was used previously?",
      "created_at": "2023-06-19T11:15:43Z",
      "updated_at": "2023-06-19T12:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233909559",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909732",
      "pull_request_review_id": 1485793207,
      "id": 1233909732,
      "node_id": "PRRC_kwDOABII585Ji_fk",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 331,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in https://github.com/bitcoin/bitcoin/commit/1a3e49106ec42506f435d604addf56978ac93765: Any reason to change this from `strErr` to `err` when the code is only supposed to be moved? Also, any reason to add two `\\n\\n`, when one is sufficient and was used previously?",
      "created_at": "2023-06-19T11:15:50Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233909732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 910,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909811",
      "pull_request_review_id": 1485793207,
      "id": 1233909811,
      "node_id": "PRRC_kwDOABII585Ji_gz",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 335,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in https://github.com/bitcoin/bitcoin/commit/1a3e49106ec42506f435d604addf56978ac93765: Any reason to change this from `strErr` to `err` when the code is only supposed to be moved? Also, any reason to add two `\\n\\n`, when one is sufficient and was used previously?",
      "created_at": "2023-06-19T11:15:56Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233909811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909956",
      "pull_request_review_id": 1485793207,
      "id": 1233909956,
      "node_id": "PRRC_kwDOABII585Ji_jE",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 339,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in https://github.com/bitcoin/bitcoin/commit/1a3e49106ec42506f435d604addf56978ac93765: Any reason to change this from `strErr` to `err` when the code is only supposed to be moved? Also, any reason to add two `\\n\\n`, when one is sufficient and was used previously?",
      "created_at": "2023-06-19T11:16:01Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233909956",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233909956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 918,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233938051",
      "pull_request_review_id": 1485793207,
      "id": 1233938051,
      "node_id": "PRRC_kwDOABII585JjGaD",
      "diff_hunk": "@@ -1008,6 +907,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &spk_man] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 291,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c0545c60944a32b7842e28d8d4ab35db4a5c40a3",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c0545c60944a32b7842e28d8d4ab35db4a5c40a3: Double newline?",
      "created_at": "2023-06-19T11:41:28Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233938051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233938051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233938150",
      "pull_request_review_id": 1485793207,
      "id": 1233938150,
      "node_id": "PRRC_kwDOABII585JjGbm",
      "diff_hunk": "@@ -1008,6 +907,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &spk_man] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+            CKey privkey;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            value >> pkey;\n+            value >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 309,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c0545c60944a32b7842e28d8d4ab35db4a5c40a3",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c0545c60944a32b7842e28d8d4ab35db4a5c40a3: Double newline?",
      "created_at": "2023-06-19T11:41:34Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233938150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233938150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233938233",
      "pull_request_review_id": 1485793207,
      "id": 1233938233,
      "node_id": "PRRC_kwDOABII585JjGc5",
      "diff_hunk": "@@ -1008,6 +907,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &spk_man] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+            CKey privkey;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            value >> pkey;\n+            value >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\\n\";\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            if (!privkey.Load(pkey, pubkey, true))\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 315,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c0545c60944a32b7842e28d8d4ab35db4a5c40a3",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c0545c60944a32b7842e28d8d4ab35db4a5c40a3: Double newline?",
      "created_at": "2023-06-19T11:41:39Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233938233",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233938233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1038,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233948344",
      "pull_request_review_id": 1485793207,
      "id": 1233948344,
      "node_id": "PRRC_kwDOABII585JjI64",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": 492,
      "original_position": 256,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1a3e49106ec42506f435d604addf56978ac93765: Should probably mention in the commit description that a `std::exception` in this function will now lead to early-return, where previously it was caught?",
      "created_at": "2023-06-19T11:51:54Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233948344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233948344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 565,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233949251",
      "pull_request_review_id": 1485793207,
      "id": 1233949251,
      "node_id": "PRRC_kwDOABII585JjJJD",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": 492,
      "original_position": 256,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233948344,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Same for all other functions with the same issue)",
      "created_at": "2023-06-19T11:52:47Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233949251",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233949251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 565,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233952225",
      "pull_request_review_id": 1485793207,
      "id": 1233952225,
      "node_id": "PRRC_kwDOABII585JjJ3h",
      "diff_hunk": "@@ -1104,12 +1050,98 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3c616521b4f554cd391dfdf4be1be7a76f128a92",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3c616521b4f554cd391dfdf4be1be7a76f128a92: double `\\n`?",
      "created_at": "2023-06-19T11:55:44Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233952225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233952225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1073,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233961079",
      "pull_request_review_id": 1485793207,
      "id": 1233961079,
      "node_id": "PRRC_kwDOABII585JjMB3",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1a3e49106ec42506f435d604addf56978ac93765: Given that m_error is ignored if the return value is not CORRUPT, maybe rename the error string in all load functions to `err_corrupt`?",
      "created_at": "2023-06-19T12:04:46Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233961079",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233961079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233963336",
      "pull_request_review_id": 1485793207,
      "id": 1233963336,
      "node_id": "PRRC_kwDOABII585JjMlI",
      "diff_hunk": "@@ -1135,6 +1121,34 @@ static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vecto\n     return DBErrors::LOAD_OK;\n }\n \n+static DBErrors LoadActiveSPKMs(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load spk records\n+    std::set<std::pair<OutputType, bool>> seen_spks;\n+    for (auto& spk_key : {DBKeys::ACTIVEEXTERNALSPK, DBKeys::ACTIVEINTERNALSPK}) {\n+        LoadResult spkm_res = LoadRecords(pwallet, batch, spk_key,\n+            [&seen_spks, &spk_key] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint8_t output_type;\n+            key >> output_type;\n+            uint256 id;\n+            value >> id;\n+\n+            bool internal = spk_key == DBKeys::ACTIVEINTERNALSPK;\n+            auto [it, insert] = seen_spks.emplace(static_cast<OutputType>(output_type), internal);\n+            if (!insert) {\n+                err = \"Multiple ScriptpubKeyMans specified for a single type\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "72741608e0f5fa155374d8e948712b0ac6462b1d",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "72741608e0f5fa155374d8e948712b0ac6462b1d: double `\\n`?",
      "created_at": "2023-06-19T12:07:00Z",
      "updated_at": "2023-06-19T12:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233963336",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233963336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233972575",
      "pull_request_review_id": 1486089856,
      "id": 1233972575,
      "node_id": "PRRC_kwDOABII585JjO1f",
      "diff_hunk": "@@ -477,10 +473,8 @@ ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n         // Taking advantage of the fact that pair serialization\n         // is just the two items serialized one after the other\n         ssKey >> strType;\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n         if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n-            return false;\n+            return true;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233874240,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nvm, this can be closed, because the code is removed anyway in a later commit",
      "created_at": "2023-06-19T12:14:31Z",
      "updated_at": "2023-06-19T12:14:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1233972575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233972575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 477,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234288836",
      "pull_request_review_id": 1486589896,
      "id": 1234288836,
      "node_id": "PRRC_kwDOABII585JkcDE",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3814b9a07aba1d1a1a0ef2c4bd470bcb25669db7",
      "in_reply_to_id": 1233777306,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-19T17:03:58Z",
      "updated_at": "2023-06-19T17:03:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234288836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234288836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 323,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234288877",
      "pull_request_review_id": 1486589964,
      "id": 1234288877,
      "node_id": "PRRC_kwDOABII585JkcDt",
      "diff_hunk": "@@ -386,6 +386,45 @@ bool LoadKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::str\n     return true;\n }\n \n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "39a7f252699680cd1588be944ef15bff9e5a8157",
      "in_reply_to_id": 1233797043,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-19T17:04:02Z",
      "updated_at": "2023-06-19T17:04:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234288877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234288877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234288913",
      "pull_request_review_id": 1486590019,
      "id": 1234288913,
      "node_id": "PRRC_kwDOABII585JkcER",
      "diff_hunk": "@@ -425,6 +425,33 @@ bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, s\n     return true;\n }\n \n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3f0ab45a08ce33518e5bc275fce5c9f0cb713543",
      "in_reply_to_id": 1233798168,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-19T17:04:05Z",
      "updated_at": "2023-06-19T17:04:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234288913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234288913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 428,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234288942",
      "pull_request_review_id": 1486590106,
      "id": 1234288942,
      "node_id": "PRRC_kwDOABII585JkcEu",
      "diff_hunk": "@@ -452,6 +452,22 @@ bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue\n     return true;\n }\n \n+bool LoadHDChain(CWallet* pwallet, CDataStream& ssValue, std::string& strErr)",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b634ac2b8a0a9d33afd32535630a693ccf17f49a",
      "in_reply_to_id": 1233799141,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-19T17:04:09Z",
      "updated_at": "2023-06-19T17:04:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234288942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234288942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289014",
      "pull_request_review_id": 1486590277,
      "id": 1234289014,
      "node_id": "PRRC_kwDOABII585JkcF2",
      "diff_hunk": "@@ -188,15 +184,22 @@ bool RecoverDatabaseFile(const ArgsManager& args, const fs::path& file_path, bil\n         DataStream ssKey{row.first};\n         CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c729f1143f80c875f110ed5b5b8969ab94f9df24",
      "in_reply_to_id": 1233803845,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-19T17:04:16Z",
      "updated_at": "2023-06-19T17:04:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289115",
      "pull_request_review_id": 1486590448,
      "id": 1234289115,
      "node_id": "PRRC_kwDOABII585JkcHb",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 277,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233901761,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, changed back",
      "created_at": "2023-06-19T17:04:27Z",
      "updated_at": "2023-06-19T17:04:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289169",
      "pull_request_review_id": 1486590532,
      "id": 1234289169,
      "node_id": "PRRC_kwDOABII585JkcIR",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 276,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233909320,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, changed back",
      "created_at": "2023-06-19T17:04:31Z",
      "updated_at": "2023-06-19T17:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289169",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 855,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289217",
      "pull_request_review_id": 1486590603,
      "id": 1234289217,
      "node_id": "PRRC_kwDOABII585JkcJB",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 317,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233909412,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, changed back",
      "created_at": "2023-06-19T17:04:35Z",
      "updated_at": "2023-06-19T17:04:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289248",
      "pull_request_review_id": 1486590671,
      "id": 1234289248,
      "node_id": "PRRC_kwDOABII585JkcJg",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 327,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233909559,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, changed back",
      "created_at": "2023-06-19T17:04:40Z",
      "updated_at": "2023-06-19T17:04:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289285",
      "pull_request_review_id": 1486590781,
      "id": 1234289285,
      "node_id": "PRRC_kwDOABII585JkcKF",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 331,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233909732,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, changed back",
      "created_at": "2023-06-19T17:04:44Z",
      "updated_at": "2023-06-19T17:04:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 910,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289354",
      "pull_request_review_id": 1486590852,
      "id": 1234289354,
      "node_id": "PRRC_kwDOABII585JkcLK",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 335,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233909811,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, changed back",
      "created_at": "2023-06-19T17:04:48Z",
      "updated_at": "2023-06-19T17:04:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289395",
      "pull_request_review_id": 1486590926,
      "id": 1234289395,
      "node_id": "PRRC_kwDOABII585JkcLz",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            err = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\\n\";\n+            return DBErrors::CORRUPT;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        err = \"Error reading wallet database: keymeta with invalid HD keypath\\n\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    err = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    err = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 339,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233909956,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, changed back",
      "created_at": "2023-06-19T17:04:52Z",
      "updated_at": "2023-06-19T17:04:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 918,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289554",
      "pull_request_review_id": 1486591166,
      "id": 1234289554,
      "node_id": "PRRC_kwDOABII585JkcOS",
      "diff_hunk": "@@ -1008,6 +907,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        CDataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &spk_man] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                err = \"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 291,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c0545c60944a32b7842e28d8d4ab35db4a5c40a3",
      "in_reply_to_id": 1233938051,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done here and elsewhere.",
      "created_at": "2023-06-19T17:05:08Z",
      "updated_at": "2023-06-19T17:05:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289554",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289958",
      "pull_request_review_id": 1486591820,
      "id": 1234289958,
      "node_id": "PRRC_kwDOABII585JkcUm",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": 492,
      "original_position": 256,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233948344,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-19T17:05:53Z",
      "updated_at": "2023-06-19T17:05:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234289958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234289958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 565,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234290069",
      "pull_request_review_id": 1486592005,
      "id": 1234290069,
      "node_id": "PRRC_kwDOABII585JkcWV",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233961079,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed",
      "created_at": "2023-06-19T17:06:04Z",
      "updated_at": "2023-06-19T17:06:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234290069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234290069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234471331",
      "pull_request_review_id": 1486913526,
      "id": 1234471331,
      "node_id": "PRRC_kwDOABII585JlImj",
      "diff_hunk": "@@ -5,6 +5,7 @@\n \n #include <streams.h>\n #include <util/fs.h>\n+#include <util/check.h>",
      "path": "src/wallet/salvage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c729f1143f80c875f110ed5b5b8969ab94f9df24",
      "in_reply_to_id": 1233294599,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-19T20:52:42Z",
      "updated_at": "2023-06-19T20:52:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234471331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234471331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234471357",
      "pull_request_review_id": 1486913573,
      "id": 1234471357,
      "node_id": "PRRC_kwDOABII585JlIm9",
      "diff_hunk": "@@ -1008,6 +907,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static CDataStream PrefixStream(const Args&... args)\n+{\n+    CDataStream prefix(0, 0);\n+    SerializeMany(prefix, args...);\n+    return prefix;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 192,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c0545c60944a32b7842e28d8d4ab35db4a5c40a3",
      "in_reply_to_id": 1233306525,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-19T20:52:46Z",
      "updated_at": "2023-06-19T20:52:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234471357",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234471357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 910,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 778,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234566557",
      "pull_request_review_id": 1487056400,
      "id": 1234566557,
      "node_id": "PRRC_kwDOABII585Jlf2d",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233961079,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> [1a3e491](https://github.com/bitcoin/bitcoin/commit/1a3e49106ec42506f435d604addf56978ac93765): Given that m_error is ignored if the return value is not CORRUPT, maybe rename the error string in all load functions to `err_corrupt`?\r\n\r\nThat is actually a bug. We should continue logging non-critical errors too. Which, as far as can see, are only for legacy records: `KEYMETA` and `CSCRIPT`.\r\n\r\nMade a quick test to verify it. It passes on master, and fails on this branch.\r\n\r\n```diff\r\n+#include <test/util/logging.h>\r\n #include <wallet/test/util.h>\r\n #include <wallet/wallet.h>\r\n #include <test/util/setup_common.h>\r\n@@ -178,5 +179,38 @@\r\n     }\r\n }\r\n \r\n+BOOST_FIXTURE_TEST_CASE(wallet_load_keymeta_noncritical_error, TestingSetup)\r\n+{\r\n+    // Verify that non-critical errors al logged too.\r\n+    bool found = false;\r\n+    DebugLogHelper logHelper(\"Error reading wallet database: keymeta with invalid HD keypath\", [&](const std::string* s) {\r\n+        found = true;\r\n+        return false;\r\n+    });\r\n+\r\n+    std::unique_ptr<WalletDatabase> database = CreateMockableWalletDatabase();\r\n+    {\r\n+        // Write key meta with invalid HD keypath\r\n+        WalletBatch batch(*database, false);\r\n+\r\n+        CKey key;\r\n+        key.MakeNewKey(true);\r\n+        CPubKey pubkey = key.GetPubKey();\r\n+\r\n+        CKeyMetadata meta;\r\n+        meta.nVersion = CKeyMetadata::VERSION_WITH_HDDATA;\r\n+        meta.hd_seed_id = pubkey.GetID();\r\n+        meta.hdKeypath = \"a\";\r\n+        BOOST_CHECK(batch.WriteKeyMetadata(meta, pubkey, /*overwrite=*/true));\r\n+    }\r\n+\r\n+    {\r\n+        // Now try to load the wallet and verify the non-critical error and the logging\r\n+        const std::shared_ptr<CWallet> wallet(new CWallet(m_node.chain.get(), \"\", std::move(database)));\r\n+        BOOST_CHECK_EQUAL(wallet->LoadWallet(), DBErrors::NONCRITICAL_ERROR);\r\n+        BOOST_CHECK(found);\r\n+    }\r\n+}\r\n+\r\n BOOST_AUTO_TEST_SUITE_END()\r\n } // namespace wallet\r\n\r\n```",
      "created_at": "2023-06-20T00:14:53Z",
      "updated_at": "2023-06-20T00:15:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234566557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234566557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234911044",
      "pull_request_review_id": 1487577880,
      "id": 1234911044,
      "node_id": "PRRC_kwDOABII585Jmz9E",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233961079,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, thanks, just realized that my suggestion was wrong, too.\r\n\r\nThere was a\r\n\r\n```cpp\r\n            if (!strErr.empty())\r\n                pwallet->WalletLogPrintf(\"%s\\n\", strErr);\r\n```\r\n\r\nin the old code",
      "created_at": "2023-06-20T08:18:35Z",
      "updated_at": "2023-06-20T08:18:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234911044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234911044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234918176",
      "pull_request_review_id": 1487596884,
      "id": 1234918176,
      "node_id": "PRRC_kwDOABII585Jm1sg",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_err_corrupt{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_err_corrupt))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_err_corrupt);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    strErr = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 339,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "4336764a320352a4b06698edca3f5841c0851b2c",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 4336764a320352a4b06698edca3f5841c0851b2c: double `\\n` for the 4 `strErr` here?",
      "created_at": "2023-06-20T08:24:19Z",
      "updated_at": "2023-06-20T08:34:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234918176",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234918176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 906,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 918,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234927389",
      "pull_request_review_id": 1487596884,
      "id": 1234927389,
      "node_id": "PRRC_kwDOABII585Jm38d",
      "diff_hunk": "@@ -1008,6 +907,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static DataStream PrefixStream(const Args&... args)\n+{\n+    DataStream prefix;\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);\n+            return DBErrors::UNKNOWN_DESCRIPTOR;\n+        }\n+        pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+\n+        DescriptorCache cache;\n+\n+        // Get key cache for this descriptor\n+        DataStream prefix = PrefixStream(DBKeys::WALLETDESCRIPTORCACHE, id);\n+        LoadResult key_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                key >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (parent) {\n+                cache.CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                cache.CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, key_cache_res.m_result);\n+\n+        // Get last hardened cache for this descriptor\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORLHCACHE, id);\n+        LoadResult lh_cache_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORLHCACHE, prefix,\n+            [&id, &cache] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            value >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            cache.CacheLastHardenedExtPubKey(key_exp_index, xpub);\n+            return DBErrors::LOAD_OK;\n+        });\n+        result = std::max(result, lh_cache_res.m_result);\n+\n+        // Set the cache for this descriptor\n+        auto spk_man = (DescriptorScriptPubKeyMan*)pwallet->GetScriptPubKeyMan(id);\n+        assert(spk_man);\n+        spk_man->SetCache(cache);\n+\n+        // Get unencrypted keys\n+        prefix = PrefixStream(DBKeys::WALLETDESCRIPTORKEY, id);\n+        LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTORKEY, prefix,\n+            [&id, &spk_man] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            key >> desc_id;\n+            assert(desc_id == id);\n+            key >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: descriptor unencrypted key CPubKey corrupt\";\n+                return DBErrors::CORRUPT;\n+            }\n+            CKey privkey;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            value >> pkey;\n+            value >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                strErr = \"Error reading wallet database: descriptor unencrypted key CPubKey/CPrivKey corrupt\";\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            if (!privkey.Load(pkey, pubkey, true))\n+            {\n+                strErr = \"Error reading wallet database: descriptor unencrypted key CPrivKey corrupt\\n\";",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 315,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "643859ecc289885ed5f0ba67608aa69691724f46",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "643859ecc289885ed5f0ba67608aa69691724f46: double `\\n`?",
      "created_at": "2023-06-20T08:31:33Z",
      "updated_at": "2023-06-20T08:34:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234927389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234927389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 883,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234944924",
      "pull_request_review_id": 1487636683,
      "id": 1234944924,
      "node_id": "PRRC_kwDOABII585Jm8Oc",
      "diff_hunk": "@@ -1008,6 +907,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static DataStream PrefixStream(const Args&... args)\n+{\n+    DataStream prefix;\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 216,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "643859ecc289885ed5f0ba67608aa69691724f46",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "643859ecc289885ed5f0ba67608aa69691724f46: Depending on how you fix the logging feedback in the other comment, this will either log twice, or you'll have to avoid setting `err`. (Which should have been called `strErr`, if you want it to be set and be move-only.)",
      "created_at": "2023-06-20T08:45:33Z",
      "updated_at": "2023-06-20T08:45:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1234944924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234944924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235077148",
      "pull_request_review_id": 1487841581,
      "id": 1235077148,
      "node_id": "PRRC_kwDOABII585Jncgc",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": 492,
      "original_position": 256,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233948344,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, I think my suggestion was wrong. Behaviour shouldn't be changed because previously exceptions were caught outside the `try { while(1) ReadKeyValue(); } catch (...)`, so an exception would result in early return previously. The same is true after, because the `while (1) ReadyKeyValue()` is simply replaced by `LoadRecords`, which remains in the same `try-catch`.",
      "created_at": "2023-06-20T10:39:52Z",
      "updated_at": "2023-06-20T10:39:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235077148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235077148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 565,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235086722",
      "pull_request_review_id": 1487856015,
      "id": 1235086722,
      "node_id": "PRRC_kwDOABII585Jne2C",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 7be10adff36c0dc49ae56ac571bb033cba7a565b: Can you explain why it is ok to put the try-catch here, where it previously wasn't? It looks like this will cause `ReadKeyValue` to not break out of the while-loop and instead continue?",
      "created_at": "2023-06-20T10:49:12Z",
      "updated_at": "2023-06-20T10:52:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235086722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235086722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235087756",
      "pull_request_review_id": 1487856015,
      "id": 1235087756,
      "node_id": "PRRC_kwDOABII585JnfGM",
      "diff_hunk": "@@ -386,6 +386,45 @@ bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::stri\n     return true;\n }\n \n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 204,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "3ccde4599b5150577400c4fa9029f4146617f751",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3ccde4599b5150577400c4fa9029f4146617f751:Same\r\n",
      "created_at": "2023-06-20T10:50:13Z",
      "updated_at": "2023-06-20T10:51:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235087756",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235087756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 370,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235088141",
      "pull_request_review_id": 1487856015,
      "id": 1235088141,
      "node_id": "PRRC_kwDOABII585JnfMN",
      "diff_hunk": "@@ -425,6 +425,33 @@ bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, st\n     return true;\n }\n \n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 252,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "72c2a54ebb99fa3d91d7d15bd8a38a8d16e0ea6c",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "72c2a54ebb99fa3d91d7d15bd8a38a8d16e0ea6c:Same?",
      "created_at": "2023-06-20T10:50:31Z",
      "updated_at": "2023-06-20T10:51:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235088141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235088141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 409,
      "original_line": 431,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235089021",
      "pull_request_review_id": 1487856015,
      "id": 1235089021,
      "node_id": "PRRC_kwDOABII585JnfZ9",
      "diff_hunk": "@@ -452,6 +452,22 @@ bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue,\n     return true;\n }\n \n+bool LoadHDChain(CWallet* pwallet, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 286,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "ad779e9ece9829677c1735d8865f14b23459da80",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/commit/ad779e9ece9829677c1735d8865f14b23459da80 : Same?",
      "created_at": "2023-06-20T10:51:16Z",
      "updated_at": "2023-06-20T10:51:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235089021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235089021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 436,
      "original_line": 458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235341930",
      "pull_request_review_id": 1488272524,
      "id": 1235341930,
      "node_id": "PRRC_kwDOABII585JodJq",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235086722\r\n\r\n> in [7be10ad](https://github.com/bitcoin/bitcoin/commit/7be10adff36c0dc49ae56ac571bb033cba7a565b): Can you explain why it is ok to put the try-catch here, where it previously wasn't? It looks like this will cause `ReadKeyValue` to not break out of the while-loop and instead continue?\r\n\r\nIIUC, it is ok to catch this exception here because the same exception was also caught previously at the bottom of the ReadKeyValue function here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/7be10adff36c0dc49ae56ac571bb033cba7a565b/src/wallet/walletdb.cpp#L781\r\n\r\nand in both cases the exception handler just cause the ReadKeyValue function to just return false. There should be no case when an exception reading one key would cause ReadKeyValue function to throw and break out of the while loop in WalletBatch::LoadWallet. The [`catch (...)`](https://github.com/bitcoin/bitcoin/blob/7be10adff36c0dc49ae56ac571bb033cba7a565b/src/wallet/walletdb.cpp#L920) line around the while loop can catch exceptions, but not ones from `ReadKeyValue`",
      "created_at": "2023-06-20T14:18:06Z",
      "updated_at": "2023-06-20T14:18:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235341930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235341930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235579092",
      "pull_request_review_id": 1488644140,
      "id": 1235579092,
      "node_id": "PRRC_kwDOABII585JpXDU",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "1a3e49106ec42506f435d604addf56978ac93765",
      "in_reply_to_id": 1233961079,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed this to check for `!= LOAD_OK` rather than just `CORRUPT`.",
      "created_at": "2023-06-20T17:22:07Z",
      "updated_at": "2023-06-20T17:22:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235579092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235579092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235579212",
      "pull_request_review_id": 1488644313,
      "id": 1235579212,
      "node_id": "PRRC_kwDOABII585JpXFM",
      "diff_hunk": "@@ -855,6 +751,263 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_err_corrupt{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_err_corrupt))) == DBErrors::CORRUPT) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_err_corrupt);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    strErr = \"Error reading wallet database: keymeta found with unexpected path\\n\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\\n\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\\n\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\\n\", path[2]);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 339,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "4336764a320352a4b06698edca3f5841c0851b2c",
      "in_reply_to_id": 1234918176,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-20T17:22:14Z",
      "updated_at": "2023-06-20T17:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235579212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235579212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 906,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 918,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235581062",
      "pull_request_review_id": 1488646393,
      "id": 1235581062,
      "node_id": "PRRC_kwDOABII585JpXiG",
      "diff_hunk": "@@ -1008,6 +907,175 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     return result;\n }\n \n+template<typename... Args>\n+static DataStream PrefixStream(const Args&... args)\n+{\n+    DataStream prefix;\n+    SerializeMany(prefix, args...);\n+    return prefix;\n+}\n+\n+static DBErrors LoadDescriptorWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+\n+    // Load descriptor record\n+    int num_keys = 0;\n+    int num_ckeys= 0;\n+    LoadResult desc_res = LoadRecords(pwallet, batch, DBKeys::WALLETDESCRIPTOR,\n+        [&batch, &num_keys, &num_ckeys, &last_client] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+\n+        uint256 id;\n+        key >> id;\n+        WalletDescriptor desc;\n+        try {\n+            value >> desc;\n+        } catch (const std::ios_base::failure&) {\n+            err = strprintf(\"Error: Unrecognized descriptor found in wallet %s. \", pwallet->GetName());\n+            err += (last_client > CLIENT_VERSION) ? \"The wallet might had been created on a newer version. \" :\n+                    \"The database might be corrupted or the software version is not compatible with one of your wallet descriptors. \";\n+            err += \"Please try running the latest software version\";\n+            pwallet->WalletLogPrintf(\"%s\\n\", err);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 216,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "643859ecc289885ed5f0ba67608aa69691724f46",
      "in_reply_to_id": 1234944924,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed this log to let `LoadRecords` log it.",
      "created_at": "2023-06-20T17:23:12Z",
      "updated_at": "2023-06-20T17:23:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1235581062",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235581062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1236908562",
      "pull_request_review_id": 1490595441,
      "id": 1236908562,
      "node_id": "PRRC_kwDOABII585JuboS",
      "diff_hunk": "@@ -792,6 +782,25 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    CPubKey default_pubkey;\n+    if (batch.Read(DBKeys::DEFAULTKEY, default_pubkey) && !default_pubkey.IsValid()) {\n+        pwallet->WalletLogPrintf(\"Error reading wallet database: Default Key corrupt\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    // \"wkey\" records are unsupported, if we see any, throw an error\n+    LoadResult wkey_res = LoadRecords(pwallet, batch, DBKeys::OLD_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        pwallet->WalletLogPrintf(\"Found unsupported 'wkey' record, try loading with version 0.18\\n\");\n+        return DBErrors::LOAD_FAIL;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "80ccced2b6309c5d0afcc1aee982f72b5e38e118",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could remove the logging and let `LoadRecords` log it:\r\n```c++\r\nerr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\r\nreturn DBErrors::LOAD_FAIL;\r\n```",
      "created_at": "2023-06-21T12:19:47Z",
      "updated_at": "2023-06-21T12:27:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1236908562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1236908562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 798,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237378924",
      "pull_request_review_id": 1491373838,
      "id": 1237378924,
      "node_id": "PRRC_kwDOABII585JwOds",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I see. Though, that probably means that the lambdas which were created from move-only code from `ReadKeyValue` are now no longer covered by the `catch(const std::exception&)` and `catch(...)` in `ReadKeyValue`?",
      "created_at": "2023-06-21T17:53:19Z",
      "updated_at": "2023-06-21T17:53:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237378924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237378924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237398297",
      "pull_request_review_id": 1491405889,
      "id": 1237398297,
      "node_id": "PRRC_kwDOABII585JwTMZ",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This has a bunch of consequences, for example a corrupt address book entry will now result in `Wallet corrupted` and the error string `All keys read correctly, but transaction data or address book entries might be missing or incorrect.` is now incorrect, or at least can no longer be hit with a corrupt address book entry.",
      "created_at": "2023-06-21T18:12:43Z",
      "updated_at": "2023-06-21T18:12:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237398297",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237398297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237410970",
      "pull_request_review_id": 1491425932,
      "id": 1237410970,
      "node_id": "PRRC_kwDOABII585JwWSa",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This has a bunch of consequences, for example a corrupt address book entry will now result in `Wallet corrupted` and the error string `All keys read correctly, but transaction data or address book entries might be missing or incorrect.` is now incorrect, or at least can no longer be hit with a corrupt address book entry.\r\n\r\nI think it's preferable to treat all corruption errors as critical and fail to load the wallet. We can then loosen these over time. I think that would be better and easier than trying to reverse engineer when and what errors we would previously return.",
      "created_at": "2023-06-21T18:23:07Z",
      "updated_at": "2023-06-21T18:23:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237410970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237410970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237427105",
      "pull_request_review_id": 1491452793,
      "id": 1237427105,
      "node_id": "PRRC_kwDOABII585JwaOh",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think it's preferable to treat all corruption errors as critical and fail to load the wallet. We can then loosen these over time.\r\n\r\nThis sounds good, but it would be good to say this explicitly in a code comment so it is clear what code is trying to do. It would also be good to update the error string if it is no longer accurate, and to describe in commit messages what behavior is changing, so we can know what changes are intended.",
      "created_at": "2023-06-21T18:36:23Z",
      "updated_at": "2023-06-21T18:36:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237427105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237427105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237443202",
      "pull_request_review_id": 1491478515,
      "id": 1237443202,
      "node_id": "PRRC_kwDOABII585JweKC",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237398297\r\n\r\n> This has a bunch of consequences, for example a corrupt address book entry will now result in `Wallet corrupted` [...]\r\n\r\nGreat catch! I didn't realize that when I was reviewing.\r\n\r\nI think it actually would be preferable to just keep old behavior if that's easily possible, so it doesn't prevent loading wallets which previously just triggered warnings. But I can also see the case for being more strict. I mainly think if behavior is going to change, intent should clearly be documented in the code, and commit message should mention the change. Current commit eddfbcab498a8af200e006aef23fa43ad7c712cb \"walletdb: refactor address book loading\" description makes it seem like there is no change",
      "created_at": "2023-06-21T18:49:54Z",
      "updated_at": "2023-06-21T18:49:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237443202",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237443202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237469767",
      "pull_request_review_id": 1491515989,
      "id": 1237469767,
      "node_id": "PRRC_kwDOABII585JwkpH",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed a few commit messages to mention the change of behavior in exception handling. Also added a comment at the `catch (...)` in `LoadWallet`, and a commit that updates the non-critical errors string to better represent the kinds of things that can hit it.",
      "created_at": "2023-06-21T19:00:41Z",
      "updated_at": "2023-06-21T19:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237469767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237469767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237540729",
      "pull_request_review_id": 1491611944,
      "id": 1237540729,
      "node_id": "PRRC_kwDOABII585Jw195",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it also make sense to add release notes to say that some wallets which previously had corrupt records won't be loaded by the new release? I could imagine panicking if a wallet that previously loaded with warnings no longer loaded, so release notes could clarify or say what to do. This is assuming affected wallets were usable before though..",
      "created_at": "2023-06-21T19:12:59Z",
      "updated_at": "2023-06-21T19:12:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237540729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237540729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237590407",
      "pull_request_review_id": 1491689839,
      "id": 1237590407,
      "node_id": "PRRC_kwDOABII585JxCGH",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Would it also make sense to add release notes to say that some wallets which previously had corrupt records won't be loaded by the new release? I could imagine panicking if a wallet that previously loaded with warnings no longer loaded, so release notes could clarify or say what to do. This is assuming affected wallets were usable before though..\r\n\r\nPerhaps, but enumerating what failures result in which error messages is looking to be quite a non-trivial task for me. Looking at it more closely, I think that actually there's a lot of things that we would have said are non-critical errors but really should be critical, such as corrupted watchonly scripts and keys. These are things that would most definitely result in incorrect balances, but I think we would have allowed loading the wallet anyways. I think the wallet corruption error is a good enough message that people will open issues if they run into it, but I don't think we'll really see any of those since I think several of these should be causing actual other problems.",
      "created_at": "2023-06-21T19:32:31Z",
      "updated_at": "2023-06-21T19:32:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237590407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237590407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237598650",
      "pull_request_review_id": 1491702889,
      "id": 1237598650,
      "node_id": "PRRC_kwDOABII585JxEG6",
      "diff_hunk": "@@ -792,6 +782,25 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    CPubKey default_pubkey;\n+    if (batch.Read(DBKeys::DEFAULTKEY, default_pubkey) && !default_pubkey.IsValid()) {\n+        pwallet->WalletLogPrintf(\"Error reading wallet database: Default Key corrupt\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    // \"wkey\" records are unsupported, if we see any, throw an error\n+    LoadResult wkey_res = LoadRecords(pwallet, batch, DBKeys::OLD_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        pwallet->WalletLogPrintf(\"Found unsupported 'wkey' record, try loading with version 0.18\\n\");\n+        return DBErrors::LOAD_FAIL;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "80ccced2b6309c5d0afcc1aee982f72b5e38e118",
      "in_reply_to_id": 1236908562,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-21T19:40:26Z",
      "updated_at": "2023-06-21T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237598650",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237598650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 798,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237635438",
      "pull_request_review_id": 1491764711,
      "id": 1237635438,
      "node_id": "PRRC_kwDOABII585JxNFu",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Perhaps, but enumerating what failures result in which error messages is looking to be quite a non-trivial task for me\r\n\r\nThat's understandable. I just meant a general release note like \"Wallet database loading has changed in this new release, and wallets that could previously be loaded but had some corrupt records no may no longer load. If this happens it is recommended to load the wallet in the previous version of the software and import data into a new wallet, or report an issue.\" Idea would be to make it clear this is behavior we're aware of and not something to panic over.",
      "created_at": "2023-06-21T20:19:45Z",
      "updated_at": "2023-06-21T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237635438",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237635438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237652943",
      "pull_request_review_id": 1491797881,
      "id": 1237652943,
      "node_id": "PRRC_kwDOABII585JxRXP",
      "diff_hunk": "@@ -320,6 +320,72 @@ class CWalletScanState {\n     CWalletScanState() = default;\n };\n \n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {",
      "path": "src/wallet/walletdb.cpp",
      "position": 41,
      "original_position": 7,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7be10adff36c0dc49ae56ac571bb033cba7a565b",
      "in_reply_to_id": 1235086722,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a release note.",
      "created_at": "2023-06-21T20:33:38Z",
      "updated_at": "2023-06-21T20:33:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1237652943",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237652943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238395678",
      "pull_request_review_id": 1492981592,
      "id": 1238395678,
      "node_id": "PRRC_kwDOABII585J0Gse",
      "diff_hunk": "@@ -297,426 +298,573 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-    bool unexpected_legacy_entry{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n-        }\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n             return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string purpose_str;\n-            ssValue >> purpose_str;\n-            std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n-            if (!purpose) {\n-                pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n-            }\n-            pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CHDChain chain;\n+        ssValue >> chain;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, DataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    Assume(!prefix.empty());\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 390,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Pretty sure this will re-log the same message in a loop (for the number of records), if the first record logged?",
      "created_at": "2023-06-22T11:28:39Z",
      "updated_at": "2023-06-22T11:28:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238395678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238395678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 508,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238414993",
      "pull_request_review_id": 1493011039,
      "id": 1238414993,
      "node_id": "PRRC_kwDOABII585J0LaR",
      "diff_hunk": "@@ -297,426 +298,573 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-    bool unexpected_legacy_entry{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n-        }\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n             return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string purpose_str;\n-            ssValue >> purpose_str;\n-            std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n-            if (!purpose) {\n-                pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n-            }\n-            pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CHDChain chain;\n+        ssValue >> chain;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, DataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    Assume(!prefix.empty());\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    DataStream prefix;\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n             }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n             }\n+        }\n \n-            wss.nCKeys++;\n+        return DBErrors::LOAD_OK;\n+    }\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 540,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this just ignores if `result` is corrupt, no?",
      "created_at": "2023-06-22T11:48:22Z",
      "updated_at": "2023-06-22T12:00:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238414993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238414993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 596,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238425567",
      "pull_request_review_id": 1493011039,
      "id": 1238425567,
      "node_id": "PRRC_kwDOABII585J0N_f",
      "diff_hunk": "@@ -2929,7 +2929,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n             warnings.push_back(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                           \" or address book entries might be missing or incorrect.\"),\n+                                           \" or address metadata may be missing or incorrect.\"),",
      "path": "src/wallet/wallet.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "5ada171675b5d424ec57df9f9681ac31d3ac0fae",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "5ada171675: Should this be squashed into 6b46d41d7b",
      "created_at": "2023-06-22T11:58:53Z",
      "updated_at": "2023-06-22T12:00:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238425567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238425567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2932,
      "original_line": 2932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238618767",
      "pull_request_review_id": 1493341496,
      "id": 1238618767,
      "node_id": "PRRC_kwDOABII585J09KP",
      "diff_hunk": "@@ -297,426 +298,573 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-    bool unexpected_legacy_entry{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n-        }\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n             return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string purpose_str;\n-            ssValue >> purpose_str;\n-            std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n-            if (!purpose) {\n-                pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n-            }\n-            pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CHDChain chain;\n+        ssValue >> chain;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, DataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    Assume(!prefix.empty());\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 390,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "in_reply_to_id": 1238395678,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed this to log only if the `load_func` is not `LOAD_OK`.",
      "created_at": "2023-06-22T14:31:01Z",
      "updated_at": "2023-06-22T14:31:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238618767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238618767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 508,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238619114",
      "pull_request_review_id": 1493342007,
      "id": 1238619114,
      "node_id": "PRRC_kwDOABII585J09Pq",
      "diff_hunk": "@@ -297,426 +298,573 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-    bool unexpected_legacy_entry{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n-        }\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n             return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string purpose_str;\n-            ssValue >> purpose_str;\n-            std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n-            if (!purpose) {\n-                pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n-            }\n-            pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CHDChain chain;\n+        ssValue >> chain;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, DataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    Assume(!prefix.empty());\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    DataStream prefix;\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n             }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n             }\n+        }\n \n-            wss.nCKeys++;\n+        return DBErrors::LOAD_OK;\n+    }\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 540,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "in_reply_to_id": 1238414993,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a check for `!= CORRUPT`.",
      "created_at": "2023-06-22T14:31:14Z",
      "updated_at": "2023-06-22T14:31:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238619114",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238619114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 596,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238619221",
      "pull_request_review_id": 1493342184,
      "id": 1238619221,
      "node_id": "PRRC_kwDOABII585J09RV",
      "diff_hunk": "@@ -2929,7 +2929,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n             warnings.push_back(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                           \" or address book entries might be missing or incorrect.\"),\n+                                           \" or address metadata may be missing or incorrect.\"),",
      "path": "src/wallet/wallet.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "5ada171675b5d424ec57df9f9681ac31d3ac0fae",
      "in_reply_to_id": 1238425567,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-22T14:31:19Z",
      "updated_at": "2023-06-22T14:31:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238619221",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238619221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2932,
      "original_line": 2932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238643324",
      "pull_request_review_id": 1493379979,
      "id": 1238643324,
      "node_id": "PRRC_kwDOABII585J1DJ8",
      "diff_hunk": "@@ -297,426 +298,573 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-    bool unexpected_legacy_entry{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n-        }\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n             return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string purpose_str;\n-            ssValue >> purpose_str;\n-            std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n-            if (!purpose) {\n-                pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n-            }\n-            pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CHDChain chain;\n+        ssValue >> chain;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, DataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    Assume(!prefix.empty());\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    DataStream prefix;\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n             }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n             }\n+        }\n \n-            wss.nCKeys++;\n+        return DBErrors::LOAD_OK;\n+    }\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 540,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "in_reply_to_id": 1238414993,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, more generally I wonder what the point is to continue further if corruption was detected? IIUC the wallet will fail to load anyway, so might as well return early at the earliest convenience? I am not really a fan of how some types of corruption are ignored/caught and the code continues and others lead to an early abort.\r\n\r\nWild guess: What about throwing instead of using the CORRUPT return code?",
      "created_at": "2023-06-22T14:48:24Z",
      "updated_at": "2023-06-22T14:48:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238643324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238643324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 596,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238647253",
      "pull_request_review_id": 1493386120,
      "id": 1238647253,
      "node_id": "PRRC_kwDOABII585J1EHV",
      "diff_hunk": "@@ -297,426 +298,573 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-    bool unexpected_legacy_entry{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n-        }\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n             return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string purpose_str;\n-            ssValue >> purpose_str;\n-            std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n-            if (!purpose) {\n-                pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n-            }\n-            pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CHDChain chain;\n+        ssValue >> chain;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, DataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    Assume(!prefix.empty());\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    DataStream prefix;\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n             }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n             }\n+        }\n \n-            wss.nCKeys++;\n+        return DBErrors::LOAD_OK;\n+    }\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 540,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "in_reply_to_id": 1238414993,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the general principle was to try to detect as much corruption as possible before returning the error. But it would also make this a lot simpler to just abort on the first error.",
      "created_at": "2023-06-22T14:51:25Z",
      "updated_at": "2023-06-22T14:51:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238647253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238647253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 596,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238665651",
      "pull_request_review_id": 1493209056,
      "id": 1238665651,
      "node_id": "PRRC_kwDOABII585J1Imz",
      "diff_hunk": "@@ -297,426 +298,573 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-    bool unexpected_legacy_entry{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n-        }\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n             return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string purpose_str;\n-            ssValue >> purpose_str;\n-            std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n-            if (!purpose) {\n-                pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n-            }\n-            pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CHDChain chain;\n+        ssValue >> chain;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, DataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    Assume(!prefix.empty());\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    DataStream prefix;\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n             }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n             }\n+        }\n \n-            wss.nCKeys++;\n+        return DBErrors::LOAD_OK;\n+    }\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 540,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "in_reply_to_id": 1238414993,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor legacy wallet record loading into its own function\" (9d58900d8a754721964e628f0c44344652f4bb80)\r\n\r\n> I think the general principle was to try to detect as much corruption as possible before returning the error. But it would also make this a lot simpler to just abort on the first error.\r\n\r\nThis is still giving NEED_REWRITE error higher priority over other errors besides CORRUPT. And it is adding an early return in the middle of a 211 line function that mostly accumulates errors instead of returning early. If this error needs to be handled differently than other errors and can't be merged with std::max, I think there should a comment calling out the special case and early return. Otherwise better to make this more consistent and write this this as:\r\n\r\n```diff\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -865,9 +865,9 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\r\n     result = std::max(result, script_res.m_result);\r\n \r\n     // Check whether rewrite is needed\r\n-    if (ckey_res.m_records > 0 && result != DBErrors::CORRUPT) {\r\n+    if (ckey_res.m_records > 0) {\r\n         // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\r\n-        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\r\n+        if (last_client == 40000 || last_client == 50000) result = std::max(result, DBErrors::NEED_REWRITE);\r\n     }\r\n \r\n     // Load keymeta\r\n\r\n```\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2023-06-22T15:02:47Z",
      "updated_at": "2023-06-22T15:27:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238665651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238665651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 596,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238672241",
      "pull_request_review_id": 1493209056,
      "id": 1238672241,
      "node_id": "PRRC_kwDOABII585J1KNx",
      "diff_hunk": "@@ -855,6 +751,265 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        DBErrors record_res = load_func(pwallet, ssKey, ssValue, result.m_error);\n+        if (record_res != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        result.m_result = std::max(result.m_result, record_res);\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 286,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9d58900d8a754721964e628f0c44344652f4bb80",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor legacy wallet record loading into its own function\" (9d58900d8a754721964e628f0c44344652f4bb80)\r\n\r\nEarly return seems unintended here? It is inconsistent with the way most other errors are handled in this function, and is makes the std::max call pointless, since the early return guarantees `script_res` result is `LOAD_OK` at that point.",
      "created_at": "2023-06-22T15:08:02Z",
      "updated_at": "2023-06-22T15:27:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238672241",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238672241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 862,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 590,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238677374",
      "pull_request_review_id": 1493209056,
      "id": 1238677374,
      "node_id": "PRRC_kwDOABII585J1Ld-",
      "diff_hunk": "@@ -855,6 +751,265 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        DBErrors record_res = load_func(pwallet, ssKey, ssValue, result.m_error);\n+        if (record_res != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        result.m_result = std::max(result.m_result, record_res);\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0 && result != DBErrors::CORRUPT) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n+            }\n+\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto [ins, inserted] = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins->second;\n+            if (inserted) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n+            }\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+            }\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, keymeta_res.m_result);\n+\n+    // Set inactive chains\n+    if (!hd_chains.empty()) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (!legacy_spkm) {\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\\n\");\n+            return DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 372,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9d58900d8a754721964e628f0c44344652f4bb80",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor legacy wallet record loading into its own function\" (9d58900d8a754721964e628f0c44344652f4bb80)\r\n\r\n\r\nAnother early return that should maybe `result = std::max(result, DBErrors::CORRUPT);`. If not it would be good to have a code comment that explains why this error is different.",
      "created_at": "2023-06-22T15:11:59Z",
      "updated_at": "2023-06-22T15:29:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238677374",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238677374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238787560",
      "pull_request_review_id": 1493626654,
      "id": 1238787560,
      "node_id": "PRRC_kwDOABII585J1mXo",
      "diff_hunk": "@@ -297,426 +298,573 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys{0};\n-    unsigned int nCKeys{0};\n-    unsigned int nWatchKeys{0};\n-    unsigned int nKeyMeta{0};\n-    unsigned int m_unknown_records{0};\n-    bool fIsEncrypted{false};\n-    bool fAnyUnordered{false};\n-    std::vector<uint256> vWalletUpgrade;\n-    std::map<OutputType, uint256> m_active_external_spks;\n-    std::map<OutputType, uint256> m_active_internal_spks;\n-    std::map<uint256, DescriptorCache> m_descriptor_caches;\n-    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n-    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n-    std::map<uint160, CHDChain> m_hd_chains;\n-    bool tx_corrupt{false};\n-    bool descriptor_unknown{false};\n-    bool unexpected_legacy_entry{false};\n-\n-    CWalletScanState() = default;\n-};\n-\n-static bool\n-ReadKeyValue(CWallet* pwallet, DataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+bool LoadKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n {\n+    LOCK(pwallet->cs_wallet);\n     try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        // If we have a filter, check if this matches the filter\n-        if (filter_fn && !filter_fn(strType)) {\n-            return true;\n-        }\n-        // Legacy entries in descriptor wallets are not allowed, abort immediately\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && DBKeys::LEGACY_TYPES.count(strType) > 0) {\n-            wss.unexpected_legacy_entry = true;\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n             return false;\n         }\n-        if (strType == DBKeys::NAME) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string label;\n-            ssValue >> label;\n-            pwallet->m_address_book[DecodeDestination(strAddress)].SetLabel(label);\n-        } else if (strType == DBKeys::PURPOSE) {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            std::string purpose_str;\n-            ssValue >> purpose_str;\n-            std::optional<AddressPurpose> purpose{PurposeFromString(purpose_str)};\n-            if (!purpose) {\n-                pwallet->WalletLogPrintf(\"Warning: nonstandard purpose string '%s' for address '%s'\\n\", purpose_str, strAddress);\n-            }\n-            pwallet->m_address_book[DecodeDestination(strAddress)].purpose = purpose;\n-        } else if (strType == DBKeys::TX) {\n-            uint256 hash;\n-            ssKey >> hash;\n-            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n-            // callback fills with transaction metadata.\n-            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                if(!new_tx) {\n-                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n-                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n-                    // rescanning.\n-                    wss.tx_corrupt = true;\n-                    return false;\n-                }\n-                ssValue >> wtx;\n-                if (wtx.GetHash() != hash)\n-                    return false;\n+        CKey key;\n+        CPrivKey pkey;\n+        uint256 hash;\n+\n+        ssValue >> pkey;\n+\n+        // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n+        // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+        // using EC operations as a checksum.\n+        // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+        // remaining backwards-compatible.\n+        try\n+        {\n+            ssValue >> hash;\n+        }\n+        catch (const std::ios_base::failure&) {}\n \n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        uint8_t fTmp;\n-                        uint8_t fUnused;\n-                        std::string unused_string;\n-                        ssValue >> fTmp >> fUnused >> unused_string;\n-                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    wss.vWalletUpgrade.push_back(hash);\n-                }\n+        bool fSkipCheck = false;\n \n-                if (wtx.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n+        if (!hash.IsNull())\n+        {\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> vchKey;\n+            vchKey.reserve(vchPubKey.size() + pkey.size());\n+            vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+            vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                return true;\n-            };\n-            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n-                return false;\n-            }\n-        } else if (strType == DBKeys::WATCHS) {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> script;\n-            uint8_t fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1') {\n-                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n-            }\n-        } else if (strType == DBKeys::KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n+            if (Hash(vchKey) != hash)\n             {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;\n             }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n \n-            wss.nKeys++;\n-            ssValue >> pkey;\n+            fSkipCheck = true;\n+        }\n \n-            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n+        if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+        {\n+            strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+            return false;\n+        }\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LoadCryptedKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CPubKey vchPubKey;\n+        ssKey >> vchPubKey;\n+        if (!vchPubKey.IsValid())\n+        {\n+            strErr = \"Error reading wallet database: CPubKey corrupt\";\n+            return false;\n+        }\n+        std::vector<unsigned char> vchPrivKey;\n+        ssValue >> vchPrivKey;\n+\n+        // Get the checksum and check it\n+        bool checksum_valid = false;\n+        if (!ssValue.eof()) {\n+            uint256 checksum;\n+            ssValue >> checksum;\n+            if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n+                strErr = \"Error reading wallet database: Encrypted key corrupt\";\n+                return false;\n             }\n-            catch (const std::ios_base::failure&) {}\n+        }\n \n-            bool fSkipCheck = false;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+bool LoadEncryptionKey(CWallet* pwallet, DataStream& ssKey, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n+        unsigned int nID;\n+        ssKey >> nID;\n+        CMasterKey kMasterKey;\n+        ssValue >> kMasterKey;\n+        if(pwallet->mapMasterKeys.count(nID) != 0)\n+        {\n+            strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+            return false;\n+        }\n+        pwallet->mapMasterKeys[nID] = kMasterKey;\n+        if (pwallet->nMasterKeyMaxID < nID)\n+            pwallet->nMasterKeyMaxID = nID;\n \n-                if (Hash(vchKey) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-                fSkipCheck = true;\n-            }\n+bool LoadHDChain(CWallet* pwallet, DataStream& ssValue, std::string& strErr)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        CHDChain chain;\n+        ssValue >> chain;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    } catch (const std::exception& e) {\n+        if (strErr.empty()) {\n+            strErr = e.what();\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n \n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n-                return false;\n-            }\n-        } else if (strType == DBKeys::MASTER_KEY) {\n-            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        } else if (strType == DBKeys::CRYPTED_KEY) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n+static DBErrors LoadMinVersion(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    int nMinVersion = 0;\n+    if (batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (nMinVersion > FEATURE_LATEST)\n+            return DBErrors::TOO_NEW;\n+        pwallet->LoadMinVersion(nMinVersion);\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    uint64_t flags;\n+    if (batch.Read(DBKeys::FLAGS, flags)) {\n+        if (!pwallet->LoadWalletFlags(flags)) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Unknown non-tolerable wallet flags found\\n\");\n+            return DBErrors::TOO_NEW;\n+        }\n+    }\n+    return DBErrors::LOAD_OK;\n+}\n+\n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, DataStream& prefix, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    Assume(!prefix.empty());\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        if ((result.m_result = std::max(result.m_result, load_func(pwallet, ssKey, ssValue, result.m_error))) != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    DataStream prefix;\n+    prefix << key;\n+    return LoadRecords(pwallet, batch, key, prefix, load_func);\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n             }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-\n-            // Get the checksum and check it\n-            bool checksum_valid = false;\n-            if (!ssValue.eof()) {\n-                uint256 checksum;\n-                ssValue >> checksum;\n-                if (!(checksum_valid = Hash(vchPrivKey) == checksum)) {\n-                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n-                    return false;\n-                }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n             }\n+        }\n \n-            wss.nCKeys++;\n+        return DBErrors::LOAD_OK;\n+    }\n \n-            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey, checksum_valid))\n-            {\n-                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        } else if (strType == DBKeys::KEYMETA) {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-\n-            // Extract some CHDChain info from this metadata if it has any\n-            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n-                // Get the path from the key origin or from the path string\n-                // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n-                // See https://github.com/bitcoin/bitcoin/pull/12924\n-                bool internal = false;\n-                uint32_t index = 0;\n-                if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n-                    std::vector<uint32_t> path;\n-                    if (keyMeta.has_key_origin) {\n-                        // We have a key origin, so pull it from its path vector\n-                        path = keyMeta.key_origin.path;\n-                    } else {\n-                        // No key origin, have to parse the string\n-                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n-                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n-                            return false;\n-                        }\n-                    }\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n \n-                    // Extract the index and internal from the path\n-                    // Path string is m/0'/k'/i'\n-                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n-                    // k == 0 for external, 1 for internal. i is the index\n-                    if (path.size() != 3) {\n-                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                        return false;\n-                    }\n-                    if (path[0] != 0x80000000) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n-                        return false;\n-                    }\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n-                        return false;\n-                    }\n-                    if ((path[2] & 0x80000000) == 0) {\n-                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n-                        return false;\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 540,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f0eea2749bcc73cde0cabc6fee0b7981a7539cf4",
      "in_reply_to_id": 1238414993,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, I suppose the early return is unnecessary. Changed as suggested.",
      "created_at": "2023-06-22T16:43:46Z",
      "updated_at": "2023-06-22T16:43:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238787560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238787560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 596,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238787760",
      "pull_request_review_id": 1493626938,
      "id": 1238787760,
      "node_id": "PRRC_kwDOABII585J1maw",
      "diff_hunk": "@@ -855,6 +751,265 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        DBErrors record_res = load_func(pwallet, ssKey, ssValue, result.m_error);\n+        if (record_res != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        result.m_result = std::max(result.m_result, record_res);\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 286,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9d58900d8a754721964e628f0c44344652f4bb80",
      "in_reply_to_id": 1238672241,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2023-06-22T16:43:57Z",
      "updated_at": "2023-06-22T16:43:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238787760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238787760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 862,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 590,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238787892",
      "pull_request_review_id": 1493627132,
      "id": 1238787892,
      "node_id": "PRRC_kwDOABII585J1mc0",
      "diff_hunk": "@@ -855,6 +751,265 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        DBErrors record_res = load_func(pwallet, ssKey, ssValue, result.m_error);\n+        if (record_res != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        result.m_result = std::max(result.m_result, record_res);\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n+    }\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    if (script_res.m_result != DBErrors::LOAD_OK) {\n+        return script_res.m_result;\n+    }\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0 && result != DBErrors::CORRUPT) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) return DBErrors::NEED_REWRITE;\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n+            }\n+\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto [ins, inserted] = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins->second;\n+            if (inserted) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n+            }\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+            }\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, keymeta_res.m_result);\n+\n+    // Set inactive chains\n+    if (!hd_chains.empty()) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (!legacy_spkm) {\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\\n\");\n+            return DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 372,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9d58900d8a754721964e628f0c44344652f4bb80",
      "in_reply_to_id": 1238677374,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed",
      "created_at": "2023-06-22T16:44:05Z",
      "updated_at": "2023-06-22T16:44:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238787892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238787892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239015734",
      "pull_request_review_id": 1493974358,
      "id": 1239015734,
      "node_id": "PRRC_kwDOABII585J2eE2",
      "diff_hunk": "@@ -1111,12 +1057,97 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;\n+            }\n+        }\n+        return result;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+\n+    // Load locked utxo record\n+    LoadResult locked_utxo_res = LoadRecords(pwallet, batch, DBKeys::LOCKED_UTXO,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        uint256 hash;\n+        uint32_t n;\n+        key >> hash;\n+        key >> n;\n+        pwallet->LockCoin(COutPoint(hash, n));\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, locked_utxo_res.m_result);\n+\n+    // Load orderposnext record\n+    batch.Read(DBKeys::ORDERPOSNEXT, pwallet->nOrderPosNext);\n+\n+    return DBErrors::LOAD_OK;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8405e9a0d1f406189d05abbb8d92290e25f381c8",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 8405e9a0:\r\n\r\nNeed to return `result`, not `LOAD_OK`.",
      "created_at": "2023-06-22T20:46:55Z",
      "updated_at": "2023-06-22T23:29:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239015734",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239015734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1136,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239149341",
      "pull_request_review_id": 1494163260,
      "id": 1239149341,
      "node_id": "PRRC_kwDOABII585J2-sd",
      "diff_hunk": "@@ -1111,12 +1057,97 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;\n+            }\n+        }\n+        return result;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+\n+    // Load locked utxo record\n+    LoadResult locked_utxo_res = LoadRecords(pwallet, batch, DBKeys::LOCKED_UTXO,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        uint256 hash;\n+        uint32_t n;\n+        key >> hash;\n+        key >> n;\n+        pwallet->LockCoin(COutPoint(hash, n));\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, locked_utxo_res.m_result);\n+\n+    // Load orderposnext record\n+    batch.Read(DBKeys::ORDERPOSNEXT, pwallet->nOrderPosNext);\n+\n+    return DBErrors::LOAD_OK;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "8405e9a0d1f406189d05abbb8d92290e25f381c8",
      "in_reply_to_id": 1239015734,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2023-06-23T00:30:10Z",
      "updated_at": "2023-06-23T00:30:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239149341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239149341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1136,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239736481",
      "pull_request_review_id": 1495016532,
      "id": 1239736481,
      "node_id": "PRRC_kwDOABII585J5OCh",
      "diff_hunk": "@@ -1043,6 +1113,12 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         // Load legacy wallet keys\n         result = std::max(LoadLegacyWalletRecords(pwallet, *m_batch, last_client), result);\n \n+        // Load descriptors\n+        result = std::max(LoadDescriptorWalletRecords(pwallet, *m_batch, last_client), result);\n+        // Early return if there are unknown descriptors. Later loading that may reference the unknown descriptor's ID",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 367,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c434b28ad859bc0d8240ebedd3d3bee83e394987",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor descriptor wallet records loading\" (c434b28ad859bc0d8240ebedd3d3bee83e394987)\r\n\r\nJust for my curiousity, what's something that could be loaded after the `LoadDescriptorWalletRecords` function that could reference a descriptor id? Is this for future wallet functionality that builds on descriptors, or is this referring to something in current code?\r\n\r\n---\r\n\r\nEDIT: There's a review comment explaining this https://github.com/bitcoin/bitcoin/pull/24914#issuecomment-1602997031 that says this is done so a [`LoadActiveSPKMs`](https://github.com/bitcoin/bitcoin/blob/f0720511b0ed814d4568c32066eff1cdc9aef68b/src/wallet/walletdb.cpp#L1162-L1163) call that is added in a later commit doesn't throw.\r\n\r\nIn light of this, I'd think it'd be helpful to replace \"Later loading that may reference the unknown descriptor\" with \"ACTIVEINTERNALSPK or ACTIVEEXTERNALSPK records that may reference the unknown descriptor\"",
      "created_at": "2023-06-23T12:04:58Z",
      "updated_at": "2023-06-23T14:31:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239736481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239736481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239777734",
      "pull_request_review_id": 1495016532,
      "id": 1239777734,
      "node_id": "PRRC_kwDOABII585J5YHG",
      "diff_hunk": "@@ -0,0 +1,7 @@\n+Wallet\n+------\n+\n+- Wallet loading has changed in this release. Wallets with some corrupted records that could be\n+  previously loaded (with warnings) may no longer load. If this happens, it is recommended",
      "path": "doc/release-notes-24914.md",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "290bc962096ca109edd038fbe2f32322ffdabb7b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"doc: Add release note for wallet loading changes\" (290bc962096ca109edd038fbe2f32322ffdabb7b)\r\n\r\nTo make this concrete and put in the error in context, maybe add \"For example, wallets with corrupt address book entries may no longer load. If this happens, it should be possible to recover by loading the wallet in a previous version of Bitcoin Core and importing the data into a new wallet. Also, you can report an issue to help improve the software and make wallet loading more robust in these cases.\"",
      "created_at": "2023-06-23T12:49:10Z",
      "updated_at": "2023-06-23T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239777734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239777734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239787986",
      "pull_request_review_id": 1495016532,
      "id": 1239787986,
      "node_id": "PRRC_kwDOABII585J5anS",
      "diff_hunk": "@@ -1111,12 +1057,97 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 147,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b26573ef95891bb69f00c3aaa67fb4678a82c818",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: refactor tx loading\" (b26573ef95891bb69f00c3aaa67fb4678a82c818)\r\n\r\nSince `NEED_RESCAN` is a pretty low priority error it seems like it would be safer and more consistent with other code to write `result = std::max(result, DBErrors::NEED_RESCAN)`",
      "created_at": "2023-06-23T12:59:31Z",
      "updated_at": "2023-06-23T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239787986",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239787986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239792319",
      "pull_request_review_id": 1495016532,
      "id": 1239792319,
      "node_id": "PRRC_kwDOABII585J5bq_",
      "diff_hunk": "@@ -1111,12 +1057,97 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b26573ef95891bb69f00c3aaa67fb4678a82c818",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: refactor tx loading\" (b26573ef95891bb69f00c3aaa67fb4678a82c818)\r\n\r\nThere's no change in behavior, but this line seems to contradict what the code is doing: \"We don't consider this type of corruption critical, and can fix it by removing tx data and rescanning,\" because it is setting CORRUPT not NEED_RESCAN. Maybe replace it with just \"This can be fixed by removing tx data and rescanning.\"",
      "created_at": "2023-06-23T13:03:48Z",
      "updated_at": "2023-06-23T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239792319",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239792319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1077,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1078,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239797500",
      "pull_request_review_id": 1495016532,
      "id": 1239797500,
      "node_id": "PRRC_kwDOABII585J5c78",
      "diff_hunk": "@@ -1141,6 +1127,35 @@ static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vecto\n     return result;\n }\n \n+static DBErrors LoadActiveSPKMs(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load spk records\n+    std::set<std::pair<OutputType, bool>> seen_spks;\n+    for (auto& spk_key : {DBKeys::ACTIVEEXTERNALSPK, DBKeys::ACTIVEINTERNALSPK}) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "6b5a530b7ad1c7b9a1ff9c946458b797a6ef785a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: refactor active spkm loading\" (6b5a530b7ad1c7b9a1ff9c946458b797a6ef785a)\r\n\r\nWould be good this make this `const auto&` to be clear loading code below isn't going to change it.",
      "created_at": "2023-06-23T13:08:49Z",
      "updated_at": "2023-06-23T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239797500",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239797500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239831441",
      "pull_request_review_id": 1495016532,
      "id": 1239831441,
      "node_id": "PRRC_kwDOABII585J5lOR",
      "diff_hunk": "@@ -855,6 +751,267 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        DBErrors record_res = load_func(pwallet, ssKey, ssValue, result.m_error);\n+        if (record_res != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        result.m_result = std::max(result.m_result, record_res);\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9eae22cf6e1dfad85ab6e246071298396f5d07f1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Refactor hd chain loading to its own function\" (ad779e9ece9829677c1735d8865f14b23459da80)\r\n\r\nThere are two changes in behavior here. One is that if the `CHDChain` value can't be deserialized, the error is now ignored instead of reported. The other change is that the code is now doing an exact match for the DBKeys::HDCHAIN key rather than a prefix match. Arguably the second change is good and unlikely to cause problems. But it's good to be aware in this case, and any in other case that switches from `ReadKeyValue` to `batch.Read` that `batch.Read` is going to match a subset of keys. I've been reviewing this PR for a pretty long time and just realized this now.\r\n\r\nI'm thinking it would be better to avoid changing behavior here and make the code in this function more consistent with:\r\n\r\n```diff\r\ndiff --git a/src/wallet/walletdb.cpp b/src/wallet/walletdb.cpp\r\nindex dad5c3b531ef..f9c43c04ef31 100644\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -826,10 +826,11 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\r\n     }\r\n \r\n     // Load HD Chain\r\n-    CHDChain chain;\r\n-    if (batch.Read(DBKeys::HDCHAIN, chain)) {\r\n-        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\r\n-    }\r\n+    LoadResult hd_chain_res = LoadRecords(pwallet, batch, DBKeys::HDCHAIN,\r\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\r\n+        return LoadHDChain(pwallet, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\r\n+    });\r\n+    result = std::max(result, hd_chain_res.m_result);\r\n \r\n     // Load unencrypted keys\r\n     LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\r\n```\r\n\r\nSeparately, this also makes me think the `DatabaseBatch::Read` method is potentially dangerous if it going to swallow deserialization errors, and it would be better if it were marked [[nodiscard]]. Or maybe better if it just went away, and wallet code could call `batch.ReadKey` to access values directly.",
      "created_at": "2023-06-23T13:38:30Z",
      "updated_at": "2023-06-23T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239831441",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239831441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 830,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239859594",
      "pull_request_review_id": 1495016532,
      "id": 1239859594,
      "node_id": "PRRC_kwDOABII585J5sGK",
      "diff_hunk": "@@ -1111,12 +1057,97 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;\n+            }\n+        }\n+        return result;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+\n+    // Load locked utxo record\n+    LoadResult locked_utxo_res = LoadRecords(pwallet, batch, DBKeys::LOCKED_UTXO,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        uint256 hash;\n+        uint32_t n;\n+        key >> hash;\n+        key >> n;\n+        pwallet->LockCoin(COutPoint(hash, n));\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, locked_utxo_res.m_result);\n+\n+    // Load orderposnext record\n+    batch.Read(DBKeys::ORDERPOSNEXT, pwallet->nOrderPosNext);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b26573ef95891bb69f00c3aaa67fb4678a82c818",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: refactor tx loading\" (b26573ef95891bb69f00c3aaa67fb4678a82c818)\r\n\r\nAgain, there's two changes in behavior since this switching from `ReadKeyValue` to `Read`. One is that deserialization errors are ignored with no error or warning. The other is that this is switching from a prefix match to an exact match so keys that have other fields after the ORDERPOSNEXT string will be ignored.\r\n\r\nI don't think either current or previous behavior is ideal, but I think I might opt to preserve previous behavior with:\r\n\r\n```diff\r\ndiff --git a/src/wallet/walletdb.cpp b/src/wallet/walletdb.cpp\r\nindex 7292c6fda414..e6d86bf2ad30 100644\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -1136,7 +1136,18 @@ static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vecto\r\n     result = std::max(result, locked_utxo_res.m_result);\r\n \r\n     // Load orderposnext record\r\n-    batch.Read(DBKeys::ORDERPOSNEXT, pwallet->nOrderPosNext);\r\n+    LoadResult order_pos_res = LoadRecords(pwallet, batch, DBKeys::ORDERPOSNEXT,\r\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\r\n+        try {\r\n+           value >> pwallet->nOrderPosNext;\r\n+        } catch (const std::exception& e) {\r\n+           if (err.empty()) {\r\n+              err = e.what();\r\n+           }\r\n+           return DBErrors::NONCRITICAL_ERROR;\r\n+        }\r\n+        return DBErrors::LOAD_OK;\r\n+    });\r\n \r\n     return result;\r\n }\r\n\r\n```",
      "created_at": "2023-06-23T14:01:43Z",
      "updated_at": "2023-06-23T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239859594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239859594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239869516",
      "pull_request_review_id": 1495016532,
      "id": 1239869516,
      "node_id": "PRRC_kwDOABII585J5uhM",
      "diff_hunk": "@@ -793,6 +783,25 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    CPubKey default_pubkey;\n+    if (batch.Read(DBKeys::DEFAULTKEY, default_pubkey) && !default_pubkey.IsValid()) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "89c4119cb8be6a62b24c693b329aec565aea07dc",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: refactor defaultkey and wkey loading\" (89c4119cb8be6a62b24c693b329aec565aea07dc)\r\n\r\nAgain switching from `ReadKeyValue` to `Read` now ignores deserialization errors and keys with extra data fields after the `DEFAULTKEY` sting. Could preserve previous behavior with:\r\n\r\n```diff\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -788,11 +788,24 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\r\n \r\n     // We don't want or need the default key, but if there is one set,\r\n     // we want to make sure that it is valid so that we can detect corruption\r\n-    CPubKey default_pubkey;\r\n-    if (batch.Read(DBKeys::DEFAULTKEY, default_pubkey) && !default_pubkey.IsValid()) {\r\n-        pwallet->WalletLogPrintf(\"Error reading wallet database: Default Key corrupt\\n\");\r\n-        return DBErrors::CORRUPT;\r\n-    }\r\n+    LoadResult default_key_res = LoadRecords(pwallet, batch, DBKeys::DEFAULTKEY,\r\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\r\n+        CPubKey default_pubkey;\r\n+        try {\r\n+            value >> default_pubkey;\r\n+        } catch (const std::exception& e) {\r\n+            if (err.empty()) {\r\n+                err = e.what();\r\n+            }\r\n+            return DBErrors::CORRUPT;\r\n+        }\r\n+        if (!default_pubkey.IsValid()) {\r\n+            err = \"Error reading wallet database: Default Key corrupt\";\r\n+            return DBErrors::CORRUPT;\r\n+        }\r\n+        return DBErrors::LOAD_OK;\r\n+    });\r\n+    result = std::max(result, default_key_res.m_result);\r\n \r\n     // \"wkey\" records are unsupported, if we see any, throw an error\r\n     LoadResult wkey_res = LoadRecords(pwallet, batch, DBKeys::OLD_KEY,\r\n```",
      "created_at": "2023-06-23T14:10:21Z",
      "updated_at": "2023-06-23T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239869516",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239869516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 792,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239877234",
      "pull_request_review_id": 1495016532,
      "id": 1239877234,
      "node_id": "PRRC_kwDOABII585J5wZy",
      "diff_hunk": "@@ -793,6 +783,25 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    CPubKey default_pubkey;\n+    if (batch.Read(DBKeys::DEFAULTKEY, default_pubkey) && !default_pubkey.IsValid()) {\n+        pwallet->WalletLogPrintf(\"Error reading wallet database: Default Key corrupt\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    // \"wkey\" records are unsupported, if we see any, throw an error\n+    LoadResult wkey_res = LoadRecords(pwallet, batch, DBKeys::OLD_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        err = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n+        return DBErrors::LOAD_FAIL;",
      "path": "src/wallet/walletdb.cpp",
      "position": 794,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "89c4119cb8be6a62b24c693b329aec565aea07dc",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: refactor defaultkey and wkey loading\" (89c4119cb8be6a62b24c693b329aec565aea07dc)\r\n\r\nIIUC, previously this was a noncritical error, now it is a LOAD_FAIL error? Would be good to document if this intended in the commit message.",
      "created_at": "2023-06-23T14:16:53Z",
      "updated_at": "2023-06-23T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239877234",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239877234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 751,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239883780",
      "pull_request_review_id": 1495016532,
      "id": 1239883780,
      "node_id": "PRRC_kwDOABII585J5yAE",
      "diff_hunk": "@@ -2929,7 +2929,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n             warnings.push_back(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                           \" or address book entries might be missing or incorrect.\"),\n+                                           \" or address metadata may be missing or incorrect.\"),",
      "path": "src/wallet/wallet.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "5ada171675b5d424ec57df9f9681ac31d3ac0fae",
      "in_reply_to_id": 1238425567,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: refactor address book loading\" (53116fb2f982e88b713b5855dd9e1fa74d6635bb)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1238425567\r\n\r\nCould note change in behavior in commit message now that 5ada171675b5d424ec57df9f9681ac31d3ac0fae is squashed",
      "created_at": "2023-06-23T14:22:07Z",
      "updated_at": "2023-06-23T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1239883780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239883780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2932,
      "original_line": 2932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240050200",
      "pull_request_review_id": 1495510802,
      "id": 1240050200,
      "node_id": "PRRC_kwDOABII585J6aoY",
      "diff_hunk": "@@ -1043,6 +1113,12 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         // Load legacy wallet keys\n         result = std::max(LoadLegacyWalletRecords(pwallet, *m_batch, last_client), result);\n \n+        // Load descriptors\n+        result = std::max(LoadDescriptorWalletRecords(pwallet, *m_batch, last_client), result);\n+        // Early return if there are unknown descriptors. Later loading that may reference the unknown descriptor's ID",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 367,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "c434b28ad859bc0d8240ebedd3d3bee83e394987",
      "in_reply_to_id": 1239736481,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the comment.",
      "created_at": "2023-06-23T17:00:24Z",
      "updated_at": "2023-06-23T17:00:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240050200",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240050200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240050358",
      "pull_request_review_id": 1495510984,
      "id": 1240050358,
      "node_id": "PRRC_kwDOABII585J6aq2",
      "diff_hunk": "@@ -0,0 +1,7 @@\n+Wallet\n+------\n+\n+- Wallet loading has changed in this release. Wallets with some corrupted records that could be\n+  previously loaded (with warnings) may no longer load. If this happens, it is recommended",
      "path": "doc/release-notes-24914.md",
      "position": null,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "290bc962096ca109edd038fbe2f32322ffdabb7b",
      "in_reply_to_id": 1239777734,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated.",
      "created_at": "2023-06-23T17:00:32Z",
      "updated_at": "2023-06-23T17:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240050358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240050358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240051151",
      "pull_request_review_id": 1495511806,
      "id": 1240051151,
      "node_id": "PRRC_kwDOABII585J6a3P",
      "diff_hunk": "@@ -1111,12 +1057,97 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 147,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b26573ef95891bb69f00c3aaa67fb4678a82c818",
      "in_reply_to_id": 1239787986,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, although this shouldn't have any effect on the error returned since `result` is not an accumulator here.",
      "created_at": "2023-06-23T17:00:58Z",
      "updated_at": "2023-06-23T17:00:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240051151",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240051151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240051325",
      "pull_request_review_id": 1495511954,
      "id": 1240051325,
      "node_id": "PRRC_kwDOABII585J6a59",
      "diff_hunk": "@@ -1111,12 +1057,97 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b26573ef95891bb69f00c3aaa67fb4678a82c818",
      "in_reply_to_id": 1239792319,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-23T17:01:04Z",
      "updated_at": "2023-06-23T17:01:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240051325",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240051325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 1077,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1078,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240051428",
      "pull_request_review_id": 1495512061,
      "id": 1240051428,
      "node_id": "PRRC_kwDOABII585J6a7k",
      "diff_hunk": "@@ -1141,6 +1127,35 @@ static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vecto\n     return result;\n }\n \n+static DBErrors LoadActiveSPKMs(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load spk records\n+    std::set<std::pair<OutputType, bool>> seen_spks;\n+    for (auto& spk_key : {DBKeys::ACTIVEEXTERNALSPK, DBKeys::ACTIVEINTERNALSPK}) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "6b5a530b7ad1c7b9a1ff9c946458b797a6ef785a",
      "in_reply_to_id": 1239797500,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-23T17:01:09Z",
      "updated_at": "2023-06-23T17:01:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240051428",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240051428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240052690",
      "pull_request_review_id": 1495513980,
      "id": 1240052690,
      "node_id": "PRRC_kwDOABII585J6bPS",
      "diff_hunk": "@@ -855,6 +751,267 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        DBErrors record_res = load_func(pwallet, ssKey, ssValue, result.m_error);\n+        if (record_res != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        result.m_result = std::max(result.m_result, record_res);\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    CHDChain chain;\n+    if (batch.Read(DBKeys::HDCHAIN, chain)) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "9eae22cf6e1dfad85ab6e246071298396f5d07f1",
      "in_reply_to_id": 1239831441,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, but I think we should more strongly enforce that there should only be one of these kinds of records. That can be done in a followup.",
      "created_at": "2023-06-23T17:02:22Z",
      "updated_at": "2023-06-23T17:02:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240052690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240052690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 830,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240052804",
      "pull_request_review_id": 1495514160,
      "id": 1240052804,
      "node_id": "PRRC_kwDOABII585J6bRE",
      "diff_hunk": "@@ -1111,12 +1057,97 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                // rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = DBErrors::NEED_RESCAN;\n+            }\n+        }\n+        return result;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+\n+    // Load locked utxo record\n+    LoadResult locked_utxo_res = LoadRecords(pwallet, batch, DBKeys::LOCKED_UTXO,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        uint256 hash;\n+        uint32_t n;\n+        key >> hash;\n+        key >> n;\n+        pwallet->LockCoin(COutPoint(hash, n));\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, locked_utxo_res.m_result);\n+\n+    // Load orderposnext record\n+    batch.Read(DBKeys::ORDERPOSNEXT, pwallet->nOrderPosNext);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "b26573ef95891bb69f00c3aaa67fb4678a82c818",
      "in_reply_to_id": 1239859594,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-23T17:02:30Z",
      "updated_at": "2023-06-23T17:02:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240052804",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240052804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240053310",
      "pull_request_review_id": 1495514897,
      "id": 1240053310,
      "node_id": "PRRC_kwDOABII585J6bY-",
      "diff_hunk": "@@ -793,6 +783,25 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    CPubKey default_pubkey;\n+    if (batch.Read(DBKeys::DEFAULTKEY, default_pubkey) && !default_pubkey.IsValid()) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "89c4119cb8be6a62b24c693b329aec565aea07dc",
      "in_reply_to_id": 1239869516,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-23T17:03:07Z",
      "updated_at": "2023-06-23T17:03:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240053310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240053310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 792,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240054793",
      "pull_request_review_id": 1495517363,
      "id": 1240054793,
      "node_id": "PRRC_kwDOABII585J6bwJ",
      "diff_hunk": "@@ -793,6 +783,25 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    CPubKey default_pubkey;\n+    if (batch.Read(DBKeys::DEFAULTKEY, default_pubkey) && !default_pubkey.IsValid()) {\n+        pwallet->WalletLogPrintf(\"Error reading wallet database: Default Key corrupt\\n\");\n+        return DBErrors::CORRUPT;\n+    }\n+\n+    // \"wkey\" records are unsupported, if we see any, throw an error\n+    LoadResult wkey_res = LoadRecords(pwallet, batch, DBKeys::OLD_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        err = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n+        return DBErrors::LOAD_FAIL;",
      "path": "src/wallet/walletdb.cpp",
      "position": 794,
      "original_position": 42,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "89c4119cb8be6a62b24c693b329aec565aea07dc",
      "in_reply_to_id": 1239877234,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mentioned it in the commit message.\r\n\r\nThe change was intentional since those records are keys, and we shouldn't just ignore keys. These records are unsupported since there was never any code that added them, but if some user has a wallet that somehow does, we should be more explicit about the fact that there are keys in a record that we don't support.",
      "created_at": "2023-06-23T17:05:02Z",
      "updated_at": "2023-06-23T17:05:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240054793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240054793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 751,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240056360",
      "pull_request_review_id": 1495520646,
      "id": 1240056360,
      "node_id": "PRRC_kwDOABII585J6cIo",
      "diff_hunk": "@@ -2929,7 +2929,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n             warnings.push_back(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                           \" or address book entries might be missing or incorrect.\"),\n+                                           \" or address metadata may be missing or incorrect.\"),",
      "path": "src/wallet/wallet.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "5ada171675b5d424ec57df9f9681ac31d3ac0fae",
      "in_reply_to_id": 1238425567,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added to that commit message.",
      "created_at": "2023-06-23T17:06:35Z",
      "updated_at": "2023-06-23T17:06:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1240056360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240056360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2932,
      "original_line": 2932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242157733",
      "pull_request_review_id": 1498470740,
      "id": 1242157733,
      "node_id": "PRRC_kwDOABII585KCdKl",
      "diff_hunk": "@@ -795,6 +785,37 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    // Note: There should only be one DEFAULTKEY with nothing trailing the type\n+    LoadResult default_key_res = LoadRecords(pwallet, batch, DBKeys::DEFAULTKEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey default_pubkey;\n+        try {\n+            value >> default_pubkey;\n+        } catch (const std::exception& e) {\n+            if (err.empty()) e.what();",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f9db8fce3c43ceaecdff51d4bb7b536eff4cfae7",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f9db8fce:\r\n\r\nMissed to set the error here.\r\n```suggestion\r\n            if (err.empty()) err = e.what();\r\n```",
      "created_at": "2023-06-26T13:01:14Z",
      "updated_at": "2023-06-26T13:04:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242157733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242157733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 800,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242311686",
      "pull_request_review_id": 1498715782,
      "id": 1242311686,
      "node_id": "PRRC_kwDOABII585KDCwG",
      "diff_hunk": "@@ -1113,12 +1059,107 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // it can be fixed by removing tx data and rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;\n+                corrupted_tx = true;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            if (corrupted_tx) {\n+                result = DBErrors::CORRUPT;\n+            } else {\n+                result = std::max(result, DBErrors::NEED_RESCAN);\n+            }\n+        }\n+        return result;\n+    });\n+    result = std::max(result, tx_res.m_result);\n+\n+    // Load locked utxo record\n+    LoadResult locked_utxo_res = LoadRecords(pwallet, batch, DBKeys::LOCKED_UTXO,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        uint256 hash;\n+        uint32_t n;\n+        key >> hash;\n+        key >> n;\n+        pwallet->LockCoin(COutPoint(hash, n));\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, locked_utxo_res.m_result);\n+\n+    // Load orderposnext record\n+    // Note: There should only be one ORDERPOSNEXT record with nothing trailng the type",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 166,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "dc1ef26e430abbf92ef39d2ce595adac651b949a",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "dc1ef26e43: trailing (typo)",
      "created_at": "2023-06-26T14:40:59Z",
      "updated_at": "2023-06-27T11:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242311686",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242311686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1077,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242372035",
      "pull_request_review_id": 1498812845,
      "id": 1242372035,
      "node_id": "PRRC_kwDOABII585KDRfD",
      "diff_hunk": "@@ -855,6 +751,269 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        DBErrors record_res = load_func(pwallet, ssKey, ssValue, result.m_error);\n+        if (record_res != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        result.m_result = std::max(result.m_result, record_res);\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    // Note: There should only be one HDCHAIN record with no data following the type\n+    LoadResult hd_chain_res = LoadRecords(pwallet, batch, DBKeys::HDCHAIN,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadHDChain(pwallet, value, err) ? DBErrors:: LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, hd_chain_res.m_result);\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) result = std::max(result, DBErrors::NEED_REWRITE);\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n+            }\n+\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto [ins, inserted] = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins->second;\n+            if (inserted) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n+            }\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+            }\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, keymeta_res.m_result);\n+\n+    // Set inactive chains\n+    if (!hd_chains.empty()) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (legacy_spkm) {\n+            for (const auto& [hd_seed_id, chain] : hd_chains) {\n+                if (hd_seed_id != legacy_spkm->GetHDChain().seed_id) {\n+                    legacy_spkm->AddInactiveHDChain(chain);\n+                }\n+            }\n+        }\n+        else {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 376,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7c13da13790617d5fe219efe5f52810a69eeb4ad",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 7c13da13:\r\nOnly if you have to re-touch: extra jump line",
      "created_at": "2023-06-26T15:24:25Z",
      "updated_at": "2023-06-26T19:16:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242372035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242372035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 954,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 955,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242374407",
      "pull_request_review_id": 1498816423,
      "id": 1242374407,
      "node_id": "PRRC_kwDOABII585KDSEH",
      "diff_hunk": "@@ -795,6 +785,37 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    // Note: There should only be one DEFAULTKEY with nothing trailing the type\n+    LoadResult default_key_res = LoadRecords(pwallet, batch, DBKeys::DEFAULTKEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey default_pubkey;\n+        try {\n+            value >> default_pubkey;\n+        } catch (const std::exception& e) {\n+            if (err.empty()) e.what();",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f9db8fce3c43ceaecdff51d4bb7b536eff4cfae7",
      "in_reply_to_id": 1242157733,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-06-26T15:26:15Z",
      "updated_at": "2023-06-26T15:26:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242374407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242374407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 800,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242385895",
      "pull_request_review_id": 1498812845,
      "id": 1242385895,
      "node_id": "PRRC_kwDOABII585KDU3n",
      "diff_hunk": "@@ -795,6 +785,37 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    // Note: There should only be one DEFAULTKEY with nothing trailing the type\n+    LoadResult default_key_res = LoadRecords(pwallet, batch, DBKeys::DEFAULTKEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey default_pubkey;\n+        try {\n+            value >> default_pubkey;\n+        } catch (const std::exception& e) {\n+            if (err.empty()) err = e.what();\n+            return DBErrors::CORRUPT;\n+        }\n+        if (!default_pubkey.IsValid()) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Default Key corrupt\\n\");\n+            return DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "aea1a43b372b2cecdafb83eaf3852ae27d4b6385",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            err = \"Error reading wallet database: Default Key corrupt\";\r\n            return DBErrors::CORRUPT;\r\n```",
      "created_at": "2023-06-26T15:35:27Z",
      "updated_at": "2023-06-26T19:16:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242385895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242385895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 804,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242640941",
      "pull_request_review_id": 1498812845,
      "id": 1242640941,
      "node_id": "PRRC_kwDOABII585KETIt",
      "diff_hunk": "@@ -1113,12 +1059,107 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // it can be fixed by removing tx data and rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": 1119,
      "original_position": 108,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "dc1ef26e430abbf92ef39d2ce595adac651b949a",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In dc1ef26e:\r\n\r\nnit: this result is also being set to `CORRUPT` when `LoadToWallet` returns false with `corrupted_tx=true` (~30 lines of code below this line).",
      "created_at": "2023-06-26T19:06:15Z",
      "updated_at": "2023-06-26T19:33:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242640941",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242640941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1023,
      "original_line": 1023,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242724102",
      "pull_request_review_id": 1499361716,
      "id": 1242724102,
      "node_id": "PRRC_kwDOABII585KEncG",
      "diff_hunk": "@@ -1113,12 +1059,107 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // it can be fixed by removing tx data and rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": 1119,
      "original_position": 108,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "dc1ef26e430abbf92ef39d2ce595adac651b949a",
      "in_reply_to_id": 1242640941,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242640941\r\n\r\n> In [dc1ef26](https://github.com/bitcoin/bitcoin/commit/dc1ef26e430abbf92ef39d2ce595adac651b949a):\r\n> \r\n> nit: this result is also being set to `CORRUPT` when `LoadToWallet` returns false with `corrupted_tx=true` (~30 lines of code below this line).\r\n\r\nNice catch. Would be nice to just eliminate the CORRUPTED_TX variable:\r\n\r\n```diff\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -1065,10 +1065,9 @@ static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vecto\r\n     DBErrors result = DBErrors::LOAD_OK;\r\n \r\n     // Load tx record\r\n-    bool corrupted_tx = false;\r\n     any_unordered = false;\r\n     LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\r\n-        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\r\n+        [&any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\r\n         DBErrors result = DBErrors::LOAD_OK;\r\n         uint256 hash;\r\n         key >> hash;\r\n@@ -1077,10 +1076,8 @@ static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vecto\r\n         auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\r\n             if(!new_tx) {\r\n                 // There's some corruption here since the tx we just tried to load was already in the wallet.\r\n-                // it can be fixed by removing tx data and rescanning.\r\n                 err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\r\n                 result = DBErrors::CORRUPT;\r\n-                corrupted_tx = true;\r\n                 return false;\r\n             }\r\n             value >> wtx;\r\n@@ -1114,11 +1111,8 @@ static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vecto\r\n             return true;\r\n         };\r\n         if (!pwallet->LoadToWallet(hash, fill_wtx)) {\r\n-            if (corrupted_tx) {\r\n-                result = DBErrors::CORRUPT;\r\n-            } else {\r\n-                result = std::max(result, DBErrors::NEED_RESCAN);\r\n-            }\r\n+            // Use max because fill_wtx above might have already set result CORRUPT.\r\n+            result = std::max(result, DBErrors::NEED_RESCAN);\r\n         }\r\n         return result;\r\n     });\r\n```\r\n",
      "created_at": "2023-06-26T20:22:20Z",
      "updated_at": "2023-06-26T20:25:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242724102",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242724102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1023,
      "original_line": 1023,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242864916",
      "pull_request_review_id": 1499565747,
      "id": 1242864916,
      "node_id": "PRRC_kwDOABII585KFJ0U",
      "diff_hunk": "@@ -855,6 +751,269 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};\n+    int m_records{0};\n+};\n+\n+using LoadFunc = std::function<DBErrors(CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err)>;\n+static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std::string& key, LoadFunc load_func)\n+{\n+    LoadResult result;\n+    DataStream ssKey;\n+    CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\n+    DataStream prefix;\n+    prefix << key;\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+    if (!cursor) {\n+        pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", key);\n+        result.m_result = DBErrors::CORRUPT;\n+        return result;\n+    }\n+\n+    while (true) {\n+        DatabaseCursor::Status status = cursor->Next(ssKey, ssValue);\n+        if (status == DatabaseCursor::Status::DONE) {\n+            break;\n+        } else if (status == DatabaseCursor::Status::FAIL) {\n+            pwallet->WalletLogPrintf(\"Error reading next '%s' record for wallet database\\n\", key);\n+            result.m_result = DBErrors::CORRUPT;\n+            return result;\n+        }\n+        std::string type;\n+        ssKey >> type;\n+        assert(type == key);\n+        DBErrors record_res = load_func(pwallet, ssKey, ssValue, result.m_error);\n+        if (record_res != DBErrors::LOAD_OK) {\n+            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\n+        }\n+        result.m_result = std::max(result.m_result, record_res);\n+        ++result.m_records;\n+    }\n+    return result;\n+}\n+\n+static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch, int last_client) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Make sure descriptor wallets don't have any legacy records\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        for (const auto& type : DBKeys::LEGACY_TYPES) {\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+\n+            DataStream prefix;\n+            prefix << type;\n+            std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\n+            if (!cursor) {\n+                pwallet->WalletLogPrintf(\"Error getting database cursor for '%s' records\\n\", type);\n+                return DBErrors::CORRUPT;\n+            }\n+\n+            DatabaseCursor::Status status = cursor->Next(key, value);\n+            if (status != DatabaseCursor::Status::DONE) {\n+                pwallet->WalletLogPrintf(\"Error: Unexpected legacy entry found in descriptor wallet %s. The wallet might have been tampered with or created with malicious intent.\\n\", pwallet->GetName());\n+                return DBErrors::UNEXPECTED_LEGACY_ENTRY;\n+            }\n+        }\n+\n+        return DBErrors::LOAD_OK;\n+    }\n+\n+    // Load HD Chain\n+    // Note: There should only be one HDCHAIN record with no data following the type\n+    LoadResult hd_chain_res = LoadRecords(pwallet, batch, DBKeys::HDCHAIN,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadHDChain(pwallet, value, err) ? DBErrors:: LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, hd_chain_res.m_result);\n+\n+    // Load unencrypted keys\n+    LoadResult key_res = LoadRecords(pwallet, batch, DBKeys::KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, key_res.m_result);\n+\n+    // Load encrypted keys\n+    LoadResult ckey_res = LoadRecords(pwallet, batch, DBKeys::CRYPTED_KEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        return LoadCryptedKey(pwallet, key, value, err) ? DBErrors::LOAD_OK : DBErrors::CORRUPT;\n+    });\n+    result = std::max(result, ckey_res.m_result);\n+\n+    // Load scripts\n+    LoadResult script_res = LoadRecords(pwallet, batch, DBKeys::CSCRIPT,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        uint160 hash;\n+        key >> hash;\n+        CScript script;\n+        value >> script;\n+        if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+        {\n+            strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+            return DBErrors::NONCRITICAL_ERROR;\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, script_res.m_result);\n+\n+    // Check whether rewrite is needed\n+    if (ckey_res.m_records > 0) {\n+        // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+        if (last_client == 40000 || last_client == 50000) result = std::max(result, DBErrors::NEED_REWRITE);\n+    }\n+\n+    // Load keymeta\n+    std::map<uint160, CHDChain> hd_chains;\n+    LoadResult keymeta_res = LoadRecords(pwallet, batch, DBKeys::KEYMETA,\n+        [&hd_chains] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& strErr) {\n+        CPubKey vchPubKey;\n+        key >> vchPubKey;\n+        CKeyMetadata keyMeta;\n+        value >> keyMeta;\n+        pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+        // Extract some CHDChain info from this metadata if it has any\n+        if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+            // Get the path from the key origin or from the path string\n+            // Not applicable when path is \"s\" or \"m\" as those indicate a seed\n+            // See https://github.com/bitcoin/bitcoin/pull/12924\n+            bool internal = false;\n+            uint32_t index = 0;\n+            if (keyMeta.hdKeypath != \"s\" && keyMeta.hdKeypath != \"m\") {\n+                std::vector<uint32_t> path;\n+                if (keyMeta.has_key_origin) {\n+                    // We have a key origin, so pull it from its path vector\n+                    path = keyMeta.key_origin.path;\n+                } else {\n+                    // No key origin, have to parse the string\n+                    if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                        strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                        return DBErrors::NONCRITICAL_ERROR;\n+                    }\n+                }\n+\n+                // Extract the index and internal from the path\n+                // Path string is m/0'/k'/i'\n+                // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                // k == 0 for external, 1 for internal. i is the index\n+                if (path.size() != 3) {\n+                    strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[0] != 0x80000000) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                if ((path[2] & 0x80000000) == 0) {\n+                    strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n+                    return DBErrors::NONCRITICAL_ERROR;\n+                }\n+                internal = path[1] == (1 | 0x80000000);\n+                index = path[2] & ~0x80000000;\n+            }\n+\n+            // Insert a new CHDChain, or get the one that already exists\n+            auto [ins, inserted] = hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+            CHDChain& chain = ins->second;\n+            if (inserted) {\n+                // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                chain.seed_id = keyMeta.hd_seed_id;\n+            }\n+            if (internal) {\n+                chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n+            } else {\n+                chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n+            }\n+        }\n+        return DBErrors::LOAD_OK;\n+    });\n+    result = std::max(result, keymeta_res.m_result);\n+\n+    // Set inactive chains\n+    if (!hd_chains.empty()) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (legacy_spkm) {\n+            for (const auto& [hd_seed_id, chain] : hd_chains) {\n+                if (hd_seed_id != legacy_spkm->GetHDChain().seed_id) {\n+                    legacy_spkm->AddInactiveHDChain(chain);\n+                }\n+            }\n+        }\n+        else {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 376,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "7c13da13790617d5fe219efe5f52810a69eeb4ad",
      "in_reply_to_id": 1242372035,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-26T22:06:04Z",
      "updated_at": "2023-06-26T22:06:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242864916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242864916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 954,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 955,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242864971",
      "pull_request_review_id": 1499565829,
      "id": 1242864971,
      "node_id": "PRRC_kwDOABII585KFJ1L",
      "diff_hunk": "@@ -795,6 +785,37 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    // Note: There should only be one DEFAULTKEY with nothing trailing the type\n+    LoadResult default_key_res = LoadRecords(pwallet, batch, DBKeys::DEFAULTKEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey default_pubkey;\n+        try {\n+            value >> default_pubkey;\n+        } catch (const std::exception& e) {\n+            if (err.empty()) err = e.what();\n+            return DBErrors::CORRUPT;\n+        }\n+        if (!default_pubkey.IsValid()) {\n+            pwallet->WalletLogPrintf(\"Error reading wallet database: Default Key corrupt\\n\");\n+            return DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "aea1a43b372b2cecdafb83eaf3852ae27d4b6385",
      "in_reply_to_id": 1242385895,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-26T22:06:09Z",
      "updated_at": "2023-06-26T22:06:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242864971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242864971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": 804,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242865250",
      "pull_request_review_id": 1499566210,
      "id": 1242865250,
      "node_id": "PRRC_kwDOABII585KFJ5i",
      "diff_hunk": "@@ -1113,12 +1059,107 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    bool corrupted_tx = false;\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&corrupted_tx, &any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                // it can be fixed by removing tx data and rescanning.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;",
      "path": "src/wallet/walletdb.cpp",
      "position": 1119,
      "original_position": 108,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "dc1ef26e430abbf92ef39d2ce595adac651b949a",
      "in_reply_to_id": 1242640941,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed `corrupted_tx` as suggested.",
      "created_at": "2023-06-26T22:06:38Z",
      "updated_at": "2023-06-26T22:06:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242865250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242865250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1023,
      "original_line": 1023,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242886714",
      "pull_request_review_id": 1499603948,
      "id": 1242886714,
      "node_id": "PRRC_kwDOABII585KFPI6",
      "diff_hunk": "@@ -1112,12 +1058,101 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            // Use std::max as fill_wtx may have already set result to CORRUP;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f6b07b20e16f96a28509a509e44f8c5444a8215e",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            // Use std::max as fill_wtx may have already set result to CORRUPT;\r\n```",
      "created_at": "2023-06-26T22:40:08Z",
      "updated_at": "2023-06-26T22:40:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1242886714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242886714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243513852",
      "pull_request_review_id": 1498715782,
      "id": 1243513852,
      "node_id": "PRRC_kwDOABII585KHoP8",
      "diff_hunk": "@@ -855,6 +751,268 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "20d1fc50618911decb74e5b977afbb4ae8bb36ce",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 20d1fc50618911decb74e5b977afbb4ae8bb36ce: I think this is still wrong? Currently this only collects the first error (in cases where assigning the error is guarded by an empty check). Also, it is unused by the caller. Suggested fix:\r\n\r\n```diff\r\ndiff --git a/src/wallet/walletdb.cpp b/src/wallet/walletdb.cpp\r\nindex 1fab6a7f9c..e466c1c477 100644\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -754,7 +754,6 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\r\n struct LoadResult\r\n {\r\n     DBErrors m_result{DBErrors::LOAD_OK};\r\n-    std::string m_error{};\r\n     int m_records{0};\r\n };\r\n \r\n@@ -786,9 +785,10 @@ static LoadResult LoadRecords(CWallet* pwallet, DatabaseBatch& batch, const std:\r\n         std::string type;\r\n         ssKey >> type;\r\n         assert(type == key);\r\n-        DBErrors record_res = load_func(pwallet, ssKey, ssValue, result.m_error);\r\n+        std::string log_error{};\r\n+        DBErrors record_res = load_func(pwallet, ssKey, ssValue, log_error);\r\n         if (record_res != DBErrors::LOAD_OK) {\r\n-            pwallet->WalletLogPrintf(\"%s\\n\", result.m_error);\r\n+            pwallet->WalletLogPrintf(\"%s\\n\", log_error);\r\n         }\r\n         result.m_result = std::max(result.m_result, record_res);\r\n         ++result.m_records;\r\n```\r\n\r\nAlso, the commit description seems to imply behavior changed where it didn't, no?\r\n\r\nSuggested range diff:\r\n\r\n```\r\n 8:  20d1fc5061 !  8:  0bf8188513 walletdb: Refactor legacy wallet record loading into its own function\r\n    @@ Commit message\r\n     \r\n         Exceptions are handled on a per-record type basis, rather than globally.\r\n         For private keys in a legacy wallet and the encryption keys,\r\n    -    a deserialization error will result in an early return rather than\r\n    +    a deserialization error will result in a\r\n         contined loading of the remaining keys, with the resulting wallet\r\n    -    failing to load. For other record types, errors that were previously\r\n    +    failing to load, unchanged from previous behavior. For other record types, errors that were previously\r\n         handled by the global exception handler will result in loading failure\r\n    +    , also skipping the continued loading of remaining keys,\r\n         instead of a non-critical error.\r\n```\r\n\r\nFor \"other record types\", could also unify the section with the section in the next commit, which should be the same?\r\n\r\n```\r\n    Exception handling for these records changes to a per-record type basis,\r\n    rather than globally. This results in some records now failing with a\r\n    critical error rather than a non-critical one.\r\n",
      "created_at": "2023-06-27T10:28:17Z",
      "updated_at": "2023-06-27T11:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1243513852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243513852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 757,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243525495",
      "pull_request_review_id": 1498715782,
      "id": 1243525495,
      "node_id": "PRRC_kwDOABII585KHrF3",
      "diff_hunk": "@@ -855,6 +751,268 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "20d1fc50618911decb74e5b977afbb4ae8bb36ce",
      "in_reply_to_id": 1243513852,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, could mention that for other record types, previous early returns from LoadWallet like `UNEXPECTED_LEGACY_ENTRY` would now be scheduled for later, and it continues to load more prefix-keys?",
      "created_at": "2023-06-27T10:36:21Z",
      "updated_at": "2023-06-27T11:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1243525495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243525495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 757,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243571310",
      "pull_request_review_id": 1498715782,
      "id": 1243571310,
      "node_id": "PRRC_kwDOABII585KH2Ru",
      "diff_hunk": "@@ -794,6 +784,37 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    // Note: There should only be one DEFAULTKEY with nothing trailing the type\n+    LoadResult default_key_res = LoadRecords(pwallet, batch, DBKeys::DEFAULTKEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey default_pubkey;\n+        try {\n+            value >> default_pubkey;\n+        } catch (const std::exception& e) {\n+            if (err.empty()) err = e.what();",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "877382511cc63b64e22bb9f06fdbcb1df0c06f55",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "877382511cc63b64e22bb9f06fdbcb1df0c06f55: Any reason to check for err.empty, when the error shouldn't be empty, and the later assignment also doesn't check for empty?",
      "created_at": "2023-06-27T11:18:30Z",
      "updated_at": "2023-06-27T11:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1243571310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243571310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 799,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243917544",
      "pull_request_review_id": 1501170033,
      "id": 1243917544,
      "node_id": "PRRC_kwDOABII585KJKzo",
      "diff_hunk": "@@ -1112,12 +1058,101 @@ static DBErrors LoadAddressBookRecords(CWallet* pwallet, DatabaseBatch& batch) E\n     return result;\n }\n \n+static DBErrors LoadTxRecords(CWallet* pwallet, DatabaseBatch& batch, std::vector<uint256>& upgraded_txs, bool& any_unordered) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    AssertLockHeld(pwallet->cs_wallet);\n+    DBErrors result = DBErrors::LOAD_OK;\n+\n+    // Load tx record\n+    any_unordered = false;\n+    LoadResult tx_res = LoadRecords(pwallet, batch, DBKeys::TX,\n+        [&any_unordered, &upgraded_txs] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet) {\n+        DBErrors result = DBErrors::LOAD_OK;\n+        uint256 hash;\n+        key >> hash;\n+        // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+        // callback fills with transaction metadata.\n+        auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+            if(!new_tx) {\n+                // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                err = \"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\";\n+                result = DBErrors::CORRUPT;\n+                return false;\n+            }\n+            value >> wtx;\n+            if (wtx.GetHash() != hash)\n+                return false;\n+\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!value.empty())\n+                {\n+                    uint8_t fTmp;\n+                    uint8_t fUnused;\n+                    std::string unused_string;\n+                    value >> fTmp >> fUnused >> unused_string;\n+                    pwallet->WalletLogPrintf(\"LoadWallet() upgrading tx ver=%d %d %s\\n\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    pwallet->WalletLogPrintf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                upgraded_txs.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                any_unordered = true;\n+\n+            return true;\n+        };\n+        if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+            // Use std::max as fill_wtx may have already set result to CORRUP;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "f6b07b20e16f96a28509a509e44f8c5444a8215e",
      "in_reply_to_id": 1242886714,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-06-27T15:08:27Z",
      "updated_at": "2023-06-27T15:08:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1243917544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243917544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243918023",
      "pull_request_review_id": 1501170716,
      "id": 1243918023,
      "node_id": "PRRC_kwDOABII585KJK7H",
      "diff_hunk": "@@ -794,6 +784,37 @@ static DBErrors LoadLegacyWalletRecords(CWallet* pwallet, DatabaseBatch& batch,\n     });\n     result = std::max(result, pool_res.m_result);\n \n+    // Deal with old \"wkey\" and \"defaultkey\" records.\n+    // These are not actually loaded, but we need to check for them\n+\n+    // We don't want or need the default key, but if there is one set,\n+    // we want to make sure that it is valid so that we can detect corruption\n+    // Note: There should only be one DEFAULTKEY with nothing trailing the type\n+    LoadResult default_key_res = LoadRecords(pwallet, batch, DBKeys::DEFAULTKEY,\n+        [] (CWallet* pwallet, DataStream& key, CDataStream& value, std::string& err) {\n+        CPubKey default_pubkey;\n+        try {\n+            value >> default_pubkey;\n+        } catch (const std::exception& e) {\n+            if (err.empty()) err = e.what();",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "877382511cc63b64e22bb9f06fdbcb1df0c06f55",
      "in_reply_to_id": 1243571310,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed",
      "created_at": "2023-06-27T15:08:38Z",
      "updated_at": "2023-06-27T15:08:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1243918023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243918023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 799,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243920626",
      "pull_request_review_id": 1501176390,
      "id": 1243920626,
      "node_id": "PRRC_kwDOABII585KJLjy",
      "diff_hunk": "@@ -855,6 +751,268 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "20d1fc50618911decb74e5b977afbb4ae8bb36ce",
      "in_reply_to_id": 1243513852,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Implemented the suggested changes.\r\n\r\n> Also, could mention that for other record types, previous early returns from LoadWallet like `UNEXPECTED_LEGACY_ENTRY` would now be scheduled for later, and it continues to load more prefix-keys?\r\n\r\nI don't think that's necessarily true? I'm planning on revisiting the error handling in a followup.",
      "created_at": "2023-06-27T15:10:17Z",
      "updated_at": "2023-06-27T15:10:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1243920626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243920626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 757,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243941211",
      "pull_request_review_id": 1501221762,
      "id": 1243941211,
      "node_id": "PRRC_kwDOABII585KJQlb",
      "diff_hunk": "@@ -855,6 +751,268 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "20d1fc50618911decb74e5b977afbb4ae8bb36ce",
      "in_reply_to_id": 1243513852,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can see the early return in LoadWallet in master here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/7ee41217b3b3fe4d8b7eb4fd1d4577b9b33d466d/src/wallet/walletdb.cpp#L863\r\n\r\nIn this pull you can see that it calls `std::max` and then continues with LoadWallet:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/3c83b1d884b419adece95b335b6e956e7459a7ef/src/wallet/walletdb.cpp#L1165-L1168\r\n",
      "created_at": "2023-06-27T15:24:27Z",
      "updated_at": "2023-06-27T15:24:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1243941211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243941211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 757,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243950140",
      "pull_request_review_id": 1501242820,
      "id": 1243950140,
      "node_id": "PRRC_kwDOABII585KJSw8",
      "diff_hunk": "@@ -855,6 +751,268 @@ static DBErrors LoadWalletFlags(CWallet* pwallet, DatabaseBatch& batch) EXCLUSIV\n     return DBErrors::LOAD_OK;\n }\n \n+struct LoadResult\n+{\n+    DBErrors m_result{DBErrors::LOAD_OK};\n+    std::string m_error{};",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "3c83b1d884b419adece95b335b6e956e7459a7ef",
      "original_commit_id": "20d1fc50618911decb74e5b977afbb4ae8bb36ce",
      "in_reply_to_id": 1243513852,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What I meant was that there are records that now early return but didn't previously, but I suppose that's the opposite of what you were talking about.",
      "created_at": "2023-06-27T15:30:28Z",
      "updated_at": "2023-06-27T15:30:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24914#discussion_r1243950140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243950140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 757,
      "side": "RIGHT"
    }
  ]
}