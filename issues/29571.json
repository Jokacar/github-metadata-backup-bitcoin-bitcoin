{
  "type": "issue",
  "issue": {
    "id": 2170246009,
    "node_id": "I_kwDOABII586BW1N5",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29571",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29571/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29571/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29571/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/29571",
    "number": 29571,
    "state": "closed",
    "state_reason": "not_planned",
    "title": "Standardize v0 witness outputs of any length",
    "body": "### Please describe the feature you'd like to see added.\n\nCurrently any length any-version witness outputs are standard *except* v0 witness outputs of unknown length. This is fine, I guess, except its a bit confusing and easy to mis-implement in two-party protocols that wish to ensure the transactions they generate are standard. Is there a difference in v0 unknown-length inputs that merits them being nonstandard or should they simply be made standard?\n\n### Is your feature related to a problem, if so please describe it.\n\n_No response_\n\n### Describe the solution you'd like\n\n_No response_\n\n### Describe any alternatives you've considered\n\n_No response_\n\n### Please leave any additional context\n\n_No response_",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 2,
    "closed_at": "2024-03-07T17:07:17Z",
    "created_at": "2024-03-05T22:27:23Z",
    "updated_at": "2024-03-07T17:07:48Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 12020314198,
      "node_id": "LE_lADOABII586BW1N5zwAAAALMd3BW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12020314198",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-05T22:27:24Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-05T22:27:29Z",
      "updated_at": "2024-03-05T22:27:29Z",
      "source": {
        "issue": {
          "id": 1806779408,
          "node_id": "PR_kwDOB0Kp2s5VnimQ",
          "url": "https://api.github.com/repos/lightningdevkit/rust-lightning/issues/2419",
          "repository_url": "https://api.github.com/repos/lightningdevkit/rust-lightning",
          "labels_url": "https://api.github.com/repos/lightningdevkit/rust-lightning/issues/2419/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/lightningdevkit/rust-lightning/issues/2419/comments",
          "events_url": "https://api.github.com/repos/lightningdevkit/rust-lightning/issues/2419/events",
          "html_url": "https://github.com/lightningdevkit/rust-lightning/pull/2419",
          "number": 2419,
          "state": "open",
          "state_reason": null,
          "title": "Interactive Transaction Construction",
          "body": "Creating an interactive tx constructor based on [the interactive-tx spec](https://github.com/lightning/bolts/pull/851).\r\n\r\n## Implementation\r\nWe created an `InteractiveTxConstructor`, which itself houses a state machine (`state_machine`), with the temporary channel id (`channel_id`), alongside a set of inputs and outputs that a user would need to define up front prior to commencing negotiation.\r\n\r\nGiven the complexity of number of states and possible transitions, we use types wherever we can to achieve compile-time assurances that we never allow any invalid state transitions to occur.\r\n\r\n### Tracking States\r\n\r\n`StateMachine` itself is an enum with a few states it could take on:\r\n\r\n1. `LocalChange` – state we land when we send a message to our counterparty.\r\n2. `RemoteChange` – state we land when we receive some arbitrary message from our counterparty that is awaiting our response\r\n3. `LocalTxComplete` – When we have sent a `tx_complete` message and are waiting for the counterparty's response.\r\n4. `RemoteTxComplete` – When our counterparty has sent us `tx_complete` and is waiting for ours/additional inputs outputs.\r\n5. `NegotiationComplete` – We exchanged consecutive `tx_complete` with the counterparty.\r\n6. `NegotiationAborted` – The negotiation has failed and cannot be continued.\r\n\r\n### States and Traits\r\nThese states implement traits that we leverage on later to define valid state transitions. The traits (and their implementors) are:\r\n\r\n**LocalState (trait)** – Category of states where we have sent some message to the counterparty, and we are waiting for a response (`LocalChange`, `LocalTxComplete`)\r\n**RemoteState (trait)** – Category of states that our counterparty has put us in after we receive a message from them. (`RemoteChange`, `RemoteTxComplete`).\r\n\r\nYou may lookup these definitions by searching usages of the `define_state!` macro.\r\n\r\n### Defining `StateTransition`s\r\nUsing the groupings we defined above, that allows us to give them a common set of behaviors without needing to repeat ourselves.\r\n\r\n**LocalStates can...** handle transitions upon receiving `TxAddInput`, `TxRemoveInput`, `TxAddOutput`, `TxRemoveOutput` and they transition us to `RemoteChange`.\r\n\r\n**RemoteStates can...** handle the same transitions as `LocalState`s, except they transition back to `LocalState`.\r\n\r\nAnd some additional state transitions:\r\n\r\n**LocalChange can...** handle transitions upon receiving `TxComplete`, transitions us to `RemoteTxComplete`\r\n**RemoteChange can...** handle transitions upon receiving `TxComplete`, transitions us to `LocalTxComplete`\r\n\r\nWe define these possible state transitions using the `define_state_transitions!` macro\r\n\r\n### Defining State Machine Transitions\r\n`StateTransition`s define transitions between specific states for local and remote states, depending on the data type it receives. However, we still need to be able to handle transitions for the entire state machine. Rather than handling data-specific responses, we still need to orchestrate overall state transitions.\r\n\r\nThat's what this section is about.\r\n\r\nFor this, we lean on the `define_state_transitions!` macro, whose calls define the following behaviours:\r\n\r\n**When state machine is in a LocalChange or RemoteChange state:**\r\nFor each message type (`tx_add_input`, `tx_add_output`, `tx_remove_input`, `tx_remove_output`), there are two sets of transitions:\r\n\r\n1. From `RemoteChange` to `LocalChange`, and from `RemoteTxComplete` to `LocalChange` for local transitions (handled by $to_local_transition).\r\n2. From `LocalChange` to `RemoteChange`, and from `LocalTxComplete` to `RemoteChange` for remote transitions (handled by $to_remote_transition).\r\n\r\n**When the state machine is in RemoteChange:**\r\n\r\nUpon receiving `tx_complete`, it should transition to `LocalTxComplete`.  If the state is `RemoteTxComplete`, it should transition to `NegotiationComplete`\r\n\r\n**When the state machine is in LocalChange:**\r\n\r\nUpon receiving `tx_complete`, it should transition to `RemoteTxComplete`.  If the state is `LocalTxComplete`, it should transition to `NegotiationComplete`\r\n\r\n## Testing\r\nOur test paradigm prioritizes ensuring that we **abort when the spec says we should**. Based on our implementation of it, the spec only prescribes abort behaviour under the circumstances where peers could land in a scenario where the final transaction would be invalid. For example, it explicitly tells us to abort when a user provides an input/output with things like the wrong sequence type, a final transaction that is too heavy, or has too many inputs and outputs, etc. \r\n\r\nHowever, it  doesn't really say what Alice should do if, for example, Bob sends `tx_complete` to Alice, but sends `tx_add_input` (or any other message) again before Alice responds. In those cases of receiving unexpected messages, in favor of caution, we have made our own choice to abort the negotiation. \r\n\r\nIn other words, we test the overall `InteractiveTxConstructor` outcomes, but do not currently provide coverage/assertions of the individual state transitions themselves in `InteractiveTxStateMachine`. \r\n\r\n## Additional Notes to Reviewers\r\nOur testing paradigm currently has a few blind spots:\r\n1. We currently cannot test remote_tx_add_(input|output) check for valid serial id parity. This is because our test setup talks between our own implementation of interactive transaction constructor, which makes it impossible to have a serial id with the wrong parity. When we [instantiate the constructor](https://github.com/lightningdevkit/rust-lightning/blob/4f87aad43bd829830002236c64b832b35b76df99/lightning/src/ln/interactivetxs.rs#L614-L621), generate_local_serial_id explicitly flips a bit to make sure we land on the right parity.\r\n2. Given that our implementation of interactive transaction constructor requires users to contribute inputs and outputs upfront, we don't really allow for an LDK user to remove them at any point of the negotiation. This means that our testing paradigm lacks the ability to cover remote_tx_remove(input|output) – which are really just parity checks.",
          "user": {
            "login": "jurvis",
            "id": 5944973,
            "node_id": "MDQ6VXNlcjU5NDQ5NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5944973?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jurvis",
            "html_url": "https://github.com/jurvis",
            "followers_url": "https://api.github.com/users/jurvis/followers",
            "following_url": "https://api.github.com/users/jurvis/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jurvis/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jurvis/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jurvis/subscriptions",
            "organizations_url": "https://api.github.com/users/jurvis/orgs",
            "repos_url": "https://api.github.com/users/jurvis/repos",
            "events_url": "https://api.github.com/users/jurvis/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jurvis/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/lightningdevkit/rust-lightning/pulls/2419",
            "html_url": "https://github.com/lightningdevkit/rust-lightning/pull/2419",
            "diff_url": "https://github.com/lightningdevkit/rust-lightning/pull/2419.diff",
            "patch_url": "https://github.com/lightningdevkit/rust-lightning/pull/2419.patch"
          },
          "created_at": "2023-07-17T00:39:10Z",
          "updated_at": "2024-03-07T17:00:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1979755388,
      "node_id": "IC_kwDOABII5852AKt8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1979755388",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-05T22:37:18Z",
      "updated_at": "2024-03-05T22:42:26Z",
      "author_association": "MEMBER",
      "body": "Witness v0 outputs with length other than 20 or 32 are consensus-unspendable (unfortunately). Is that a good enough reason?\n\nBIP141:\n\n> If the version byte is 0, but the witness program is neither 20 nor 32 bytes, the script must fail.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/29571#issuecomment-1979755388",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29571"
    },
    {
      "event": "closed",
      "id": 12045448923,
      "node_id": "CE_lADOABII586BW1N5zwAAAALN9vbb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12045448923",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T17:07:17Z"
    },
    {
      "event": "commented",
      "id": 1984022931,
      "node_id": "IC_kwDOABII5852QcmT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1984022931",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T17:07:47Z",
      "updated_at": "2024-03-07T17:07:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Does that mean it should follow the OP_RETURN length limit? :trollface: ",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/29571#issuecomment-1984022931",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29571"
    }
  ]
}