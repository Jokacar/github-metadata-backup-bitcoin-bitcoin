{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
    "id": 1622183043,
    "node_id": "PR_kwDOABII585gsIyD",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28970",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28970.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28970.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a053911cb9957797faff7f68dbd6deb6b6080578",
    "number": 28970,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "p2p: opportunistically accept 1-parent-1-child packages",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This enables 1p1c packages to propagate in the \"happy case\" (i.e. not reliable if adversaries are actively attacking) and contains a lot of package relay-related code. See https://github.com/bitcoin/bitcoin/issues/27463 for overall package relay tracking.\r\n\r\nRationale: This is \"non-robust 1-parent-1-child package relay\" which is immediatley useful.\r\n- Relaying 1-parent-1-child CPFP when mempool min feerate is high would be a subset of all package relay use cases, but a pretty significant improvement over what we have today, where such transactions don't propagate at all. [1]\r\n- Today, a miner can run this with a normal/small maxmempool to get revenue from CPFP'd transactions without losing out on the ones with parents below mempool minimum feerate.\r\n- The majority of this code is useful for building package relay that is more robust and more general than 1p1c e.g. #27742.\r\n\r\n\r\nThe first 2 commits are followups from #29619:\r\n- https://github.com/bitcoin/bitcoin/pull/29619#discussion_r1523094034\r\n- https://github.com/bitcoin/bitcoin/pull/29619#discussion_r1519819257\r\n\r\nQ: What makes this short of a more full package relay feature?\r\n\r\n(1) it only supports packages in which 1 of the parents needs to be CPFP'd by the child. That includes 1-parent-1-child packages and situations in which the other parents already pay for themselves (and are thus in mempool already when the package is submitted). More general package relay is a future improvement that requires more engineering in mempool and validation - see #27463.\r\n\r\n(2) We rely on having kept the child in orphanage, and don't make any attempt to protect it while we wait to receive the parent. If we are experiencing a lot of orphanage churn (e.g. an adversary is purposefully sending us a lot of transactions with missing inputs), we will fail to submit packages. This limitation has been around for 12+ years, see #27742 which adds a token bucket scheme for protecting package-related orphans at a limited rate per peer.\r\n\r\n(3) Our orphan-handling logic is somewhat opportunistic; we don't make much effort to resolve an orphan beyond asking the child's sender for the parents. This means we may miss packages if the first sender fails to give us the parent (intentionally or unintentionally). To make this more robust, we need receiver-side logic to retry orphan resolution with multiple peers. This is also an existing problem which has a proposed solution in #28031.\r\n\r\n[1]: see this writeup and its links https://github.com/bitcoin/bips/blob/02ec218c7857ef60914e9a3d383b68caf987f70b/bip-0331.mediawiki#propagate-high-feerate-transactions",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2023-11-29T16:25:29Z",
    "updated_at": "2024-04-19T10:53:24Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "d2cca05e7d348a0867ac88a4bb5b33679c745f11",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "glozow:2023-11-1p1c",
      "ref": "2023-11-1p1c",
      "sha": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 3,
        "stargazers_count": 12,
        "watchers_count": 12,
        "size": 246195,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-04-19T10:53:22Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2024-02-29T16:10:17Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "c05c214f2e9cfd6070a3c7680bfa09358fd9d97a",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35142,
        "stargazers_count": 75594,
        "watchers_count": 75594,
        "size": 254798,
        "default_branch": "master",
        "open_issues_count": 705,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-04-19T10:53:25Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-04-19T10:51:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1068,
    "deletions": 15,
    "changed_files": 11,
    "commits": 9,
    "review_comments": 164,
    "comments": 23
  },
  "events": [
    {
      "event": "labeled",
      "id": 11098739910,
      "node_id": "LE_lADOABII5854OHi1zwAAAAKViVTG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11098739910",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T16:25:29Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 1832270655,
      "node_id": "IC_kwDOABII585tNjs_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1832270655",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T16:25:32Z",
      "updated_at": "2024-04-12T03:32:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28970).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1970039534), [murchandamus](https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1977655865) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1832270655",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T16:26:49Z",
      "updated_at": "2023-11-29T16:26:49Z",
      "source": {
        "issue": {
          "id": 1668056618,
          "node_id": "I_kwDOABII585jbIYq",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/27463",
          "number": 27463,
          "state": "open",
          "state_reason": null,
          "title": "Package Relay Project Tracking",
          "body": "This issue will be edited frequently to reflect the current status of the project.\r\n\r\n### What is ready for review now?\r\n:point_down: :point_down: :point_down: :point_down: :point_down: :point_down: :point_down:\r\np2p: #28970\r\nmempool: #28984\r\n:point_up: :point_up: :point_up: :point_up: :point_up: :point_up: :point_up: \r\n\r\n### Why does the roadmap look like this?\r\n:point_right: #29319 :point_left: \r\n\r\n### Tasks and PRs\r\n**(1) multi-parent-1-child package validation**\r\n\r\nWhat we get: the ability to validate multiple transactions, including CPFP of transactions below the mempool minimum feerate. An RPC to submit things locally.\r\n\r\n<details><summary>See PRs</summary>\r\n\r\n- Enable validation of multiple transactions in MemPoolAccept\r\n  - [x] Dependency: #21062\r\n  - [x] Dependency: #23381\r\n  - [x] Main feature 1/2: #20833\r\n  - [x] Main feature 2/2: #21800\r\n  - [x] Followup: #22084\r\n- Enable package CPFP\r\n  - [x] Main feature 1/2: #22674\r\n  - [x] Followup: #24310\r\n  - [x] Followup: #23804\r\n  - [x] Main feature 2/2: #24152\r\n  - [x] short term bug fix: avoid the risk of below-minrelaytxfee transactions hanging around forever in the mempool  #26933\r\n- RPC access\r\n  - [x] #24836\r\n  - [x] #26646\r\n  - [x] #27609\r\n  - [x] #28848\r\n  - [x] #28950\r\n  - [x] Followup: #29722\r\n  - [x] Followup: #29735 \r\n- Fuzzing and bug fixes\r\n  - [x] #28450\r\n  - [x] #28764\r\n  - [x] #28825 \r\n  - [x] Bug fix: #28251\r\n  - [x] Bug fix: #28471\r\n  - [x] Bug fix: #28472\r\n</details>\r\n\r\n**(2a) Topologically Restricted Until Confirmation (v3) transaction policy**\r\n\r\nWhat we get: an opt-in policy for anti-pinning in single transaction or 1-parent-1-child package scenarios. Also, package CPFP of 0-fee parent and package RBF for restricted topologies prior to cluster mempool.\r\n- Topologically Restricted Until Confirmation (v3) transaction policy\r\n  - [x] Main feature: #28948\r\n  - [x] Followup: #29424\r\n  - [x] Sibling Eviction: #29306\r\n  - [ ] Enable v3 on mainnet: #29496\r\n- Also see: #29873\r\n- Also see: #29427\r\n\r\n**(2b) Package RBF for cluster size 2**\r\n- Enable Package RBF for 1-parent-1-child situations\r\n   - [x] Dependency: #22796 \r\n   - [x] Dependency: #22675 \r\n   - [x] Dependency: #22855\r\n   - [x] Dependency: #29242\r\n     - [x] Followup: #29724\r\n     - [ ] #29757\r\n   - [ ] Main feature: #28984\r\n\r\n**(3) 1-parent-1-child package relay**\r\n\r\nWhat we get: package relay of 1-parent-1-child packages.\r\nProtocols like LN can use this to create 0-fee presigned transactions with a single, 0-value anchor output; 0-fee commitment transactions can replace each other using the fees of the child attached to the anchor.\r\nThis should provide an adequate replacement for CPFP carve out, which is helpful for the next step (see #29319).\r\n\r\n- Opportunistically submit 1-parent-1-child packages\r\n  - [x] Dependency: #28785\r\n  - [ ] WIP #28970\r\n- Try multiple peers for orphan resolution, make orphanage more robust\r\n  - [x] Dependency: #28785\r\n  - [x] Dependency: #28199\r\n  - [x] Dependency: #28364\r\n  - [ ] Main feature: #28031 \r\n  - [ ] WIP: token bucket orphanage protection\r\n\r\n**(4) cluster mempool**\r\n\r\nWhat we get: the ability to quickly assess the incentive compatibility of transactions, safer eviction, more incentive-compatible and pinning-free RBF rules.\r\n\r\n- [ ] Cluster Mempool #27677\r\n  - [ ] #28676\r\n\r\n\r\n**(5) more general package relay**\r\n\r\nGoals: propagate incentive-compatible packages that are more compelx than 1p1c, safely evaluate replacements within packages, handle orphans better.\r\n\r\n- WIP: Package RBF with less restrictive topologies\r\n- WIP: Package validation of less restrictive topologies\r\n- Ephemeral Anchors\r\n  - #29001\r\n  - bitcoin/bips/pull/1524\r\n- [ ] use BIP 331 ancestor package relay for orphan-handling\r\n  - [ ] bitcoin/bips/pull/1382\r\n  - [ ] #27742 \r\n- [ ] Some sender-initiated package relay protocol using chunks (?)\r\n\r\n<details><summary>See also:</summary>\r\n\r\nSuperseded/Deferred Work\r\n- Sub-package evaluation with ancestor packages\r\n- [x] #28758\r\n  - [x] #28808\r\n  - #26711 \r\n  - #28813\r\n- #27018\r\n- #25038\r\n- #26403\r\n\r\nPrehistory\r\n- [x] #16400 \r\n- #16401 \r\n- #14895 \r\n- #19621 \r\n- https://gist.github.com/sdaftuar/8756699bfcad4d3806ba9f3396d4e66a\r\n</details>",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 15,
          "created_at": "2023-04-14T11:14:50Z",
          "updated_at": "2024-04-16T07:30:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "renamed",
      "id": 11098760497,
      "node_id": "RTE_lADOABII5854OHi1zwAAAAKViaUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11098760497",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T16:27:12Z",
      "rename": {
        "from": "p2p: opportunistically accept 1-parent-1-child packages",
        "to": "[WIP] p2p: opportunistically accept 1-parent-1-child packages"
      }
    },
    {
      "event": "labeled",
      "id": 11100054509,
      "node_id": "LE_lADOABII5854OHi1zwAAAAKVnWPt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11100054509",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T18:27:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T23:10:55Z",
      "updated_at": "2023-11-29T23:10:55Z",
      "source": {
        "issue": {
          "id": 1945845586,
          "node_id": "PR_kwDOABII585c7wA9",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28658",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28658/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28658/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28658/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28658",
          "number": 28658,
          "state": "closed",
          "state_reason": null,
          "title": "type-safe(r) GenTxid constructors",
          "body": "Builds on https://github.com/bitcoin/bitcoin/pull/28107\r\n\r\nTiny(<30 loc) set of changes that detects issues with fuzz targets in master, and longer term should make things safer.\r\n\r\nMost of this `GenTxid::Txid(Txid::FromUint256())` chaining can be removed by further work pushing the types \"up\", and maybe other helper functions that make them directly out of `COutPoint`s or similar since that appears to be a common pattern.",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28658",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28658",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28658.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28658.patch"
          },
          "closed_at": "2023-12-04T19:46:30Z",
          "created_at": "2023-10-16T18:29:41Z",
          "updated_at": "2023-12-05T11:21:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-08T15:11:54Z",
      "updated_at": "2023-12-08T15:11:54Z",
      "source": {
        "issue": {
          "id": 2032644617,
          "node_id": "PR_kwDOABII585hhfAF",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29031",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29031/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29031/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29031/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29031",
          "number": 29031,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: Improve fuzzing stability for txorphan harness",
          "body": "The `txorphan` harness has low stability as eviction of orphan txs is entirely random at the moment.\r\n\r\nFix this by passing the rng to `LimitOrphans`, which can be deterministic in tests.\r\n\r\nAlso see #29018.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29031",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29031",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29031.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29031.patch"
          },
          "closed_at": "2023-12-11T12:34:46Z",
          "created_at": "2023-12-08T13:18:13Z",
          "updated_at": "2023-12-11T13:30:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 11210056927,
      "node_id": "LE_lADOABII5854OHi1zwAAAAKcK-Tf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11210056927",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T12:53:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11212029805,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAAKcSf9t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11212029805",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T15:28:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11212172220,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAAKcTCu8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11212172220",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T15:39:23Z"
    },
    {
      "event": "unlabeled",
      "id": 11213318061,
      "node_id": "UNLE_lADOABII5854OHi1zwAAAAKcXaet",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11213318061",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T17:09:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 11213382508,
      "node_id": "UNLE_lADOABII5854OHi1zwAAAAKcXqNs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11213382508",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T17:14:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1850749413,
      "node_id": "IC_kwDOABII585uUDHl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850749413",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T19:31:03Z",
      "updated_at": "2023-12-11T19:31:03Z",
      "author_association": "MEMBER",
      "body": "Rebased and fixed CI. This is in draft because I'm focusing on v3 stuff, can be reviewed for its approach.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1850749413",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T14:06:45Z",
      "updated_at": "2023-12-13T14:06:45Z",
      "source": {
        "issue": {
          "id": 2012508541,
          "node_id": "PR_kwDOABII585gc3y_",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28948",
          "number": 28948,
          "state": "closed",
          "state_reason": null,
          "title": "v3 transaction policy for anti-pinning",
          "body": "See #27463 for overall package relay tracking.\r\n\r\nDelving Bitcoin discussion thread: https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340\r\nDelving Bitcoin discussion for LN usage: https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418\r\n\r\nRationale:\r\n- There are various pinning problems with RBF and our general ancestor/descendant limits. These policies help mitigate many pinning attacks and make package RBF feasible (see #28984 which implements package RBF on top of this). I would focus the most here on Rule 3 pinning. [1][2]\r\n- Switching to a cluster-based mempool (see #27677 and #28676) requires the removal of CPFP carve out, which applications depend on. V3 + package RBF + ephemeral anchors + 1-parent-1-child package relay provides an intermediate solution.\r\n\r\nV3 policy is for \"Priority Transactions.\" [3][4] It allows users to opt in to more restrictive topological limits for shared transactions, in exchange for the more robust fee-bumping abilities that offers. Even though we don't have cluster limits, we are able to treat these transactions as having as having a maximum cluster size of 2.\r\n\r\nImmediate benefits:\r\n\r\n- You can presign a transaction with 0 fees (not just 1sat/vB!) and add a fee-bump later.\r\n- Rule 3 pinning is reduced by a significant amount, since the attacker can only attach a maximum of 1000vB to your shared transaction.\r\n \r\nThis also enables some other cool things (again see #27463 for overall roadmap):\r\n- Ephemeral Anchors\r\n- Package RBF for these 1-parent-1-child packages. That means e.g. a commitment tx + child can replace another commitment tx using the child's fees.\r\n- We can transition to a \"single anchor\" universe without worrying about package limit pinning. So current users of CPFP carve out would have something else to use.\r\n- We can switch to a cluster-based mempool [5] (#27677 #28676), which removes CPFP carve out [6].\r\n\r\n[1]: Original mailing list post and discussion about RBF pinning problems https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html\r\n[2]: A FAQ is \"we need this for cluster mempool, but is this still necessary afterwards?\" There are some pinning issues that are fixed here and not fully fixed in cluster mempool, so we will still want this or something similar afterward.\r\n[3]: Mailing list post for v3 https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html\r\n[4]: Original PR #25038 also contains a lot of the discussion\r\n[5]: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/7\r\n[6]: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 84,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28948",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28948.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28948.patch"
          },
          "closed_at": "2024-02-10T04:38:12Z",
          "created_at": "2023-11-27T15:17:11Z",
          "updated_at": "2024-03-01T11:54:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11276598910,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAAKgIz5-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11276598910",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-18T13:03:52Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-19T00:43:22Z",
      "updated_at": "2023-12-19T00:43:22Z",
      "source": {
        "issue": {
          "id": 1789806361,
          "node_id": "PR_kwDOABII585Ut7YI",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28031",
          "number": 28031,
          "state": "open",
          "state_reason": null,
          "title": "Package Relay 1/3: Introduce TxDownloadManager and improve orphan-handling",
          "body": "This is milestone 1 of package relay p2p changes. See #27463 for full project tracking.\r\n\r\nPlease see #27742 for how this PR fits into the big picture. I strongly suggest that reviewers look at that PR first to decide if they are comfortable with the overall approach.\r\n\r\nThis PR is mainly refactors, with a few behavior changes and improvements:\r\n- Introduces `TxDownloadManager`, which handles all transaction downloading. It contains the `TxRequestTracker`, `TxOrphanage`, and filters for `AlreadyHaveTx`.\r\n- Updates logs for tx {validation, relay, orphans} to include both txid and wtxid when possible.\r\n- Adds a new log category, `TXPACKAGES`. Logging in the orphanage is changed from `MEMPOOL` to `TXPACKAGES`.\r\n- Adds support for tracking when multiple peers provided the same tx in the orphanage.\r\n- Makes `TxDownloadManager` responsible for tracking the orphans we need to resolve and deciding how/when to resolve them.\r\n- Adds all announcers of an orphan as potential resolution candidates. This tracker is a `TxDownloadManager` which helps us schedule requests.\r\n   - In this PR, \"orphan resolution\" means requesting missing parents by `getdata(MSG_TX | MSG_WITNESS_FLAG, missing_txid)`.\r\n    - In a future PR, we'll add another resolution method, requesting ancestor wtxids using `getdata(MSG_ANCPKGINFO, orphan_wtxid)`.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28031",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28031.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28031.patch"
          },
          "created_at": "2023-07-05T15:30:40Z",
          "updated_at": "2024-03-09T02:14:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-20T02:00:36Z",
      "updated_at": "2023-12-20T02:00:36Z",
      "source": {
        "issue": {
          "id": 1824626893,
          "node_id": "PR_kwDOABII585Wjy4M",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28170",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28170/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28170/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28170/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28170",
          "number": 28170,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: adaptive connections services flags",
          "body": "Derived from #28120 discussion.\r\n\r\nBy relocating the peer desirable services flags into the peer manager, we\r\nallow the connections acceptance process to handle post-IBD potential\r\nstalling scenarios.\r\n\r\nThe peer manager will be able to dynamically adjust the services flags\r\nbased on the node's proximity to the tip (back and forth). Allowing the node\r\nto recover from the following post-IBD scenario:\r\nSuppose the node has successfully synced the chain, but later experienced\r\ndropped connections and remained inactive for a duration longer than the limited\r\npeers threshold (the timeframe within which limited peers can provide blocks). In\r\nsuch cases, upon reconnecting to the network, the node might only establish\r\nconnections with limited peers, filling up all available outbound slots. Resulting\r\nin an inability to synchronize the chain (because limited peers will not provide\r\nblocks older than the `NODE_NETWORK_LIMITED_MIN_BLOCKS` threshold).",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28170",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28170",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28170.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28170.patch"
          },
          "closed_at": "2024-01-31T16:44:59Z",
          "created_at": "2023-07-27T15:34:45Z",
          "updated_at": "2024-01-31T20:02:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 11499616344,
      "node_id": "LE_lADOABII5854OHi1zwAAAAKtbjhY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11499616344",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-16T14:23:45Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T15:14:13Z",
      "updated_at": "2024-02-09T15:14:13Z",
      "source": {
        "issue": {
          "id": 2127176950,
          "node_id": "PR_kwDOABII585me8Nn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29415",
          "number": 29415,
          "state": "open",
          "state_reason": null,
          "title": "Broadcast own transactions only via short-lived Tor or I2P connections",
          "body": "To improve privacy, broadcast locally submitted transactions (from the `sendrawtransaction` RPC) to the P2P network only via Tor or I2P short-lived connections.\r\n\r\n* Introduce a new connection type for private broadcast of transactions with the following properties:\r\n  * started whenever there are local transactions to be sent\r\n  * only opened to Tor or I2P peers\r\n  * opened regardless of max connections limits\r\n  * after handshake is completed one local transaction is pushed to the peer, `PING` is sent and after receiving `PONG` the connection is closed\r\n  * ignore all incoming messages after handshake is completed (except `PONG`)\r\n\r\n* Broadcast transactions submitted via `sendrawtransaction` using this new mechanism, to a few Tor or I2P peers. Keep doing this until we receive an `INV` about this transaction from one of our ordinary peers (this takes about 1 second on mainnet).\r\n\r\n* The transaction is stored in peerman and does not enter the mempool.\r\n\r\n* Once we get an `INV` from somebody, then the normal flow executes: we request the transaction with `GETDATA`, receive it with a `TX` message, put it in our mempool and broadcast it to all our existent connections (as if we see it for the first time).\r\n\r\n* After we receive the full transaction as a `TX` message, in reply to our `GETDATA` request, only then consider the transaction has propagated through the network and remove it from the storage in peerman, ending the private broadcast attempts.\r\n\r\nThe messages exchange should look like this:\r\n\r\n```\r\ntx-sender >--- connect -------> tx-recipient\r\ntx-sender >--- VERSION -------> tx-recipient (dummy VERSION with no revealing data)\r\ntx-sender <--- VERSION -------< tx-recipient\r\ntx-sender <--- WTXIDRELAY ----< tx-recipient (maybe)\r\ntx-sender <--- SENDADDRV2 ----< tx-recipient (maybe)\r\ntx-sender <--- SENDTXRCNCL ---< tx-recipient (maybe)\r\ntx-sender <--- VERACK --------< tx-recipient\r\ntx-sender >--- VERACK --------> tx-recipient\r\ntx-sender >--- TX ------------> tx-recipient\r\ntx-sender >--- PING ----------> tx-recipient\r\ntx-sender <--- PONG ----------< tx-recipient\r\ntx-sender disconnects\r\n```\r\n\r\nWhenever a new transaction is received from `sendrawtransaction` RPC, the node will send it to 5 (`NUM_PRIVATE_BROADCAST_PER_TX`) recipients right away. If after 10-15 mins we still have not heard anything about the transaction from the network, then it will be sent to 1 more peer (see `PeerManagerImpl::ReattemptPrivateBroadcast()`).\r\n\r\nA few considerations:\r\n* The short-lived private broadcast connections are very cheap and fast wrt network traffic. It is expected that some of those peers could blackhole the transaction. Just one honest/proper peer is enough for successful propagation.\r\n* The peers that receive the transaction could deduce that this is initial transaction broadcast from the transaction originator. This is ok, they can't identify the sender.\r\n\r\n---\r\n\r\nSome explanation of the commits:\r\n\r\n* New logging category and config option to enable private broadcast\r\n  * `log: introduce a new category for private broadcast`\r\n  * `init: introduce a new option to enable/disable private broadcast`\r\n\r\n* Implement the private broadcast connection handling on the `CConnman` side:\r\n  * `net: introduce a new connection type for private broadcast`\r\n  * `net: move peers counting before grant acquisition in ThreadOpenConnections()`\r\n  * `net: implement opening PRIVATE_BROADCAST connections`\r\n\r\n* Prepare `BroadcastTransaction()` for private broadcast requests:\r\n  * `net_processing: rename RelayTransaction to better describe what it does`\r\n  * `node: change a tx-relay on/off flag to a tri-state`\r\n  * `net_processing: store transactions for private broadcast in PeerManager`\r\n\r\n* Implement the private broadcast connection handling on the `PeerManager` side:\r\n  * `net_processing: reorder the code that handles the VERSION message`\r\n  * `net_processing: handle ConnectionType::PRIVATE_BROADCAST connections`\r\n  * `net_processing: stop private broadcast of a transaction after round-trip`\r\n  * `net_processing: retry private broadcast`\r\n\r\n* Engage the new functionality from `sendrawtransaction`:\r\n  * `rpc: use private broadcast from sendrawtransaction RPC if -privatebroadcast is ON`\r\n\r\n* Independent test framework improvements (also opened as a standalone PR at https://github.com/bitcoin/bitcoin/pull/29420):\r\n  * `test: improve debug log message from P2PConnection::connection_made()`\r\n  * `test: extend the SOCKS5 Python proxy to actually connect to a destination`\r\n  * `test: support WTX INVs from P2PDataStore and fix a comment`\r\n  * `test: set P2PConnection::p2p_connected_to_node in peer_connect_helper()`\r\n\r\n* New functional test that exercies some of the new code:\r\n  * `test: add functional test for local tx relay`\r\n\r\n---\r\n\r\nThis addresses:\r\nhttps://github.com/bitcoin/bitcoin/issues/3828 Clients leak IPs if they are recipients of a transaction\r\nhttps://github.com/bitcoin/bitcoin/issues/14692 Can't configure bitocoind to only send tx via Tor but receive clearnet transactions\r\nhttps://github.com/bitcoin/bitcoin/issues/19042 Tor-only transaction broadcast onlynet=onion alternative\r\nhttps://github.com/bitcoin/bitcoin/issues/24557 Option for receive events with all networks, but send transactions and/or blocks only with anonymous network[s]?\r\nhttps://github.com/bitcoin/bitcoin/issues/25450 Ability to broadcast wallet transactions only via dedicated oneshot Tor connections\r\n\r\nRelated, but different:\r\nhttps://github.com/bitcoin/bitcoin/issues/21876 Broadcast a transaction to specific nodes\r\nhttps://github.com/bitcoin/bitcoin/issues/28636 new RPC: sendrawtransactiontopeer\r\n\r\n---\r\n\r\n_A previous incarnation of this can be found at https://github.com/bitcoin/bitcoin/pull/27509. It puts the transaction in the mempool and (tries to) hide it from the outside observers. This turned out to be too error prone or maybe even impossible._\r\n",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29415",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29415.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29415.patch"
          },
          "created_at": "2024-02-09T13:39:10Z",
          "updated_at": "2024-04-18T21:21:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-19T05:37:19Z",
      "updated_at": "2024-02-19T05:37:19Z",
      "source": {
        "issue": {
          "id": 2141417736,
          "node_id": "PR_kwDOABII585nPL9t",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29448",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29448/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29448/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29448/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29448",
          "number": 29448,
          "state": "closed",
          "state_reason": null,
          "title": "Add issuer-selected opt-in txn / pckg policy checks",
          "body": "All the values selected by the transaction issuers are implemented to respect current hard policy limits as of 27.0\r\nBitcoin Core version (e.g `MAX_PACKAGE_COUNT` or `MAX_STANDARD_TX_WEIGHT`). As such introducing a new distinction in the Bitcoin ecosystem among tx-relay policy checks enforced by full-nodes hosts of a said full-node implementation/version and the the policy-check opt-ed by any transaction or second-layers use-cases. That way any significant on-chain economic  traffic can be still processed by low-performance full-nodes hosts, without altering the DoS profile risks.\r\n\r\nE.g in the context of the Lightning Network, lightning nodes can adjust their pinning risk exposures affecting their channel funds safety differently in function of each lightning topological peers (- assuming the BOLT protocol upgrades its negotiation flow `open_channel` / `accept_channel`). As such lightning peers can enforce a trade-off between their off chain HTLC throughputs and their tx-relay jamming exposure (e.g pinning or RC attacks).\r\n\r\nE.g in the context of collaborative custody management, distrusted stakeholders owning a set of pre-signed set of transactions can all commits to the same set of max tx size / max package limits, as such introducing more reliability on the worst amount of fee-bumping reserves that should be provisioned instead of hard limits like the current approach with v3.\r\n\r\n_Wait ! I’m lost reading this OP ?! Already  too much information, what should I do ? Go to read Bitcoin Optech 10 articles series’s [“Waiting for confirmation: a series about mempool and relay policy”](https://bitcoinops.org/en/blog/waiting-for-confirmation/) as a starter and then come back to read or comment._\r\n\r\nThe opt-in mechanism uses a one bit flag in the nSequence field which is already a standard and consenus Bitcoin transaction field since the genesis block. The mechansim (`ParsePackageTopologicalLimits()`) check that bip68 is disabled to avoid conflicts of semantics, as the remaining nSequence field bits are interpreted as dynamic issuers-selected policy checks (currently implemented ancestor / descendant / max package limits size). The intrusive aspect of the mechanism is minimal and the interpreted field could be uplifted in other parts of standard transaction fields while conserving the same policy check enforcement semantics.\r\n\r\nHere the code excerpt that deserves a `doc/policy/` , a BIP or a banana.\r\n```\r\n (sequence_field & SEQUENCE_ISSUER_SELECTED_LIMITS_DISABLE_FLAG) {\r\n        return std::nullopt;\r\n    }\r\n\r\n    const uint32_t ancestor_limit = sequence_field & SEQUENCE_ISSUER_SELECTED_ANCESTOR_MASK;\r\n    const uint32_t descendant_limit = sequence_field & SEQUENCE_ISSUER_SELECTED_DESCENDANT_MASK;\r\n    const uint32_t weight_limit = (uint32_t)(sequence_field & SEQUENCE_ISSUER_SELECTED_WEIGHT_MASK)\r\n     << SEQUENCE_ISSUER_SELECTED_WEIGHT_GRANULARITY;\r\n\r\n    // This parsing logic can be adapted for forward-compatibility in matters of issuer-selected\r\n    // policy limits:\r\n    //      - encodes accumulated package SigOpCost\r\n    //      - commit to package-level dynamic DUST_RELAY_TX_FEE or DEFAULT_INCREMENTAL_RELAY_FEE\r\n    //      - opt-in if limits are strict (at the pckg-level) or composable (at the tx-level)\r\n    //        to allow non-interactive composability among N chain of transaction issuers.\r\n\r\n    IssuerSelectedLimits tx_issuer_selected_limits(ancestor_limit, descendant_limit, weight_limit);\r\n```\r\n\r\nIssuer-selected fields getting economic popularity and not jeopardizing bitcoin security model and long-term decentralization equlibrium of the ecosystem of peer-to-peer full-nodes and solo mining operations could get a consensus enforcement, going through the traditional consensus design & development process (narrator note: no ones really knows or is sure there is  something as traditional consensus development process...). The nSequence consensus field due to its 32 bits limitation is space limited, even if a lot can be achieved with bit-wise operations.\r\n\r\nFrom a technical philosophy perspective, I think this introduction of issuer-selected transaction / package policy limits checks should should reduce the amount of \"bargaing-on-policy\" we have seen recently with `mempoolfullrbf` (LN-vs-zero-conf-acceptance business) or do-digital-art-on-chain-and-the-posterity-will-say-if-it-is-bansky-or-crap-waste colored coins and tokens experimentations.\r\n\r\nThis patchset built on the v3 patchset and its followups (commit `37fdf5a4`), is already integrated in the package mempool\r\nacceptance code flow. There is 1 logical conflict for now as the 1000 vbytes limit is enforced by default for v3 (which still\r\nexposes a lot of loss of funds risk exposure for some time-sensitive flows like lightning considering \"loophole\" and NTA pinning scenario  - see #28948). In the future, this limit can just become a \"tx issuer-selected policy check\" limit.\r\n\r\nIn the future, such transaction / package “issuer-selected” can be used as a signaling mechanism, e.g for [replace-by-feerate](https://petertodd.org/2024/one-shot-replace-by-fee-rate) dynamic window enforced at the mempool-level, for the use-cases who wishing to ensure their chain of transactions are minimal by not using CPFP.\r\n\r\nFor more discussions on mempool policy technical philosophy design and trade-offs on downstream use-cases, see the old email  thread [\"On mempool consistency\"](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021116.html).\r\n\r\nThis patchset can be applied on top of any fork of bitcoin core 27.0 with the minimal of engineering effort by anyone wishing\r\nto experiment with mempool policy for its use-case (I'll see if I have time to carry this patchset forward as I'm officially in\r\nsabbatical from bitcoin core development taking the sun on the beach just yelling at them when the stuff is broken, we’re all btc investors).",
          "user": {
            "login": "ariard",
            "id": 23310655,
            "node_id": "MDQ6VXNlcjIzMzEwNjU1",
            "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ariard",
            "html_url": "https://github.com/ariard",
            "followers_url": "https://api.github.com/users/ariard/followers",
            "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
            "organizations_url": "https://api.github.com/users/ariard/orgs",
            "repos_url": "https://api.github.com/users/ariard/repos",
            "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ariard/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29448",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29448",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29448.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29448.patch"
          },
          "closed_at": "2024-02-19T16:47:52Z",
          "created_at": "2024-02-19T03:26:23Z",
          "updated_at": "2024-02-19T19:09:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1959598347,
      "node_id": "IC_kwDOABII5850zRkL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1959598347",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-22T14:43:04Z",
      "updated_at": "2024-02-22T14:43:04Z",
      "author_association": "MEMBER",
      "body": "ready for un-draft?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1959598347",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11894097234,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALE8YVS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11894097234",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-22T17:01:33Z"
    },
    {
      "event": "unlabeled",
      "id": 11895053507,
      "node_id": "UNLE_lADOABII5854OHi1zwAAAALFABzD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11895053507",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-22T18:26:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 11906381144,
      "node_id": "RTE_lADOABII5854OHi1zwAAAALFrPVY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11906381144",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-23T17:28:47Z",
      "rename": {
        "from": "[WIP] p2p: opportunistically accept 1-parent-1-child packages",
        "to": "p2p: opportunistically accept 1-parent-1-child packages"
      }
    },
    {
      "event": "ready_for_review",
      "id": 11943052490,
      "node_id": "RFRE_lADOABII5854OHi1zwAAAALH3ITK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11943052490",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T20:57:03Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T14:36:15Z",
      "updated_at": "2024-02-28T14:36:15Z",
      "source": {
        "issue": {
          "id": 2100725835,
          "node_id": "I_kwDOABII5859NohL",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29319",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29319/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29319/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29319/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/29319",
          "number": 29319,
          "state": "open",
          "state_reason": null,
          "title": "Cluster mempool, CPFP carveout, and V3 transaction policy",
          "body": "Opening an issue for high-level discussion, as the PR that implements this has gotten difficult to follow.\r\n\r\n### Cluster mempool\r\n\r\nWork is underway to [redesign the mempool](https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/1) with different topology constraints on the transaction graph than exist today.  I originally described this proposal in a github issue (#27677), and have shared a draft implementation (#28676).  In brief, with a new mempool design we could simultaneously: fix bugs with mempool eviction and the incentive compatibility of RBF replacements; achieve improved performance; eliminate the ancestor/descendant limits (with the introduction of a likely more relaxed \"cluster\" limit); and likely be in a position to better implement complex behaviors like package validation and package rbf.\r\n\r\n### CPFP carveout is not compatible with cluster mempool\r\n\r\nAs I explain [here](https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12), I believe the CPFP carveout rule (introduced in #15681) is not compatible with the new design. Since some users may be relying on this behavior, we should come up with a workaround to avoid breaking existing applications.\r\n\r\n### V3 transaction policy\r\n\r\nDescribed in #28948, the v3 transaction policy is a proposal to introduce topology restrictions on unconfirmed transactions with `nVersion=3` (which are currently non-standard for relay, and would be made standard under the proposal).  Specifically, v3 transactions would be:\r\n- opted-in to RBF replacement policies (whatever those may be, as they evolve in our project)\r\n- permitted to only be part of mempool clusters that are at most of size 2 (meaning 1 parent/1 child)\r\n- required to have any unconfirmed parents or children also be marked v3 (and therefore subject to these rules)\r\n- bounded in size to at most 1000 vbytes, if the child of an unconfirmed (and therefore v3) parent\r\n\r\nBy offering a policy rule that can enforce a much tighter topology restriction that the current ancestor/descendant limits, we hope to achieve a few things:\r\n\r\n#### Replacing CPFP carveout (with a new sibling-replacement policy)\r\n\r\nWe can provide a way to achieve the goals of the CPFP carveout rule even if the existing carevout rule were to be dropped. As explained in [this post](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html), the use-case contemplated by the CPFP carveout rule was one where a single transaction might have two spendable outputs, each spendable by a different party, and that either party should be able to spend their output without hitting global topology limits, provided that their spending transaction was bounded in size and had no other unconfirmed parents. If the v3 policy rule were to be applied to the LN commitment transactions described in that post, then neither of the two outputs that are spendable could be used to hit the limits that carveout is designed to bypass. \r\n\r\nSo if we couple the v3 policy with an RBF rule that would allow one spend of a v3 transaction to replace an existing lower-feerate spend of that same parent -- something we call *sibling eviction* and has a draft implementation in #29306 -- then I believe we will have enacted a set of policies that replicate the CPFP carveout use case. \r\n\r\n#### Provide a general way for fee bumping to work better\r\n\r\nEven apart from the needs of layer 2 protocols, the new v3 policy serves as a general way to bypass the issue of RBF being expensive when a child transaction is created that has a large fee (and is typically large in size, allowing for it to be low feerate).  This has been the source of user complaints since our RBF policies were first deployed, and by bounding the size of child transactions we effectively can limit the amount of additional fee a user would need to pay due to the presence of such children.  \r\n\r\nNote, of course, that this property is also what makes the sibling-eviction-policy described above workable.\r\n\r\n### Proposed roadmap\r\n\r\nTo unblock the cluster mempool project, I think we need the following:\r\n1. Deployment of the V3 policy rules (current proposal is #28948)\r\n2. Deployment of V3 sibling eviction rbf rules (current proposal is #29306)\r\n\r\nThen, projects that use CPFP carveout would need to be able to adopt the new policy rules.  After the last LN spec discussion, I understand that migrating their commitment transactions to use a new format (even just a change in version number) might take time to coordinate, and that in the meantime we should simply use some other unique markers to identify those commitment transactions, and implicitly imbue such transactions with the v3 policy rules.  However, doing so would eliminate the ability to batch-CPFP several unconfirmed commitment transactions at once (although this isn't reliable anyway today, since the carveout protections don't apply to this case, but perhaps this sometimes works fine and is more efficient).\r\n\r\nIt's not clear to me if that final step -- of imbuing transactions with v3 policy, rather than requiring explicit opt-in -- is needed before we move further forward with cluster mempool, or even if doing so would be acceptable to the broader community, but I think we could entertain that idea as a way to assist the LN project with migration and to decouple progress in this project from upgrade timelines in that one.\r\n\r\n### Feedback\r\n\r\nWhile we're still working out implementation details in the v3 and v3-sibling-eviction PRs, it would be great to get concept ACKs on this roadmap from any users of the current CPFP carveout policy.  In particular, please provide feedback on:\r\n1. whether there are use cases of CPFP carveout that are not covered by the V3 proposal as I described above, and \r\n2. whether the \"imbued v3\" behavior described above should be treated as a blocker for CPFP carveout removal as well, or if it's a bad idea due to (eg) breaking the ability to batch-CPFP (or any other reason)",
          "user": {
            "login": "sdaftuar",
            "id": 7463573,
            "node_id": "MDQ6VXNlcjc0NjM1NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sdaftuar",
            "html_url": "https://github.com/sdaftuar",
            "followers_url": "https://api.github.com/users/sdaftuar/followers",
            "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
            "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
            "repos_url": "https://api.github.com/users/sdaftuar/repos",
            "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 33,
          "created_at": "2024-01-25T16:15:26Z",
          "updated_at": "2024-03-13T03:09:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1906612532,
      "node_id": "PRR_kwDOABII585xpJk0",
      "url": null,
      "actor": null,
      "commit_id": "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I focused on the first two refactoring commits. Might be helpful zeroing in on these since we probably need to justify each small behavior change or make sure we're aligning with old behavior.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1906612532",
      "submitted_at": "2024-03-04T15:25:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "reviewed",
      "id": 1915025042,
      "node_id": "PRR_kwDOABII585yJPaS",
      "url": null,
      "actor": null,
      "commit_id": "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1915025042",
      "submitted_at": "2024-03-04T18:36:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "commented",
      "id": 1978540390,
      "node_id": "IC_kwDOABII58517iFm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1978540390",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-05T11:24:37Z",
      "updated_at": "2024-03-05T11:24:37Z",
      "author_association": "MEMBER",
      "body": "Working on pulling the first 2 commits out into a separate PR.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1978540390",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "reviewed",
      "id": 1920028235,
      "node_id": "PRR_kwDOABII585ycU5L",
      "url": null,
      "actor": null,
      "commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1920028235",
      "submitted_at": "2024-03-06T15:11:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12055804141,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALOlPjt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12055804141",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-08T13:32:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12056372483,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALOnaUD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12056372483",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-08T14:23:24Z"
    },
    {
      "event": "labeled",
      "id": 12056373431,
      "node_id": "LE_lADOABII5854OHi1zwAAAALOnai3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12056373431",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-08T14:23:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1985784443,
      "node_id": "IC_kwDOABII5852XKp7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1985784443",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-08T14:23:29Z",
      "updated_at": "2024-03-08T14:23:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/22437958726</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1985784443",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "unlabeled",
      "id": 12057273677,
      "node_id": "UNLE_lADOABII5854OHi1zwAAAALOq2VN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12057273677",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-08T15:40:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-09T02:42:34Z",
      "updated_at": "2024-03-09T02:42:34Z",
      "source": {
        "issue": {
          "id": 1971980668,
          "node_id": "PR_kwDOABII585eUB2f",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28765",
          "number": 28765,
          "state": "open",
          "state_reason": null,
          "title": "p2p: Fill reconciliation sets (Erlay)",
          "body": "Keep track of per-peer reconciliation sets containing transactions to be exchanged efficiently. The remaining transactions are announced via usual flooding.\r\n\r\nErlay Project Tracking: #28646",
          "user": {
            "login": "naumenkogs",
            "id": 7975071,
            "node_id": "MDQ6VXNlcjc5NzUwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/naumenkogs",
            "html_url": "https://github.com/naumenkogs",
            "followers_url": "https://api.github.com/users/naumenkogs/followers",
            "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
            "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
            "repos_url": "https://api.github.com/users/naumenkogs/repos",
            "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28765",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28765.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28765.patch"
          },
          "created_at": "2023-11-01T09:06:40Z",
          "updated_at": "2024-03-21T20:42:25Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T10:43:39Z",
      "updated_at": "2024-03-11T10:43:39Z",
      "source": {
        "issue": {
          "id": 2178805781,
          "node_id": "PR_kwDOABII585pOc2y",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29619",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29619/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29619/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29619/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29619",
          "number": 29619,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: consolidate MempoolAcceptResult processing",
          "body": "Every time we try to `ProcessTransaction` (i.e. submit a tx to mempool), we use the result to update a few net processing data structures. For example, after a failure, the {wtxid, txid, both, neither} (depending on reason) should be cached in `m_recent_rejects` so we don't try to download/validate it again.\r\n\r\nThere are 2 current places and at least 1 future place where we need to process `MempoolAcceptResult`:\r\n- In the `ProcessMessage` logic after receiving and validating a tx\r\n- In `ProcessOrphanTx` where we retry orphans\r\n- With #28970, after processing a package of transactions, we should do these updates for each tx in the package.\r\n\r\nConsolidate this code so it isn't repeated in 2 places and so we can reuse it in a future PR.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29619",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29619",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29619.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29619.patch"
          },
          "closed_at": "2024-03-13T11:26:45Z",
          "created_at": "2024-03-11T10:43:39Z",
          "updated_at": "2024-03-13T12:02:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1988160421,
      "node_id": "IC_kwDOABII5852gOul",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1988160421",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T10:54:29Z",
      "updated_at": "2024-03-11T10:54:29Z",
      "author_association": "MEMBER",
      "body": "Opened #29619 for the first 2 commits, moving this to draft.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1988160421",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "convert_to_draft",
      "id": 12071725380,
      "node_id": "CTDE_lADOABII5854OHi1zwAAAALPh-lE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12071725380",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T10:54:40Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "nully0x",
        "id": 40327060,
        "node_id": "MDQ6VXNlcjQwMzI3MDYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/40327060?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nully0x",
        "html_url": "https://github.com/nully0x",
        "followers_url": "https://api.github.com/users/nully0x/followers",
        "following_url": "https://api.github.com/users/nully0x/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nully0x/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nully0x/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nully0x/subscriptions",
        "organizations_url": "https://api.github.com/users/nully0x/orgs",
        "repos_url": "https://api.github.com/users/nully0x/repos",
        "events_url": "https://api.github.com/users/nully0x/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nully0x/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-12T08:32:03Z",
      "updated_at": "2024-03-12T08:32:03Z",
      "source": {
        "issue": {
          "id": 2181021569,
          "node_id": "PR_kwDOGiXLnM5pWGX9",
          "url": "https://api.github.com/repos/nully0x/bitcoin/issues/42",
          "repository_url": "https://api.github.com/repos/nully0x/bitcoin",
          "labels_url": "https://api.github.com/repos/nully0x/bitcoin/issues/42/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/nully0x/bitcoin/issues/42/comments",
          "events_url": "https://api.github.com/repos/nully0x/bitcoin/issues/42/events",
          "html_url": "https://github.com/nully0x/bitcoin/pull/42",
          "number": 42,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: consolidate MempoolAcceptResult processing",
          "body": "Every time we try to `ProcessTransaction` (i.e. submit a tx to mempool), we use the result to update a few net processing data structures. For example, after a failure, the {wtxid, txid, both, neither} (depending on reason) should be cached in `m_recent_rejects` so we don't try to download/validate it again.\r\n\r\nThere are 2 current places and at least 1 future place where we need to process `MempoolAcceptResult`:\r\n- In the `ProcessMessage` logic after receiving and validating a tx\r\n- In `ProcessOrphanTx` where we retry orphans\r\n- With #28970, after processing a package of transactions, we should do these updates for each tx in the package.\r\n\r\nConsolidate this code so it isn't repeated in 2 places and so we can reuse it in a future PR.",
          "user": {
            "login": "nully0x",
            "id": 40327060,
            "node_id": "MDQ6VXNlcjQwMzI3MDYw",
            "avatar_url": "https://avatars.githubusercontent.com/u/40327060?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nully0x",
            "html_url": "https://github.com/nully0x",
            "followers_url": "https://api.github.com/users/nully0x/followers",
            "following_url": "https://api.github.com/users/nully0x/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/nully0x/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/nully0x/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/nully0x/subscriptions",
            "organizations_url": "https://api.github.com/users/nully0x/orgs",
            "repos_url": "https://api.github.com/users/nully0x/repos",
            "events_url": "https://api.github.com/users/nully0x/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/nully0x/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "OWNER",
          "locked": false,
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/nully0x/bitcoin/pulls/42",
            "html_url": "https://github.com/nully0x/bitcoin/pull/42",
            "diff_url": "https://github.com/nully0x/bitcoin/pull/42.diff",
            "patch_url": "https://github.com/nully0x/bitcoin/pull/42.patch"
          },
          "closed_at": "2024-04-10T11:23:49Z",
          "created_at": "2024-03-12T08:32:02Z",
          "updated_at": "2024-04-10T11:23:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-13T07:51:43Z",
      "updated_at": "2024-03-13T07:51:43Z",
      "source": {
        "issue": {
          "id": 2182604130,
          "node_id": "PR_kwDOABII585pbmSj",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29641",
          "number": 29641,
          "state": "open",
          "state_reason": null,
          "title": "scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint",
          "body": "`LogPrintf/LogPrint` are problematic, because:\r\n\r\n* Their name is non-descriptive of what the function does (info logging or debug logging).\r\n* They are deprecated aliases, where code is using either the deprecated or non-deprecated alias, which is inconsistent and confusing.\r\n\r\nFix all issues by replacing the usage.\r\n\r\nWhile the diff is large and may cause merge conflicts or backport conflicts, I don't see the deprecated aliases being kept forever, so this will have to be done at some point. All conflicts should be trivial to solve, in any case.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29641",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29641",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29641.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29641.patch"
          },
          "created_at": "2024-03-12T20:21:40Z",
          "updated_at": "2024-04-19T09:40:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 12101977400,
      "node_id": "REFE_lADOABII5854OHi1zwAAAALRVYU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12101977400",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "264ca9db240158403f6b9076d2fd5ef2522c391b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/264ca9db240158403f6b9076d2fd5ef2522c391b",
      "created_at": "2024-03-13T11:26:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12102330958,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALRWupO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12102330958",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-13T11:56:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12102366900,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALRW3a0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12102366900",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-13T11:59:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12102379711,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALRW6i_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12102379711",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-13T12:00:50Z"
    },
    {
      "event": "commented",
      "id": 1994236318,
      "node_id": "IC_kwDOABII58523aGe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1994236318",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-13T12:08:40Z",
      "updated_at": "2024-03-13T12:08:40Z",
      "author_association": "MEMBER",
      "body": "rebased and added followups from #29619",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1994236318",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "ready_for_review",
      "id": 12102475680,
      "node_id": "RFRE_lADOABII5854OHi1zwAAAALRXR-g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12102475680",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-13T12:08:43Z"
    },
    {
      "event": "reviewed",
      "id": 1935032934,
      "node_id": "PRR_kwDOABII585zVkJm",
      "url": null,
      "actor": null,
      "commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "some comments, running patch on a listening node longer-term to test behavior",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1935032934",
      "submitted_at": "2024-03-18T13:58:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12188895900,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALWg8qc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12188895900",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T17:42:09Z"
    },
    {
      "event": "commented",
      "id": 2010264127,
      "node_id": "IC_kwDOABII58530jI_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2010264127",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T17:55:44Z",
      "updated_at": "2024-03-20T17:55:44Z",
      "author_association": "MEMBER",
      "body": "Rebased for silent conflict with #28950",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2010264127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12189125520,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALWh0uQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12189125520",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T17:55:45Z"
    },
    {
      "event": "labeled",
      "id": 12189126293,
      "node_id": "LE_lADOABII5854OHi1zwAAAALWh06V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12189126293",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T17:55:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2010264297,
      "node_id": "IC_kwDOABII58530jLp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2010264297",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T17:55:51Z",
      "updated_at": "2024-03-20T17:55:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/22896614286</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2010264297",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "unlabeled",
      "id": 12190000570,
      "node_id": "UNLE_lADOABII5854OHi1zwAAAALWlKW6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12190000570",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T19:07:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2017881418,
      "node_id": "IC_kwDOABII5854Rm1K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017881418",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T12:21:02Z",
      "updated_at": "2024-03-25T12:21:02Z",
      "author_association": "MEMBER",
      "body": "> Enable 1-parent-1-child package relay 🚀 (just using the existing protocol messages).\r\n\r\nImo, this isn't really what this PR does because \"package relay\" (at least to me) is something that is robust and users can rely on. As you note yourself, there is more work required to make this robust. \r\n\r\n> To make this more robust, we need receiver-side logic to retry orphan resolution with multiple peers.\r\n> To make this robust, we need to make efforts to protect some amount of orphans from eviction.\r\n\r\nWhy are we not making things more robust in or before this PR?",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2017881418",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "commented",
      "id": 2017893531,
      "node_id": "IC_kwDOABII5854Rpyb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017893531",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T12:28:27Z",
      "updated_at": "2024-03-25T12:29:17Z",
      "author_association": "MEMBER",
      "body": "> Imo, this isn't really what this PR does because \"package relay\" (at least to me) is something that is robust and users can rely on. As you note yourself, there is more work required to make this robust.\r\n\r\nthat sounds like confusing semantic games to me? We can add \"non-robust\" to the title to be clearer if we think it can get merged...\r\n\r\n> Why are we not making things more robust in or before this PR?\r\n\r\nWhy would we tie up an improvement on relay on other improvements to relay? This feature is useful by itself in non-adversarial network conditions, which ends up being deliverable security and a bit of increased miner fee revenue.\r\n\r\nOf course, if we have a orphanage hardening PR ready for merge, we should merge that.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2017893531",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "commented",
      "id": 2017902903,
      "node_id": "IC_kwDOABII5854RsE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017902903",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T12:33:58Z",
      "updated_at": "2024-03-25T12:33:58Z",
      "author_association": "MEMBER",
      "body": "> Why are we not making things more robust in or before this PR?\r\n\r\nWhy have we been okay with handling any transactions with missing parents despite all of these orphanage problems, for more than a decade? Clearly because it's useful even if not 100% reliable. There are various improvements we can make to relay. I have already implemented them, and decided I would prefer to propose the more impactful improvements before the less impactful ones.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2017902903",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "commented",
      "id": 2018034011,
      "node_id": "IC_kwDOABII5854SMFb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018034011",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T13:41:26Z",
      "updated_at": "2024-03-25T13:41:26Z",
      "author_association": "MEMBER",
      "body": "> that sounds like confusing semantic games to me? We can add \"non-robust\" to the title to be clearer if we think it can get merged...\r\n\r\nI think my issue is with the PR description and how this will be marketed, not the title. The title describes it quite well: we will sometimes accept 1p1c packages (although it could also mention that these packages are constructed from the orphanage). That is different from package relay (again, to me \"package relay\" implies a level of reliability).\r\n\r\n> This feature is useful by itself in non-adversarial network conditions, which ends up being deliverable security\r\n\r\n\"deliverable security\": Is this referring to the increased cost of having to mess with relay to prevent pkgs from relaying? as opposed to the current state where these pkgs just don't relay at all?\r\n\r\n> Why have we been okay with handling any transactions with missing parents despite all of these orphanage problems, for more than a decade?\r\n\r\nBecause it saves bandwidth in the honest case. Afaict, relay would be reliable without the orphanage, although much more bandwidth intensive.\r\n\r\n---\r\n\r\nI guess my wording was confusing? I have no problem with the approach in this PR nor was I suggesting to block this on other relay improvements. I was just commenting on the PR description and asking a question.\r\n\r\nThere clearly are good answers to my question but I don't appreciate the condescending tone after being asked to review this PR.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2018034011",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "commented",
      "id": 2018046569,
      "node_id": "IC_kwDOABII5854SPJp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018046569",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T13:47:45Z",
      "updated_at": "2024-03-25T13:47:45Z",
      "author_association": "MEMBER",
      "body": "> \"deliverable security\": Is this referring to the increased cost of having to mess with relay to prevent pkgs from relaying? as opposed to the current state where these pkgs just don't relay at all?\r\n\r\nAssuming there's a path of nodes to a miner in which they are not having their orphanages aggressively churned by an adversary,  these size 2 packages should be able to propagate. So if say a LN node goes offline or refuses to sign an updated commitment transaction that raises the transaction fee, minfee rises, the counterparty can still go to chain. It raises the bar a bit for an adversary, and the more benign cases can be resolved in the average case, letting people deploy liquidity elsewhere.\r\n\r\nFWIW I ran this branch over the last week, and when my minfee wasn't 1 I was getting about one extra package relayed every half hour.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2018046569",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "commented",
      "id": 2018133461,
      "node_id": "IC_kwDOABII5854SkXV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018133461",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T14:28:36Z",
      "updated_at": "2024-03-25T14:28:36Z",
      "author_association": "MEMBER",
      "body": "I've updated the PR description to be more descriptive about what this PR does and doesn't do. The 1p1c \"package relay\" thing wasn't meant as false advertising; I added it to the PR description 1 month after opening because it seemed like people were underestimating how useful this is (someone was surprised when I said this PR propagates 1p1c packages).\r\n\r\nI apologize for the tone - the comment read to me like a blocking criticism since it wasn't accompanied by any other review comments. Hopefully the suggestion has been adequately addressed with the description update now.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2018133461",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "commented",
      "id": 2019146019,
      "node_id": "IC_kwDOABII5854Wbkj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2019146019",
      "actor": {
        "login": "Roasbeef",
        "id": 998190,
        "node_id": "MDQ6VXNlcjk5ODE5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/998190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Roasbeef",
        "html_url": "https://github.com/Roasbeef",
        "followers_url": "https://api.github.com/users/Roasbeef/followers",
        "following_url": "https://api.github.com/users/Roasbeef/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Roasbeef/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Roasbeef/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Roasbeef/subscriptions",
        "organizations_url": "https://api.github.com/users/Roasbeef/orgs",
        "repos_url": "https://api.github.com/users/Roasbeef/repos",
        "events_url": "https://api.github.com/users/Roasbeef/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Roasbeef/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-26T00:19:14Z",
      "updated_at": "2024-03-26T00:21:49Z",
      "author_association": "NONE",
      "body": "Popping in here to mention that even w/ the limitations described above, this would be super useful for LN as is. \r\n\r\nToday we're able to use the anchor outputs on commitment transactions to CPFP a force close (* caveats re pinning, RBF, etc, etc). This works OK during calm mempool conditions, but if a rapid spike occurs that causes the bottom of the mempool to fall out, then CPFP no longer works as the parent has been evicted. During one of the recent more persistent fee spikes, we saw this happening rather frequently, which then led to cascading force closes (outgoing HTLC can't timeout due to non confirmation, incoming times out, repeat) and a lots of pain and user confusion (can only wait or use a transaction \"accelerator\"). \r\n\r\nIIUC, with this PR, upgraded peers will optimistically attempt to fetch the parent (the commitment txn) when they see a transaction that appears to be fee bumping it (anchor output spend). With this behavior, on a best effort basis, if we had another massive spike, then commitment transactions would be able to confirm as upgraded peers would fetch the parent to consider/propagate. I think this is very attractive as it doesn't necessarily require a new p2p upgrade to gain the benefits, instead as nodes start to progressively update, then more of these otherwise unrecognized packages will start to propagate. \r\n\r\nIf major LN node operators are made aware of this patch, and start to run it with the node backing their LN nodes, then assuming a relay path to miners (who seem to be willing to mine/relay just about anything these days), this would be a rather nice stop gap while the greater v3/cluster work proceeds in the background. ",
      "user": {
        "login": "Roasbeef",
        "id": 998190,
        "node_id": "MDQ6VXNlcjk5ODE5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/998190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Roasbeef",
        "html_url": "https://github.com/Roasbeef",
        "followers_url": "https://api.github.com/users/Roasbeef/followers",
        "following_url": "https://api.github.com/users/Roasbeef/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Roasbeef/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Roasbeef/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Roasbeef/subscriptions",
        "organizations_url": "https://api.github.com/users/Roasbeef/orgs",
        "repos_url": "https://api.github.com/users/Roasbeef/repos",
        "events_url": "https://api.github.com/users/Roasbeef/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Roasbeef/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2019146019",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "reviewed",
      "id": 1960994723,
      "node_id": "PRR_kwDOABII58504mej",
      "url": null,
      "actor": null,
      "commit_id": "5405171740aa77e1eb1110fa8be97318edba380a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "no issues running the patch so far, some more comments",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1960994723",
      "submitted_at": "2024-03-26T20:12:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "referenced",
      "id": 12258169321,
      "node_id": "REFE_lADOABII5854OHi1zwAAAALapNHp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12258169321",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a5212a2d0b1f770f9c8f897c5c0d5de33a4c6fb3",
      "commit_url": "https://api.github.com/repos/theStack/bitcoin/commits/a5212a2d0b1f770f9c8f897c5c0d5de33a4c6fb3",
      "created_at": "2024-03-27T00:35:14Z"
    },
    {
      "event": "reviewed",
      "id": 1966207399,
      "node_id": "PRR_kwDOABII5851MfGn",
      "url": null,
      "actor": null,
      "commit_id": "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1966207399",
      "submitted_at": "2024-03-28T13:19:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "reviewed",
      "id": 1966215922,
      "node_id": "PRR_kwDOABII5851MhLy",
      "url": null,
      "actor": null,
      "commit_id": "5405171740aa77e1eb1110fa8be97318edba380a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1966215922",
      "submitted_at": "2024-03-28T13:23:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12285241641,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALcQekp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12285241641",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-28T17:37:44Z"
    },
    {
      "event": "commented",
      "id": 2025812846,
      "node_id": "IC_kwDOABII5854v3Nu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2025812846",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-28T18:03:47Z",
      "updated_at": "2024-04-16T12:35:21Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review, addressed comments and\r\n- fixed a bug in `GetChildren`\r\n- expanded + added more docs to the individual logic tests\r\n- got rid of the `assert_debug_log` lines in the functional tests. The only \"coverage\" that's lost is us skipping children with which we've already tried+failed the package submission. I have a [branch with them](https://github.com/glozow/bitcoin/blob/2024-03-28970-test-logs/test/functional/p2p_opportunistic_1p1c.py) if you want to use it to test the code, but log asserts didn't feel appropriate to have in the functional test.\r\n- added more logging, realized it was annoyingly hard to look up success/fail package evals while searching logs on my node\r\n\r\nfwiw running this on a `-maxmempool=150` node, for the past few days, on average:\r\n- 222 attempted package validations per day\r\n- 85 packages (so 170 txns) accepted per day\r\n- 57% of the package transactions accepted ended up in a block. These are all transactions that we would have otherwise rejected, so this logic is definitely useful at helping us maximize the fees in our limited mempool space.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2025812846",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "labeled",
      "id": 12286998441,
      "node_id": "LE_lADOABII5854OHi1zwAAAALcXLep",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12286998441",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-28T20:11:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2026028069,
      "node_id": "IC_kwDOABII5854wrwl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2026028069",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-28T20:11:54Z",
      "updated_at": "2024-03-28T20:11:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23211258926</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2026028069",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "reviewed",
      "id": 1970039534,
      "node_id": "PRR_kwDOABII5851bGru",
      "url": null,
      "actor": null,
      "commit_id": "5d7fa1f68402c0af08f58ac30522ce9511d218c3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nFound some nitty stuff mostly in tests so far, planning to do another review round next week.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1970039534",
      "submitted_at": "2024-03-30T18:52:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12325877911,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALerfiX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12325877911",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-02T13:23:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12326266219,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALes-Vr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12326266219",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-02T13:45:12Z"
    },
    {
      "event": "reviewed",
      "id": 1977655865,
      "node_id": "PRR_kwDOABII58514KI5",
      "url": null,
      "actor": null,
      "commit_id": "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Did a quick pass. I am surprised we are able to get this big of an improvement without p2p changes, seems like a big win. Big Concept ACK, but I must admit this part of the codebase is a bit out of my wheelhouse.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1977655865",
      "submitted_at": "2024-04-03T19:51:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "reviewed",
      "id": 1976216428,
      "node_id": "PRR_kwDOABII5851yqts",
      "url": null,
      "actor": null,
      "commit_id": "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reviewed through 81912ae6649fac5a0d671d2cabe344f787193997\r\n\r\nLGTM so far\r\n\r\nwill review tests",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1976216428",
      "submitted_at": "2024-04-04T09:55:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "reviewed",
      "id": 1979439672,
      "node_id": "PRR_kwDOABII5851-9o4",
      "url": null,
      "actor": null,
      "commit_id": "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1979439672",
      "submitted_at": "2024-04-04T10:25:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "commented",
      "id": 2036791219,
      "node_id": "IC_kwDOABII5855Zvez",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2036791219",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-04T10:27:05Z",
      "updated_at": "2024-04-04T10:27:05Z",
      "author_association": "MEMBER",
      "body": "reviewed through c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2036791219",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-04T14:25:02Z",
      "updated_at": "2024-04-04T14:25:02Z",
      "source": {
        "issue": {
          "id": 2208456528,
          "node_id": "PR_kwDOABII585qzXWb",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29735",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29735/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29735/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29735/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29735",
          "number": 29735,
          "state": "closed",
          "state_reason": null,
          "title": "AcceptMultipleTransactions: Fix workspace not being set as client_maxfeerate failure",
          "body": "Bug causes an `Assume()` failure due to the expectation that the individual result should be invalid when done over `submitpackage` via rpc.\r\n\r\nBug introduced by https://github.com/bitcoin/bitcoin/pull/28950 , and I discovered it rebasing https://github.com/bitcoin/bitcoin/pull/28984 since it's easier to hit in that test scenario.\r\n\r\nTests in place were only checking `AcceptSingleTransaction`-level checks due to package evaluation only triggering when minfee is too high for the parent transaction.\r\n\r\nAdded test along with fix, moving the fill_mempool utility into a common area for re-use.",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29735",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29735",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29735.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29735.patch"
          },
          "closed_at": "2024-04-11T12:47:42Z",
          "created_at": "2024-03-26T14:41:47Z",
          "updated_at": "2024-04-11T12:47:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 12365177425,
      "node_id": "UNLE_lADOABII5854OHi1zwAAAALhBaJR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12365177425",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-04T21:43:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12377130105,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALhvAR5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12377130105",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T16:57:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12377291614,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALhvnte",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12377291614",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T17:16:18Z"
    },
    {
      "event": "labeled",
      "id": 12380260026,
      "node_id": "LE_lADOABII5854OHi1zwAAAALh68a6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12380260026",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-06T00:29:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-07T10:10:50Z",
      "updated_at": "2024-04-07T10:10:50Z",
      "source": {
        "issue": {
          "id": 2229677696,
          "node_id": "PR_kwDOABII585r7hHp",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29827",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29827/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29827/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29827/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29827",
          "number": 29827,
          "state": "open",
          "state_reason": null,
          "title": "test: p2p: add test for rejected tx request logic (`m_recent_rejects` filter)",
          "body": "Motivated by the discussion in #28970 (https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553911167), this PR adds test coverage for the logic around the `m_recent_rejects` filter, in particular that the filter is cleared after a new block comes in:\r\nhttps://github.com/bitcoin/bitcoin/blob/f0794cbd405636a7f528a60f2873050b865cf7e8/src/net_processing.cpp#L2199-L2206\r\n\r\nAs expected, the second part of the test fails if the following patch is applied:\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex 6996af38cb..5cb1090e70 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2202,7 +2202,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\r\n         // or a double-spend. Reset the rejects filter and give those\r\n         // txs a second chance.\r\n         hashRecentRejectsChainTip = m_chainman.ActiveChain().Tip()->GetBlockHash();\r\n-        m_recent_rejects.reset();\r\n+        //m_recent_rejects.reset();\r\n     }\r\n \r\n     const uint256& hash = gtxid.GetHash();\r\n```\r\nI'm still not sure in which file this test fits best, and if there is already test coverage for the first part of the test somewhere. Happy for any suggestions.",
          "user": {
            "login": "theStack",
            "id": 91535,
            "node_id": "MDQ6VXNlcjkxNTM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theStack",
            "html_url": "https://github.com/theStack",
            "followers_url": "https://api.github.com/users/theStack/followers",
            "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
            "organizations_url": "https://api.github.com/users/theStack/orgs",
            "repos_url": "https://api.github.com/users/theStack/repos",
            "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/theStack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29827",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29827",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29827.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29827.patch"
          },
          "created_at": "2024-04-07T10:10:49Z",
          "updated_at": "2024-04-19T10:59:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-08T21:19:02Z",
      "updated_at": "2024-04-08T21:19:02Z",
      "source": {
        "issue": {
          "id": 1912361532,
          "node_id": "PR_kwDOABII585bK6Ve",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28531",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28531/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28531/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28531/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28531",
          "number": 28531,
          "state": "open",
          "state_reason": null,
          "title": "improve MallocUsage() accuracy",
          "body": "The `MallocUsage()` function takes an allocation size as an argument and returns the amount of physical memory consumed, which is greater due to memory allocator overhead and alignment. It was first added in 2015 (first commit of #6102), but its accuracy has degraded as memory allocation libraries have evolved. It's used when it's important that large data structures, such as the coins cache and mempool, should use a predictable, configurable (limited) amount of physical memory (see the `-dbcache` and `-maxmempool` configuration options), as well as a few other places.\r\n\r\nsipa figured out a concise, efficient [expression](https://github.com/bitcoin/bitcoin/pull/27748#discussion_r1215541260) that this function can use, and that's what's implemented here.\r\n\r\nAlso add a unit test, which is more helpful than usual in this case since platforms, operating systems, and libraries vary significantly in this area.",
          "user": {
            "login": "LarryRuane",
            "id": 8321330,
            "node_id": "MDQ6VXNlcjgzMjEzMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LarryRuane",
            "html_url": "https://github.com/LarryRuane",
            "followers_url": "https://api.github.com/users/LarryRuane/followers",
            "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
            "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
            "repos_url": "https://api.github.com/users/LarryRuane/repos",
            "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28531",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28531",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28531.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28531.patch"
          },
          "created_at": "2023-09-25T22:17:07Z",
          "updated_at": "2024-04-11T14:08:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12402916036,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALjRXrE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12402916036",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T08:15:19Z"
    },
    {
      "event": "reviewed",
      "id": 1988568046,
      "node_id": "PRR_kwDOABII5852hyPu",
      "url": null,
      "actor": null,
      "commit_id": "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1988568046",
      "submitted_at": "2024-04-10T07:27:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12436188522,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALlQS1q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12436188522",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-11T12:57:41Z"
    },
    {
      "event": "commented",
      "id": 2049639073,
      "node_id": "IC_kwDOABII5856KwKh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2049639073",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-11T12:58:23Z",
      "updated_at": "2024-04-11T12:58:23Z",
      "author_association": "MEMBER",
      "body": "Rebased for #29735 and fixed failure.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2049639073",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "unlabeled",
      "id": 12438335013,
      "node_id": "UNLE_lADOABII5854OHi1zwAAAALlYe4l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12438335013",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-11T15:30:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2056422724,
      "node_id": "IC_kwDOABII5856koVE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2056422724",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T09:55:01Z",
      "updated_at": "2024-04-15T09:55:01Z",
      "author_association": "MEMBER",
      "body": "Update since my last comment https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2025812846\r\nRunning for 20 days:\r\n- My node made 5218 package evaluation attempts (x2 = 10,436 transactions). That's ~260 attempts per day.\r\n- Of those attempts, 2260 were successful (x2 = 4520 transactions). That's ~43% acceptance rate.\r\n- Some were repeats. I have 4202 unique txids accepted through package evaluation. I don't know if they were repeated packages or not.\r\n- Of the accepted transactions, 3232 (77%) were later mined in a block.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2056422724",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "reviewed",
      "id": 2001371851,
      "node_id": "PRR_kwDOABII5853SoLL",
      "url": null,
      "actor": null,
      "commit_id": "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Started reviewing - haven't looked at the tests yet.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-2001371851",
      "submitted_at": "2024-04-15T21:02:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZmNGRhMTljYzNiMWI3Y2QyM2NiNGJlOTVhNmJiOWFjYjc5ZWIzYmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f4da19cc3b1b7cd23cb4be95a6bb9acb79eb3bf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4da19cc3b1b7cd23cb4be95a6bb9acb79eb3bf",
      "tree": {
        "sha": "ee6049fd4b0cd42c274baa231cca12f5be81f0e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee6049fd4b0cd42c274baa231cca12f5be81f0e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdb33ec51986570ea17406c83bad2c955ae23186",
          "sha": "bdb33ec51986570ea17406c83bad2c955ae23186",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bdb33ec51986570ea17406c83bad2c955ae23186"
        }
      ],
      "message": "guard against MempoolAcceptResult::m_replaced_transactions\n\nIt should never be a nullopt when the transaction result is valid -\nAssume() this is the case. However, as a belt-and-suspenders just in\ncase it is nullopt, use an empty list.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-16T09:09:45Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-03-13T11:25:24Z"
      },
      "sha": "6f4da19cc3b1b7cd23cb4be95a6bb9acb79eb3bf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMzYzFlMTU4MzFjNDYzZGY3OTY4YjAyOGE3N2U3ODdkYTdlNjI1NmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3c1e15831c463df7968b028a77e787da7e6256d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c3c1e15831c463df7968b028a77e787da7e6256d",
      "tree": {
        "sha": "08b0bcc78d548f1441959c2b12dd675a622d91c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08b0bcc78d548f1441959c2b12dd675a622d91c7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f4da19cc3b1b7cd23cb4be95a6bb9acb79eb3bf",
          "sha": "6f4da19cc3b1b7cd23cb4be95a6bb9acb79eb3bf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4da19cc3b1b7cd23cb4be95a6bb9acb79eb3bf"
        }
      ],
      "message": "[doc] restore comment about why we check if ptx HasWitness before caching rejected txid",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-16T09:11:01Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-03-13T11:45:33Z"
      },
      "sha": "c3c1e15831c463df7968b028a77e787da7e6256d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12487611036,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALoUdKc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12487611036",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-16T11:08:53Z"
    },
    {
      "event": "reviewed",
      "id": 2003285723,
      "node_id": "PRR_kwDOABII5853Z7bb",
      "url": null,
      "actor": null,
      "commit_id": "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "thanks for the review @mzumsande!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-2003285723",
      "submitted_at": "2024-04-16T11:09:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "reviewed",
      "id": 1991298023,
      "node_id": "PRR_kwDOABII5852sMvn",
      "url": null,
      "actor": null,
      "commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1991298023",
      "submitted_at": "2024-04-16T11:42:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "reviewed",
      "id": 2004232080,
      "node_id": "PRR_kwDOABII5853dieQ",
      "url": null,
      "actor": null,
      "commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-2004232080",
      "submitted_at": "2024-04-16T17:48:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "reviewed",
      "id": 2004307670,
      "node_id": "PRR_kwDOABII5853d07W",
      "url": null,
      "actor": null,
      "commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-2004307670",
      "submitted_at": "2024-04-16T18:06:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "reviewed",
      "id": 2006030894,
      "node_id": "PRR_kwDOABII5853kZou",
      "url": null,
      "actor": null,
      "commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-2006030894",
      "submitted_at": "2024-04-17T13:20:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-17T17:13:20Z",
      "updated_at": "2024-04-17T17:13:20Z",
      "source": {
        "issue": {
          "id": 2021654832,
          "node_id": "PR_kwDOABII585g8KkU",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28984",
          "number": 28984,
          "state": "open",
          "state_reason": null,
          "title": "Cluster size 2 package rbf",
          "body": "Allows any 2 transaction package with no in-mempool ancestors to do package RBF when directly conflicting with other mempool clusters of size two or less.\r\n\r\n\r\nProposed validation steps:\r\n1) If the transaction package is of size 1, legacy rbf rules apply.\r\n2) Otherwise the transaction package consists of a (parent, child) pair with no other in-mempool ancestors (or descendants, obviously), so it is also going to create a cluster of size 2). If larger, fail.\r\n3) The package rbf may not evict more than 100 transactions from the mempool(bip125 rule 5)\r\n4) The package's child tx has greater feerate than the parent tx (otherwise the parent should have RBF'd on its own at step 0)\r\n5) Every directly conflicted mempool transaction is connected to at most 1 other in-mempool transaction (ie the cluster size of the conflict is at most 2).\r\n6) Diagram check: We ensure that the replacement is strictly superior at all points, improving the mempool (which includes bip125 rule 3)\r\n7) The total fee of the package, minus the total fee of what is being evicted, is at least the minrelayfee * size of the package (equivalent to bip125 rule 3 and 4)\r\n\r\nPost-cluster mempool this will likely be expanded to general package rbf, but this is what we can safely support today.\r\n",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28984",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28984.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28984.patch"
          },
          "created_at": "2023-12-01T22:12:06Z",
          "updated_at": "2024-04-18T22:56:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 2004484626,
      "node_id": "PRR_kwDOABII5853egIS",
      "url": null,
      "actor": null,
      "commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "First pass. Reviewed up to 91f4efa420958a93f4620379f8830231f276b23b",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-2004484626",
      "submitted_at": "2024-04-17T20:17:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "reviewed",
      "id": 2008064624,
      "node_id": "PRR_kwDOABII5853sKJw",
      "url": null,
      "actor": null,
      "commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-2008064624",
      "submitted_at": "2024-04-18T07:40:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T11:21:39Z",
      "updated_at": "2024-04-18T11:21:39Z",
      "source": {
        "issue": {
          "id": 2218578118,
          "node_id": "I_kwDOHi0ngs6EPNDG",
          "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/23",
          "repository_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org",
          "labels_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/23/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/23/comments",
          "events_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/23/events",
          "html_url": "https://github.com/saopaulobitdevs/saopaulobitdevs.org/issues/23",
          "number": 23,
          "state": "open",
          "state_reason": null,
          "title": "Topicos Abril 2024",
          "body": "Issue para sugestao de topicos pro encontro de abril.\r\n\r\nPor favor incluam suas sugestoes no seguinte formato para facilitar a vida dos editores:\r\n\r\n<titulo>\r\n<url>\r\n\r\n",
          "user": {
            "login": "lorenzolfm",
            "id": 38786333,
            "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lorenzolfm",
            "html_url": "https://github.com/lorenzolfm",
            "followers_url": "https://api.github.com/users/lorenzolfm/followers",
            "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
            "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
            "repos_url": "https://api.github.com/users/lorenzolfm/repos",
            "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5694222796,
              "node_id": "LA_kwDOHi0ngs8AAAABU2bxzA",
              "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/labels/discussion",
              "name": "discussion",
              "description": "",
              "color": "E9652D",
              "default": false
            }
          ],
          "assignee": {
            "login": "jaonoctus",
            "id": 7918067,
            "node_id": "MDQ6VXNlcjc5MTgwNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7918067?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jaonoctus",
            "html_url": "https://github.com/jaonoctus",
            "followers_url": "https://api.github.com/users/jaonoctus/followers",
            "following_url": "https://api.github.com/users/jaonoctus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jaonoctus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jaonoctus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jaonoctus/subscriptions",
            "organizations_url": "https://api.github.com/users/jaonoctus/orgs",
            "repos_url": "https://api.github.com/users/jaonoctus/repos",
            "events_url": "https://api.github.com/users/jaonoctus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jaonoctus/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "jaonoctus",
              "id": 7918067,
              "node_id": "MDQ6VXNlcjc5MTgwNjc=",
              "avatar_url": "https://avatars.githubusercontent.com/u/7918067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/jaonoctus",
              "html_url": "https://github.com/jaonoctus",
              "followers_url": "https://api.github.com/users/jaonoctus/followers",
              "following_url": "https://api.github.com/users/jaonoctus/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/jaonoctus/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/jaonoctus/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/jaonoctus/subscriptions",
              "organizations_url": "https://api.github.com/users/jaonoctus/orgs",
              "repos_url": "https://api.github.com/users/jaonoctus/repos",
              "events_url": "https://api.github.com/users/jaonoctus/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/jaonoctus/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "brunoerg",
              "id": 19480819,
              "node_id": "MDQ6VXNlcjE5NDgwODE5",
              "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/brunoerg",
              "html_url": "https://github.com/brunoerg",
              "followers_url": "https://api.github.com/users/brunoerg/followers",
              "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
              "organizations_url": "https://api.github.com/users/brunoerg/orgs",
              "repos_url": "https://api.github.com/users/brunoerg/repos",
              "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/brunoerg/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "lorenzolfm",
              "id": 38786333,
              "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
              "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lorenzolfm",
              "html_url": "https://github.com/lorenzolfm",
              "followers_url": "https://api.github.com/users/lorenzolfm/followers",
              "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
              "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
              "repos_url": "https://api.github.com/users/lorenzolfm/repos",
              "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "lucasdcf",
              "id": 68931156,
              "node_id": "MDQ6VXNlcjY4OTMxMTU2",
              "avatar_url": "https://avatars.githubusercontent.com/u/68931156?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lucasdcf",
              "html_url": "https://github.com/lucasdcf",
              "followers_url": "https://api.github.com/users/lucasdcf/followers",
              "following_url": "https://api.github.com/users/lucasdcf/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/lucasdcf/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/lucasdcf/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/lucasdcf/subscriptions",
              "organizations_url": "https://api.github.com/users/lucasdcf/orgs",
              "repos_url": "https://api.github.com/users/lucasdcf/repos",
              "events_url": "https://api.github.com/users/lucasdcf/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/lucasdcf/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 23,
          "created_at": "2024-04-01T16:06:25Z",
          "updated_at": "2024-04-18T11:21:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVjOGFhNjU3NjQyZWYyNGU3MTFhNzNjMjgyNzg2NDRmMTQxMTdkNzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c8aa657642ef24e711a73c28278644f14117d73",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5c8aa657642ef24e711a73c28278644f14117d73",
      "tree": {
        "sha": "aba1a30b60b44d401d0c38934eb17b3baa6fa75c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aba1a30b60b44d401d0c38934eb17b3baa6fa75c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3c1e15831c463df7968b028a77e787da7e6256d",
          "sha": "c3c1e15831c463df7968b028a77e787da7e6256d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c3c1e15831c463df7968b028a77e787da7e6256d"
        }
      ],
      "message": "[txpackages] add canonical way to get hash of package",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-18T15:56:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-16T10:58:25Z"
      },
      "sha": "5c8aa657642ef24e711a73c28278644f14117d73"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNhOWYwM2YyMjA3ODU0Yzg0OWExNGQ3YWYyZmNkOTFhNWY2NzVlMTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca9f03f2207854c849a14d7af2fcd91a5f675e14",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ca9f03f2207854c849a14d7af2fcd91a5f675e14",
      "tree": {
        "sha": "a357af6112eff0e565d77dec4049d46f15879f01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a357af6112eff0e565d77dec4049d46f15879f01"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c8aa657642ef24e711a73c28278644f14117d73",
          "sha": "5c8aa657642ef24e711a73c28278644f14117d73",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5c8aa657642ef24e711a73c28278644f14117d73"
        }
      ],
      "message": "[txorphanage] add method to get all orphans spending a tx",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-18T15:56:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-03-28T17:14:38Z"
      },
      "sha": "ca9f03f2207854c849a14d7af2fcd91a5f675e14"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12525800335,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALqmIuP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12525800335",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T15:59:28Z"
    },
    {
      "event": "reviewed",
      "id": 2009283703,
      "node_id": "PRR_kwDOABII5853wzx3",
      "url": null,
      "actor": null,
      "commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Main changes:\r\n- Try same-peer orphanage children (most recent first) before different-peer ones (randomized). Replaced `GetChildren` with `GetChildrenFromSamePeer` and `GetChildrenFromDifferentPeer`.\r\n- Deleted `GetCombinedHash` because it's unused. Also deleted the tests for it\r\n- Changed `GetPackageHash` a bit. Using single-sha256 instead of double-sha256 and using just wtxids instead of serialized vector",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-2009283703",
      "submitted_at": "2024-04-18T16:02:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQyODU5NTQ4YWI1YWViZjQwZGE2MDg5Yjg1MDY1ZjdjMjA0Yjk5MmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42859548ab5aebf40da6089b85065f7c204b992a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/42859548ab5aebf40da6089b85065f7c204b992a",
      "tree": {
        "sha": "db5de67e071ecdcf315f42dabafd84c58d45610b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db5de67e071ecdcf315f42dabafd84c58d45610b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca9f03f2207854c849a14d7af2fcd91a5f675e14",
          "sha": "ca9f03f2207854c849a14d7af2fcd91a5f675e14",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ca9f03f2207854c849a14d7af2fcd91a5f675e14"
        }
      ],
      "message": "[unit test] TxOrphanage::GetChildrenFrom*",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-18T16:29:36Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-03-28T17:14:50Z"
      },
      "sha": "42859548ab5aebf40da6089b85065f7c204b992a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIxNTFiYzUzMDNjNjM1ZTNjZGMxNTQzNjA1MTE2Y2E4NzkwOTE2NmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b151bc5303c635e3cdc1543605116ca87909166a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b151bc5303c635e3cdc1543605116ca87909166a",
      "tree": {
        "sha": "b78c3dfb23d878d17b2abfbfb1d0128fc4b7ebca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b78c3dfb23d878d17b2abfbfb1d0128fc4b7ebca"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42859548ab5aebf40da6089b85065f7c204b992a",
          "sha": "42859548ab5aebf40da6089b85065f7c204b992a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/42859548ab5aebf40da6089b85065f7c204b992a"
        }
      ],
      "message": "[fuzz] break out parent functions and add GetChildrenFrom* coverage\n\nIt's very hard to randomly construct a transaction that would be the\nparent of an existing orphanage tx. For functions like\nAddChildrenToWorkSet and GetChildren that take orphan parents, use a tx\nthat was previously constructed.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-18T16:29:36Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-03-28T17:15:11Z"
      },
      "sha": "b151bc5303c635e3cdc1543605116ca87909166a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYwNDVkMTg4NjZjZjQxMjcyMDExZmZiNWNiMGU2MTE5YTQ5M2M3OTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6045d18866cf41272011ffb5cb0e6119a493c794",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6045d18866cf41272011ffb5cb0e6119a493c794",
      "tree": {
        "sha": "107c4ffac8dfa9e6c7553929ebb98b0d2485caf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/107c4ffac8dfa9e6c7553929ebb98b0d2485caf4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b151bc5303c635e3cdc1543605116ca87909166a",
          "sha": "b151bc5303c635e3cdc1543605116ca87909166a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b151bc5303c635e3cdc1543605116ca87909166a"
        }
      ],
      "message": "[p2p] add separate rejections cache for reconsiderable txns",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-18T16:29:36Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-11-09T14:50:33Z"
      },
      "sha": "6045d18866cf41272011ffb5cb0e6119a493c794"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQxYTk2OWEzN2M3MzA2MzFlZTEwM2Y4NGM5ZmRkNDM2YzViYjkwNWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41a969a37c730631ee103f84c9fdd436c5bb905c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/41a969a37c730631ee103f84c9fdd436c5bb905c",
      "tree": {
        "sha": "e140b38049a8ce774f216ee0925cca11c43c57a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e140b38049a8ce774f216ee0925cca11c43c57a2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6045d18866cf41272011ffb5cb0e6119a493c794",
          "sha": "6045d18866cf41272011ffb5cb0e6119a493c794",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6045d18866cf41272011ffb5cb0e6119a493c794"
        }
      ],
      "message": "[p2p] opportunistically accept 1-parent-1-child packages",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-18T16:29:36Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-03-08T13:15:47Z"
      },
      "sha": "41a969a37c730631ee103f84c9fdd436c5bb905c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12526167603,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALqniYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12526167603",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T16:29:45Z"
    },
    {
      "event": "commented",
      "id": 2064460626,
      "node_id": "IC_kwDOABII5857DStS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2064460626",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T16:29:50Z",
      "updated_at": "2024-04-18T16:29:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23986234746</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2064460626",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "labeled",
      "id": 12526168447,
      "node_id": "LE_lADOABII5854OHi1zwAAAALqnil_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12526168447",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T16:29:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2066207955,
      "node_id": "IC_kwDOABII5857J9TT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2066207955",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-19T09:40:20Z",
      "updated_at": "2024-04-19T09:40:20Z",
      "author_association": "MEMBER",
      "body": "debugging the p2p_opportunistic_1p1c.py failure. I think the wallet one is unrelated.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2066207955",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEwNTM5MTFjYjk5NTc3OTdmYWZmN2Y2OGRiZDZkZWI2YjYwODA1Nzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a053911cb9957797faff7f68dbd6deb6b6080578",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a053911cb9957797faff7f68dbd6deb6b6080578",
      "tree": {
        "sha": "f72017197617a0c26c09b71c5ab8b677408c3a6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f72017197617a0c26c09b71c5ab8b677408c3a6d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41a969a37c730631ee103f84c9fdd436c5bb905c",
          "sha": "41a969a37c730631ee103f84c9fdd436c5bb905c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/41a969a37c730631ee103f84c9fdd436c5bb905c"
        }
      ],
      "message": "[functional test] opportunistic 1p1c package submission",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-19T10:44:50Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-10-03T15:30:42Z"
      },
      "sha": "a053911cb9957797faff7f68dbd6deb6b6080578"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12536806405,
      "node_id": "HRFPE_lADOABII5854OHi1zwAAAALrQHwF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12536806405",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-19T10:53:24Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506244026",
      "pull_request_review_id": 1906612532,
      "id": 1506244026,
      "node_id": "PRRC_kwDOABII585Zx3W6",
      "diff_hunk": "@@ -3047,17 +3076,7 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            LogPrint(BCLog::MEMPOOL, \"AcceptToMemoryPool: peer=%d: accepted %s (wtxid=%s) (poolsz %u txn, %u kB)\\n\",\n-                peer.m_id,\n-                orphanHash.ToString(),\n-                orphan_wtxid.ToString(),\n-                m_mempool.size(), m_mempool.DynamicMemoryUsage() / 1000);\n-            RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n-            m_orphanage.AddChildrenToWorkSet(*porphanTx);\n-            m_orphanage.EraseTx(orphanHash);\n-            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n-                AddToCompactExtraTransactions(removedTx);\n-            }\n+            ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "bbf1b836fa9e82142c534c6d7b07389326434bde",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I know it's populated due to this being accepted, but I think `Assume(result.m_replaced_transactions.has_value())` would be a good belt and suspenders to avoid UB in case of regression e.g., we redefined std::nulltopt mean no replacements",
      "created_at": "2024-02-28T16:26:15Z",
      "updated_at": "2024-03-04T15:25:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1506244026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506244026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3079,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506255820",
      "pull_request_review_id": 1906612532,
      "id": 1506255820,
      "node_id": "PRRC_kwDOABII585Zx6PM",
      "diff_hunk": "@@ -582,6 +582,15 @@ class PeerManagerImpl final : public PeerManager\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer);\n \n+    enum class InvalidTxTask : uint8_t {\n+        NONE,\n+        ADD_ORPHAN,\n+    };\n+    /** Handle a transaction whose result was MempoolAcceptResult::ResultType::INVALID.\n+     * @returns true if this transaction is an orphan we should try to resolve. */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this doesn't return a boolean",
      "created_at": "2024-02-28T16:34:41Z",
      "updated_at": "2024-03-04T15:25:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1506255820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506255820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 590,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506260613",
      "pull_request_review_id": 1906612532,
      "id": 1506260613,
      "node_id": "PRRC_kwDOABII585Zx7aF",
      "diff_hunk": "@@ -4297,28 +4373,22 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             ProcessValidTx(ptx, pfrom.GetId(), result.m_replaced_transactions.value());\n             pfrom.m_last_tx_time = GetTime<std::chrono::seconds>();\n-        }\n-        else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n-        {\n-            bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n-\n-            // Deduplicate parent txids, so that we don't have to loop over\n-            // the same parent txid more than once down below.\n-            std::vector<uint256> unique_parents;\n-            unique_parents.reserve(tx.vin.size());\n-            for (const CTxIn& txin : tx.vin) {\n-                // We start with all parents, and then remove duplicates below.\n-                unique_parents.push_back(txin.prevout.hash);\n+            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n+                AddToCompactExtraTransactions(removedTx);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "copy/paste error? isn't this already done in `ProcessValidTx` just above?",
      "created_at": "2024-02-28T16:38:15Z",
      "updated_at": "2024-03-04T15:25:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1506260613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506260613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511275969",
      "pull_request_review_id": 1906612532,
      "id": 1511275969,
      "node_id": "PRRC_kwDOABII585aFD3B",
      "diff_hunk": "@@ -3078,54 +3193,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash().ToUint256());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->HasWitness()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash().ToUint256());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphanHash);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "previously `MISSING_INPUTS` would have resulted in a continuation of the loop. A side-effect of this change is that we will detect if the orphan was rejected due to `m_recent_rejects` entries of its parents, which seems like a strict improvement?",
      "created_at": "2024-03-04T14:43:38Z",
      "updated_at": "2024-03-04T15:25:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511275969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511275969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3109,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511279226",
      "pull_request_review_id": 1906612532,
      "id": 1511279226,
      "node_id": "PRRC_kwDOABII585aFEp6",
      "diff_hunk": "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+            { return m_recent_rejects.contains(input.prevout.hash.ToUint256()); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(),\n+                     tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash().ToUint256());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "future work: might make sense to delete this transaction from the orphanage as well in this case if it exists so we don't try it with other peer?",
      "created_at": "2024-03-04T14:45:50Z",
      "updated_at": "2024-03-04T15:25:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511279226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511279226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511306814",
      "pull_request_review_id": 1906612532,
      "id": 1511306814,
      "node_id": "PRRC_kwDOABII585aFLY-",
      "diff_hunk": "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we used to call `m_orphanage.EraseTx(orphanHash);` for each non-`TX_MISSING_INPUTS` possibility, but due to early return we don't. Can we sync this back up or justify each case this has changed for?",
      "created_at": "2024-03-04T15:02:59Z",
      "updated_at": "2024-03-04T15:25:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511306814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511306814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3060,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511328011",
      "pull_request_review_id": 1906612532,
      "id": 1511328011,
      "node_id": "PRRC_kwDOABII585aFQkL",
      "diff_hunk": "@@ -4342,63 +4412,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n                 // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n                 m_orphanage.LimitOrphans(m_opts.max_orphan_txs, m_rng);\n-            } else {\n-                LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n-                         tx.GetHash().ToString(),\n-                         tx.GetWitnessHash().ToString());\n-                // We will continue to reject this tx since it has rejected\n-                // parents so avoid re-requesting it from other peers.\n-                // Here we add both the txid and the wtxid, as we know that\n-                // regardless of what witness is provided, we will not accept\n-                // this, so we don't need to allow for redownload of this txid\n-                // from any of our non-wtxidrelay peers.\n-                m_recent_rejects.insert(tx.GetHash().ToUint256());\n-                m_recent_rejects.insert(tx.GetWitnessHash().ToUint256());\n-                m_txrequest.ForgetTxHash(tx.GetHash());\n-                m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n+            } else if (RecursiveDynamicUsage(*ptx) < 100000) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 254,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "with changes, we now add to extra txns even if witness stripped; seems wrong",
      "created_at": "2024-03-04T15:13:39Z",
      "updated_at": "2024-03-04T15:25:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511328011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511328011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511344657",
      "pull_request_review_id": 1906612532,
      "id": 1511344657,
      "node_id": "PRRC_kwDOABII585aFUoR",
      "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+        self.replacement_packages = []",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 181,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is never set",
      "created_at": "2024-03-04T15:24:06Z",
      "updated_at": "2024-03-04T15:25:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511344657",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511344657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511599258",
      "pull_request_review_id": 1915025042,
      "id": 1511599258,
      "node_id": "PRRC_kwDOABII585aGSya",
      "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 39,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 19015e3c9aed5709e776ef15bf9e73f126c7ea29: It seems to be using 3 nodes instead of 4. Or am I missing something?\r\n\r\nE.g.:\r\n\r\n```diff\r\ndiff --git a/test/functional/p2p_1p1c_package_relay.py b/test/functional/p2p_1p1c_package_relay.py\r\nindex 6a3ba7c3df..dda671dede 100755\r\n--- a/test/functional/p2p_1p1c_package_relay.py\r\n+++ b/test/functional/p2p_1p1c_package_relay.py\r\n@@ -36,7 +36,7 @@ FEERATE_1SAT_VB = Decimal(\"0.00001000\")\r\n class PackageRelayTest(BitcoinTestFramework):\r\n     def set_test_params(self):\r\n         self.setup_clean_chain = True\r\n-        self.num_nodes = 4\r\n+        self.num_nodes = 3\r\n         self.extra_args = [[\r\n             \"-datacarriersize=100000\",\r\n             \"-maxmempool=5\",\r\n@@ -85,7 +85,7 @@ class PackageRelayTest(BitcoinTestFramework):\r\n         # Child should already be in orphanage\r\n         self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\r\n         # Parent would have been previously rejected\r\n-        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\r\n+        self.transactions_to_presend[2] = [low_fee_parent[\"tx\"]]\r\n \r\n     def test_individual_logic(self):\r\n         node = self.nodes[0]\r\n@@ -213,7 +213,7 @@ class PackageRelayTest(BitcoinTestFramework):\r\n \r\n         self.log.info(\"Submit replacement package to node3\")\r\n         for package_hex in self.replacement_packages:\r\n-            self.nodes[3].submitpackage(package_hex)\r\n+            self.nodes[2].submitpackage(package_hex)\r\n \r\n         self.log.info(\"Wait for mempools to sync\")\r\n         self.sync_mempools(timeout=20)\r\n```",
      "created_at": "2024-03-04T18:36:26Z",
      "updated_at": "2024-03-04T18:36:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511599258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511599258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512661556",
      "pull_request_review_id": 1916618959,
      "id": 1512661556,
      "node_id": "PRRC_kwDOABII585aKWI0",
      "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 39,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "in_reply_to_id": 1511599258,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The idea is this is a \"network\" test to see that the package propagates across multiple hops. 1 node is the sender, 1 node pre-receives the parent, 1 node pre-receives the child, and 1 node pre-receives nothing.",
      "created_at": "2024-03-05T11:23:41Z",
      "updated_at": "2024-03-05T11:28:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1512661556",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512661556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512689796",
      "pull_request_review_id": 1916664022,
      "id": 1512689796,
      "node_id": "PRRC_kwDOABII585aKdCE",
      "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 39,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "in_reply_to_id": 1511599258,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Got it, thank you.",
      "created_at": "2024-03-05T11:48:03Z",
      "updated_at": "2024-03-05T11:48:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1512689796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512689796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514657717",
      "pull_request_review_id": 1920028235,
      "id": 1514657717,
      "node_id": "PRRC_kwDOABII585aR9e1",
      "diff_hunk": "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sdaftuar honestly this comment/link doesn't make sense to me. If it's witness-stripped, we can't add it to `m_recent_rejects` since that would blind us to any real version of the tx?",
      "created_at": "2024-03-06T15:11:18Z",
      "updated_at": "2024-03-06T15:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1514657717",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514657717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514698744",
      "pull_request_review_id": 1920093386,
      "id": 1514698744,
      "node_id": "PRRC_kwDOABII585aSHf4",
      "diff_hunk": "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": 1514657717,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I had to remind myself of how this works, but the concern contemplated in that comment is that if the **only** copy of a non-witness-stripped version of a transaction is from a node that has not yet upgraded to wtxid-based-relay, then an adversary could blind us to that transaction by relaying a witness-stripped version of it (and then, since txid==wtxid for witness-stripped transactions, the hash that we'd use to fetch the transaction from the non-wtxid-relay peer who has the correct version would be in our `m_recent_rejects`, and we wouldn't ever request it).\r\n\r\nAt the time that I wrote that comment, I think I also said that once wtxid-based-relay is sufficiently deployed, that we could stop worrying about this...  I don't recall when wtxid-relay was deployed but maybe we're at that point already?\r\n\r\nThere's another link to a comment thread in the PR that implemented wtxid-relay which discusses the potential impact on downstream projects, so maybe if we were to make a behavior change we should communicate that in advance so that no one is surprised.",
      "created_at": "2024-03-06T15:34:20Z",
      "updated_at": "2024-03-06T15:34:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1514698744",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514698744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514744423",
      "pull_request_review_id": 1920164662,
      "id": 1514744423,
      "node_id": "PRRC_kwDOABII585aSSpn",
      "diff_hunk": "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": 1514657717,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems like the comment thread is concerned with what happens if:\r\n(1) the sender is using non-wtxidrelay (and thus only announces transactions by txid),\r\n(2) all of its peers are caching witness-stripped rejections by wtxid (i.e. txid),\r\n(3) there is an attacker trying to censor the sender's tx by sending witness-stripped versions of the tx ahead of the sender.\r\n\r\nThis isn't a problem if (1) isn't true, i.e. the sender is using wtxidrelay, e.g. any non-eol version of Bitcoin Core. If we see that the vast majority of nodes (that send transactions) are sending a `wtxidrelay` message, perhaps it would be safe to remove the special casing (with a message to downstream projects)?\r\n\r\nEdit: perhaps not, if btcd is an example of (1)? https://github.com/btcsuite/btcd/blob/a4f447006e7538f9e3d5ae90f54700c97fea9c3d/peer/peer.go#L2214",
      "created_at": "2024-03-06T16:00:50Z",
      "updated_at": "2024-03-06T16:18:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1514744423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514744423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517789807",
      "pull_request_review_id": 1925001479,
      "id": 1517789807,
      "node_id": "PRRC_kwDOABII585ad6Jv",
      "diff_hunk": "@@ -3078,54 +3193,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash().ToUint256());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->HasWitness()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash().ToUint256());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphanHash);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": 1511275969,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rewrote to be more strict refactor to give reviewers less to think about. I do think it makes sense that if a parent has been rejected since the last time we looked at this orphan, we get rid of it, but I suppose we can think about that later.",
      "created_at": "2024-03-08T14:30:30Z",
      "updated_at": "2024-03-08T14:30:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1517789807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517789807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3109,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517790259",
      "pull_request_review_id": 1925002258,
      "id": 1517790259,
      "node_id": "PRRC_kwDOABII585ad6Qz",
      "diff_hunk": "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": 1511306814,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Old behavior should be preserved now",
      "created_at": "2024-03-08T14:30:50Z",
      "updated_at": "2024-03-08T14:30:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1517790259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517790259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3060,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517791171",
      "pull_request_review_id": 1925003669,
      "id": 1517791171,
      "node_id": "PRRC_kwDOABII585ad6fD",
      "diff_hunk": "@@ -4342,63 +4412,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n                 // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n                 m_orphanage.LimitOrphans(m_opts.max_orphan_txs, m_rng);\n-            } else {\n-                LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n-                         tx.GetHash().ToString(),\n-                         tx.GetWitnessHash().ToString());\n-                // We will continue to reject this tx since it has rejected\n-                // parents so avoid re-requesting it from other peers.\n-                // Here we add both the txid and the wtxid, as we know that\n-                // regardless of what witness is provided, we will not accept\n-                // this, so we don't need to allow for redownload of this txid\n-                // from any of our non-wtxidrelay peers.\n-                m_recent_rejects.insert(tx.GetHash().ToUint256());\n-                m_recent_rejects.insert(tx.GetWitnessHash().ToUint256());\n-                m_txrequest.ForgetTxHash(tx.GetHash());\n-                m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n+            } else if (RecursiveDynamicUsage(*ptx) < 100000) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 254,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": 1511328011,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2024-03-08T14:31:34Z",
      "updated_at": "2024-03-08T14:31:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1517791171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517791171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519481765",
      "pull_request_review_id": 1927446729,
      "id": 1519481765,
      "node_id": "PRRC_kwDOABII585akXOl",
      "diff_hunk": "@@ -4297,28 +4373,22 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             ProcessValidTx(ptx, pfrom.GetId(), result.m_replaced_transactions.value());\n             pfrom.m_last_tx_time = GetTime<std::chrono::seconds>();\n-        }\n-        else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n-        {\n-            bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n-\n-            // Deduplicate parent txids, so that we don't have to loop over\n-            // the same parent txid more than once down below.\n-            std::vector<uint256> unique_parents;\n-            unique_parents.reserve(tx.vin.size());\n-            for (const CTxIn& txin : tx.vin) {\n-                // We start with all parents, and then remove duplicates below.\n-                unique_parents.push_back(txin.prevout.hash);\n+            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n+                AddToCompactExtraTransactions(removedTx);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": 1506260613,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2024-03-11T10:19:32Z",
      "updated_at": "2024-03-11T10:19:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1519481765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519481765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523100228",
      "pull_request_review_id": 1933929927,
      "id": 1523100228,
      "node_id": "PRRC_kwDOABII585ayKpE",
      "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+        self.replacement_packages = []",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 181,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "in_reply_to_id": 1511344657,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, forgot to delete from a package RBF test I built on top. Fixed",
      "created_at": "2024-03-13T12:01:38Z",
      "updated_at": "2024-03-13T12:01:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523100228",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523100228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523804572",
      "pull_request_review_id": 1935032934,
      "id": 1523804572,
      "node_id": "PRRC_kwDOABII585a02mc",
      "diff_hunk": "@@ -846,6 +846,23 @@ class PeerManagerImpl final : public PeerManager\n     CRollingBloomFilter m_recent_rejects GUARDED_BY(::cs_main){120'000, 0.000'001};\n     uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n+    /**\n+     * Filter for the wtxids of transactions that were recently rejected by the mempool but are\n+     * eligible for reconsideration if submitted with other transactions.\n+     *\n+     * When a transaction's error is TxValidationResult::TX_RECONSIDERABLE (in a package or by\n+     * itself), add its wtxid to this filter.\n+     *\n+     * Upon receiving an announcement for a transaction, if it exists in this filter, do not\n+     * download the txdata.\n+     *\n+     * Reset this filter when the chain tip changes.\n+     *\n+     * Parameters are picked to be the same false positive rate but half the capacity as",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "there any science to these choices?",
      "created_at": "2024-03-13T19:20:47Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523804572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523804572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523821142",
      "pull_request_review_id": 1935032934,
      "id": 1523821142,
      "node_id": "PRRC_kwDOABII585a06pW",
      "diff_hunk": "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`include_reconsiderable` seems to be true on every call-site. Perhaps this is vestigial from \"real\" package relay PRs of times past? Might be worth noting/making it default true, or dropping altogether.",
      "created_at": "2024-03-13T19:36:08Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523821142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523821142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523822569",
      "pull_request_review_id": 1935032934,
      "id": 1523822569,
      "node_id": "PRRC_kwDOABII585a06_p",
      "diff_hunk": "@@ -2209,6 +2226,8 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n \n     if (m_orphanage.HaveTx(gtxid)) return true;\n \n+    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(gtxid.GetHash())) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(hash)) return true;\r\n```",
      "created_at": "2024-03-13T19:37:39Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523822569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523822569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824732",
      "pull_request_review_id": 1935032934,
      "id": 1523824732,
      "node_id": "PRRC_kwDOABII585a07hc",
      "diff_hunk": "@@ -596,6 +596,12 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    void ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n+\n+    void MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)",
      "path": "src/net_processing.cpp",
      "position": 25,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "please give some documentation",
      "created_at": "2024-03-13T19:39:58Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523824732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 611,
      "original_line": 611,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824762",
      "pull_request_review_id": 1935032934,
      "id": 1523824762,
      "node_id": "PRRC_kwDOABII585a07h6",
      "diff_hunk": "@@ -596,6 +596,12 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    void ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "please give some documentation",
      "created_at": "2024-03-13T19:40:00Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523824762",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 602,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525341442",
      "pull_request_review_id": 1935032934,
      "id": 1525341442,
      "node_id": "PRRC_kwDOABII585a6t0C",
      "diff_hunk": "@@ -4450,6 +4552,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (state.IsInvalid()) {\n             ProcessInvalidTx(pfrom.GetId(), ptx, state, /*maybe_add_extra_compact_tx=*/true);\n         }\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {",
      "path": "src/net_processing.cpp",
      "position": 328,
      "original_position": 127,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n        if (m_recent_rejects_reconsiderable.contains(wtxid)) {\r\n```\r\nthink this is the same check and would match other call of the function",
      "created_at": "2024-03-14T18:38:54Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1525341442",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525341442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4625,
      "original_line": 4625,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525375424",
      "pull_request_review_id": 1935032934,
      "id": 1525375424,
      "node_id": "PRRC_kwDOABII585a62HA",
      "diff_hunk": "@@ -4334,6 +4426,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         m_txrequest.ReceivedResponse(pfrom.GetId(), txid);\n         if (tx.HasWitness()) m_txrequest.ReceivedResponse(pfrom.GetId(), wtxid);\n \n+        // If we find this transaction in m_recent_rejects_reconsiderable, we shouldn't try it by",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mention that this is \"merely\" an optimization(and also reduces the churn in the bloom filter as well)?",
      "created_at": "2024-03-14T19:13:00Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1525375424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525375424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4429,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525396593",
      "pull_request_review_id": 1935032934,
      "id": 1525396593,
      "node_id": "PRRC_kwDOABII585a67Rx",
      "diff_hunk": "@@ -4334,6 +4426,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         m_txrequest.ReceivedResponse(pfrom.GetId(), txid);\n         if (tx.HasWitness()) m_txrequest.ReceivedResponse(pfrom.GetId(), wtxid);\n \n+        // If we find this transaction in m_recent_rejects_reconsiderable, we shouldn't try it by\n+        // itself again. However, look for a matching child in the orphanage and maybe submit it\n+        // again as a package.\n+        if (m_recent_rejects_reconsiderable.contains(wtxid)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if `MaybeProcess1P1CPackage` handles the (non)existence in the `m_recent_rejects_reconsiderable` filter, you could stick this inside the `AlreadyHaveTx` block, which would allow existing logging to continue happening, and seems pretty natural?",
      "created_at": "2024-03-14T19:31:59Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1525396593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525396593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526235839",
      "pull_request_review_id": 1935032934,
      "id": 1526235839,
      "node_id": "PRRC_kwDOABII585a-IK_",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)",
      "path": "src/net_processing.cpp",
      "position": 187,
      "original_position": 61,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\nvoid PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& parent_ptx, NodeId nodeid)\r\n```",
      "created_at": "2024-03-15T12:44:04Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526235839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526235839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3267,
      "original_line": 3267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526239102",
      "pull_request_review_id": 1935032934,
      "id": 1526239102,
      "node_id": "PRRC_kwDOABII585a-I9-",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx, nodeid)};\n+    bool tried_package_cpfp{false};\n+\n+    const auto& txid{ptx->GetHash()};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n    const auto& parent_txid{parent_ptx->GetHash()};\r\n```\r\nas well as wtxid just below",
      "created_at": "2024-03-15T12:46:48Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526239102",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526239102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526243536",
      "pull_request_review_id": 1935032934,
      "id": 1526243536,
      "node_id": "PRRC_kwDOABII585a-KDQ",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx, nodeid)};\n+    bool tried_package_cpfp{false};\n+\n+    const auto& txid{ptx->GetHash()};\n+    const auto& wtxid{ptx->GetWitnessHash()};\n+",
      "path": "src/net_processing.cpp",
      "position": 199,
      "original_position": 72,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n\r\n    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\r\n\r\n```",
      "created_at": "2024-03-15T12:50:44Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526243536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526243536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3279,
      "original_line": 3279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526585888",
      "pull_request_review_id": 1935032934,
      "id": 1526585888,
      "node_id": "PRRC_kwDOABII585a_dog",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n        if (Assume(it_result != package_result.m_tx_results.end())) {\r\n```",
      "created_at": "2024-03-15T17:02:58Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526585888",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526585888"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526656636",
      "pull_request_review_id": 1935032934,
      "id": 1526656636,
      "node_id": "PRRC_kwDOABII585a_u58",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:",
      "path": "src/net_processing.cpp",
      "position": 173,
      "original_position": 50,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "have you considered moving this above `INVALID` and letting it fall through to call `ProcessInvalidTx` as well?",
      "created_at": "2024-03-15T18:08:41Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526656636",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526656636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3253,
      "original_line": 3253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526676597",
      "pull_request_review_id": 1935032934,
      "id": 1526676597,
      "node_id": "PRRC_kwDOABII585a_zx1",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't add orphans to vExtraTxnForCompact though, just too low aka reconsiderable?\r\n\r\nmaybe something like:\r\n\r\n> // All packages currently considered are 1p1c, which means\r\n> // any entrants to be added in vExtraTxnForCompact have already been added",
      "created_at": "2024-03-15T18:25:36Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526676597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526676597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526764674",
      "pull_request_review_id": 1935032934,
      "id": 1526764674,
      "node_id": "PRRC_kwDOABII585bAJSC",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 172,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unused",
      "created_at": "2024-03-15T19:45:49Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526764674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526764674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776259",
      "pull_request_review_id": 1935032934,
      "id": 1526776259,
      "node_id": "PRRC_kwDOABII585bAMHD",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+\n+        self.log.info(\"Create transactions and then mature the coinbases\")\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"outbound-full-relay\"))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in self.transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])\n+                peer.send_and_ping(msg_tx(tx))\n+            # This disconnect removes any sent orphans from the orphanage (EraseForPeer) and times\n+            # out the in-flight requests.  It is currently required for the test to pass right now,\n+            # because the node will not (re)try requesting orphan parents from multiple peers if the\n+            # first one fails.\n+            # TODO: remove this and test that the node retries orphan resolution with other peers",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 206,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unsure what the test is covering if it's being deleted on disconnect?",
      "created_at": "2024-03-15T19:57:52Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526776259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776377",
      "pull_request_review_id": 1935032934,
      "id": 1526776377,
      "node_id": "PRRC_kwDOABII585bAMI5",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+\n+        self.log.info(\"Create transactions and then mature the coinbases\")\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"outbound-full-relay\"))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in self.transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])\n+                peer.send_and_ping(msg_tx(tx))\n+            # This disconnect removes any sent orphans from the orphanage (EraseForPeer) and times\n+            # out the in-flight requests.  It is currently required for the test to pass right now,\n+            # because the node will not (re)try requesting orphan parents from multiple peers if the\n+            # first one fails.\n+            # TODO: remove this and test that the node retries orphan resolution with other peers\n+            # when the first try fails.\n+            peer.peer_disconnect()\n+\n+        self.log.info(\"Submit full packages to node0\")\n+        for package_hex in self.packages_to_submit:\n+            self.nodes[0].submitpackage(package_hex)\n+\n+        self.log.info(\"Wait for mempools to sync\")\n+        self.sync_mempools(timeout=20)\n+\n+        self.log.info(\"Wait for mempools to sync\")",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 217,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "double-sync for what?",
      "created_at": "2024-03-15T19:58:01Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526776377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526790462",
      "pull_request_review_id": 1935032934,
      "id": 1526790462,
      "node_id": "PRRC_kwDOABII585bAPk-",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 106,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "had this timeout locally once",
      "created_at": "2024-03-15T20:16:30Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526790462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526790462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526791671",
      "pull_request_review_id": 1935032934,
      "id": 1526791671,
      "node_id": "PRRC_kwDOABII585bAP33",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 182,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could this subtest be in its own subroutine",
      "created_at": "2024-03-15T20:18:04Z",
      "updated_at": "2024-03-18T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526791671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526791671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008039",
      "pull_request_review_id": 1945627419,
      "id": 1530008039,
      "node_id": "PRRC_kwDOABII585bMhHn",
      "diff_hunk": "@@ -846,6 +846,23 @@ class PeerManagerImpl final : public PeerManager\n     CRollingBloomFilter m_recent_rejects GUARDED_BY(::cs_main){120'000, 0.000'001};\n     uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n+    /**\n+     * Filter for the wtxids of transactions that were recently rejected by the mempool but are\n+     * eligible for reconsideration if submitted with other transactions.\n+     *\n+     * When a transaction's error is TxValidationResult::TX_RECONSIDERABLE (in a package or by\n+     * itself), add its wtxid to this filter.\n+     *\n+     * Upon receiving an announcement for a transaction, if it exists in this filter, do not\n+     * download the txdata.\n+     *\n+     * Reset this filter when the chain tip changes.\n+     *\n+     * Parameters are picked to be the same false positive rate but half the capacity as",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "in_reply_to_id": 1523804572,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not much science, no. It makes sense to me to use the same false positive rate. As for size, I'll run my node for a bit longer and maybe use the ratio of `m_recent_rejects` / `m_recent_rejects_reconsiderable` usage to give a more scientific number.",
      "created_at": "2024-03-19T09:26:15Z",
      "updated_at": "2024-03-19T09:26:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1530008039",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008886",
      "pull_request_review_id": 1945628865,
      "id": 1530008886,
      "node_id": "PRRC_kwDOABII585bMhU2",
      "diff_hunk": "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "in_reply_to_id": 1523821142,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~Vestigial from a previous iteration of this PR and future changes. Will drop~ EDIT: I forgot to flip some",
      "created_at": "2024-03-19T09:26:51Z",
      "updated_at": "2024-03-20T17:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1530008886",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532216970",
      "pull_request_review_id": 1949112319,
      "id": 1532216970,
      "node_id": "PRRC_kwDOABII585bU8aK",
      "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 39,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "in_reply_to_id": 1511599258,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added a comment on top of where the package is created",
      "created_at": "2024-03-20T14:45:33Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532216970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532216970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532237608",
      "pull_request_review_id": 1949112319,
      "id": 1532237608,
      "node_id": "PRRC_kwDOABII585bVBco",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+\n+        self.log.info(\"Create transactions and then mature the coinbases\")\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"outbound-full-relay\"))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in self.transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])\n+                peer.send_and_ping(msg_tx(tx))\n+            # This disconnect removes any sent orphans from the orphanage (EraseForPeer) and times\n+            # out the in-flight requests.  It is currently required for the test to pass right now,\n+            # because the node will not (re)try requesting orphan parents from multiple peers if the\n+            # first one fails.\n+            # TODO: remove this and test that the node retries orphan resolution with other peers\n+            # when the first try fails.\n+            peer.peer_disconnect()\n+\n+        self.log.info(\"Submit full packages to node0\")\n+        for package_hex in self.packages_to_submit:\n+            self.nodes[0].submitpackage(package_hex)\n+\n+        self.log.info(\"Wait for mempools to sync\")\n+        self.sync_mempools(timeout=20)\n+\n+        self.log.info(\"Wait for mempools to sync\")",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 217,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": 1526776377,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(originally there was an original broadcast, then a package RBF broadcast) no reason, deleted",
      "created_at": "2024-03-20T14:57:25Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532237608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532237608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532243418",
      "pull_request_review_id": 1949112319,
      "id": 1532243418,
      "node_id": "PRRC_kwDOABII585bVC3a",
      "diff_hunk": "@@ -4450,6 +4552,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (state.IsInvalid()) {\n             ProcessInvalidTx(pfrom.GetId(), ptx, state, /*maybe_add_extra_compact_tx=*/true);\n         }\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {",
      "path": "src/net_processing.cpp",
      "position": 328,
      "original_position": 127,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1525341442,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I prefer how it is right now as\r\n- it's clear that it's based on the result we just got from mempool validation\r\n- it doesn't require peerman having direct access to `m_recent_rejects_reconsiderable` (which I would want to move into txdownloadman module)",
      "created_at": "2024-03-20T15:00:18Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532243418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532243418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4625,
      "original_line": 4625,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532283818",
      "pull_request_review_id": 1949112319,
      "id": 1532283818,
      "node_id": "PRRC_kwDOABII585bVMuq",
      "diff_hunk": "@@ -4334,6 +4426,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         m_txrequest.ReceivedResponse(pfrom.GetId(), txid);\n         if (tx.HasWitness()) m_txrequest.ReceivedResponse(pfrom.GetId(), wtxid);\n \n+        // If we find this transaction in m_recent_rejects_reconsiderable, we shouldn't try it by",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1525375424,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you mean by optimization? It's the same idea as `m_recent_rejects`, we don't want to waste bandwidth even though we are willing to retry low feerate things",
      "created_at": "2024-03-20T15:20:55Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532283818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532283818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4429,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532285661",
      "pull_request_review_id": 1949112319,
      "id": 1532285661,
      "node_id": "PRRC_kwDOABII585bVNLd",
      "diff_hunk": "@@ -4334,6 +4426,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         m_txrequest.ReceivedResponse(pfrom.GetId(), txid);\n         if (tx.HasWitness()) m_txrequest.ReceivedResponse(pfrom.GetId(), wtxid);\n \n+        // If we find this transaction in m_recent_rejects_reconsiderable, we shouldn't try it by\n+        // itself again. However, look for a matching child in the orphanage and maybe submit it\n+        // again as a package.\n+        if (m_recent_rejects_reconsiderable.contains(wtxid)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1525396593,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah good point as I just realize the previous thing was breaking the forcerelay stuff for low feerate txns. Moved inside that block.",
      "created_at": "2024-03-20T15:21:51Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532285661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532285661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366124",
      "pull_request_review_id": 1949112319,
      "id": 1532366124,
      "node_id": "PRRC_kwDOABII585bVg0s",
      "diff_hunk": "@@ -596,6 +596,12 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    void ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1523824762,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2024-03-20T16:01:10Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532366124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 602,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366193",
      "pull_request_review_id": 1949112319,
      "id": 1532366193,
      "node_id": "PRRC_kwDOABII585bVg1x",
      "diff_hunk": "@@ -596,6 +596,12 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    void ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n+\n+    void MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)",
      "path": "src/net_processing.cpp",
      "position": 25,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1523824732,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2024-03-20T16:01:13Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532366193",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 611,
      "original_line": 611,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532453411",
      "pull_request_review_id": 1949112319,
      "id": 1532453411,
      "node_id": "PRRC_kwDOABII585bV2Ij",
      "diff_hunk": "@@ -846,6 +846,23 @@ class PeerManagerImpl final : public PeerManager\n     CRollingBloomFilter m_recent_rejects GUARDED_BY(::cs_main){120'000, 0.000'001};\n     uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n+    /**\n+     * Filter for the wtxids of transactions that were recently rejected by the mempool but are\n+     * eligible for reconsideration if submitted with other transactions.\n+     *\n+     * When a transaction's error is TxValidationResult::TX_RECONSIDERABLE (in a package or by\n+     * itself), add its wtxid to this filter.\n+     *\n+     * Upon receiving an announcement for a transaction, if it exists in this filter, do not\n+     * download the txdata.\n+     *\n+     * Reset this filter when the chain tip changes.\n+     *\n+     * Parameters are picked to be the same false positive rate but half the capacity as",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "in_reply_to_id": 1523804572,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually, rethinking this, if the capacity is informed by maximum churn, it should just be the same as `m_recent_rejects`.",
      "created_at": "2024-03-20T16:47:29Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532453411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532453411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532491393",
      "pull_request_review_id": 1949112319,
      "id": 1532491393,
      "node_id": "PRRC_kwDOABII585bV_aB",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1526676597,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we do add orphans to vExtraTxnForCompact though?",
      "created_at": "2024-03-20T17:11:31Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532491393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532491393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532493851",
      "pull_request_review_id": 1949112319,
      "id": 1532493851,
      "node_id": "PRRC_kwDOABII585bWAAb",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:",
      "path": "src/net_processing.cpp",
      "position": 173,
      "original_position": 50,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1526656636,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why? There wouldn't be anything interesting in `state`",
      "created_at": "2024-03-20T17:13:02Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532493851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532493851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3253,
      "original_line": 3253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532494577",
      "pull_request_review_id": 1949112319,
      "id": 1532494577,
      "node_id": "PRRC_kwDOABII585bWALx",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)",
      "path": "src/net_processing.cpp",
      "position": 187,
      "original_position": 61,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1526235839,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well, it might not be a parent :shrug: most likely it's just a low feerate transaction actually. I didn't change but don't feel strongly",
      "created_at": "2024-03-20T17:13:36Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532494577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532494577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3267,
      "original_line": 3267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532517889",
      "pull_request_review_id": 1949112319,
      "id": 1532517889,
      "node_id": "PRRC_kwDOABII585bWF4B",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx, nodeid)};\n+    bool tried_package_cpfp{false};\n+\n+    const auto& txid{ptx->GetHash()};\n+    const auto& wtxid{ptx->GetWitnessHash()};\n+",
      "path": "src/net_processing.cpp",
      "position": 199,
      "original_position": 72,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1526243536,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2024-03-20T17:29:58Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532517889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532517889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3279,
      "original_line": 3279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532520860",
      "pull_request_review_id": 1949112319,
      "id": 1532520860,
      "node_id": "PRRC_kwDOABII585bWGmc",
      "diff_hunk": "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "in_reply_to_id": 1523821142,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Turns out I actually just forgot to switch from true to false in a few places, and hadn't included a test for which these were important. I've added them back now and wrote a test (see \"package basic nonsegwit\"). Basically, we need to make sure we don't include reconsiderable when we're filtering for rejected parents on a `TX_MISSING_INPUTS` and when we're sending the GETDATAs, in case our parent was a low-feerate nonsegwit tx that we saw previously.",
      "created_at": "2024-03-20T17:32:15Z",
      "updated_at": "2024-03-20T17:42:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532520860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532520860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532534695",
      "pull_request_review_id": 1949626446,
      "id": 1532534695,
      "node_id": "PRRC_kwDOABII585bWJ-n",
      "diff_hunk": "@@ -2209,6 +2226,8 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n \n     if (m_orphanage.HaveTx(gtxid)) return true;\n \n+    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(gtxid.GetHash())) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "in_reply_to_id": 1523822569,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-03-20T17:42:56Z",
      "updated_at": "2024-03-20T17:42:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532534695",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532534695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532535179",
      "pull_request_review_id": 1949627158,
      "id": 1532535179,
      "node_id": "PRRC_kwDOABII585bWKGL",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx, nodeid)};\n+    bool tried_package_cpfp{false};\n+\n+    const auto& txid{ptx->GetHash()};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1526239102,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-03-20T17:43:17Z",
      "updated_at": "2024-03-20T17:43:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532535179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532535179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532538138",
      "pull_request_review_id": 1949631171,
      "id": 1532538138,
      "node_id": "PRRC_kwDOABII585bWK0a",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+\n+        self.log.info(\"Create transactions and then mature the coinbases\")\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"outbound-full-relay\"))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in self.transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])\n+                peer.send_and_ping(msg_tx(tx))\n+            # This disconnect removes any sent orphans from the orphanage (EraseForPeer) and times\n+            # out the in-flight requests.  It is currently required for the test to pass right now,\n+            # because the node will not (re)try requesting orphan parents from multiple peers if the\n+            # first one fails.\n+            # TODO: remove this and test that the node retries orphan resolution with other peers",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 206,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": 1526776259,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess not a lot. But it is worth checking that it having seen (and rejected) the child before shouldn't impact its acceptance of the package later?",
      "created_at": "2024-03-20T17:44:25Z",
      "updated_at": "2024-03-20T17:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532538138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532538138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533624515",
      "pull_request_review_id": 1951714713,
      "id": 1533624515,
      "node_id": "PRRC_kwDOABII585baUDD",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 182,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": 1526791671,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-03-21T10:38:50Z",
      "updated_at": "2024-03-21T10:38:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1533624515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533624515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533631857",
      "pull_request_review_id": 1951731467,
      "id": 1533631857,
      "node_id": "PRRC_kwDOABII585baV1x",
      "diff_hunk": "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3eddfb2147754c734c325e4ee0158872448a0a61",
      "in_reply_to_id": 1514657717,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Resolving as out of scope for this PR. Also fwiw, btcd doing announcements by txid seems to be a reason to keep it for now...",
      "created_at": "2024-03-21T10:42:16Z",
      "updated_at": "2024-03-21T10:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1533631857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533631857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539621687",
      "pull_request_review_id": 1960994723,
      "id": 1539621687,
      "node_id": "PRRC_kwDOABII585bxMM3",
      "diff_hunk": "@@ -0,0 +1,232 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 80,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "5405171740aa77e1eb1110fa8be97318edba380a",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I'd rather this return the packages then spookily populate them",
      "created_at": "2024-03-26T16:20:08Z",
      "updated_at": "2024-03-26T20:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539621687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539621687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539811636",
      "pull_request_review_id": 1960994723,
      "id": 1539811636,
      "node_id": "PRRC_kwDOABII585bx6k0",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 106,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": 1526790462,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can't seem to recreate anymore :shrug: ",
      "created_at": "2024-03-26T17:44:48Z",
      "updated_at": "2024-03-26T20:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539811636",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539811636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539990420",
      "pull_request_review_id": 1960994723,
      "id": 1539990420,
      "node_id": "PRRC_kwDOABII585bymOU",
      "diff_hunk": "@@ -241,3 +241,19 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent, NodeId peer) const\n+{\n+    LOCK(m_mutex);\n+    std::vector<CTransactionRef> children_found;\n+\n+    for (unsigned int i = 0; i < parent->vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(parent->GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {",
      "path": "src/txorphanage.cpp",
      "position": 17,
      "original_position": 13,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "to be clear we may have multiple orphans per outpoint lookup, yes?",
      "created_at": "2024-03-26T19:39:35Z",
      "updated_at": "2024-03-26T20:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539990420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539990420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539991084",
      "pull_request_review_id": 1960994723,
      "id": 1539991084,
      "node_id": "PRRC_kwDOABII585bymYs",
      "diff_hunk": "@@ -51,6 +51,10 @@ class TxOrphanage {\n     /** Does this peer have any work to do? */\n     bool HaveTxToReconsider(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);;\n \n+    /** Get all children of this parent. */\n+    std::vector<CTransactionRef> GetChildren(const CTransactionRef& parent, NodeId peer) const",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could stand a unit test and some basic fuzz coverage",
      "created_at": "2024-03-26T19:39:59Z",
      "updated_at": "2024-03-26T20:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539991084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539991084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539998787",
      "pull_request_review_id": 1960994723,
      "id": 1539998787,
      "node_id": "PRRC_kwDOABII585byoRD",
      "diff_hunk": "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:",
      "path": "src/net_processing.cpp",
      "position": 173,
      "original_position": 50,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1526656636,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "slight readability preference, feel free to ignore",
      "created_at": "2024-03-26T19:44:12Z",
      "updated_at": "2024-03-26T20:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539998787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539998787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3253,
      "original_line": 3253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539999774",
      "pull_request_review_id": 1960994723,
      "id": 1539999774,
      "node_id": "PRRC_kwDOABII585byoge",
      "diff_hunk": "@@ -4450,6 +4552,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (state.IsInvalid()) {\n             ProcessInvalidTx(pfrom.GetId(), ptx, state, /*maybe_add_extra_compact_tx=*/true);\n         }\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {",
      "path": "src/net_processing.cpp",
      "position": 328,
      "original_position": 127,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "in_reply_to_id": 1525341442,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "with the added `Assume()` in `MaybeProcess1P1CPackage` I think it's ok now from this reader's standpoint, thanks",
      "created_at": "2024-03-26T19:44:53Z",
      "updated_at": "2024-03-26T20:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539999774",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539999774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4625,
      "original_line": 4625,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540027738",
      "pull_request_review_id": 1960994723,
      "id": 1540027738,
      "node_id": "PRRC_kwDOABII585byvVa",
      "diff_hunk": "@@ -4420,7 +4532,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     // protocol for getting all unconfirmed parents.\n                     const auto gtxid{GenTxid::Txid(parent_txid)};\n                     AddKnownTx(*peer, parent_txid);\n-                    if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) AddTxAnnouncement(pfrom, gtxid, current_time);\n+                    // Skip m_recent_rejects_reconsiderable because the missing parent may have been\n+                    // previously rejected for being too low feerate, and this orphan may be able to\n+                    // CPFP it if we consider them as a package.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "774f6d0ff515802d16cc0cfeb9319c11e860d84d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this change also only matters for the non-segwit case since we're checking via txid, correct?",
      "created_at": "2024-03-26T20:05:51Z",
      "updated_at": "2024-03-26T20:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540027738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540027738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540031628",
      "pull_request_review_id": 1960994723,
      "id": 1540031628,
      "node_id": "PRRC_kwDOABII585bywSM",
      "diff_hunk": "@@ -4378,6 +4482,14 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // peer simply for relaying a tx that our m_recent_rejects has caught,\n             // regardless of false positives.\n             return;\n+        } else if (m_recent_rejects_reconsiderable.contains(wtxid)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "774f6d0ff515802d16cc0cfeb9319c11e860d84d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tiny preference for putting this case first",
      "created_at": "2024-03-26T20:09:02Z",
      "updated_at": "2024-03-26T20:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540031628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540031628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540306836",
      "pull_request_review_id": 1962043659,
      "id": 1540306836,
      "node_id": "PRRC_kwDOABII585bzzeU",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 106,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": 1526790462,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems I had beginner's luck, got the timeout on this line after a few runs on my machine. Here is the compressed dir of the failed test run: https://github.com/theStack/bitcoin/raw/pr28970_failed_testrun/pr28970_waitforgetdata_timeout.tar.gz\r\n\r\nApparently the node has seen the wtx in the inv already before (see node0/regtest/debug.log:11237) :eyes: . I guess this is could be caused by a different MiniWallet instance spending the same UTXO in an earlier sub-test, resulting in the same transaction?",
      "created_at": "2024-03-27T00:55:10Z",
      "updated_at": "2024-03-27T00:55:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540306836",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540306836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540843445",
      "pull_request_review_id": 1962910982,
      "id": 1540843445,
      "node_id": "PRRC_kwDOABII585b12e1",
      "diff_hunk": "@@ -4420,7 +4532,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     // protocol for getting all unconfirmed parents.\n                     const auto gtxid{GenTxid::Txid(parent_txid)};\n                     AddKnownTx(*peer, parent_txid);\n-                    if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) AddTxAnnouncement(pfrom, gtxid, current_time);\n+                    // Skip m_recent_rejects_reconsiderable because the missing parent may have been\n+                    // previously rejected for being too low feerate, and this orphan may be able to\n+                    // CPFP it if we consider them as a package.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "774f6d0ff515802d16cc0cfeb9319c11e860d84d",
      "in_reply_to_id": 1540027738,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Correct. If it's a witness tx, we would have cached the error by wtxid but the request is by txid, so this would miss it.",
      "created_at": "2024-03-27T10:32:25Z",
      "updated_at": "2024-03-27T10:32:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540843445",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540843445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540857362",
      "pull_request_review_id": 1962931592,
      "id": 1540857362,
      "node_id": "PRRC_kwDOABII585b154S",
      "diff_hunk": "@@ -241,3 +241,19 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent, NodeId peer) const\n+{\n+    LOCK(m_mutex);\n+    std::vector<CTransactionRef> children_found;\n+\n+    for (unsigned int i = 0; i < parent->vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(parent->GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {",
      "path": "src/txorphanage.cpp",
      "position": 17,
      "original_position": 13,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "in_reply_to_id": 1539990420,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, we can have conflicting orphans. Should not break here if we find one.",
      "created_at": "2024-03-27T10:42:05Z",
      "updated_at": "2024-03-28T17:38:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540857362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540857362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540869399",
      "pull_request_review_id": 1962931592,
      "id": 1540869399,
      "node_id": "PRRC_kwDOABII585b180X",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 106,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "in_reply_to_id": 1526790462,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice @theStack :D I was having trouble recreating it, duplicate tx sounds most plausible to me.\r\n\r\nI split the 4 node test and 1 node test into separate files (grabbed commit from #29735 to reuse setup) which hopefully gets rid of this.",
      "created_at": "2024-03-27T10:47:11Z",
      "updated_at": "2024-03-28T17:38:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540869399",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540869399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1541080914",
      "pull_request_review_id": 1963281981,
      "id": 1541080914,
      "node_id": "PRRC_kwDOABII585b2wdS",
      "diff_hunk": "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "in_reply_to_id": 1523821142,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can confirm, changes seem logical, and there's test coverage for each `AlreadyHaveTx` instance",
      "created_at": "2024-03-27T13:11:13Z",
      "updated_at": "2024-03-27T13:11:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1541080914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1541080914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542964936",
      "pull_request_review_id": 1966207399,
      "id": 1542964936,
      "node_id": "PRRC_kwDOABII585b98bI",
      "diff_hunk": "@@ -241,3 +241,19 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent, NodeId peer) const",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f4d8fe713a036c4d2c1e7c2329077c34f75c8608: It seems `NodeId peer` is not used in `GetChildren`.",
      "created_at": "2024-03-28T13:19:39Z",
      "updated_at": "2024-03-28T13:19:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1542964936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542964936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542971452",
      "pull_request_review_id": 1966215922,
      "id": 1542971452,
      "node_id": "PRRC_kwDOABII585b9-A8",
      "diff_hunk": "@@ -0,0 +1,232 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 44,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "5405171740aa77e1eb1110fa8be97318edba380a",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 5405171740aa77e1eb1110fa8be97318edba380a: nit: could set `noban_tx_relay`",
      "created_at": "2024-03-28T13:23:17Z",
      "updated_at": "2024-03-28T13:23:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1542971452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542971452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543239954",
      "pull_request_review_id": 1962931592,
      "id": 1543239954,
      "node_id": "PRRC_kwDOABII585b-_kS",
      "diff_hunk": "@@ -4378,6 +4482,14 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // peer simply for relaying a tx that our m_recent_rejects has caught,\n             // regardless of false positives.\n             return;\n+        } else if (m_recent_rejects_reconsiderable.contains(wtxid)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "774f6d0ff515802d16cc0cfeb9319c11e860d84d",
      "in_reply_to_id": 1540031628,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok. I've actually ended up nesting it inside the `AlreadyHave` to preserve the ForceRelay behavior... wanted to avoid a behavior change in the case\r\n1. tx is low feerate (goes into `m_recent_rejects_reconsiderable`)\r\n2. tx is later accepted (e.g. due to 1p1c)\r\n3. forcrelay peer sends it to us again -> we should `RelayTransaction`",
      "created_at": "2024-03-28T16:10:10Z",
      "updated_at": "2024-03-28T17:38:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543239954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543239954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543279142",
      "pull_request_review_id": 1962931592,
      "id": 1543279142,
      "node_id": "PRRC_kwDOABII585b_JIm",
      "diff_hunk": "@@ -241,3 +241,19 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent, NodeId peer) const",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "in_reply_to_id": 1542964936,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed",
      "created_at": "2024-03-28T16:33:51Z",
      "updated_at": "2024-03-28T17:38:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543279142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543279142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543350220",
      "pull_request_review_id": 1962931592,
      "id": 1543350220,
      "node_id": "PRRC_kwDOABII585b_afM",
      "diff_hunk": "@@ -0,0 +1,232 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 44,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "5405171740aa77e1eb1110fa8be97318edba380a",
      "in_reply_to_id": 1542971452,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-03-28T17:18:51Z",
      "updated_at": "2024-03-28T17:38:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543350220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543350220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543357734",
      "pull_request_review_id": 1962931592,
      "id": 1543357734,
      "node_id": "PRRC_kwDOABII585b_cUm",
      "diff_hunk": "@@ -0,0 +1,232 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):",
      "path": "test/functional/p2p_1p1c_package_relay.py",
      "position": null,
      "original_position": 80,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "5405171740aa77e1eb1110fa8be97318edba380a",
      "in_reply_to_id": 1539621687,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not sure if I achieved spooky, but I'm having it return the lists now :ghost: ",
      "created_at": "2024-03-28T17:23:11Z",
      "updated_at": "2024-03-28T17:38:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543357734",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543357734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543376895",
      "pull_request_review_id": 1962931592,
      "id": 1543376895,
      "node_id": "PRRC_kwDOABII585b_g__",
      "diff_hunk": "@@ -51,6 +51,10 @@ class TxOrphanage {\n     /** Does this peer have any work to do? */\n     bool HaveTxToReconsider(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);;\n \n+    /** Get all children of this parent. */\n+    std::vector<CTransactionRef> GetChildren(const CTransactionRef& parent, NodeId peer) const",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "in_reply_to_id": 1539991084,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added unit tests and fuzz coverage",
      "created_at": "2024-03-28T17:38:11Z",
      "updated_at": "2024-03-28T17:38:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543376895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543376895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545475564",
      "pull_request_review_id": 1970039534,
      "id": 1545475564,
      "node_id": "PRRC_kwDOABII585cHhXs",
      "diff_hunk": "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": null,
      "original_position": 44,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "5d7fa1f68402c0af08f58ac30522ce9511d218c3",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `raise_network_minfee` is unused in this file, can be removed",
      "created_at": "2024-03-30T18:37:18Z",
      "updated_at": "2024-03-30T18:52:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545475564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545475564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545476664",
      "pull_request_review_id": 1970039534,
      "id": 1545476664,
      "node_id": "PRRC_kwDOABII585cHho4",
      "diff_hunk": "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerates are above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": null,
      "original_position": 61,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "5d7fa1f68402c0af08f58ac30522ce9511d218c3",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could create the peers as inbound connections instead, here and in other instances:\r\n\r\n```suggestion\r\n        peer_sender = node.add_p2p_connection(P2PInterface())\r\n```\r\n\r\n(it doesn't really matter though, the code would just be a bit shorter)",
      "created_at": "2024-03-30T18:42:24Z",
      "updated_at": "2024-03-30T18:52:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545476664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545476664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477172",
      "pull_request_review_id": 1970039534,
      "id": 1545477172,
      "node_id": "PRRC_kwDOABII585cHhw0",
      "diff_hunk": "@@ -138,4 +162,49 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent3 = MakeTransactionSpending(empty_outpoints, det_rand);",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3842f9a8842397ec15b5e3c5ae25935e9a8ee67c",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: parent3 is unused, can remove this line and the two comparisons below",
      "created_at": "2024-03-30T18:45:09Z",
      "updated_at": "2024-03-30T18:52:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545477172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477551",
      "pull_request_review_id": 1970039534,
      "id": 1545477551,
      "node_id": "PRRC_kwDOABII585cHh2v",
      "diff_hunk": "@@ -2228,7 +2241,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     if (m_orphanage.HaveTx(gtxid)) return true;\n \n-    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(gtxid.GetHash())) return true;\n+    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(hash)) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "97e16c20ca344b49652a2bce558c5404e7ab22dd",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could use `hash` directly in the previous commit where this line is introduced (edea2269416ad2bcd017e1d6ee9ae30bd225c1e9), for smaller diff",
      "created_at": "2024-03-30T18:48:17Z",
      "updated_at": "2024-03-30T18:52:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545477551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": 2231,
      "start_side": "LEFT",
      "line": null,
      "original_line": 2258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547822651",
      "pull_request_review_id": 1973715466,
      "id": 1547822651,
      "node_id": "PRRC_kwDOABII585cQeY7",
      "diff_hunk": "@@ -138,4 +162,49 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent3 = MakeTransactionSpending(empty_outpoints, det_rand);",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "3842f9a8842397ec15b5e3c5ae25935e9a8ee67c",
      "in_reply_to_id": 1545477172,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2024-04-02T12:52:31Z",
      "updated_at": "2024-04-02T13:45:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1547822651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547822651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547823286",
      "pull_request_review_id": 1973715466,
      "id": 1547823286,
      "node_id": "PRRC_kwDOABII585cQei2",
      "diff_hunk": "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": null,
      "original_position": 44,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "5d7fa1f68402c0af08f58ac30522ce9511d218c3",
      "in_reply_to_id": 1545475564,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed, thanks",
      "created_at": "2024-04-02T12:53:00Z",
      "updated_at": "2024-04-02T13:45:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1547823286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547823286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547829705",
      "pull_request_review_id": 1973715466,
      "id": 1547829705,
      "node_id": "PRRC_kwDOABII585cQgHJ",
      "diff_hunk": "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerates are above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": null,
      "original_position": 61,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "5d7fa1f68402c0af08f58ac30522ce9511d218c3",
      "in_reply_to_id": 1545476664,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed thanks. Before I added noban, I was using it to make tests run faster.",
      "created_at": "2024-04-02T12:57:17Z",
      "updated_at": "2024-04-02T13:45:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1547829705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547829705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549143563",
      "pull_request_review_id": 1975876919,
      "id": 1549143563,
      "node_id": "PRRC_kwDOABII585cVg4L",
      "diff_hunk": "@@ -2228,7 +2241,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     if (m_orphanage.HaveTx(gtxid)) return true;\n \n-    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(gtxid.GetHash())) return true;\n+    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(hash)) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "97e16c20ca344b49652a2bce558c5404e7ab22dd",
      "in_reply_to_id": 1545477551,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-04-03T08:01:00Z",
      "updated_at": "2024-04-03T08:01:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549143563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549143563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": 2231,
      "start_side": "LEFT",
      "line": null,
      "original_line": 2258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549376386",
      "pull_request_review_id": 1976216428,
      "id": 1549376386,
      "node_id": "PRRC_kwDOABII585cWZuC",
      "diff_hunk": "@@ -241,3 +241,28 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct a set of iterators to ensure we do not return duplicates of the same tx.\n+    std::set<OrphanMap::iterator, IteratorComparator> set_child_iterators;\n+\n+    // For each input, get all entries spending this prevout.",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "d3d7dcf00439655a921f3be4624d01814de2e346",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n    // For each output, get all entries spending this prevout.\r\n```",
      "created_at": "2024-04-03T09:47:55Z",
      "updated_at": "2024-04-04T09:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549376386",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549376386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549395161",
      "pull_request_review_id": 1976216428,
      "id": 1549395161,
      "node_id": "PRRC_kwDOABII585cWeTZ",
      "diff_hunk": "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "probably better to have it while loop making tx until this is true, rather than fail randomly",
      "created_at": "2024-04-03T09:59:21Z",
      "updated_at": "2024-04-04T09:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549395161",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549395161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549404732",
      "pull_request_review_id": 1976216428,
      "id": 1549404732,
      "node_id": "PRRC_kwDOABII585cWgo8",
      "diff_hunk": "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& child : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.count(child->GetWitnessHash()) > 0);\n+    }\n+    auto parent2_children{orphanage.GetChildren(parent2)};\n+    BOOST_CHECK_EQUAL(parent2_children.size(), expected_parent2_children.size());\n+    for (const auto& child : parent2_children) {\n+        BOOST_CHECK(expected_parent2_children.count(child->GetWitnessHash()) > 0);\n+    }",
      "path": "src/test/orphanage_tests.cpp",
      "position": 108,
      "original_position": 84,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "quick test case that returns empty would be good too",
      "created_at": "2024-04-03T10:04:55Z",
      "updated_at": "2024-04-04T09:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549404732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549404732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 228,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549414682",
      "pull_request_review_id": 1976216428,
      "id": 1549414682,
      "node_id": "PRRC_kwDOABII585cWjEa",
      "diff_hunk": "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good time to add documentation to this function",
      "created_at": "2024-04-03T10:12:47Z",
      "updated_at": "2024-04-04T09:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549414682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549414682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550260907",
      "pull_request_review_id": 1977655865,
      "id": 1550260907,
      "node_id": "PRRC_kwDOABII585cZxqr",
      "diff_hunk": "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "path": "src/net_processing.cpp",
      "position": 307,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "53f1e65f30a0a6b931e97743113e0227748680df",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In  guard against MempoolAcceptResult::m_replaced_transactions  (53f1e65f30a0a6b931e97743113e0227748680df):\r\nI am not well-acquainted with `net_processing.cpp`, but I figured I could still mention that it is unclear to me from the commit message and the code change how this change fits in the context. Were we previously assuming that we would always have a non-empty list for `m_replaced_transactions` in the context of this call?",
      "created_at": "2024-04-03T18:31:10Z",
      "updated_at": "2024-04-03T19:51:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550260907",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550260907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": 4357,
      "original_start_line": 4357,
      "start_side": "LEFT",
      "line": 4555,
      "original_line": 4555,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550334355",
      "pull_request_review_id": 1977655865,
      "id": 1550334355,
      "node_id": "PRRC_kwDOABII585caDmT",
      "diff_hunk": "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& child : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.count(child->GetWitnessHash()) > 0);",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Could use [`std::set::contains`](https://en.cppreference.com/w/cpp/container/set/contains) here and below\r\n```suggestion\r\n        BOOST_CHECK(expected_parent1_children.contains(child->GetWitnessHash()));\r\n```",
      "created_at": "2024-04-03T19:28:27Z",
      "updated_at": "2024-04-03T19:51:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550334355",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550334355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550398421",
      "pull_request_review_id": 1977876327,
      "id": 1550398421,
      "node_id": "PRRC_kwDOABII585caTPV",
      "diff_hunk": "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "path": "src/net_processing.cpp",
      "position": 307,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "53f1e65f30a0a6b931e97743113e0227748680df",
      "in_reply_to_id": 1550260907,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@murchandamus: I was asking myself the same a few days ago and started with some review notes for each commit. The one for 53f1e65f30a0a6b931e97743113e0227748680df might fit to your question (note that it's not about empty vs. non-empty, but more about set-to-nothing vs. set-to-something, since it's an std::optional):\r\n```\r\nThe only way to create an ATMP result of type `MempoolAcceptResult::ResultType::VALID` is using the\r\nstatic method `MempoolAccepptResult::Success`, which in turn calls the private successful case constructor of\r\n`MempoolAcceptResult`. This one always sets `m_replaced_transactions`, therefore\r\n`result.m_replaced_transactions.has_value()` in the modified code path should always be true.\r\n```\r\n(maybe it makes sense to include it in the commit message, if that is correct)\r\nThe same three lines of code are introduced in `PeerManagerImpl::ProcessPackageResult` (commit d6df19000118768678c7afd4b9330b4604bb37ce), I assume that this is the reason to also do it on the other place in the code for consistency.",
      "created_at": "2024-04-03T20:16:28Z",
      "updated_at": "2024-04-03T20:16:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550398421",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550398421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": 4357,
      "original_start_line": 4357,
      "start_side": "LEFT",
      "line": 4555,
      "original_line": 4555,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550445308",
      "pull_request_review_id": 1977957595,
      "id": 1550445308,
      "node_id": "PRRC_kwDOABII585caer8",
      "diff_hunk": "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "path": "src/net_processing.cpp",
      "position": 307,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "53f1e65f30a0a6b931e97743113e0227748680df",
      "in_reply_to_id": 1550260907,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> it is unclear to me from the commit message and the code change how this change fits in the context.\r\n\r\n(Note that this commit is a followup from #29619, I've now linked to the comments in the PR description)\r\n\r\nYes, it should always have a value when the result is VALID. This is just adding a belt-and-suspenders juuust in case.",
      "created_at": "2024-04-03T20:42:45Z",
      "updated_at": "2024-04-03T20:43:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550445308",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550445308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": 4357,
      "original_start_line": 4357,
      "start_side": "LEFT",
      "line": 4555,
      "original_line": 4555,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550494056",
      "pull_request_review_id": 1978040928,
      "id": 1550494056,
      "node_id": "PRRC_kwDOABII585caqlo",
      "diff_hunk": "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "path": "src/net_processing.cpp",
      "position": 307,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "53f1e65f30a0a6b931e97743113e0227748680df",
      "in_reply_to_id": 1550260907,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Great, I’ll attempt another more thorough review at a later time.",
      "created_at": "2024-04-03T21:01:00Z",
      "updated_at": "2024-04-03T21:01:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550494056",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550494056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": 4357,
      "original_start_line": 4357,
      "start_side": "LEFT",
      "line": 4555,
      "original_line": 4555,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551287725",
      "pull_request_review_id": 1976216428,
      "id": 1551287725,
      "node_id": "PRRC_kwDOABII585cdsWt",
      "diff_hunk": "@@ -6061,7 +6186,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 entry.second.GetHash().ToString(), entry.first);\n         }\n         for (const GenTxid& gtxid : requestable) {\n-            if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) {\n+            // Skip m_recent_rejects_reconsiderable because we may be requesting a missing parent",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "d6df19000118768678c7afd4b9330b4604bb37ce",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have to admit I'm struggling on these \"skip\" comments and cases. Every time I read this I have trouble re-deriving the logic. ",
      "created_at": "2024-04-04T09:07:17Z",
      "updated_at": "2024-04-04T09:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1551287725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551287725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551410174",
      "pull_request_review_id": 1979439672,
      "id": 1551410174,
      "node_id": "PRRC_kwDOABII585ceKP-",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": 289,
      "original_position": 177,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "add a case where:\r\n1) CONSENSUS-invalid child is propagated to peer\r\n2) low_fee parent is given\r\n3) package evaluation is attempted\r\n4) peer is disconnected\r\n\r\nto ensure we're handling invalid tx properly",
      "created_at": "2024-04-04T10:25:44Z",
      "updated_at": "2024-04-04T10:25:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1551410174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551410174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 289,
      "original_line": 289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553911167",
      "pull_request_review_id": 1983578881,
      "id": 1553911167,
      "node_id": "PRRC_kwDOABII585cns1_",
      "diff_hunk": "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "in_reply_to_id": 1549414682,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added. Also WOW, I realized we somehow lost the line where `m_recent_rejects_reconsiderable` is reset. Fixed that.",
      "created_at": "2024-04-05T15:43:51Z",
      "updated_at": "2024-04-05T16:21:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553911167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553911167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914428",
      "pull_request_review_id": 1983578881,
      "id": 1553914428,
      "node_id": "PRRC_kwDOABII585cnto8",
      "diff_hunk": "@@ -6061,7 +6186,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 entry.second.GetHash().ToString(), entry.first);\n         }\n         for (const GenTxid& gtxid : requestable) {\n-            if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) {\n+            // Skip m_recent_rejects_reconsiderable because we may be requesting a missing parent",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "d6df19000118768678c7afd4b9330b4604bb37ce",
      "in_reply_to_id": 1551287725,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok hm. I've simplified the wording a bit. Maybe that helps?",
      "created_at": "2024-04-05T15:46:38Z",
      "updated_at": "2024-04-05T16:21:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914428",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914606",
      "pull_request_review_id": 1983578881,
      "id": 1553914606,
      "node_id": "PRRC_kwDOABII585cntru",
      "diff_hunk": "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "in_reply_to_id": 1549395161,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-04-05T15:46:47Z",
      "updated_at": "2024-04-05T16:21:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914701",
      "pull_request_review_id": 1983578881,
      "id": 1553914701,
      "node_id": "PRRC_kwDOABII585cnttN",
      "diff_hunk": "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& child : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.count(child->GetWitnessHash()) > 0);",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "in_reply_to_id": 1550334355,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done, yay for 20",
      "created_at": "2024-04-05T15:46:53Z",
      "updated_at": "2024-04-05T16:21:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914701",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914777",
      "pull_request_review_id": 1983578881,
      "id": 1553914777,
      "node_id": "PRRC_kwDOABII585cntuZ",
      "diff_hunk": "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& child : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.count(child->GetWitnessHash()) > 0);\n+    }\n+    auto parent2_children{orphanage.GetChildren(parent2)};\n+    BOOST_CHECK_EQUAL(parent2_children.size(), expected_parent2_children.size());\n+    for (const auto& child : parent2_children) {\n+        BOOST_CHECK(expected_parent2_children.count(child->GetWitnessHash()) > 0);\n+    }",
      "path": "src/test/orphanage_tests.cpp",
      "position": 108,
      "original_position": 84,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "in_reply_to_id": 1549404732,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2024-04-05T15:46:57Z",
      "updated_at": "2024-04-05T16:21:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914777",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 228,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914876",
      "pull_request_review_id": 1983578881,
      "id": 1553914876,
      "node_id": "PRRC_kwDOABII585cntv8",
      "diff_hunk": "@@ -241,3 +241,28 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct a set of iterators to ensure we do not return duplicates of the same tx.\n+    std::set<OrphanMap::iterator, IteratorComparator> set_child_iterators;\n+\n+    // For each input, get all entries spending this prevout.",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "d3d7dcf00439655a921f3be4624d01814de2e346",
      "in_reply_to_id": 1549376386,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-04-05T15:47:02Z",
      "updated_at": "2024-04-05T16:21:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553965998",
      "pull_request_review_id": 1983578881,
      "id": 1553965998,
      "node_id": "PRRC_kwDOABII585cn6Ou",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": 289,
      "original_position": 177,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "in_reply_to_id": 1551410174,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wait oof, we don't require the orphanage child to be provided by the same peer who sent the low-feerate tx. I think this would mean you can get other people disconnected by sending a bogus child of the package they're sending.",
      "created_at": "2024-04-05T16:21:34Z",
      "updated_at": "2024-04-05T16:21:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553965998",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553965998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 289,
      "original_line": 289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982455",
      "pull_request_review_id": 1983689499,
      "id": 1553982455,
      "node_id": "PRRC_kwDOABII585cn-P3",
      "diff_hunk": "@@ -6061,7 +6186,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 entry.second.GetHash().ToString(), entry.first);\n         }\n         for (const GenTxid& gtxid : requestable) {\n-            if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) {\n+            // Skip m_recent_rejects_reconsiderable because we may be requesting a missing parent",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "d6df19000118768678c7afd4b9330b4604bb37ce",
      "in_reply_to_id": 1551287725,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "think you forgot to push?",
      "created_at": "2024-04-05T16:37:36Z",
      "updated_at": "2024-04-05T16:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553982455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982697",
      "pull_request_review_id": 1983689912,
      "id": 1553982697,
      "node_id": "PRRC_kwDOABII585cn-Tp",
      "diff_hunk": "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "in_reply_to_id": 1549414682,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we should have tests(in master?) for this I hope. \r\n\r\nsomething below minfee is rejected, block comes in, node should respond to an INV for the same thing again",
      "created_at": "2024-04-05T16:37:52Z",
      "updated_at": "2024-04-05T16:37:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553982697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553992489",
      "pull_request_review_id": 1983705498,
      "id": 1553992489,
      "node_id": "PRRC_kwDOABII585coAsp",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": 289,
      "original_position": 177,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "in_reply_to_id": 1551410174,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "looks like peer id needs to be used again: https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1542964936",
      "created_at": "2024-04-05T16:45:50Z",
      "updated_at": "2024-04-05T16:45:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553992489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553992489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 289,
      "original_line": 289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553996459",
      "pull_request_review_id": 1983711619,
      "id": 1553996459,
      "node_id": "PRRC_kwDOABII585coBqr",
      "diff_hunk": "@@ -6061,7 +6186,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 entry.second.GetHash().ToString(), entry.first);\n         }\n         for (const GenTxid& gtxid : requestable) {\n-            if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) {\n+            // Skip m_recent_rejects_reconsiderable because we may be requesting a missing parent",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "d6df19000118768678c7afd4b9330b4604bb37ce",
      "in_reply_to_id": 1551287725,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> think you forgot to push?\r\n\r\nGithub published everything instead of adding my comment to the group -_- yes, pushing in a second.",
      "created_at": "2024-04-05T16:49:47Z",
      "updated_at": "2024-04-05T16:49:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553996459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553996459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554000244",
      "pull_request_review_id": 1983717342,
      "id": 1554000244,
      "node_id": "PRRC_kwDOABII585coCl0",
      "diff_hunk": "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "in_reply_to_id": 1549414682,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> we should have tests(in master?) for this I hope.\r\n\r\napparently not?",
      "created_at": "2024-04-05T16:53:39Z",
      "updated_at": "2024-04-05T16:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1554000244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554000244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554004259",
      "pull_request_review_id": 1983723249,
      "id": 1554004259,
      "node_id": "PRRC_kwDOABII585coDkj",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": 289,
      "original_position": 177,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "in_reply_to_id": 1551410174,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm no, I think we should return pairs of tx and the `fromPeer`, and just attribute the error to the right peer. If we restrict it to same sender, then we can also block packages by sending the children fast and refusing to send the parent.",
      "created_at": "2024-04-05T16:57:22Z",
      "updated_at": "2024-04-05T16:57:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1554004259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554004259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 289,
      "original_line": 289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554024570",
      "pull_request_review_id": 1983753486,
      "id": 1554024570,
      "node_id": "PRRC_kwDOABII585coIh6",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": 289,
      "original_position": 177,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "in_reply_to_id": 1551410174,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Last push should fix this with the above approach. Still need to write a test case for the peers being different.",
      "created_at": "2024-04-05T17:17:05Z",
      "updated_at": "2024-04-05T17:17:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1554024570",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554024570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 289,
      "original_line": 289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1557310808",
      "pull_request_review_id": 1988568046,
      "id": 1557310808,
      "node_id": "PRRC_kwDOABII585c0q1Y",
      "diff_hunk": "@@ -596,6 +596,19 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    /** Handle the results of package validation: calls ProcessValidTx and ProcessInvalidTx for\n+     * individual transactions, and caches rejection for the package as a group.\n+     *   */",
      "path": "src/net_processing.cpp",
      "position": 17,
      "original_position": 6,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     * The senders arg should be populated in same order as individual transactions\r\n     * in the package_result argument.\r\n     */\r\n```",
      "created_at": "2024-04-09T09:28:38Z",
      "updated_at": "2024-04-10T07:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1557310808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1557310808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 603,
      "original_line": 603,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558971541",
      "pull_request_review_id": 1988568046,
      "id": 1558971541,
      "node_id": "PRRC_kwDOABII585c7ASV",
      "diff_hunk": "@@ -3153,6 +3208,103 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto i{package.size() - 1}; i >= 0; --i) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 135,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\nnet_processing.cpp:3224:40: warning: comparison of unsigned expression in ‘>= 0’ is always true [-Wtype-limits]\r\n 3224 |     for (auto i{package.size() - 1}; i >= 0; --i) {\r\n      |            \r\n```",
      "created_at": "2024-04-10T07:20:03Z",
      "updated_at": "2024-04-10T07:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1558971541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558971541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558979841",
      "pull_request_review_id": 1988568046,
      "id": 1558979841,
      "node_id": "PRRC_kwDOABII585c7CUB",
      "diff_hunk": "@@ -3153,6 +3208,103 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto i{package.size() - 1}; i >= 0; --i) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 135,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "in_reply_to_id": 1558971541,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is also causing the sanitizer run failure",
      "created_at": "2024-04-10T07:27:21Z",
      "updated_at": "2024-04-10T07:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1558979841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558979841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559187981",
      "pull_request_review_id": 1991298023,
      "id": 1559187981,
      "node_id": "PRRC_kwDOABII585c71IN",
      "diff_hunk": "@@ -147,3 +147,17 @@ bool IsChildWithParentsTree(const Package& package)\n         return true;\n     });\n }\n+\n+uint256 GetCombinedHash(const std::vector<Wtxid>& wtxids)\n+{\n+    std::vector<Wtxid> wtxids_copy(wtxids.cbegin(), wtxids.cend());\n+    std::sort(wtxids_copy.begin(), wtxids_copy.end());\n+    return (HashWriter() << wtxids_copy).GetHash();\n+}",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "c502734fa50104c18790ba0a5b63744552113110",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "newline?",
      "created_at": "2024-04-10T10:10:47Z",
      "updated_at": "2024-04-16T11:42:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1559187981",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559187981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559188232",
      "pull_request_review_id": 1991298023,
      "id": 1559188232,
      "node_id": "PRRC_kwDOABII585c71MI",
      "diff_hunk": "@@ -88,4 +88,10 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Get the hash of these wtxids, concatenated in lexicographical order. */\n+uint256 GetCombinedHash(const std::vector<Wtxid>& wtxids);\n+/** Get the hash of these transactions' wtxids, concatenated in lexicographical order. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "c502734fa50104c18790ba0a5b63744552113110",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "newline?",
      "created_at": "2024-04-10T10:11:02Z",
      "updated_at": "2024-04-16T11:42:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1559188232",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559188232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559354990",
      "pull_request_review_id": 1991563785,
      "id": 1559354990,
      "node_id": "PRRC_kwDOABII585c8d5u",
      "diff_hunk": "@@ -3153,6 +3208,103 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto i{package.size() - 1}; i >= 0; --i) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 135,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "in_reply_to_id": 1558971541,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Woops yes will fix",
      "created_at": "2024-04-10T12:34:05Z",
      "updated_at": "2024-04-10T12:34:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1559354990",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559354990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1560983729",
      "pull_request_review_id": 1994122936,
      "id": 1560983729,
      "node_id": "PRRC_kwDOABII585dCrix",
      "diff_hunk": "@@ -596,6 +596,19 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    /** Handle the results of package validation: calls ProcessValidTx and ProcessInvalidTx for\n+     * individual transactions, and caches rejection for the package as a group.\n+     *   */",
      "path": "src/net_processing.cpp",
      "position": 17,
      "original_position": 6,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "in_reply_to_id": 1557310808,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added something similar",
      "created_at": "2024-04-11T12:57:56Z",
      "updated_at": "2024-04-11T12:57:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1560983729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1560983729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 603,
      "original_line": 603,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1565949969",
      "pull_request_review_id": 2001371851,
      "id": 1565949969,
      "node_id": "PRRC_kwDOABII585dVoAR",
      "diff_hunk": "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "path": "src/net_processing.cpp",
      "position": 307,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "53f1e65f30a0a6b931e97743113e0227748680df",
      "in_reply_to_id": 1550260907,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I asked myself the same question, found this discussion too late. I also think it would be good to mention this in the commit message (so it becomes clear that it has nothing to do with whether `m_replaced_transactions` has entries or is empty).",
      "created_at": "2024-04-15T15:04:37Z",
      "updated_at": "2024-04-15T21:02:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1565949969",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1565949969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": 4357,
      "original_start_line": 4357,
      "start_side": "LEFT",
      "line": 4555,
      "original_line": 4555,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566025027",
      "pull_request_review_id": 2001371851,
      "id": 1566025027,
      "node_id": "PRRC_kwDOABII585dV6VD",
      "diff_hunk": "@@ -88,4 +88,10 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Get the hash of these wtxids, concatenated in lexicographical order. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "75855a4d337d8eb1c432acd54b7b507a61232b48",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that they are sorted by internal order, not reversed-byte order (because they are sorted by `Wtxid` / `uint256`, not by `uint256.GetHex()`). Is that on purpose? In any case, maybe it would be useful to specify in the doc which order is used to avoid possbile confusion.\r\n\r\nAlso, the tests added in this commit only test for relative order between multiple transactions but not if they are actually sorted in lexicographical order, so that could also be done.",
      "created_at": "2024-04-15T15:59:17Z",
      "updated_at": "2024-04-15T21:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566025027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566025027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566233731",
      "pull_request_review_id": 2001371851,
      "id": 1566233731,
      "node_id": "PRRC_kwDOABII585dWtSD",
      "diff_hunk": "@@ -3097,7 +3130,14 @@ void PeerManagerImpl::ProcessInvalidTx(NodeId nodeid, const CTransactionRef& ptx\n         // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n         // for concerns around weakening security of unupgraded nodes\n         // if we start doing this too early.\n-        m_recent_rejects.insert(ptx->GetWitnessHash().ToUint256());\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {\n+            // If the result is TX_RECONSIDERABLE, add it to m_recent_rejects_reconsiderable\n+            // because we should not download or submit this transaction by itself again, but may\n+            // submit it as part of a package later.\n+            m_recent_rejects_reconsiderable.insert(ptx->GetWitnessHash().ToUint256());",
      "path": "src/net_processing.cpp",
      "position": 113,
      "original_position": 82,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "35351159736d71222eb358c21003881947215f3a",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should update `ProcessInvalidTx` doc above too (it lists all member variables that the function updates). ",
      "created_at": "2024-04-15T17:56:58Z",
      "updated_at": "2024-04-15T21:02:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566233731",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566233731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3152,
      "original_line": 3152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566300445",
      "pull_request_review_id": 2001371851,
      "id": 1566300445,
      "node_id": "PRRC_kwDOABII585dW9kd",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "have you considered returning early here if `cpfp_candidates` is empty? It should work regardless, but seems conceptually simpler than checking all the steps below can handle that case (and may be slightly faster too).",
      "created_at": "2024-04-15T18:59:24Z",
      "updated_at": "2024-04-15T21:02:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566300445",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566300445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566329125",
      "pull_request_review_id": 2001371851,
      "id": 1566329125,
      "node_id": "PRRC_kwDOABII585dXEkl",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could we assume more strictly here that the package size is 2 (for now)?",
      "created_at": "2024-04-15T19:27:21Z",
      "updated_at": "2024-04-15T21:02:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566329125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566329125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566378431",
      "pull_request_review_id": 2001371851,
      "id": 1566378431,
      "node_id": "PRRC_kwDOABII585dXQm_",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+    for (const auto index : tx_indices) {\n+        // If we already tried a package and failed for any reason, the combined hash was\n+        // cached in m_recent_rejects_reconsiderable.\n+        Package maybe_cpfp_package{ptx, cpfp_candidates.at(index).first};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {",
      "path": "src/net_processing.cpp",
      "position": 210,
      "original_position": 105,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why put the package hash into `m_recent_rejects_reconsiderable` instead of `m_recent_rejects`?\r\nWe never reconsider a failed package after all as far as I understand it.",
      "created_at": "2024-04-15T20:15:35Z",
      "updated_at": "2024-04-15T21:02:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566378431",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566378431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3290,
      "original_line": 3290,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566405746",
      "pull_request_review_id": 2001371851,
      "id": 1566405746,
      "node_id": "PRRC_kwDOABII585dXXRy",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why do we only try once in the case there are multiple children in the orphanage, instead of trying multiple times until one package succeeds? To avoid some kind of spamming attacks that could exhaust our computing power?",
      "created_at": "2024-04-15T20:37:50Z",
      "updated_at": "2024-04-15T21:02:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566405746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566405746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566889900",
      "pull_request_review_id": 2002880430,
      "id": 1566889900,
      "node_id": "PRRC_kwDOABII585dZNes",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": 1566405746,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes exactly, this is to bound computation (imagine if somebody sent us 100 fake orphans descended from 1 transaction and we processed them all here). My idea was to do something similar to regular orphan processing, where we have a work queue and limit to 1 item per `ProcessMessages`.\r\n\r\nThere is no work queue here, though, and we drop the parent as soon as we try 1 (pass or fail). At coredev, we discussed adding a work queue for 1p1c as well. However, since it involves finding a way to store the low feerate parent, and we have plenty of low hanging fruit for improving orphan handling, we'll save that for a later PR.",
      "created_at": "2024-04-16T07:51:17Z",
      "updated_at": "2024-04-16T07:51:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566889900",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566889900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566907728",
      "pull_request_review_id": 2002909080,
      "id": 1566907728,
      "node_id": "PRRC_kwDOABII585dZR1Q",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+    for (const auto index : tx_indices) {\n+        // If we already tried a package and failed for any reason, the combined hash was\n+        // cached in m_recent_rejects_reconsiderable.\n+        Package maybe_cpfp_package{ptx, cpfp_candidates.at(index).first};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {",
      "path": "src/net_processing.cpp",
      "position": 210,
      "original_position": 105,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": 1566378431,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes I think we could use either `m_recent_rejects_reconsiderable` and `m_recent_rejects` right now to get the same behavior.\r\n\r\nI suppose one mild benefit of using `m_recent_rejects_reconsiderable` is that our `m_recent_rejects` bloom filter churns less frequently.\r\n\r\n~The other benefit is extensibility in the future. In more general ancestor package relay, we could reject a parent+child for being too low feerate, but later accept it as parent+child+grandchild (where the grandchild is very high feerate).~",
      "created_at": "2024-04-16T08:03:26Z",
      "updated_at": "2024-04-16T12:25:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566907728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566907728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3290,
      "original_line": 3290,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567146604",
      "pull_request_review_id": 2003285723,
      "id": 1567146604,
      "node_id": "PRRC_kwDOABII585daMJs",
      "diff_hunk": "@@ -88,4 +88,10 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Get the hash of these wtxids, concatenated in lexicographical order. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "75855a4d337d8eb1c432acd54b7b507a61232b48",
      "in_reply_to_id": 1566025027,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added more explicit tests and changed this to be ordered based on `uint256.GetHex()` instead. I don't know enough to say which sorting is better here, but this seems like the natural ordering when I'm reading the hex strings as a human.",
      "created_at": "2024-04-16T10:49:28Z",
      "updated_at": "2024-04-16T11:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567146604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567146604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567165968",
      "pull_request_review_id": 2003285723,
      "id": 1567165968,
      "node_id": "PRRC_kwDOABII585daQ4Q",
      "diff_hunk": "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "path": "src/net_processing.cpp",
      "position": 307,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "53f1e65f30a0a6b931e97743113e0227748680df",
      "in_reply_to_id": 1550260907,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Elaborated in commit message",
      "created_at": "2024-04-16T11:05:57Z",
      "updated_at": "2024-04-16T11:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567165968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567165968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": 4357,
      "original_start_line": 4357,
      "start_side": "LEFT",
      "line": 4555,
      "original_line": 4555,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166206",
      "pull_request_review_id": 2003285723,
      "id": 1567166206,
      "node_id": "PRRC_kwDOABII585daQ7-",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": 1566300445,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, and edited the logging a bit",
      "created_at": "2024-04-16T11:06:11Z",
      "updated_at": "2024-04-16T11:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166366",
      "pull_request_review_id": 2003285723,
      "id": 1567166366,
      "node_id": "PRRC_kwDOABII585daQ-e",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": 1566329125,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2024-04-16T11:06:16Z",
      "updated_at": "2024-04-16T11:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166471",
      "pull_request_review_id": 2003285723,
      "id": 1567166471,
      "node_id": "PRRC_kwDOABII585daRAH",
      "diff_hunk": "@@ -3097,7 +3130,14 @@ void PeerManagerImpl::ProcessInvalidTx(NodeId nodeid, const CTransactionRef& ptx\n         // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n         // for concerns around weakening security of unupgraded nodes\n         // if we start doing this too early.\n-        m_recent_rejects.insert(ptx->GetWitnessHash().ToUint256());\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {\n+            // If the result is TX_RECONSIDERABLE, add it to m_recent_rejects_reconsiderable\n+            // because we should not download or submit this transaction by itself again, but may\n+            // submit it as part of a package later.\n+            m_recent_rejects_reconsiderable.insert(ptx->GetWitnessHash().ToUint256());",
      "path": "src/net_processing.cpp",
      "position": 113,
      "original_position": 82,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "35351159736d71222eb358c21003881947215f3a",
      "in_reply_to_id": 1566233731,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated",
      "created_at": "2024-04-16T11:06:22Z",
      "updated_at": "2024-04-16T11:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166471",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3152,
      "original_line": 3152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166818",
      "pull_request_review_id": 2003285723,
      "id": 1567166818,
      "node_id": "PRRC_kwDOABII585daRFi",
      "diff_hunk": "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 5,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "in_reply_to_id": 1549414682,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "marking as resolved since #29827 does this",
      "created_at": "2024-04-16T11:06:43Z",
      "updated_at": "2024-04-16T11:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567205749",
      "pull_request_review_id": 1991298023,
      "id": 1567205749,
      "node_id": "PRRC_kwDOABII585daal1",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+    for (const auto index : tx_indices) {\n+        // If we already tried a package and failed for any reason, the combined hash was\n+        // cached in m_recent_rejects_reconsiderable.\n+        Package maybe_cpfp_package{ptx, cpfp_candidates.at(index).first};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {",
      "path": "src/net_processing.cpp",
      "position": 210,
      "original_position": 105,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": 1566378431,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> The other benefit is extensibility in the future. In more general ancestor package relay, we could reject a parent+child for being too low feerate, but later accept it as parent+child+grandchild (where the grandchild is very high feerate).\r\n\r\nPerhaps this doesn't matter but I'm not sure I understand the distinction here. We need the combined hash committed *somewhere* in a bloom filter to not fetch the same ancestor package again. If it's different at all, we'll fetch it regardless of which filter we add it to?",
      "created_at": "2024-04-16T11:36:45Z",
      "updated_at": "2024-04-16T11:42:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567205749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567205749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3290,
      "original_line": 3290,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567269406",
      "pull_request_review_id": 2003481893,
      "id": 1567269406,
      "node_id": "PRRC_kwDOABII585daqIe",
      "diff_hunk": "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+    for (const auto index : tx_indices) {\n+        // If we already tried a package and failed for any reason, the combined hash was\n+        // cached in m_recent_rejects_reconsiderable.\n+        Package maybe_cpfp_package{ptx, cpfp_candidates.at(index).first};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {",
      "path": "src/net_processing.cpp",
      "position": 210,
      "original_position": 105,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "in_reply_to_id": 1566378431,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm I think you're right, it wouldn't make a difference with downloads. Crossing that part out. Were we thinking of this within validation maybe? Linearize + chunk the package, see that a chunk has already been rejected as too low feerate, drop it?",
      "created_at": "2024-04-16T12:25:36Z",
      "updated_at": "2024-04-16T12:25:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567269406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567269406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3290,
      "original_line": 3290,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567718964",
      "pull_request_review_id": 2004232080,
      "id": 1567718964,
      "node_id": "PRRC_kwDOABII585dcX40",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_orphan_consensus_failure(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": null,
      "original_position": 201,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n        # 3. Sender relays the parent. Parent+Child are evaluated as a package and rejected.\r\n```",
      "created_at": "2024-04-16T17:25:54Z",
      "updated_at": "2024-04-16T17:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567718964",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567718964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567724841",
      "pull_request_review_id": 2004232080,
      "id": 1567724841,
      "node_id": "PRRC_kwDOABII585dcZUp",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_orphan_consensus_failure(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": null,
      "original_position": 189,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would be good to explicitly test that the parent-giver isn't punished in this scenario, and test if parent is consensus-bad it results in something expected.\r\n\r\n```\r\ndiff --git a/test/functional/p2p_opportunistic_1p1c.py b/test/functional/p2p_opportunistic_1p1c.py\r\nindex 603cbf08a9..1c887289dc 100755\r\n--- a/test/functional/p2p_opportunistic_1p1c.py\r\n+++ b/test/functional/p2p_opportunistic_1p1c.py\r\n@@ -164,78 +164,129 @@ class PackageRelayTest(BitcoinTestFramework):\r\n         # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\r\n         parent_txid_int = int(low_fee_parent[\"txid\"], 16)\r\n         peer_sender.wait_for_getdata([parent_txid_int])\r\n \r\n         # 7. The low feerate parent + high feerate child are submitted as a package.\r\n         peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\r\n \r\n         # 8. Both transactions should now be in mempool\r\n         node_mempool = node.getrawmempool()\r\n         assert low_fee_parent[\"txid\"] in node_mempool\r\n         assert high_fee_child[\"txid\"] in node_mempool\r\n \r\n         node.disconnect_p2ps()\r\n \r\n     def test_orphan_consensus_failure(self):\r\n         node = self.nodes[0]\r\n         low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\r\n         coin = low_fee_parent[\"new_utxo\"]\r\n         address = node.get_deterministic_priv_key().address\r\n         # Create raw transaction spending the parent, but with no signature (a consensus error).\r\n         hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\r\n         tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\r\n         tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\r\n         tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\r\n \r\n-        peer_sender = node.add_p2p_connection(P2PInterface())\r\n+        child_peer_sender = node.add_p2p_connection(P2PInterface())\r\n+        parent_peer_sender = node.add_p2p_connection(P2PInterface())\r\n \r\n         # 1. Child is received first. It is missing an input.\r\n         child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\r\n-        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\r\n-        peer_sender.wait_for_getdata([child_wtxid_int])\r\n-        peer_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\r\n+        child_peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\r\n+        child_peer_sender.wait_for_getdata([child_wtxid_int])\r\n+        child_peer_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\r\n \r\n         # 2. Node requests the missing parent by txid.\r\n         parent_txid_int = int(low_fee_parent[\"txid\"], 16)\r\n-        peer_sender.wait_for_getdata([parent_txid_int])\r\n+        child_peer_sender.wait_for_getdata([parent_txid_int])\r\n \r\n-        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\r\n-        peer_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\r\n+        # 3. \"Honest\" sender relays the parent. Parent+Child are evaluated as a package and accepted.\r\n+        parent_peer_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\r\n \r\n         # 4. Transactions should not be in mempool.\r\n         node_mempool = node.getrawmempool()\r\n         assert low_fee_parent[\"txid\"] not in node_mempool\r\n         assert tx_orphan_bad_wit.rehash() not in node_mempool\r\n \r\n         # 5. Peer sent a consensus-invalid transaction.\r\n-        peer_sender.wait_for_disconnect()\r\n+        child_peer_sender.wait_for_disconnect()\r\n+\r\n+        # 6. \"Honest\" peer unpunished\r\n+        parent_peer_sender.sync_with_ping()\r\n+\r\n+    def test_parent_consensus_failure(self):\r\n+        node = self.nodes[0]\r\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\r\n+\r\n+        # Add bad sigature to parent\r\n+        tx_parent_bad_wit = tx_from_hex(low_fee_parent[\"hex\"])\r\n+        tx_parent_bad_wit.wit.vtxinwit.append(CTxInWitness())\r\n+        tx_parent_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\r\n+\r\n+        coin = low_fee_parent[\"new_utxo\"]\r\n+        address = node.get_deterministic_priv_key().address\r\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\r\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\r\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\r\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\r\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\r\n+\r\n+        child_peer_sender = node.add_p2p_connection(P2PInterface())\r\n+        parent_peer_sender = node.add_p2p_connection(P2PInterface())\r\n+\r\n+        # 1. Child is received first. It is missing an input.\r\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\r\n+        child_peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\r\n+        child_peer_sender.wait_for_getdata([child_wtxid_int])\r\n+        child_peer_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\r\n+\r\n+        # 2. Node requests the missing parent by txid.\r\n+        parent_txid_int = int(tx_parent_bad_wit.rehash(), 16)\r\n+        child_peer_sender.wait_for_getdata([parent_txid_int])\r\n+\r\n+        # 3. Parent sender relays the parent. Only parent should be evaluated.\r\n+        parent_peer_sender.send_message(msg_tx(tx_parent_bad_wit))\r\n+\r\n+        # 4. Transactions should not be in mempool.\r\n+        node_mempool = node.getrawmempool()\r\n+        assert tx_parent_bad_wit.rehash() not in node_mempool\r\n+        assert tx_orphan_bad_wit.rehash() not in node_mempool\r\n+\r\n+        # 5. Peer sent a consensus-invalid transaction.\r\n+        parent_peer_sender.wait_for_disconnect()\r\n+\r\n+        # 6. Child-sending peer unpunished for now!\r\n+        child_peer_sender.sync_with_ping()\r\n \r\n     def run_test(self):\r\n         node = self.nodes[0]\r\n         self.wallet = MiniWallet(node)\r\n         self.wallet_nonsegwit = MiniWallet(node, mode=MiniWalletMode.RAW_P2PK)\r\n         self.generate(self.wallet_nonsegwit, 10)\r\n         self.generate(self.wallet, 20)\r\n \r\n         fill_mempool(self, node, self.wallet)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when parent (txid != wtxid) is received before child\")\r\n         self.test_basic_parent_then_child(self.wallet)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when parent (txid == wtxid) is received before child\")\r\n         self.test_basic_parent_then_child(self.wallet_nonsegwit)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when child is received before parent\")\r\n         self.test_basic_child_then_parent()\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when 2 candidate children exist (parent txid != wtxid)\")\r\n         self.test_low_and_high_child(self.wallet)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when 2 candidate children exist (parent txid == wtxid)\")\r\n         self.test_low_and_high_child(self.wallet_nonsegwit)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid orphan causes disconnect\")\r\n         self.test_orphan_consensus_failure()\r\n \r\n+        self.log.info(\"Check opportunistic 1p1c logic doesn't evaluate package with consensus-invalid parent\")\r\n+        self.test_parent_consensus_failure()\r\n+\r\n \r\n if __name__ == '__main__':\r\n     PackageRelayTest().main()\r\n``` \r\n",
      "created_at": "2024-04-16T17:31:12Z",
      "updated_at": "2024-04-16T17:48:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567724841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567724841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567763258",
      "pull_request_review_id": 2004307670,
      "id": 1567763258,
      "node_id": "PRRC_kwDOABII585dcis6",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)",
      "path": "test/functional/p2p_opportunistic_1p1c.py",
      "position": null,
      "original_position": 115,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion:\r\ncall this `med_fee_child` and use the mempoolminfee directly since that's a more meaningful value than `2*FEERATE_1SAT_VB` which is below the floating minfee",
      "created_at": "2024-04-16T18:06:22Z",
      "updated_at": "2024-04-16T18:06:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567763258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567763258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567870936",
      "pull_request_review_id": 2004484626,
      "id": 1567870936,
      "node_id": "PRRC_kwDOABII585dc8_Y",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nThis seems redundant",
      "created_at": "2024-04-16T19:51:41Z",
      "updated_at": "2024-04-17T20:17:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567870936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567870936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568834899",
      "pull_request_review_id": 2006030894,
      "id": 1568834899,
      "node_id": "PRRC_kwDOABII585dgoVT",
      "diff_hunk": "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would it make sense to match peers and (if possible) always pick a child from the orphanage that was sent to us by the same peer that sent us the parent (instead of a random one)?\r\nThat way, it wouldn't be possible that a third peer could send us multiple low-fee children that we'd store in the orphanage, in the hope that we pick one of those and reject the package.",
      "created_at": "2024-04-17T13:20:12Z",
      "updated_at": "2024-04-17T13:20:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568834899",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568834899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568861661",
      "pull_request_review_id": 2006075374,
      "id": 1568861661,
      "node_id": "PRRC_kwDOABII585dgu3d",
      "diff_hunk": "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "in_reply_to_id": 1568834899,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I made this point in person from the philosophical standpoint that orphanage-churning aside, we probably shouldn't allow peers to \"cross-talk\" when it comes to package evaluation and possible punishment.\r\n\r\nIn practice I think an adversary can just churn the orphanage until Future Work happens, but still might be a good conceptual framework to adhere to? \r\n\r\n",
      "created_at": "2024-04-17T13:37:26Z",
      "updated_at": "2024-04-17T13:37:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568861661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568861661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568894409",
      "pull_request_review_id": 2006130667,
      "id": 1568894409,
      "node_id": "PRRC_kwDOABII585dg23J",
      "diff_hunk": "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "in_reply_to_id": 1568834899,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "great idea, will change 👍 ",
      "created_at": "2024-04-17T13:57:18Z",
      "updated_at": "2024-04-17T13:57:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568894409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568894409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568990742",
      "pull_request_review_id": 2004484626,
      "id": 1568990742,
      "node_id": "PRRC_kwDOABII585dhOYW",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nI don't see what the point of building the `txid` from a literal in this way and comparing it to the one obtained via `GetHash()` is. I'm guessing you're trying to make the point that the txids are actually what you are claiming them to be (as opposed to just writing them in a comment), so the reader can manually check the difference between internal and human-readable lexicographic ordering. Is that really necessary? ",
      "created_at": "2024-04-17T14:55:58Z",
      "updated_at": "2024-04-17T20:17:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568990742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568990742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569085792",
      "pull_request_review_id": 2004484626,
      "id": 1569085792,
      "node_id": "PRRC_kwDOABII585dhllg",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());\n+\n+    // All permutations of the package containing ptx4, ptx5, ptx6\n+    std::vector<CTransactionRef> package_456{ptx4, ptx5, ptx6};\n+    std::vector<CTransactionRef> package_465{ptx4, ptx6, ptx5};\n+    std::vector<CTransactionRef> package_564{ptx5, ptx6, ptx4};\n+    std::vector<CTransactionRef> package_546{ptx5, ptx4, ptx6};\n+    std::vector<CTransactionRef> package_645{ptx6, ptx4, ptx5};\n+    std::vector<CTransactionRef> package_654{ptx6, ptx5, ptx4};\n+    // All of them must have the same package hash 2dc93431aa6eb415a4e0995f77c78098d7ed97ca6f123a0d77a7747339525acd\n+    std::vector<uint256> expected_order_txns{wtxid_4.ToUint256(), wtxid_5.ToUint256(), wtxid_6.ToUint256()};",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nCalling `ToUint256()` shouldn't be needed",
      "created_at": "2024-04-17T15:55:57Z",
      "updated_at": "2024-04-17T20:17:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569085792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569085792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569086405",
      "pull_request_review_id": 2004484626,
      "id": 1569086405,
      "node_id": "PRRC_kwDOABII585dhlvF",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());\n+\n+    // All permutations of the package containing ptx4, ptx5, ptx6\n+    std::vector<CTransactionRef> package_456{ptx4, ptx5, ptx6};\n+    std::vector<CTransactionRef> package_465{ptx4, ptx6, ptx5};\n+    std::vector<CTransactionRef> package_564{ptx5, ptx6, ptx4};\n+    std::vector<CTransactionRef> package_546{ptx5, ptx4, ptx6};\n+    std::vector<CTransactionRef> package_645{ptx6, ptx4, ptx5};\n+    std::vector<CTransactionRef> package_654{ptx6, ptx5, ptx4};\n+    // All of them must have the same package hash 2dc93431aa6eb415a4e0995f77c78098d7ed97ca6f123a0d77a7747339525acd\n+    std::vector<uint256> expected_order_txns{wtxid_4.ToUint256(), wtxid_5.ToUint256(), wtxid_6.ToUint256()};\n+    uint256 calculated_hash_456 = (HashWriter() << expected_order_txns).GetHash();\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_456));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_465));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_564));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_546));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_645));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_654));\n+    // GetCombinedHash is consistent with GetPackageHash: try a couple permutations\n+    std::vector<Wtxid> wtxids_546{wtxid_5, wtxid_4, wtxid_6};\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetCombinedHash(wtxids_546));\n+    std::vector<Wtxid> wtxids_654{wtxid_6, wtxid_5, wtxid_4};\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetCombinedHash(wtxids_654));\n+\n+    std::vector<uint256> expected_order_wtxids{wtxid_1.ToUint256(), wtxid_2.ToUint256(), wtxid_3.ToUint256(),",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nSame as before, no need to cast to `ToUint256`",
      "created_at": "2024-04-17T15:56:25Z",
      "updated_at": "2024-04-17T20:17:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569086405",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569086405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569100856",
      "pull_request_review_id": 2004484626,
      "id": 1569100856,
      "node_id": "PRRC_kwDOABII585dhpQ4",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nI'm struggling to see the usefulness of this. You are showing that, for the provided transactions, the ordering may be different based on the representation used (`wtxid`/`txid`/`ToUint256`/`GetHex`), but I don't think this clearly shows that the package hash is using one or the other.\r\n\r\nYou are already proving that the order is the one you are expecting by manually computing `calculated_hash_456`. You could also create different orderings based on `ToUint256` (instead of `GetHex`) and `txid` (instead of `wtxid`) and check how those are not equal to `calculated_hash_456` (after having checked that all of the permutations of `GetPackageHash` are equal to `calculated_hash_456`)",
      "created_at": "2024-04-17T16:06:56Z",
      "updated_at": "2024-04-17T20:17:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569100856",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569100856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569200313",
      "pull_request_review_id": 2004484626,
      "id": 1569200313,
      "node_id": "PRRC_kwDOABII585diBi5",
      "diff_hunk": "@@ -190,17 +296,28 @@ BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n         BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n         BOOST_CHECK(IsChildWithParentsTree({tx_parent, tx_child}));\n+        BOOST_CHECK_EQUAL(GetPackageHash({tx_child}), GetCombinedHash({tx_child->GetWitnessHash()}));",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nnit: I think it wouldn't hurt to have a comment here along the lines of:\r\n\r\n```\r\n/// Check that `GetPackageHash`/ `GetCombinedHash` are consistent with each other, and that the input order does not affect the resulting hash \r\n```",
      "created_at": "2024-04-17T17:23:42Z",
      "updated_at": "2024-04-17T20:17:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569200313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569200313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569461340",
      "pull_request_review_id": 2004484626,
      "id": 1569461340,
      "node_id": "PRRC_kwDOABII585djBRc",
      "diff_hunk": "@@ -138,4 +162,51 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "91f4efa420958a93f4620379f8830231f276b23b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 91f4efa420958a93f4620379f8830231f276b23b\r\n\r\nThis should also be comparable by `CTransactionRef`, shouldn't it? So `GetWitnessHash` doesn't need to be called here and in following loops",
      "created_at": "2024-04-17T20:08:47Z",
      "updated_at": "2024-04-17T20:17:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569461340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569461340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": 194,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569471367",
      "pull_request_review_id": 2004484626,
      "id": 1569471367,
      "node_id": "PRRC_kwDOABII585djDuH",
      "diff_hunk": "@@ -138,4 +162,51 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& [child, peer] : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.contains(child->GetWitnessHash()));\n+    }\n+    auto parent2_children{orphanage.GetChildren(parent2)};\n+    BOOST_CHECK_EQUAL(parent2_children.size(), expected_parent2_children.size());\n+    for (const auto& [child, peer] : parent2_children) {\n+        BOOST_CHECK(expected_parent2_children.count(child->GetWitnessHash()) > 0);",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "91f4efa420958a93f4620379f8830231f276b23b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in: 91f4efa420958a93f4620379f8830231f276b23b\r\n\r\nnit: Use `contains` instead of `count(...) > 0` for consistency with the previous check (previous loop)",
      "created_at": "2024-04-17T20:14:01Z",
      "updated_at": "2024-04-17T20:17:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569471367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569471367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1570150713",
      "pull_request_review_id": 2008064624,
      "id": 1570150713,
      "node_id": "PRRC_kwDOABII585dlpk5",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that 1p1c package submission allows a 1p1c package to propagate in a \"network\" of nodes. Send\n+various packages from different nodes on a network in which some nodes have already received some of\n+the transactions (and submitted them to mempool, kept them as orphans or rejected them as\n+too-low-feerate transactions). The packages should be received and accepted by all nodes.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        # hugely speeds up the test, as it involves multiple hops of tx relay.\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        fill_mempool(self, self.nodes[0], filler_wallet)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerates are above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package, parent 1sat/vB, child 999sat/vB\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+\n+        # Basic 1-parent-1-child package, parent 1sat/vB, child 999sat/vB\n+        # Parent's txid is the same as its wtxid.\n+        low_fee_parent_nonsegwit = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        assert_equal(low_fee_parent_nonsegwit[\"txid\"], low_fee_parent_nonsegwit[\"wtxid\"])\n+        high_fee_child_nonsegwit = self.wallet_nonsegwit.create_self_transfer(utxo_to_spend=low_fee_parent_nonsegwit[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        assert_equal(high_fee_child_nonsegwit[\"txid\"], high_fee_child_nonsegwit[\"wtxid\"])\n+        package_hex_basic_nonsegwit = [low_fee_parent_nonsegwit[\"hex\"], high_fee_child_nonsegwit[\"hex\"]]\n+\n+        packages_to_submit = []\n+        transactions_to_presend = [[]] * self.num_nodes\n+\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        packages_to_submit.append(package_hex_basic)\n+        packages_to_submit.append(package_hex_basic_nonsegwit)\n+        transactions_to_presend[1] = [high_fee_child[\"tx\"], high_fee_child_nonsegwit[\"tx\"]]\n+        transactions_to_presend[3] = [low_fee_parent[\"tx\"], low_fee_parent_nonsegwit[\"tx\"]]\n+\n+        return packages_to_submit, transactions_to_presend\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.wallet_nonsegwit = MiniWallet(self.nodes[2], mode=MiniWalletMode.RAW_P2PK)\n+        self.generate(self.wallet_nonsegwit, 10)\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        # Create the transactions.\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        packages_to_submit, transactions_to_presend = self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_p2p_connection(P2PInterface()))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])",
      "path": "test/functional/p2p_1p1c_network.py",
      "position": null,
      "original_position": 111,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, feel free to ignore: strictly speaking those 3 lines are not needed, as sending in the tx unsolicitedly (without prior inv/getdata) works as well, though not adhering to the typical protocol flow.",
      "created_at": "2024-04-18T07:25:22Z",
      "updated_at": "2024-04-18T07:40:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1570150713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1570150713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": 109,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571005910",
      "pull_request_review_id": 2009283703,
      "id": 1571005910,
      "node_id": "PRRC_kwDOABII585do6XW",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that 1p1c package submission allows a 1p1c package to propagate in a \"network\" of nodes. Send\n+various packages from different nodes on a network in which some nodes have already received some of\n+the transactions (and submitted them to mempool, kept them as orphans or rejected them as\n+too-low-feerate transactions). The packages should be received and accepted by all nodes.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        # hugely speeds up the test, as it involves multiple hops of tx relay.\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        fill_mempool(self, self.nodes[0], filler_wallet)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerates are above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package, parent 1sat/vB, child 999sat/vB\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+\n+        # Basic 1-parent-1-child package, parent 1sat/vB, child 999sat/vB\n+        # Parent's txid is the same as its wtxid.\n+        low_fee_parent_nonsegwit = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        assert_equal(low_fee_parent_nonsegwit[\"txid\"], low_fee_parent_nonsegwit[\"wtxid\"])\n+        high_fee_child_nonsegwit = self.wallet_nonsegwit.create_self_transfer(utxo_to_spend=low_fee_parent_nonsegwit[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        assert_equal(high_fee_child_nonsegwit[\"txid\"], high_fee_child_nonsegwit[\"wtxid\"])\n+        package_hex_basic_nonsegwit = [low_fee_parent_nonsegwit[\"hex\"], high_fee_child_nonsegwit[\"hex\"]]\n+\n+        packages_to_submit = []\n+        transactions_to_presend = [[]] * self.num_nodes\n+\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        packages_to_submit.append(package_hex_basic)\n+        packages_to_submit.append(package_hex_basic_nonsegwit)\n+        transactions_to_presend[1] = [high_fee_child[\"tx\"], high_fee_child_nonsegwit[\"tx\"]]\n+        transactions_to_presend[3] = [low_fee_parent[\"tx\"], low_fee_parent_nonsegwit[\"tx\"]]\n+\n+        return packages_to_submit, transactions_to_presend\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.wallet_nonsegwit = MiniWallet(self.nodes[2], mode=MiniWalletMode.RAW_P2PK)\n+        self.generate(self.wallet_nonsegwit, 10)\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        # Create the transactions.\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        packages_to_submit, transactions_to_presend = self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_p2p_connection(P2PInterface()))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])",
      "path": "test/functional/p2p_1p1c_network.py",
      "position": null,
      "original_position": 111,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "in_reply_to_id": 1570150713,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed",
      "created_at": "2024-04-18T15:48:10Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571005910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571005910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": 109,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006395",
      "pull_request_review_id": 2009283703,
      "id": 1571006395,
      "node_id": "PRRC_kwDOABII585do6e7",
      "diff_hunk": "@@ -190,17 +296,28 @@ BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n         BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n         BOOST_CHECK(IsChildWithParentsTree({tx_parent, tx_child}));\n+        BOOST_CHECK_EQUAL(GetPackageHash({tx_child}), GetCombinedHash({tx_child->GetWitnessHash()}));",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": 1569200313,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(deleted `GetCombinedHash`)",
      "created_at": "2024-04-18T15:48:31Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571006395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006616",
      "pull_request_review_id": 2009283703,
      "id": 1571006616,
      "node_id": "PRRC_kwDOABII585do6iY",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());\n+\n+    // All permutations of the package containing ptx4, ptx5, ptx6\n+    std::vector<CTransactionRef> package_456{ptx4, ptx5, ptx6};\n+    std::vector<CTransactionRef> package_465{ptx4, ptx6, ptx5};\n+    std::vector<CTransactionRef> package_564{ptx5, ptx6, ptx4};\n+    std::vector<CTransactionRef> package_546{ptx5, ptx4, ptx6};\n+    std::vector<CTransactionRef> package_645{ptx6, ptx4, ptx5};\n+    std::vector<CTransactionRef> package_654{ptx6, ptx5, ptx4};\n+    // All of them must have the same package hash 2dc93431aa6eb415a4e0995f77c78098d7ed97ca6f123a0d77a7747339525acd\n+    std::vector<uint256> expected_order_txns{wtxid_4.ToUint256(), wtxid_5.ToUint256(), wtxid_6.ToUint256()};\n+    uint256 calculated_hash_456 = (HashWriter() << expected_order_txns).GetHash();\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_456));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_465));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_564));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_546));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_645));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_654));\n+    // GetCombinedHash is consistent with GetPackageHash: try a couple permutations\n+    std::vector<Wtxid> wtxids_546{wtxid_5, wtxid_4, wtxid_6};\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetCombinedHash(wtxids_546));\n+    std::vector<Wtxid> wtxids_654{wtxid_6, wtxid_5, wtxid_4};\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetCombinedHash(wtxids_654));\n+\n+    std::vector<uint256> expected_order_wtxids{wtxid_1.ToUint256(), wtxid_2.ToUint256(), wtxid_3.ToUint256(),",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": 1569086405,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done, thanks",
      "created_at": "2024-04-18T15:48:42Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571006616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006745",
      "pull_request_review_id": 2009283703,
      "id": 1571006745,
      "node_id": "PRRC_kwDOABII585do6kZ",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());\n+\n+    // All permutations of the package containing ptx4, ptx5, ptx6\n+    std::vector<CTransactionRef> package_456{ptx4, ptx5, ptx6};\n+    std::vector<CTransactionRef> package_465{ptx4, ptx6, ptx5};\n+    std::vector<CTransactionRef> package_564{ptx5, ptx6, ptx4};\n+    std::vector<CTransactionRef> package_546{ptx5, ptx4, ptx6};\n+    std::vector<CTransactionRef> package_645{ptx6, ptx4, ptx5};\n+    std::vector<CTransactionRef> package_654{ptx6, ptx5, ptx4};\n+    // All of them must have the same package hash 2dc93431aa6eb415a4e0995f77c78098d7ed97ca6f123a0d77a7747339525acd\n+    std::vector<uint256> expected_order_txns{wtxid_4.ToUint256(), wtxid_5.ToUint256(), wtxid_6.ToUint256()};",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": 1569085792,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done, thanks",
      "created_at": "2024-04-18T15:48:46Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571006745",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571013196",
      "pull_request_review_id": 2009283703,
      "id": 1571013196,
      "node_id": "PRRC_kwDOABII585do8JM",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": 1569100856,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok added tests calculating what the hashes would be if we used another order + checking they're not the same",
      "created_at": "2024-04-18T15:53:18Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571013196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571013196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571014755",
      "pull_request_review_id": 2009283703,
      "id": 1571014755,
      "node_id": "PRRC_kwDOABII585do8hj",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "142d584dab3725081344520bec0a092d6b58d996",
      "in_reply_to_id": 1568990742,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I figure it's easier to read the test this way; you can easily tell that the lexicographical ordering is what I claim it to be",
      "created_at": "2024-04-18T15:54:25Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571014755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571014755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015190",
      "pull_request_review_id": 2009283703,
      "id": 1571015190,
      "node_id": "PRRC_kwDOABII585do8oW",
      "diff_hunk": "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "54d0c78d104fb5412a194816590a06cad8cadf80",
      "in_reply_to_id": 1567870936,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "deleted",
      "created_at": "2024-04-18T15:54:41Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015190",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015344",
      "pull_request_review_id": 2009283703,
      "id": 1571015344,
      "node_id": "PRRC_kwDOABII585do8qw",
      "diff_hunk": "@@ -138,4 +162,51 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& [child, peer] : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.contains(child->GetWitnessHash()));\n+    }\n+    auto parent2_children{orphanage.GetChildren(parent2)};\n+    BOOST_CHECK_EQUAL(parent2_children.size(), expected_parent2_children.size());\n+    for (const auto& [child, peer] : parent2_children) {\n+        BOOST_CHECK(expected_parent2_children.count(child->GetWitnessHash()) > 0);",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "91f4efa420958a93f4620379f8830231f276b23b",
      "in_reply_to_id": 1569471367,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-04-18T15:54:47Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015434",
      "pull_request_review_id": 2009283703,
      "id": 1571015434,
      "node_id": "PRRC_kwDOABII585do8sK",
      "diff_hunk": "@@ -138,4 +162,51 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};",
      "path": "src/test/orphanage_tests.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "91f4efa420958a93f4620379f8830231f276b23b",
      "in_reply_to_id": 1569461340,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-04-18T15:54:50Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015434",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": 194,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015884",
      "pull_request_review_id": 2009283703,
      "id": 1571015884,
      "node_id": "PRRC_kwDOABII585do8zM",
      "diff_hunk": "@@ -88,4 +88,10 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Get the hash of these wtxids, concatenated in lexicographical order. */\n+uint256 GetCombinedHash(const std::vector<Wtxid>& wtxids);\n+/** Get the hash of these transactions' wtxids, concatenated in lexicographical order. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 7,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "c502734fa50104c18790ba0a5b63744552113110",
      "in_reply_to_id": 1559188232,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(deleted `GetCombinedHash`)",
      "created_at": "2024-04-18T15:55:09Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015988",
      "pull_request_review_id": 2009283703,
      "id": 1571015988,
      "node_id": "PRRC_kwDOABII585do800",
      "diff_hunk": "@@ -147,3 +147,17 @@ bool IsChildWithParentsTree(const Package& package)\n         return true;\n     });\n }\n+\n+uint256 GetCombinedHash(const std::vector<Wtxid>& wtxids)\n+{\n+    std::vector<Wtxid> wtxids_copy(wtxids.cbegin(), wtxids.cend());\n+    std::sort(wtxids_copy.begin(), wtxids_copy.end());\n+    return (HashWriter() << wtxids_copy).GetHash();\n+}",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "c502734fa50104c18790ba0a5b63744552113110",
      "in_reply_to_id": 1559187981,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(deleted `GetCombinedHash`)",
      "created_at": "2024-04-18T15:55:13Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571017712",
      "pull_request_review_id": 2009283703,
      "id": 1571017712,
      "node_id": "PRRC_kwDOABII585do9Pw",
      "diff_hunk": "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "in_reply_to_id": 1568834899,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did this now. We first gather all children by the same peer and try by recency order. If we cannot find one that matches, we look for children not by this peer, and try in random order.",
      "created_at": "2024-04-18T15:56:24Z",
      "updated_at": "2024-04-18T16:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571017712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571017712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571063644",
      "pull_request_review_id": 2009379866,
      "id": 1571063644,
      "node_id": "PRRC_kwDOABII585dpIdc",
      "diff_hunk": "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_commit_id": "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "in_reply_to_id": 1568834899,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For some code deduplication you could just have `GetChildrenFromPeer` which takes `std::optional<NodeId>`, returning full `std::vector<std::pair<CTransactionRef, NodeId>>` list if `std::nullopt` or filtered to the specific nodeid otherwise. You can call it filtered once, then if a suitable orphan isn't found, call it again unfiltered. ",
      "created_at": "2024-04-18T16:32:56Z",
      "updated_at": "2024-04-18T16:32:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571063644",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571063644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3293,
      "side": "RIGHT"
    }
  ]
}