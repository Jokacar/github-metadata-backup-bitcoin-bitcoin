{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906",
    "id": 2072708954,
    "node_id": "PR_kwDOABII5857iwda",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30906",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30906.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30906.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30906",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30906/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/48047ce9204723bc6efa8814939ea25f2df4882f",
    "number": 30906,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "refactor: prohibit direct flags access in CCoinsCacheEntry and remove invalid tests",
    "user": {
      "login": "l0rinc",
      "id": 1841944,
      "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l0rinc",
      "html_url": "https://github.com/l0rinc",
      "followers_url": "https://api.github.com/users/l0rinc/followers",
      "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
      "organizations_url": "https://api.github.com/users/l0rinc/orgs",
      "repos_url": "https://api.github.com/users/l0rinc/repos",
      "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/l0rinc/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Similarly to https://github.com/bitcoin/bitcoin/pull/30849, this cleanup is intended to de-risk https://github.com/bitcoin/bitcoin/pull/30673#discussion_r1739909068 by simplifying the coin cache public interface.\r\n\r\n`CCoinsCacheEntry` provided general access to its internal flags state, even though, in reality, it could only be `clean`, `fresh`, `dirty`, or `fresh|dirty` (in the follow-up, we will remove `fresh` without `dirty`).\r\n\r\nOnce it was marked as `dirty`, we couldn’t set the state back to clean with `AddFlags(0)`—tests explicitly checked against that.\r\n\r\nThis PR refines the public interface to make this distinction clearer and to make invalid behavior impossible, rather than just checked by tests. We don't need extensive access to the internals of `CCoinsCacheEntry`, as many tests were simply validating invalid combinations in this way.\r\n\r\nThe last few commits contain significant test refactorings to make `coins_tests` easier to change in follow-ups.",
    "labels": [
      {
        "id": 97470796,
        "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
        "name": "UTXO Db and Indexes",
        "color": "fbca04",
        "default": false
      }
    ],
    "created_at": "2024-09-15T13:39:38Z",
    "updated_at": "2024-10-17T02:35:35Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "8c54abdf981312283e7b51467a236eda8c057da4",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "l0rinc:l0rinc/hide-coin-flags",
      "ref": "l0rinc/hide-coin-flags",
      "sha": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 674169038,
        "node_id": "R_kgDOKC8Azg",
        "name": "bitcoin",
        "full_name": "l0rinc/bitcoin",
        "owner": {
          "login": "l0rinc",
          "id": 1841944,
          "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/l0rinc",
          "html_url": "https://github.com/l0rinc",
          "followers_url": "https://api.github.com/users/l0rinc/followers",
          "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
          "organizations_url": "https://api.github.com/users/l0rinc/orgs",
          "repos_url": "https://api.github.com/users/l0rinc/repos",
          "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/l0rinc/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/l0rinc/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/l0rinc/bitcoin",
        "archive_url": "https://api.github.com/repos/l0rinc/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/l0rinc/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/l0rinc/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/l0rinc/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/l0rinc/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/l0rinc/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/l0rinc/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/l0rinc/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/l0rinc/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/l0rinc/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/l0rinc/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/l0rinc/bitcoin/events",
        "forks_url": "https://api.github.com/repos/l0rinc/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/l0rinc/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/l0rinc/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/l0rinc/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/l0rinc/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/l0rinc/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/l0rinc/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/l0rinc/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/l0rinc/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/l0rinc/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/l0rinc/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/l0rinc/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/l0rinc/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:l0rinc/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/l0rinc/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/l0rinc/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/l0rinc/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/l0rinc/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/l0rinc/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/l0rinc/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/l0rinc/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/l0rinc/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/l0rinc/bitcoin/hooks",
        "svn_url": "https://github.com/l0rinc/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 246628,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-16T17:08:20Z",
        "created_at": "2023-08-03T09:49:12Z",
        "updated_at": "2024-07-18T12:40:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d812cf11896a2214467b6fa72d7b763bac6077c5",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36256,
        "stargazers_count": 78892,
        "watchers_count": 78892,
        "size": 269933,
        "default_branch": "master",
        "open_issues_count": 643,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-16T15:58:35Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-10-17T02:31:07Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 288,
    "deletions": 353,
    "changed_files": 5,
    "commits": 7,
    "review_comments": 47,
    "comments": 5
  },
  "events": [
    {
      "event": "commented",
      "id": 2351599095,
      "node_id": "IC_kwDOABII586MKo33",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2351599095",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T13:39:41Z",
      "updated_at": "2024-10-17T02:35:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30906).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [davidgumberg](https://github.com/bitcoin/bitcoin/pull/30906#issuecomment-2356666728), [hodlinator](https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2312129363) |\n| Stale ACK | [andrewtoth](https://github.com/bitcoin/bitcoin/pull/30906#issuecomment-2381032408) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31102](https://github.com/bitcoin/bitcoin/pull/31102) (Don't wipe coins cache when full and instead evict LRU clean entries by andrewtoth)\n* [#30849](https://github.com/bitcoin/bitcoin/pull/30849) (refactor: migrate `bool GetCoin` to return `optional<Coin>` by l0rinc)\n* [#30673](https://github.com/bitcoin/bitcoin/pull/30673) (coins: remove logic for spent-and-FRESH cache entries and writing non-DIRTY entries by andrewtoth)\n* [#30643](https://github.com/bitcoin/bitcoin/pull/30643) (coins: Add move operations to Coin and CCoinsCacheEntry by l0rinc)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#issuecomment-2351599095",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30906"
    },
    {
      "event": "labeled",
      "id": 14263175918,
      "node_id": "LE_lADOABII586Wnbp3zwAAAANSJsru",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14263175918",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T13:39:43Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "renamed",
      "id": 14263190873,
      "node_id": "RTE_lADOABII586Wnbp3zwAAAANSJwVZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14263190873",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T13:47:03Z",
      "rename": {
        "from": "coins: prohibit direct flags access in CCoinsCacheEntry and remove invalid tests",
        "to": "refactor: prohibit direct flags access in CCoinsCacheEntry and remove invalid tests"
      }
    },
    {
      "event": "reviewed",
      "id": 2305366216,
      "node_id": "PRR_kwDOABII586JaRjI",
      "url": null,
      "actor": null,
      "commit_id": "03cf2bd3e1a7c915c58465f43b11381404b40beb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\n\nCan we remove any other tests that are trying to add flags that are not FRESH or DIRTY and so are now useless?",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2305366216",
      "submitted_at": "2024-09-15T13:58:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14264180856,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANSNiB4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14264180856",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T18:36:00Z"
    },
    {
      "event": "commented",
      "id": 2351740285,
      "node_id": "IC_kwDOABII586MLLV9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2351740285",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T18:39:57Z",
      "updated_at": "2024-09-15T19:24:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Can we remove any other tests that are trying to add flags that are not FRESH or DIRTY and so are now useless?\r\n\r\nI've merged `NO_ENTRY` and `char(0)` values - this simplifies the cases somewhat.\r\nDo you think we can remove any of the lines? There aren't any duplicates, even after the above change...\r\n\r\nEdit: moved the booleans closer to the edges in later commits.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#issuecomment-2351740285",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30906"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14264195337,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANSNlkJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14264195337",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T18:41:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14264375681,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANSORmB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14264375681",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T19:22:19Z"
    },
    {
      "event": "labeled",
      "id": 14264375781,
      "node_id": "LE_lADOABII586Wnbp3zwAAAANSORnl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14264375781",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T19:22:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 14264615192,
      "node_id": "UNLE_lADOABII586Wnbp3zwAAAANSPMEY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14264615192",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T20:35:19Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2305620312,
      "node_id": "PRR_kwDOABII586JbPlY",
      "url": null,
      "actor": null,
      "commit_id": "390c670c37fbb1601d6de42d72dceb74e6bc84fa",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2305620312",
      "submitted_at": "2024-09-15T21:47:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "convert_to_draft",
      "id": 14264918477,
      "node_id": "CTDE_lADOABII586Wnbp3zwAAAANSQWHN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14264918477",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-15T23:19:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14293766049,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANT-Y-h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14293766049",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-17T15:59:54Z"
    },
    {
      "event": "reviewed",
      "id": 2310253600,
      "node_id": "PRR_kwDOABII586Js6wg",
      "url": null,
      "actor": null,
      "commit_id": "ba52ebd41673abf63d4495215c84be7244469d30",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2310253600",
      "submitted_at": "2024-09-17T16:29:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "reviewed",
      "id": 2310578143,
      "node_id": "PRR_kwDOABII586JuJ_f",
      "url": null,
      "actor": null,
      "commit_id": "c4bf4d76fea926045cdfb19e8b1e74284724cd9f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2310578143",
      "submitted_at": "2024-09-17T18:45:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "commented",
      "id": 2356666728,
      "node_id": "IC_kwDOABII586Md-Fo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2356666728",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-17T18:55:03Z",
      "updated_at": "2024-09-17T18:55:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK on dropping the bitfield interface for `CCoinsCacheEntry` flags",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#issuecomment-2356666728",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30906"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14302188867,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANUehVD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14302188867",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-18T06:41:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14302291034,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANUe6Ra",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14302291034",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-18T06:51:55Z"
    },
    {
      "event": "ready_for_review",
      "id": 14302393338,
      "node_id": "RFRE_lADOABII586Wnbp3zwAAAANUfTP6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14302393338",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-18T07:01:27Z"
    },
    {
      "event": "reviewed",
      "id": 2312647088,
      "node_id": "PRR_kwDOABII586J2DGw",
      "url": null,
      "actor": null,
      "commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2312647088",
      "submitted_at": "2024-09-18T13:12:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "reviewed",
      "id": 2312661395,
      "node_id": "PRR_kwDOABII586J2GmT",
      "url": null,
      "actor": null,
      "commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2312661395",
      "submitted_at": "2024-09-18T13:16:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14307890491,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANU0RU7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14307890491",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-18T13:36:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14307939786,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANU0dXK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14307939786",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-18T13:39:48Z"
    },
    {
      "event": "reviewed",
      "id": 2312129363,
      "node_id": "PRR_kwDOABII586J0EtT",
      "url": null,
      "actor": null,
      "commit_id": "5d6937c7ce7361befa752dec4b6738b72702dc3d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.\r\n\r\nReally like the move to put restrictions on how flags are used.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2312129363",
      "submitted_at": "2024-09-18T22:03:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14319780674,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANVhoNC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14319780674",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-19T08:13:11Z"
    },
    {
      "event": "reviewed",
      "id": 2317044728,
      "node_id": "PRR_kwDOABII586KG0v4",
      "url": null,
      "actor": null,
      "commit_id": "b8bc5989c9395fb522f38c9260e0357a8c29b83d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I think the commit title `test: Migrate GetCoinsMapEntry to return std::optional<CoinState>` is no longer accurate.\r\n\r\nI didn't find splitting the changes in `coins_tests` up into that many commits to be helpful for review. I ended up reviewing the combined diff for that file. Will review in more depth later.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2317044728",
      "submitted_at": "2024-09-20T02:13:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14349901740,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANXUh-s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14349901740",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-21T15:43:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14349915131,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANXUlP7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14349915131",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-21T15:50:45Z"
    },
    {
      "event": "reviewed",
      "id": 2320885732,
      "node_id": "PRR_kwDOABII586KVefk",
      "url": null,
      "actor": null,
      "commit_id": "1a89a97b1ab87c3be9629a49711c074127e4acd2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2320885732",
      "submitted_at": "2024-09-22T16:44:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "reviewed",
      "id": 2320890297,
      "node_id": "PRR_kwDOABII586KVfm5",
      "url": null,
      "actor": null,
      "commit_id": "1a89a97b1ab87c3be9629a49711c074127e4acd2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2320890297",
      "submitted_at": "2024-09-22T17:09:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14362275484,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANYDu6c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14362275484",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-23T11:41:45Z"
    },
    {
      "event": "reviewed",
      "id": 2334816826,
      "node_id": "PRR_kwDOABII586LKno6",
      "url": null,
      "actor": null,
      "commit_id": "1dd79a32c9c6e0c6cf4ecef00b56972574babced",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#pullrequestreview-2334816826",
      "submitted_at": "2024-09-27T23:51:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14438970812,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANcoTW8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14438970812",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-28T06:32:16Z"
    },
    {
      "event": "commented",
      "id": 2381032408,
      "node_id": "IC_kwDOABII586N66vY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2381032408",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-29T00:13:42Z",
      "updated_at": "2024-09-29T00:13:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "crACK cb9be6729c4e27bf2d6d703c0d454a22cbcdb6e1\r\n\r\nThis simplifies the CCoinsCacheEntry interface, which was leaking the flags bitfield as an implementation detail. Now we don't have to worry about fuzzing that, and it will make removing the FRESH-but-not-DIRTY or FRESH-and-spent cases easier in https://github.com/bitcoin/bitcoin/pull/30673.\r\n\r\nAlso, the tests are much saner now and easier to parse by also removing the flags interface there.\r\n\r\nThere are some minor issues with the commits though.\r\n\r\nCommit titles `test: Migrate GetCoinsMapEntry to return std::optional<CoinState>`\r\nand `test: Group values and states in tests into CoinState wrappers` should reference `CoinEntry` now.\r\n\r\n`test: Validate error messages on fail` should add some context in the commit message or description that it is for CCoinsViewCache AddCoin and WriteCoin unit tests.\r\n",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#issuecomment-2381032408",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30906"
    },
    {
      "event": "review_requested",
      "id": 14443105575,
      "node_id": "RRE_lADOABII586Wnbp3zwAAAANc4E0n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14443105575",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-29T00:13:47Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 14443105602,
      "node_id": "RRE_lADOABII586Wnbp3zwAAAANc4E1C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14443105602",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-29T00:13:48Z",
      "requested_reviewer": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14454563898,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANdjyQ6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14454563898",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-30T11:41:24Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMwYTRjZjJiMGFlYzZiMzQ3ZDU0NTVmZmI4MTQ1YTVhNzhiZDExODQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0a4cf2b0aec6b347d5455ffb8145a5a78bd1184",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c0a4cf2b0aec6b347d5455ffb8145a5a78bd1184",
      "tree": {
        "sha": "cec812cd40c5919192fe7571198b8d2fe106e0c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cec812cd40c5919192fe7571198b8d2fe106e0c8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d812cf11896a2214467b6fa72d7b763bac6077c5",
          "sha": "d812cf11896a2214467b6fa72d7b763bac6077c5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d812cf11896a2214467b6fa72d7b763bac6077c5"
        }
      ],
      "message": "coins: Split up AddFlags to remove invalid states\n\nCCoinsCacheEntry provided general access to its internal flags state, even though in reality it could only be clean, fresh, dirty or fresh|dirty.\n\nAfter it got dirtied we couldn't set the state back to clean by AddFlags(0) - tests were explicitly checking against that.\n\nThis commit cleans up the public interface to make this distinction cleaner and invalid behavior impossible instead of just checked by tests.\n\nAlso modernized `EmplaceCoinInternalDANGER` since it was already modified.\n\nCo-authored-by: Andrew Toth <andrewstoth@gmail.com>",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-30T13:07:37Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-13T08:58:16Z"
      },
      "sha": "c0a4cf2b0aec6b347d5455ffb8145a5a78bd1184"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAyOTRhNWUwYzc5ZTc1ZTI2Y2M0MzI1OGZiZDY4NjhkZTk3YmNmOWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0294a5e0c79e75e26cc43258fbd6868de97bcf9c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0294a5e0c79e75e26cc43258fbd6868de97bcf9c",
      "tree": {
        "sha": "dee1c17cd5496429486d01732cea859afb614f8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dee1c17cd5496429486d01732cea859afb614f8f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0a4cf2b0aec6b347d5455ffb8145a5a78bd1184",
          "sha": "c0a4cf2b0aec6b347d5455ffb8145a5a78bd1184",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c0a4cf2b0aec6b347d5455ffb8145a5a78bd1184"
        }
      ],
      "message": "coins: Remove direct GetFlags access\n\nWe don't need so much access to the internals of CCoinsCacheEntry, since many tests are just exercising invalid combinations this way.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-30T13:07:37Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-13T09:13:28Z"
      },
      "sha": "0294a5e0c79e75e26cc43258fbd6868de97bcf9c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU3ODAzMzExNzQwY2U3OTFmZDg3ODNkYTZiNTI3NzYwZDY1MzUxZmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7803311740ce791fd8783da6b527760d65351fc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e7803311740ce791fd8783da6b527760d65351fc",
      "tree": {
        "sha": "1600c9d45261f260227d092d0aa90592c5a28dfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1600c9d45261f260227d092d0aa90592c5a28dfe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0294a5e0c79e75e26cc43258fbd6868de97bcf9c",
          "sha": "0294a5e0c79e75e26cc43258fbd6868de97bcf9c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0294a5e0c79e75e26cc43258fbd6868de97bcf9c"
        }
      ],
      "message": "test: Migrate GetCoinsMapEntry to return MaybeCoin",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-30T13:07:37Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-16T11:49:56Z"
      },
      "sha": "e7803311740ce791fd8783da6b527760d65351fc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDllZjBjNGM4YjUzM2Y5ZjRhMzEyNzlhZTQ3MzMwN2YxMTI1ZmU5ZTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ef0c4c8b533f9f4a31279ae473307f1125fe9e2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef0c4c8b533f9f4a31279ae473307f1125fe9e2",
      "tree": {
        "sha": "e6484b0080cc35206d019b0186e4b55da6ab2f65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6484b0080cc35206d019b0186e4b55da6ab2f65"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7803311740ce791fd8783da6b527760d65351fc",
          "sha": "e7803311740ce791fd8783da6b527760d65351fc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e7803311740ce791fd8783da6b527760d65351fc"
        }
      ],
      "message": "test: Group values and states in tests into CoinEntry wrappers",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-30T13:07:37Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-15T18:21:32Z"
      },
      "sha": "9ef0c4c8b533f9f4a31279ae473307f1125fe9e2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMzMzE3ZjJiZjVkYWMzNjRkZWJiNWE1ZjM0MWZhMDZmMGYwYzViZDk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3317f2bf5dac364debb5a5f341fa06f0f0c5bd9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c3317f2bf5dac364debb5a5f341fa06f0f0c5bd9",
      "tree": {
        "sha": "2bad0b922deb576ca4012ed0f812e7a567ed4cbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bad0b922deb576ca4012ed0f812e7a567ed4cbf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ef0c4c8b533f9f4a31279ae473307f1125fe9e2",
          "sha": "9ef0c4c8b533f9f4a31279ae473307f1125fe9e2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef0c4c8b533f9f4a31279ae473307f1125fe9e2"
        }
      ],
      "message": "test: Validate error messages on fail\n\nThe `ccoins_add` and `ccoins_write` tests check the actual exception error messages now instead of just that they fail for the given parameters.\nThis enables us testing different exceptions in a more fine-grained way in later changes.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-30T13:07:37Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-18T06:18:44Z"
      },
      "sha": "c3317f2bf5dac364debb5a5f341fa06f0f0c5bd9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIwOGNiNTMwNTg2ZTZhMDBhMjIwNjU2Njg2NDg5MWQ4NDlmNzcwNGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b08cb530586e6a00a2206566864891d849f7704d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b08cb530586e6a00a2206566864891d849f7704d",
      "tree": {
        "sha": "b68b9470f0c43645cf3450aeba2c2f8c70bde535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b68b9470f0c43645cf3450aeba2c2f8c70bde535"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3317f2bf5dac364debb5a5f341fa06f0f0c5bd9",
          "sha": "c3317f2bf5dac364debb5a5f341fa06f0f0c5bd9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c3317f2bf5dac364debb5a5f341fa06f0f0c5bd9"
        }
      ],
      "message": "test: Remove remaining unbounded flags from coins_tests",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-30T13:07:37Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-17T15:52:41Z"
      },
      "sha": "b08cb530586e6a00a2206566864891d849f7704d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ4MDQ3Y2U5MjA0NzIzYmM2ZWZhODgxNDkzOWVhMjVmMmRmNDg4MmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48047ce9204723bc6efa8814939ea25f2df4882f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/48047ce9204723bc6efa8814939ea25f2df4882f",
      "tree": {
        "sha": "4cda154d25f3670675f112044885d5690bcf2da4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cda154d25f3670675f112044885d5690bcf2da4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b08cb530586e6a00a2206566864891d849f7704d",
          "sha": "b08cb530586e6a00a2206566864891d849f7704d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b08cb530586e6a00a2206566864891d849f7704d"
        }
      ],
      "message": "test: Compact ccoins_access and ccoins_spend",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-30T13:07:37Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-18T07:00:52Z"
      },
      "sha": "48047ce9204723bc6efa8814939ea25f2df4882f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14455893106,
      "node_id": "HRFPE_lADOABII586Wnbp3zwAAAANdo2xy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14455893106",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-30T13:07:50Z"
    },
    {
      "event": "commented",
      "id": 2383146568,
      "node_id": "IC_kwDOABII586OC-5I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2383146568",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-30T13:08:50Z",
      "updated_at": "2024-10-09T08:18:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "No code changes since https://github.com/bitcoin/bitcoin/commit/cb9be6729c4e27bf2d6d703c0d454a22cbcdb6e1, only commit messages (as requested) and rebased on latest master (separately).\r\n\r\nEdit: `git range-diff cb9be67~7..cb9be67 48047ce~7..48047ce `",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#issuecomment-2383146568",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30906"
    },
    {
      "event": "comment_deleted",
      "id": 14637434140,
      "node_id": "CDE_lADOABII586Wnbp3zwAAAANodYUc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14637434140",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-14T14:38:21Z"
    },
    {
      "event": "comment_deleted",
      "id": 14637435150,
      "node_id": "CDE_lADOABII586Wnbp3zwAAAANodYkO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14637435150",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-14T14:38:25Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760052629",
      "pull_request_review_id": 2305366216,
      "id": 1760052629,
      "node_id": "PRRC_kwDOABII585o6EWV",
      "diff_hunk": "@@ -616,7 +617,9 @@ void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags, const C\n         } else {\n             value = it->second.coin.out.nValue;\n         }\n-        flags = it->second.GetFlags();\n+        flags = 0;\n+        if (it->second.IsDirty()) flags |= DIRTY;\n+        if (it->second.IsFresh()) flags |= FRESH;\n         assert(flags != NO_ENTRY);",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "03cf2bd3e1a7c915c58465f43b11381404b40beb",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This assertion is obviated now.",
      "created_at": "2024-09-15T13:52:51Z",
      "updated_at": "2024-09-15T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760052629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760052629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 623,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760052862",
      "pull_request_review_id": 2305366216,
      "id": 1760052862,
      "node_id": "PRRC_kwDOABII585o6EZ-",
      "diff_hunk": "@@ -708,7 +711,7 @@ static void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount exp\n     GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n     BOOST_CHECK_EQUAL(result_value, expected_value);\n     BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-};\n+}",
      "path": "src/test/coins_tests.cpp",
      "position": 243,
      "original_position": 26,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "03cf2bd3e1a7c915c58465f43b11381404b40beb",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why was this changed?",
      "created_at": "2024-09-15T13:54:17Z",
      "updated_at": "2024-09-15T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760052862",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760052862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 714,
      "original_line": 714,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760053494",
      "pull_request_review_id": 2305366216,
      "id": 1760053494,
      "node_id": "PRRC_kwDOABII585o6Ej2",
      "diff_hunk": "@@ -146,70 +146,48 @@ BOOST_AUTO_TEST_CASE(linked_list_add_flags)\n     CoinsCachePair n1;\n     CoinsCachePair n2;\n \n-    // Check that adding 0 flag has no effect\n-    n1.second.AddFlags(0, n1, sentinel);\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), 0);\n-    BOOST_CHECK_EQUAL(sentinel.second.Next(), &sentinel);\n-    BOOST_CHECK_EQUAL(sentinel.second.Prev(), &sentinel);\n-\n     // Check that adding DIRTY flag inserts it into linked list and sets flags\n-    n1.second.AddFlags(CCoinsCacheEntry::DIRTY, n1, sentinel);\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), CCoinsCacheEntry::DIRTY);\n+    n1.second.SetDirty(n1, sentinel);\n+    BOOST_CHECK(n1.second.IsDirty());\n     BOOST_CHECK_EQUAL(n1.second.Next(), &sentinel);\n     BOOST_CHECK_EQUAL(n1.second.Prev(), &sentinel);\n     BOOST_CHECK_EQUAL(sentinel.second.Next(), &n1);\n     BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n1);\n \n     // Check that adding FRESH flag on new node inserts it after n1\n-    n2.second.AddFlags(CCoinsCacheEntry::FRESH, n2, sentinel);\n-    BOOST_CHECK_EQUAL(n2.second.GetFlags(), CCoinsCacheEntry::FRESH);\n+    n2.second.SetFresh(n2, sentinel);\n+    BOOST_CHECK(n2.second.IsFresh());\n     BOOST_CHECK_EQUAL(n2.second.Next(), &sentinel);\n     BOOST_CHECK_EQUAL(n2.second.Prev(), &n1);\n     BOOST_CHECK_EQUAL(n1.second.Next(), &n2);\n     BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n2);\n \n-    // Check that adding 0 flag has no effect, and doesn't change position\n-    n1.second.AddFlags(0, n1, sentinel);\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), CCoinsCacheEntry::DIRTY);\n-    BOOST_CHECK_EQUAL(n1.second.Next(), &n2);\n-    BOOST_CHECK_EQUAL(n1.second.Prev(), &sentinel);\n-    BOOST_CHECK_EQUAL(sentinel.second.Next(), &n1);\n-    BOOST_CHECK_EQUAL(n2.second.Prev(), &n1);\n-\n     // Check that we can add extra flags, but they don't change our position\n-    n1.second.AddFlags(CCoinsCacheEntry::FRESH, n1, sentinel);\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH);\n+    n1.second.SetFresh(n1, sentinel);\n+    BOOST_CHECK(n1.second.IsDirty() && n1.second.IsFresh());\n     BOOST_CHECK_EQUAL(n1.second.Next(), &n2);\n     BOOST_CHECK_EQUAL(n1.second.Prev(), &sentinel);\n     BOOST_CHECK_EQUAL(sentinel.second.Next(), &n1);\n     BOOST_CHECK_EQUAL(n2.second.Prev(), &n1);\n \n     // Check that we can clear flags then re-add them\n     n1.second.ClearFlags();\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), 0);\n+    BOOST_CHECK(!n1.second.IsDirty() && !n1.second.IsFresh());\n     BOOST_CHECK_EQUAL(sentinel.second.Next(), &n2);\n     BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n2);\n     BOOST_CHECK_EQUAL(n2.second.Next(), &sentinel);\n     BOOST_CHECK_EQUAL(n2.second.Prev(), &sentinel);\n \n-    // Check that calling `ClearFlags` with 0 flags has no effect\n     n1.second.ClearFlags();\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), 0);\n-    BOOST_CHECK_EQUAL(sentinel.second.Next(), &n2);\n-    BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n2);\n-    BOOST_CHECK_EQUAL(n2.second.Next(), &sentinel);\n-    BOOST_CHECK_EQUAL(n2.second.Prev(), &sentinel);\n-\n-    // Adding 0 still has no effect\n-    n1.second.AddFlags(0, n1, sentinel);\n+    BOOST_CHECK(!n1.second.IsDirty() && !n1.second.IsFresh());\n     BOOST_CHECK_EQUAL(sentinel.second.Next(), &n2);\n     BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n2);\n     BOOST_CHECK_EQUAL(n2.second.Next(), &sentinel);\n     BOOST_CHECK_EQUAL(n2.second.Prev(), &sentinel);\n \n     // But adding DIRTY re-inserts it after n2",
      "path": "src/test/coinscachepair_tests.cpp",
      "position": null,
      "original_position": 124,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "03cf2bd3e1a7c915c58465f43b11381404b40beb",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`But` can be removed now.",
      "created_at": "2024-09-15T13:57:05Z",
      "updated_at": "2024-09-15T13:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760053494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760053494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760102028",
      "pull_request_review_id": 2305399341,
      "id": 1760102028,
      "node_id": "PRRC_kwDOABII585o6QaM",
      "diff_hunk": "@@ -708,7 +711,7 @@ static void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount exp\n     GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n     BOOST_CHECK_EQUAL(result_value, expected_value);\n     BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-};\n+}",
      "path": "src/test/coins_tests.cpp",
      "position": 243,
      "original_position": 26,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "03cf2bd3e1a7c915c58465f43b11381404b40beb",
      "in_reply_to_id": 1760052862,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because class declarations don't need semicolons, but I'll revert if you find it distracting",
      "created_at": "2024-09-15T16:01:49Z",
      "updated_at": "2024-09-15T16:01:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760102028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760102028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 714,
      "original_line": 714,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760258646",
      "pull_request_review_id": 2305550025,
      "id": 1760258646,
      "node_id": "PRRC_kwDOABII585o62pW",
      "diff_hunk": "@@ -616,7 +617,9 @@ void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags, const C\n         } else {\n             value = it->second.coin.out.nValue;\n         }\n-        flags = it->second.GetFlags();\n+        flags = 0;\n+        if (it->second.IsDirty()) flags |= DIRTY;\n+        if (it->second.IsFresh()) flags |= FRESH;\n         assert(flags != NO_ENTRY);",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "03cf2bd3e1a7c915c58465f43b11381404b40beb",
      "in_reply_to_id": 1760052629,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Replaced it with a flag validation",
      "created_at": "2024-09-15T18:35:58Z",
      "updated_at": "2024-09-15T18:35:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760258646",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760258646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 623,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760258689",
      "pull_request_review_id": 2305550076,
      "id": 1760258689,
      "node_id": "PRRC_kwDOABII585o62qB",
      "diff_hunk": "@@ -146,70 +146,48 @@ BOOST_AUTO_TEST_CASE(linked_list_add_flags)\n     CoinsCachePair n1;\n     CoinsCachePair n2;\n \n-    // Check that adding 0 flag has no effect\n-    n1.second.AddFlags(0, n1, sentinel);\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), 0);\n-    BOOST_CHECK_EQUAL(sentinel.second.Next(), &sentinel);\n-    BOOST_CHECK_EQUAL(sentinel.second.Prev(), &sentinel);\n-\n     // Check that adding DIRTY flag inserts it into linked list and sets flags\n-    n1.second.AddFlags(CCoinsCacheEntry::DIRTY, n1, sentinel);\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), CCoinsCacheEntry::DIRTY);\n+    n1.second.SetDirty(n1, sentinel);\n+    BOOST_CHECK(n1.second.IsDirty());\n     BOOST_CHECK_EQUAL(n1.second.Next(), &sentinel);\n     BOOST_CHECK_EQUAL(n1.second.Prev(), &sentinel);\n     BOOST_CHECK_EQUAL(sentinel.second.Next(), &n1);\n     BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n1);\n \n     // Check that adding FRESH flag on new node inserts it after n1\n-    n2.second.AddFlags(CCoinsCacheEntry::FRESH, n2, sentinel);\n-    BOOST_CHECK_EQUAL(n2.second.GetFlags(), CCoinsCacheEntry::FRESH);\n+    n2.second.SetFresh(n2, sentinel);\n+    BOOST_CHECK(n2.second.IsFresh());\n     BOOST_CHECK_EQUAL(n2.second.Next(), &sentinel);\n     BOOST_CHECK_EQUAL(n2.second.Prev(), &n1);\n     BOOST_CHECK_EQUAL(n1.second.Next(), &n2);\n     BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n2);\n \n-    // Check that adding 0 flag has no effect, and doesn't change position\n-    n1.second.AddFlags(0, n1, sentinel);\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), CCoinsCacheEntry::DIRTY);\n-    BOOST_CHECK_EQUAL(n1.second.Next(), &n2);\n-    BOOST_CHECK_EQUAL(n1.second.Prev(), &sentinel);\n-    BOOST_CHECK_EQUAL(sentinel.second.Next(), &n1);\n-    BOOST_CHECK_EQUAL(n2.second.Prev(), &n1);\n-\n     // Check that we can add extra flags, but they don't change our position\n-    n1.second.AddFlags(CCoinsCacheEntry::FRESH, n1, sentinel);\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH);\n+    n1.second.SetFresh(n1, sentinel);\n+    BOOST_CHECK(n1.second.IsDirty() && n1.second.IsFresh());\n     BOOST_CHECK_EQUAL(n1.second.Next(), &n2);\n     BOOST_CHECK_EQUAL(n1.second.Prev(), &sentinel);\n     BOOST_CHECK_EQUAL(sentinel.second.Next(), &n1);\n     BOOST_CHECK_EQUAL(n2.second.Prev(), &n1);\n \n     // Check that we can clear flags then re-add them\n     n1.second.ClearFlags();\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), 0);\n+    BOOST_CHECK(!n1.second.IsDirty() && !n1.second.IsFresh());\n     BOOST_CHECK_EQUAL(sentinel.second.Next(), &n2);\n     BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n2);\n     BOOST_CHECK_EQUAL(n2.second.Next(), &sentinel);\n     BOOST_CHECK_EQUAL(n2.second.Prev(), &sentinel);\n \n-    // Check that calling `ClearFlags` with 0 flags has no effect\n     n1.second.ClearFlags();\n-    BOOST_CHECK_EQUAL(n1.second.GetFlags(), 0);\n-    BOOST_CHECK_EQUAL(sentinel.second.Next(), &n2);\n-    BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n2);\n-    BOOST_CHECK_EQUAL(n2.second.Next(), &sentinel);\n-    BOOST_CHECK_EQUAL(n2.second.Prev(), &sentinel);\n-\n-    // Adding 0 still has no effect\n-    n1.second.AddFlags(0, n1, sentinel);\n+    BOOST_CHECK(!n1.second.IsDirty() && !n1.second.IsFresh());\n     BOOST_CHECK_EQUAL(sentinel.second.Next(), &n2);\n     BOOST_CHECK_EQUAL(sentinel.second.Prev(), &n2);\n     BOOST_CHECK_EQUAL(n2.second.Next(), &sentinel);\n     BOOST_CHECK_EQUAL(n2.second.Prev(), &sentinel);\n \n     // But adding DIRTY re-inserts it after n2",
      "path": "src/test/coinscachepair_tests.cpp",
      "position": null,
      "original_position": 124,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "03cf2bd3e1a7c915c58465f43b11381404b40beb",
      "in_reply_to_id": 1760053494,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-09-15T18:36:02Z",
      "updated_at": "2024-09-15T18:36:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760258689",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760258689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760349038",
      "pull_request_review_id": 2305620312,
      "id": 1760349038,
      "node_id": "PRRC_kwDOABII585o7Mtu",
      "diff_hunk": "@@ -571,11 +571,19 @@ const static CAmount VALUE2 = 200;\n const static CAmount VALUE3 = 300;\n const static char DIRTY = CCoinsCacheEntry::DIRTY;\n const static char FRESH = CCoinsCacheEntry::FRESH;\n-const static char NO_ENTRY = -1;",
      "path": "src/test/coins_tests.cpp",
      "position": 45,
      "original_position": 4,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "390c670c37fbb1601d6de42d72dceb74e6bc84fa",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since we don't pass a bitmap as flags anymore, does it make sense to get rid of the `char` type for flags in `coins_tests` and replace with a more descriptive enum?\r\n```C++\r\nenum Flags\r\n{\r\n   Clean,\r\n   Dirty,\r\n   Fresh,\r\n   DirtyAndFresh\r\n};\r\n```\r\n\r\nCould also be a `std::optional<Flags>` so we can handle the `NO_ENTRY` case cleanly instead of with a `-1`.",
      "created_at": "2024-09-15T21:47:34Z",
      "updated_at": "2024-09-15T21:54:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760349038",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760349038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 574,
      "original_line": 574,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760375960",
      "pull_request_review_id": 2305631302,
      "id": 1760375960,
      "node_id": "PRRC_kwDOABII585o7TSY",
      "diff_hunk": "@@ -571,11 +571,19 @@ const static CAmount VALUE2 = 200;\n const static CAmount VALUE3 = 300;\n const static char DIRTY = CCoinsCacheEntry::DIRTY;\n const static char FRESH = CCoinsCacheEntry::FRESH;\n-const static char NO_ENTRY = -1;",
      "path": "src/test/coins_tests.cpp",
      "position": 45,
      "original_position": 4,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "390c670c37fbb1601d6de42d72dceb74e6bc84fa",
      "in_reply_to_id": 1760349038,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what's the difference between clean and NO_ENTRY? Does that difference still make sense after this change?\r\n\r\n> get rid of the char type for flags in coins_tests and replace with a more descriptive enum\r\n\r\nSince we don't have flags in the production code anymore I would prefer getting rid of them in the tests as well. Reintroducing an enum would kinda' defeat that purpose in my opinion.\r\n\r\nTo make sure the tests are still checking the same combinations, I have added a few scripted diffs to transition the tests away from the flags - now the tabular data displays dirty and fresh booleans instead (I guess we can group some of the examples into `CoinMapEntry` as well, if needed).\r\nThis should help us selectively decide which combinations are still valid.\r\nWhat do you think?",
      "created_at": "2024-09-15T22:53:50Z",
      "updated_at": "2024-09-15T22:53:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760375960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760375960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 574,
      "original_line": 574,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760378255",
      "pull_request_review_id": 2305632140,
      "id": 1760378255,
      "node_id": "PRRC_kwDOABII585o7T2P",
      "diff_hunk": "@@ -571,11 +571,19 @@ const static CAmount VALUE2 = 200;\n const static CAmount VALUE3 = 300;\n const static char DIRTY = CCoinsCacheEntry::DIRTY;\n const static char FRESH = CCoinsCacheEntry::FRESH;\n-const static char NO_ENTRY = -1;",
      "path": "src/test/coins_tests.cpp",
      "position": 45,
      "original_position": 4,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "390c670c37fbb1601d6de42d72dceb74e6bc84fa",
      "in_reply_to_id": 1760349038,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`Clean` means not dirty and not fresh. `NO_ENTRY` is a special value that is not a possible flag but signals to the tests that that entry does not exist. With proper types, that would correspond to a `std::nullopt`.\r\nWe don't have to name the enum `Flags`, we can name it `EntryState`. That way we don't have to validate the `flags` variable to see if it's one of the values we will accept. That is better served by using an enum and std::optional.",
      "created_at": "2024-09-15T22:59:19Z",
      "updated_at": "2024-09-15T22:59:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760378255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760378255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 574,
      "original_line": 574,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760380040",
      "pull_request_review_id": 2305632784,
      "id": 1760380040,
      "node_id": "PRRC_kwDOABII585o7USI",
      "diff_hunk": "@@ -571,11 +571,19 @@ const static CAmount VALUE2 = 200;\n const static CAmount VALUE3 = 300;\n const static char DIRTY = CCoinsCacheEntry::DIRTY;\n const static char FRESH = CCoinsCacheEntry::FRESH;\n-const static char NO_ENTRY = -1;",
      "path": "src/test/coins_tests.cpp",
      "position": 45,
      "original_position": 4,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "390c670c37fbb1601d6de42d72dceb74e6bc84fa",
      "in_reply_to_id": 1760349038,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think replacing with true and false is the right approach. Using enums, tests would be like\r\n```\r\nCheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\r\nbecomes\r\nCheckAccessCoin(VALUE1, SPENT , SPENT , DirtyAndFresh, DirtyAndFresh);\r\n\r\nCheckSpendCoins(ABSENT, SPENT , ABSENT, FRESH      , NO_ENTRY    );\r\nbecomes\r\nCheckSpendCoins(ABSENT, SPENT , ABSENT, Fresh      , std::nullopt);\r\n```",
      "created_at": "2024-09-15T23:03:42Z",
      "updated_at": "2024-09-15T23:11:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760380040",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760380040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 574,
      "original_line": 574,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760380094",
      "pull_request_review_id": 2305632812,
      "id": 1760380094,
      "node_id": "PRRC_kwDOABII585o7US-",
      "diff_hunk": "@@ -571,11 +571,19 @@ const static CAmount VALUE2 = 200;\n const static CAmount VALUE3 = 300;\n const static char DIRTY = CCoinsCacheEntry::DIRTY;\n const static char FRESH = CCoinsCacheEntry::FRESH;\n-const static char NO_ENTRY = -1;",
      "path": "src/test/coins_tests.cpp",
      "position": 45,
      "original_position": 4,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "390c670c37fbb1601d6de42d72dceb74e6bc84fa",
      "in_reply_to_id": 1760349038,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> is a special value that is not a possible flag but signals to the tests that that entry does not exist\r\n\r\n> That is better served by using an enum and std::optional.\r\n\r\nThanks, I'll investigate tomorrow.\r\nPlease leave some comments about the overall direction as well, do you think this new test layout is more readable or less?\r\nDrafting until then.",
      "created_at": "2024-09-15T23:03:51Z",
      "updated_at": "2024-09-15T23:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1760380094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760380094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 574,
      "original_line": 574,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1763508568",
      "pull_request_review_id": 2310194905,
      "id": 1763508568,
      "node_id": "PRRC_kwDOABII585pHQFY",
      "diff_hunk": "@@ -571,11 +571,19 @@ const static CAmount VALUE2 = 200;\n const static CAmount VALUE3 = 300;\n const static char DIRTY = CCoinsCacheEntry::DIRTY;\n const static char FRESH = CCoinsCacheEntry::FRESH;\n-const static char NO_ENTRY = -1;",
      "path": "src/test/coins_tests.cpp",
      "position": 45,
      "original_position": 4,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "390c670c37fbb1601d6de42d72dceb74e6bc84fa",
      "in_reply_to_id": 1760349038,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did a significant restructure, the tabular tests should be a lot easier to comprehend and modify now.\r\nAlso testing the exception messages directly, you'll need this in your new PR.\r\nI still need to get rid of remaining flags in the tests, will do that tomorrow - any early feedback until then is appreciated.",
      "created_at": "2024-09-17T16:04:00Z",
      "updated_at": "2024-09-17T16:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1763508568",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1763508568"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 574,
      "original_line": 574,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1763544909",
      "pull_request_review_id": 2310253600,
      "id": 1763544909,
      "node_id": "PRRC_kwDOABII585pHY9N",
      "diff_hunk": "@@ -562,6 +564,15 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+struct CoinStruct {\n+    const CAmount value;\n+    const char flags;",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "ba52ebd41673abf63d4495215c84be7244469d30",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I still think this should be an enum named `EntryState` or something, with all combinations of flags like https://github.com/bitcoin/bitcoin/pull/30906/commits/ba52ebd41673abf63d4495215c84be7244469d30#r1760349038. That's the proper way to do this instead of defining static vars for each value of a char we care about.",
      "created_at": "2024-09-17T16:29:27Z",
      "updated_at": "2024-09-17T16:29:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1763544909",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1763544909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 569,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1763548746",
      "pull_request_review_id": 2310259965,
      "id": 1763548746,
      "node_id": "PRRC_kwDOABII585pHZ5K",
      "diff_hunk": "@@ -562,6 +564,15 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+struct CoinStruct {\n+    const CAmount value;\n+    const char flags;",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "ba52ebd41673abf63d4495215c84be7244469d30",
      "in_reply_to_id": 1763544909,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Absolutely, that's my plan for tomorrow - but needed to clean up the test before doing that",
      "created_at": "2024-09-17T16:32:43Z",
      "updated_at": "2024-09-17T16:32:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1763548746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1763548746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 569,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1763731654",
      "pull_request_review_id": 2310578143,
      "id": 1763731654,
      "node_id": "PRRC_kwDOABII585pIGjG",
      "diff_hunk": "@@ -663,47 +663,43 @@ static void CheckAccessCoin(CAmount base_value, CoinStruct coin_state, CoinStruc\n     test.cache.SelfTest(/*sanity_check=*/false);\n     BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected_coin_state);\n }\n-static void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n-{\n-    CheckAccessCoin(base_value, CoinStruct(cache_value, cache_flags), CoinStruct(expected_value, expected_flags));\n-}\n \n BOOST_AUTO_TEST_CASE(ccoins_access)\n {\n     /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, and checking the resulting entry in the cache after\n      * the access.\n      *\n-     *               Base    Cache   Result  Cache        Result\n-     *               Value   Value   Value   Flags        Flags\n+     *              Base     Cache   Cache          Result  Result\n+     *              Value    Value   Flags          Value   Flags\n      */\n-    CheckAccessCoin(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, ABSENT, VALUE1, NO_ENTRY   , UNCHANGED  );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoin(ABSENT, {ABSENT, NO_ENTRY   }, {ABSENT, NO_ENTRY   });\n+    CheckAccessCoin(ABSENT, {SPENT , UNCHANGED  }, {SPENT , UNCHANGED  });\n+    CheckAccessCoin(ABSENT, {SPENT , FRESH      }, {SPENT , FRESH      });\n+    CheckAccessCoin(ABSENT, {SPENT , DIRTY      }, {SPENT , DIRTY      });\n+    CheckAccessCoin(ABSENT, {SPENT , DIRTY|FRESH}, {SPENT , DIRTY|FRESH});\n+    CheckAccessCoin(ABSENT, {VALUE2, UNCHANGED  }, {VALUE2, UNCHANGED  });\n+    CheckAccessCoin(ABSENT, {VALUE2, FRESH      }, {VALUE2, FRESH      });\n+    CheckAccessCoin(ABSENT, {VALUE2, DIRTY      }, {VALUE2, DIRTY      });\n+    CheckAccessCoin(ABSENT, {VALUE2, DIRTY|FRESH}, {VALUE2, DIRTY|FRESH});\n+    CheckAccessCoin(SPENT , {ABSENT, NO_ENTRY   }, {ABSENT, NO_ENTRY   });\n+    CheckAccessCoin(SPENT , {SPENT , UNCHANGED  }, {SPENT , UNCHANGED  });\n+    CheckAccessCoin(SPENT , {SPENT , FRESH      }, {SPENT , FRESH      });\n+    CheckAccessCoin(SPENT , {SPENT , DIRTY      }, {SPENT , DIRTY      });\n+    CheckAccessCoin(SPENT , {SPENT , DIRTY|FRESH}, {SPENT , DIRTY|FRESH});\n+    CheckAccessCoin(SPENT , {VALUE2, UNCHANGED  }, {VALUE2, UNCHANGED  });\n+    CheckAccessCoin(SPENT , {VALUE2, FRESH      }, {VALUE2, FRESH      });\n+    CheckAccessCoin(SPENT , {VALUE2, DIRTY      }, {VALUE2, DIRTY      });\n+    CheckAccessCoin(SPENT , {VALUE2, DIRTY|FRESH}, {VALUE2, DIRTY|FRESH});\n+    CheckAccessCoin(VALUE1, {ABSENT, NO_ENTRY   }, {VALUE1, UNCHANGED  });\n+    CheckAccessCoin(VALUE1, {SPENT , UNCHANGED  }, {SPENT , UNCHANGED  });\n+    CheckAccessCoin(VALUE1, {SPENT , FRESH      }, {SPENT , FRESH      });\n+    CheckAccessCoin(VALUE1, {SPENT , DIRTY      }, {SPENT , DIRTY      });\n+    CheckAccessCoin(VALUE1, {SPENT , DIRTY|FRESH}, {SPENT , DIRTY|FRESH});\n+    CheckAccessCoin(VALUE1, {VALUE2, UNCHANGED  }, {VALUE2, UNCHANGED  });\n+    CheckAccessCoin(VALUE1, {VALUE2, FRESH      }, {VALUE2, FRESH      });\n+    CheckAccessCoin(VALUE1, {VALUE2, DIRTY      }, {VALUE2, DIRTY      });\n+    CheckAccessCoin(VALUE1, {VALUE2, DIRTY|FRESH}, {VALUE2, DIRTY|FRESH});",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "c4bf4d76fea926045cdfb19e8b1e74284724cd9f",
      "in_reply_to_id": null,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Could be made into a loop as below",
      "created_at": "2024-09-17T18:45:28Z",
      "updated_at": "2024-09-17T18:45:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1763731654",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1763731654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 702,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1764488736",
      "pull_request_review_id": 2311774268,
      "id": 1764488736,
      "node_id": "PRRC_kwDOABII585pK_Yg",
      "diff_hunk": "@@ -571,11 +571,19 @@ const static CAmount VALUE2 = 200;\n const static CAmount VALUE3 = 300;\n const static char DIRTY = CCoinsCacheEntry::DIRTY;\n const static char FRESH = CCoinsCacheEntry::FRESH;\n-const static char NO_ENTRY = -1;",
      "path": "src/test/coins_tests.cpp",
      "position": 45,
      "original_position": 4,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "390c670c37fbb1601d6de42d72dceb74e6bc84fa",
      "in_reply_to_id": 1760349038,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-09-18T06:43:38Z",
      "updated_at": "2024-09-18T06:43:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1764488736",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1764488736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 574,
      "original_line": 574,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1764497635",
      "pull_request_review_id": 2311788691,
      "id": 1764497635,
      "node_id": "PRRC_kwDOABII585pLBjj",
      "diff_hunk": "@@ -562,6 +564,15 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+struct CoinStruct {\n+    const CAmount value;\n+    const char flags;",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "ba52ebd41673abf63d4495215c84be7244469d30",
      "in_reply_to_id": 1763544909,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-09-18T06:52:15Z",
      "updated_at": "2024-09-18T06:52:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1764497635",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1764497635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 569,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1764507421",
      "pull_request_review_id": 2311804549,
      "id": 1764507421,
      "node_id": "PRRC_kwDOABII585pLD8d",
      "diff_hunk": "@@ -663,47 +663,43 @@ static void CheckAccessCoin(CAmount base_value, CoinStruct coin_state, CoinStruc\n     test.cache.SelfTest(/*sanity_check=*/false);\n     BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected_coin_state);\n }\n-static void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n-{\n-    CheckAccessCoin(base_value, CoinStruct(cache_value, cache_flags), CoinStruct(expected_value, expected_flags));\n-}\n \n BOOST_AUTO_TEST_CASE(ccoins_access)\n {\n     /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, and checking the resulting entry in the cache after\n      * the access.\n      *\n-     *               Base    Cache   Result  Cache        Result\n-     *               Value   Value   Value   Flags        Flags\n+     *              Base     Cache   Cache          Result  Result\n+     *              Value    Value   Flags          Value   Flags\n      */\n-    CheckAccessCoin(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, ABSENT, VALUE1, NO_ENTRY   , UNCHANGED  );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, UNCHANGED  , UNCHANGED  );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoin(ABSENT, {ABSENT, NO_ENTRY   }, {ABSENT, NO_ENTRY   });\n+    CheckAccessCoin(ABSENT, {SPENT , UNCHANGED  }, {SPENT , UNCHANGED  });\n+    CheckAccessCoin(ABSENT, {SPENT , FRESH      }, {SPENT , FRESH      });\n+    CheckAccessCoin(ABSENT, {SPENT , DIRTY      }, {SPENT , DIRTY      });\n+    CheckAccessCoin(ABSENT, {SPENT , DIRTY|FRESH}, {SPENT , DIRTY|FRESH});\n+    CheckAccessCoin(ABSENT, {VALUE2, UNCHANGED  }, {VALUE2, UNCHANGED  });\n+    CheckAccessCoin(ABSENT, {VALUE2, FRESH      }, {VALUE2, FRESH      });\n+    CheckAccessCoin(ABSENT, {VALUE2, DIRTY      }, {VALUE2, DIRTY      });\n+    CheckAccessCoin(ABSENT, {VALUE2, DIRTY|FRESH}, {VALUE2, DIRTY|FRESH});\n+    CheckAccessCoin(SPENT , {ABSENT, NO_ENTRY   }, {ABSENT, NO_ENTRY   });\n+    CheckAccessCoin(SPENT , {SPENT , UNCHANGED  }, {SPENT , UNCHANGED  });\n+    CheckAccessCoin(SPENT , {SPENT , FRESH      }, {SPENT , FRESH      });\n+    CheckAccessCoin(SPENT , {SPENT , DIRTY      }, {SPENT , DIRTY      });\n+    CheckAccessCoin(SPENT , {SPENT , DIRTY|FRESH}, {SPENT , DIRTY|FRESH});\n+    CheckAccessCoin(SPENT , {VALUE2, UNCHANGED  }, {VALUE2, UNCHANGED  });\n+    CheckAccessCoin(SPENT , {VALUE2, FRESH      }, {VALUE2, FRESH      });\n+    CheckAccessCoin(SPENT , {VALUE2, DIRTY      }, {VALUE2, DIRTY      });\n+    CheckAccessCoin(SPENT , {VALUE2, DIRTY|FRESH}, {VALUE2, DIRTY|FRESH});\n+    CheckAccessCoin(VALUE1, {ABSENT, NO_ENTRY   }, {VALUE1, UNCHANGED  });\n+    CheckAccessCoin(VALUE1, {SPENT , UNCHANGED  }, {SPENT , UNCHANGED  });\n+    CheckAccessCoin(VALUE1, {SPENT , FRESH      }, {SPENT , FRESH      });\n+    CheckAccessCoin(VALUE1, {SPENT , DIRTY      }, {SPENT , DIRTY      });\n+    CheckAccessCoin(VALUE1, {SPENT , DIRTY|FRESH}, {SPENT , DIRTY|FRESH});\n+    CheckAccessCoin(VALUE1, {VALUE2, UNCHANGED  }, {VALUE2, UNCHANGED  });\n+    CheckAccessCoin(VALUE1, {VALUE2, FRESH      }, {VALUE2, FRESH      });\n+    CheckAccessCoin(VALUE1, {VALUE2, DIRTY      }, {VALUE2, DIRTY      });\n+    CheckAccessCoin(VALUE1, {VALUE2, DIRTY|FRESH}, {VALUE2, DIRTY|FRESH});",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "c4bf4d76fea926045cdfb19e8b1e74284724cd9f",
      "in_reply_to_id": 1763731654,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks!",
      "created_at": "2024-09-18T07:01:07Z",
      "updated_at": "2024-09-18T07:01:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1764507421",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1764507421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 702,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1764709955",
      "pull_request_review_id": 2312129363,
      "id": 1764709955,
      "node_id": "PRRC_kwDOABII585pL1ZD",
      "diff_hunk": "@@ -128,6 +128,22 @@ struct CCoinsCacheEntry\n     CoinsCachePair* m_next{nullptr};\n     uint8_t m_flags{0};\n \n+    //! Adding a flag also requires a self reference to the pair that contains\n+    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n+    //! flagged pair linked list.\n+    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        assert(flags & DIRTY || flags & FRESH);",
      "path": "src/coins.h",
      "position": null,
      "original_position": 18,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: terseness++\r\n```suggestion\r\n        assert(flags & (DIRTY | FRESH));\r\n```",
      "created_at": "2024-09-18T09:27:10Z",
      "updated_at": "2024-09-18T22:03:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1764709955",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1764709955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765031560",
      "pull_request_review_id": 2312647088,
      "id": 1765031560,
      "node_id": "PRRC_kwDOABII585pND6I",
      "diff_hunk": "@@ -159,19 +175,13 @@ struct CCoinsCacheEntry\n         ClearFlags();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.\n-    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    inline void SetDirty(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n     {\n-        Assume(&self.second == this);\n-        if (!m_flags && flags) {\n-            m_prev = sentinel.second.m_prev;\n-            m_next = &sentinel;\n-            sentinel.second.m_prev = &self;\n-            m_prev->second.m_next = &self;\n-        }\n-        m_flags |= flags;\n+        AddFlags(DIRTY, self, sentinel);\n+    }\n+    inline void SetFresh(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        AddFlags(FRESH, self, sentinel);\n     }\n     inline void ClearFlags() noexcept",
      "path": "src/coins.h",
      "position": null,
      "original_position": 56,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    inline void SetClean() noexcept\r\n```",
      "created_at": "2024-09-18T13:11:59Z",
      "updated_at": "2024-09-18T13:12:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1765031560",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765031560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765039768",
      "pull_request_review_id": 2312661395,
      "id": 1765039768,
      "node_id": "PRRC_kwDOABII585pNF6Y",
      "diff_hunk": "@@ -589,314 +632,245 @@ static void SetCoinsValue(CAmount value, Coin& coin)\n     }\n }\n \n-static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, CAmount value, char flags)\n+static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, const CoinStruct& cache_coin)\n {\n-    if (value == ABSENT) {\n-        assert(flags == NO_ENTRY);\n-        return 0;\n-    }\n-    assert(flags != NO_ENTRY);\n     CCoinsCacheEntry entry;\n-    SetCoinsValue(value, entry.coin);\n-    auto inserted = map.emplace(OUTPOINT, std::move(entry));\n-    assert(inserted.second);\n-    inserted.first->second.AddFlags(flags, *inserted.first, sentinel);\n-    return inserted.first->second.coin.DynamicMemoryUsage();\n+    SetCoinsValue(cache_coin.value, entry.coin);\n+    auto [iter, inserted] = map.emplace(OUTPOINT, std::move(entry));\n+    assert(inserted);\n+    if (cache_coin.IsDirty()) iter->second.SetDirty(*iter, sentinel);\n+    if (cache_coin.IsFresh()) iter->second.SetFresh(*iter, sentinel);\n+    return iter->second.coin.DynamicMemoryUsage();\n }\n \n-void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags, const COutPoint& outp = OUTPOINT)\n+MaybeCoin GetCoinsMapEntry(const CCoinsMap& map, const COutPoint& outp = OUTPOINT)\n {\n-    auto it = map.find(outp);\n-    if (it == map.end()) {\n-        value = ABSENT;\n-        flags = NO_ENTRY;\n-    } else {\n-        if (it->second.coin.IsSpent()) {\n-            value = SPENT;\n-        } else {\n-            value = it->second.coin.out.nValue;\n-        }\n-        flags = it->second.GetFlags();\n-        assert(flags != NO_ENTRY);\n+    if (auto it{map.find(outp)}; it != map.end()) {\n+        return CoinStruct{\n+            it->second.coin.IsSpent() ? SPENT : it->second.coin.out.nValue,\n+            ToCaching(it->second.IsDirty(), it->second.IsFresh())};",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need a new function if we're only calling it the one time here? Just seems like unnecessary indirection.",
      "created_at": "2024-09-18T13:16:42Z",
      "updated_at": "2024-09-18T14:29:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1765039768",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765039768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765076854",
      "pull_request_review_id": 2312729724,
      "id": 1765076854,
      "node_id": "PRRC_kwDOABII585pNO92",
      "diff_hunk": "@@ -159,19 +175,13 @@ struct CCoinsCacheEntry\n         ClearFlags();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.\n-    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    inline void SetDirty(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n     {\n-        Assume(&self.second == this);\n-        if (!m_flags && flags) {\n-            m_prev = sentinel.second.m_prev;\n-            m_next = &sentinel;\n-            sentinel.second.m_prev = &self;\n-            m_prev->second.m_next = &self;\n-        }\n-        m_flags |= flags;\n+        AddFlags(DIRTY, self, sentinel);\n+    }\n+    inline void SetFresh(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        AddFlags(FRESH, self, sentinel);\n     }\n     inline void ClearFlags() noexcept",
      "path": "src/coins.h",
      "position": null,
      "original_position": 56,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": 1765031560,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Excellent, fixed in https://github.com/bitcoin/bitcoin/compare/b2f9df78176011b616a1715387aa43fce747d589..5d6937c7ce7361befa752dec4b6738b72702dc3d",
      "created_at": "2024-09-18T13:36:54Z",
      "updated_at": "2024-09-18T13:40:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1765076854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765076854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765076974",
      "pull_request_review_id": 2312729883,
      "id": 1765076974,
      "node_id": "PRRC_kwDOABII585pNO_u",
      "diff_hunk": "@@ -589,314 +632,245 @@ static void SetCoinsValue(CAmount value, Coin& coin)\n     }\n }\n \n-static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, CAmount value, char flags)\n+static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, const CoinStruct& cache_coin)\n {\n-    if (value == ABSENT) {\n-        assert(flags == NO_ENTRY);\n-        return 0;\n-    }\n-    assert(flags != NO_ENTRY);\n     CCoinsCacheEntry entry;\n-    SetCoinsValue(value, entry.coin);\n-    auto inserted = map.emplace(OUTPOINT, std::move(entry));\n-    assert(inserted.second);\n-    inserted.first->second.AddFlags(flags, *inserted.first, sentinel);\n-    return inserted.first->second.coin.DynamicMemoryUsage();\n+    SetCoinsValue(cache_coin.value, entry.coin);\n+    auto [iter, inserted] = map.emplace(OUTPOINT, std::move(entry));\n+    assert(inserted);\n+    if (cache_coin.IsDirty()) iter->second.SetDirty(*iter, sentinel);\n+    if (cache_coin.IsFresh()) iter->second.SetFresh(*iter, sentinel);\n+    return iter->second.coin.DynamicMemoryUsage();\n }\n \n-void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags, const COutPoint& outp = OUTPOINT)\n+MaybeCoin GetCoinsMapEntry(const CCoinsMap& map, const COutPoint& outp = OUTPOINT)\n {\n-    auto it = map.find(outp);\n-    if (it == map.end()) {\n-        value = ABSENT;\n-        flags = NO_ENTRY;\n-    } else {\n-        if (it->second.coin.IsSpent()) {\n-            value = SPENT;\n-        } else {\n-            value = it->second.coin.out.nValue;\n-        }\n-        flags = it->second.GetFlags();\n-        assert(flags != NO_ENTRY);\n+    if (auto it{map.find(outp)}; it != map.end()) {\n+        return CoinStruct{\n+            it->second.coin.IsSpent() ? SPENT : it->second.coin.out.nValue,\n+            ToCaching(it->second.IsDirty(), it->second.IsFresh())};",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": 1765039768,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Converting flags to enums isn't the responsibility of this method, that's why I've extracted it.",
      "created_at": "2024-09-18T13:36:57Z",
      "updated_at": "2024-09-18T13:36:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1765076974",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765076974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765112447",
      "pull_request_review_id": 2312129363,
      "id": 1765112447,
      "node_id": "PRRC_kwDOABII585pNXp_",
      "diff_hunk": "@@ -159,19 +175,13 @@ struct CCoinsCacheEntry\n         ClearFlags();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.\n-    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    inline void SetDirty(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n     {\n-        Assume(&self.second == this);\n-        if (!m_flags && flags) {\n-            m_prev = sentinel.second.m_prev;\n-            m_next = &sentinel;\n-            sentinel.second.m_prev = &self;\n-            m_prev->second.m_next = &self;\n-        }\n-        m_flags |= flags;\n+        AddFlags(DIRTY, self, sentinel);\n+    }\n+    inline void SetFresh(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        AddFlags(FRESH, self, sentinel);\n     }\n     inline void ClearFlags() noexcept",
      "path": "src/coins.h",
      "position": null,
      "original_position": 56,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": 1765031560,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While \"clean\" is the opposite of \"dirty\", it doesn't involve how *fresh* something is. It's on another dimension.\r\n\r\nI actually prefer `ClearFlags()`, `ClearState()` or possibly `Reset-something()`.\r\n\r\nSame goes for `Caching::CLEAN`. Would prefer `VOID`/`EMPTY`/`INIT`/`NULL`.",
      "created_at": "2024-09-18T13:57:01Z",
      "updated_at": "2024-09-18T22:03:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1765112447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765112447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765771596",
      "pull_request_review_id": 2312129363,
      "id": 1765771596,
      "node_id": "PRRC_kwDOABII585pP4lM",
      "diff_hunk": "@@ -562,20 +564,61 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+enum class Caching {\n+    CLEAN,\n+    DIRTY,\n+    FRESH,\n+    DIRTY_FRESH,\n+};\n+\n+struct CoinStruct {\n+    const CAmount value;\n+    const Caching caching;",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "5d6937c7ce7361befa752dec4b6738b72702dc3d",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Types should for the most part be nouns IMO. Seldom verbs in present participle like `Caching`. `CoinStruct` feels a bit WIP too.\r\n\r\nSuggestions:\r\n```suggestion\r\nstruct CoinState {\r\n    const CAmount value;\r\n    const CacheState cache;\r\n```\r\n```suggestion\r\nstruct CoinCache {\r\n    enum State {\r\n        CLEAN,\r\n        DIRTY,\r\n        FRESH,\r\n        DIRTY_FRESH,\r\n    };\r\n    const CAmount value;\r\n    const State state;\r\n```",
      "created_at": "2024-09-18T21:52:19Z",
      "updated_at": "2024-09-18T22:03:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1765771596",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765771596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": 574,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 576,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765803669",
      "pull_request_review_id": 2313928208,
      "id": 1765803669,
      "node_id": "PRRC_kwDOABII585pQAaV",
      "diff_hunk": "@@ -159,19 +175,13 @@ struct CCoinsCacheEntry\n         ClearFlags();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.\n-    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    inline void SetDirty(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n     {\n-        Assume(&self.second == this);\n-        if (!m_flags && flags) {\n-            m_prev = sentinel.second.m_prev;\n-            m_next = &sentinel;\n-            sentinel.second.m_prev = &self;\n-            m_prev->second.m_next = &self;\n-        }\n-        m_flags |= flags;\n+        AddFlags(DIRTY, self, sentinel);\n+    }\n+    inline void SetFresh(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        AddFlags(FRESH, self, sentinel);\n     }\n     inline void ClearFlags() noexcept",
      "path": "src/coins.h",
      "position": null,
      "original_position": 56,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": 1765031560,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "*fresh* is actually a substate of *dirty*. Being *fresh* implies *dirty*, so cleaning implies no longer fresh.\r\n\r\nSee https://github.com/bitcoin/bitcoin/pull/30673 which inspired this, which intends to remove possibility of FRESH-but-not-DIRTY entries.",
      "created_at": "2024-09-18T22:27:21Z",
      "updated_at": "2024-09-18T22:33:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1765803669",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1765803669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766285389",
      "pull_request_review_id": 2314608427,
      "id": 1766285389,
      "node_id": "PRRC_kwDOABII585pR2BN",
      "diff_hunk": "@@ -159,19 +175,13 @@ struct CCoinsCacheEntry\n         ClearFlags();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.\n-    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    inline void SetDirty(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n     {\n-        Assume(&self.second == this);\n-        if (!m_flags && flags) {\n-            m_prev = sentinel.second.m_prev;\n-            m_next = &sentinel;\n-            sentinel.second.m_prev = &self;\n-            m_prev->second.m_next = &self;\n-        }\n-        m_flags |= flags;\n+        AddFlags(DIRTY, self, sentinel);\n+    }\n+    inline void SetFresh(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        AddFlags(FRESH, self, sentinel);\n     }\n     inline void ClearFlags() noexcept",
      "path": "src/coins.h",
      "position": null,
      "original_position": 56,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": 1765031560,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`FRESH` is definitely a [very confusing concept](https://github.com/bitcoin/bitcoin/blob/master/src/coins.h#L143-L151)\r\n> the parent cache does not have this coin or that it is a spent coin in the parent cache\r\n\r\nMaybe after https://github.com/bitcoin/bitcoin/pull/30673 we can find a better name (and description) for it",
      "created_at": "2024-09-19T07:13:06Z",
      "updated_at": "2024-09-19T07:13:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1766285389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766285389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766373294",
      "pull_request_review_id": 2314752983,
      "id": 1766373294,
      "node_id": "PRRC_kwDOABII585pSLeu",
      "diff_hunk": "@@ -562,20 +564,61 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+enum class Caching {\n+    CLEAN,\n+    DIRTY,\n+    FRESH,\n+    DIRTY_FRESH,\n+};\n+\n+struct CoinStruct {\n+    const CAmount value;\n+    const Caching caching;",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "5d6937c7ce7361befa752dec4b6738b72702dc3d",
      "in_reply_to_id": 1765771596,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Had a few versions before, played around with it a bit more, thanks for the pointers, what do you think of the [new structure and names](https://github.com/bitcoin/bitcoin/compare/5d6937c7ce7361befa752dec4b6738b72702dc3d..b8bc5989c9395fb522f38c9260e0357a8c29b83d).",
      "created_at": "2024-09-19T08:13:44Z",
      "updated_at": "2024-09-19T08:14:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1766373294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766373294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": 574,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 576,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766374252",
      "pull_request_review_id": 2314754553,
      "id": 1766374252,
      "node_id": "PRRC_kwDOABII585pSLts",
      "diff_hunk": "@@ -128,6 +128,22 @@ struct CCoinsCacheEntry\n     CoinsCachePair* m_next{nullptr};\n     uint8_t m_flags{0};\n \n+    //! Adding a flag also requires a self reference to the pair that contains\n+    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n+    //! flagged pair linked list.\n+    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        assert(flags & DIRTY || flags & FRESH);",
      "path": "src/coins.h",
      "position": null,
      "original_position": 18,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": 1764709955,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Clever, thanks!",
      "created_at": "2024-09-19T08:14:26Z",
      "updated_at": "2024-09-19T08:14:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1766374252",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766374252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767504341",
      "pull_request_review_id": 2316597052,
      "id": 1767504341,
      "node_id": "PRRC_kwDOABII585pWfnV",
      "diff_hunk": "@@ -159,19 +175,13 @@ struct CCoinsCacheEntry\n         ClearFlags();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.\n-    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    inline void SetDirty(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n     {\n-        Assume(&self.second == this);\n-        if (!m_flags && flags) {\n-            m_prev = sentinel.second.m_prev;\n-            m_next = &sentinel;\n-            sentinel.second.m_prev = &self;\n-            m_prev->second.m_next = &self;\n-        }\n-        m_flags |= flags;\n+        AddFlags(DIRTY, self, sentinel);\n+    }\n+    inline void SetFresh(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        AddFlags(FRESH, self, sentinel);\n     }\n     inline void ClearFlags() noexcept",
      "path": "src/coins.h",
      "position": null,
      "original_position": 56,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": 1765031560,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay, so `FRESH` and `DIRTY_FRESH` will merge into one. :+1: ",
      "created_at": "2024-09-19T19:39:03Z",
      "updated_at": "2024-09-19T19:39:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1767504341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767504341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767510588",
      "pull_request_review_id": 2316607414,
      "id": 1767510588,
      "node_id": "PRRC_kwDOABII585pWhI8",
      "diff_hunk": "@@ -562,20 +564,61 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+enum class Caching {\n+    CLEAN,\n+    DIRTY,\n+    FRESH,\n+    DIRTY_FRESH,\n+};\n+\n+struct CoinStruct {\n+    const CAmount value;\n+    const Caching caching;",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "5d6937c7ce7361befa752dec4b6738b72702dc3d",
      "in_reply_to_id": 1765771596,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Like it! Moves related things closer together.",
      "created_at": "2024-09-19T19:45:19Z",
      "updated_at": "2024-09-19T19:45:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1767510588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767510588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": 574,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 576,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767514943",
      "pull_request_review_id": 2316614423,
      "id": 1767514943,
      "node_id": "PRRC_kwDOABII585pWiM_",
      "diff_hunk": "@@ -159,19 +175,13 @@ struct CCoinsCacheEntry\n         ClearFlags();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.\n-    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    inline void SetDirty(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n     {\n-        Assume(&self.second == this);\n-        if (!m_flags && flags) {\n-            m_prev = sentinel.second.m_prev;\n-            m_next = &sentinel;\n-            sentinel.second.m_prev = &self;\n-            m_prev->second.m_next = &self;\n-        }\n-        m_flags |= flags;\n+        AddFlags(DIRTY, self, sentinel);\n+    }\n+    inline void SetFresh(CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        AddFlags(FRESH, self, sentinel);\n     }\n     inline void ClearFlags() noexcept",
      "path": "src/coins.h",
      "position": null,
      "original_position": 56,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "b2f9df78176011b616a1715387aa43fce747d589",
      "in_reply_to_id": 1765031560,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "rather `FRESH` will be removed in the mentioned follow-up, since it's not actually possible (unless in case of reorgs, which I don't fully understand yet, but not important for this PR)",
      "created_at": "2024-09-19T19:49:33Z",
      "updated_at": "2024-09-19T19:49:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1767514943",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767514943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767516058",
      "pull_request_review_id": 2316616232,
      "id": 1767516058,
      "node_id": "PRRC_kwDOABII585pWiea",
      "diff_hunk": "@@ -562,20 +564,61 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+enum class Caching {\n+    CLEAN,\n+    DIRTY,\n+    FRESH,\n+    DIRTY_FRESH,\n+};\n+\n+struct CoinStruct {\n+    const CAmount value;\n+    const Caching caching;",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "5d6937c7ce7361befa752dec4b6738b72702dc3d",
      "in_reply_to_id": 1765771596,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The usages are a lot more verbose, but I've extracted everything important now, so the tables are still readable",
      "created_at": "2024-09-19T19:50:40Z",
      "updated_at": "2024-09-19T19:50:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1767516058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767516058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": 574,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 576,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767813420",
      "pull_request_review_id": 2317044728,
      "id": 1767813420,
      "node_id": "PRRC_kwDOABII585pXrEs",
      "diff_hunk": "@@ -128,6 +128,22 @@ struct CCoinsCacheEntry\n     CoinsCachePair* m_next{nullptr};\n     uint8_t m_flags{0};\n \n+    //! Adding a flag also requires a self reference to the pair that contains\n+    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n+    //! flagged pair linked list.\n+    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        assert(flags & (DIRTY | FRESH));",
      "path": "src/coins.h",
      "position": null,
      "original_position": 18,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "a595328a4a95efb082b1c2dde0f1779fa423a271",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this should be `Assume`. We should prefer it since it will be compiled out for release builds and this is a hot path.",
      "created_at": "2024-09-20T01:52:06Z",
      "updated_at": "2024-09-20T02:13:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1767813420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767813420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767815543",
      "pull_request_review_id": 2317044728,
      "id": 1767815543,
      "node_id": "PRRC_kwDOABII585pXrl3",
      "diff_hunk": "@@ -156,24 +172,18 @@ struct CCoinsCacheEntry\n     explicit CCoinsCacheEntry(Coin&& coin_) noexcept : coin(std::move(coin_)) {}\n     ~CCoinsCacheEntry()\n     {\n-        ClearFlags();\n+        SetClean();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.",
      "path": "src/coins.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "a595328a4a95efb082b1c2dde0f1779fa423a271",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm not sure we should remove the extra context here about what exactly `self` and `sentinel` are and where they come from.",
      "created_at": "2024-09-20T01:56:13Z",
      "updated_at": "2024-09-20T02:13:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1767815543",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767815543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769603571",
      "pull_request_review_id": 2319844489,
      "id": 1769603571,
      "node_id": "PRRC_kwDOABII585pegHz",
      "diff_hunk": "@@ -156,24 +172,18 @@ struct CCoinsCacheEntry\n     explicit CCoinsCacheEntry(Coin&& coin_) noexcept : coin(std::move(coin_)) {}\n     ~CCoinsCacheEntry()\n     {\n-        ClearFlags();\n+        SetClean();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.",
      "path": "src/coins.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "a595328a4a95efb082b1c2dde0f1779fa423a271",
      "in_reply_to_id": 1767815543,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was moved to the `AddFlags` already - even though it seems to me the code already makes all of that clear:\r\n\r\n> Adding a flag also requires a self reference to the pair that contains this entry in the CCoinsCache map\r\n\r\n`AddFlags(uint8_t flags, CoinsCachePair& self`\r\n\r\n> and a reference to the sentinel of the flagged pair linked list\r\n\r\n, `CoinsCachePair& sentinel`",
      "created_at": "2024-09-21T15:50:42Z",
      "updated_at": "2024-09-21T15:50:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1769603571",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769603571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769603574",
      "pull_request_review_id": 2319844497,
      "id": 1769603574,
      "node_id": "PRRC_kwDOABII585pegH2",
      "diff_hunk": "@@ -128,6 +128,22 @@ struct CCoinsCacheEntry\n     CoinsCachePair* m_next{nullptr};\n     uint8_t m_flags{0};\n \n+    //! Adding a flag also requires a self reference to the pair that contains\n+    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n+    //! flagged pair linked list.\n+    inline void AddFlags(uint8_t flags, CoinsCachePair& self, CoinsCachePair& sentinel) noexcept\n+    {\n+        assert(flags & (DIRTY | FRESH));",
      "path": "src/coins.h",
      "position": null,
      "original_position": 18,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "a595328a4a95efb082b1c2dde0f1779fa423a271",
      "in_reply_to_id": 1767813420,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was meant to be a temporary transition, since we're removing the rest of the flags in your PR - but I'm fine with `Assume` as well - changed.",
      "created_at": "2024-09-21T15:50:44Z",
      "updated_at": "2024-09-21T15:50:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1769603574",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769603574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770588271",
      "pull_request_review_id": 2320884532,
      "id": 1770588271,
      "node_id": "PRRC_kwDOABII585piQhv",
      "diff_hunk": "@@ -156,24 +172,18 @@ struct CCoinsCacheEntry\n     explicit CCoinsCacheEntry(Coin&& coin_) noexcept : coin(std::move(coin_)) {}\n     ~CCoinsCacheEntry()\n     {\n-        ClearFlags();\n+        SetClean();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.",
      "path": "src/coins.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "a595328a4a95efb082b1c2dde0f1779fa423a271",
      "in_reply_to_id": 1767815543,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah yes I see it was moved up with `AddFlags` to private. Maybe better to keep it on `SetDirty`.\r\n\r\n> Adding a flag also requires a self reference to the pair that contains this entry in the CCoinsCache map\r\n\r\nThere's no context in the method signature that it is an entry in the `CCoinsCache` map.\r\n\r\n> and a reference to the sentinel of the flagged pair linked list\r\n\r\nThere's no context in the method signature about a flagged linked list.",
      "created_at": "2024-09-22T16:22:30Z",
      "updated_at": "2024-09-22T16:22:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1770588271",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770588271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770589885",
      "pull_request_review_id": 2320885732,
      "id": 1770589885,
      "node_id": "PRRC_kwDOABII585piQ69",
      "diff_hunk": "@@ -562,20 +564,57 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+struct CoinEntry {\n+    enum class State { CLEAN, DIRTY, FRESH, DIRTY_FRESH };\n+\n+    const CAmount value;\n+    const State state;\n+\n+    CoinEntry(CAmount v, State s) : value(v), state(s) {}",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "1a89a97b1ab87c3be9629a49711c074127e4acd2",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    constexpr CoinEntry(CAmount v, State s) : value(v), state(s) {}\r\n```\r\nthen all `const static MaybeCoin` declarations below can be made `constexpr`.",
      "created_at": "2024-09-22T16:31:04Z",
      "updated_at": "2024-09-22T16:44:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1770589885",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770589885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 573,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770592376",
      "pull_request_review_id": 2320887726,
      "id": 1770592376,
      "node_id": "PRRC_kwDOABII585piRh4",
      "diff_hunk": "@@ -156,24 +172,18 @@ struct CCoinsCacheEntry\n     explicit CCoinsCacheEntry(Coin&& coin_) noexcept : coin(std::move(coin_)) {}\n     ~CCoinsCacheEntry()\n     {\n-        ClearFlags();\n+        SetClean();\n     }\n \n-    //! Adding a flag also requires a self reference to the pair that contains\n-    //! this entry in the CCoinsCache map and a reference to the sentinel of the\n-    //! flagged pair linked list.",
      "path": "src/coins.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "a595328a4a95efb082b1c2dde0f1779fa423a271",
      "in_reply_to_id": 1767815543,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> There's no context in the method signature that it is an entry in the CCoinsCache map\r\n\r\nisn't that what `CoinsCachePair` means?\r\n\r\n> method signature about a flagged linked list\r\n\r\nThe sentinel hints at it.\r\n\r\nBut, again, I kept the methods for AddFlags - and don't want to duplicate it for SetFresh and  SetDirty.",
      "created_at": "2024-09-22T16:46:07Z",
      "updated_at": "2024-09-22T16:46:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1770592376",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770592376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770595622",
      "pull_request_review_id": 2320890297,
      "id": 1770595622,
      "node_id": "PRRC_kwDOABII585piSUm",
      "diff_hunk": "@@ -589,314 +628,245 @@ static void SetCoinsValue(CAmount value, Coin& coin)\n     }\n }\n \n-static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, CAmount value, char flags)\n+static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, const CoinEntry& cache_coin)\n {\n-    if (value == ABSENT) {\n-        assert(flags == NO_ENTRY);\n-        return 0;\n-    }\n-    assert(flags != NO_ENTRY);\n     CCoinsCacheEntry entry;\n-    SetCoinsValue(value, entry.coin);\n-    auto inserted = map.emplace(OUTPOINT, std::move(entry));\n-    assert(inserted.second);\n-    inserted.first->second.AddFlags(flags, *inserted.first, sentinel);\n-    return inserted.first->second.coin.DynamicMemoryUsage();\n+    SetCoinsValue(cache_coin.value, entry.coin);\n+    auto [iter, inserted] = map.emplace(OUTPOINT, std::move(entry));\n+    assert(inserted);\n+    if (cache_coin.IsDirty()) iter->second.SetDirty(*iter, sentinel);\n+    if (cache_coin.IsFresh()) iter->second.SetFresh(*iter, sentinel);\n+    return iter->second.coin.DynamicMemoryUsage();\n }\n \n-void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags, const COutPoint& outp = OUTPOINT)\n+MaybeCoin GetCoinsMapEntry(const CCoinsMap& map, const COutPoint& outp = OUTPOINT)\n {\n-    auto it = map.find(outp);\n-    if (it == map.end()) {\n-        value = ABSENT;\n-        flags = NO_ENTRY;\n-    } else {\n-        if (it->second.coin.IsSpent()) {\n-            value = SPENT;\n-        } else {\n-            value = it->second.coin.out.nValue;\n-        }\n-        flags = it->second.GetFlags();\n-        assert(flags != NO_ENTRY);\n+    if (auto it{map.find(outp)}; it != map.end()) {\n+        return CoinEntry{\n+            it->second.coin.IsSpent() ? SPENT : it->second.coin.out.nValue,\n+            CoinEntry::ToState(it->second.IsDirty(), it->second.IsFresh())};\n     }\n+    return MISSING;\n }\n \n-void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+void WriteCoinsViewEntry(CCoinsView& view, const MaybeCoin& cache_coin)\n {\n     CoinsCachePair sentinel{};\n     sentinel.second.SelfRef(sentinel);\n     CCoinsMapMemoryResource resource;\n     CCoinsMap map{0, CCoinsMap::hasher{}, CCoinsMap::key_equal{}, &resource};\n-    auto usage{InsertCoinsMapEntry(map, sentinel, value, flags)};\n+    auto usage{cache_coin ? InsertCoinsMapEntry(map, sentinel, *cache_coin) : 0};\n     auto cursor{CoinsViewCacheCursor(usage, sentinel, map, /*will_erase=*/true)};\n     BOOST_CHECK(view.BatchWrite(cursor, {}));\n }\n \n class SingleEntryCacheTest\n {\n public:\n-    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    SingleEntryCacheTest(CAmount base_value, const MaybeCoin& cache_coin)\n     {\n-        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n-        cache.usage() += InsertCoinsMapEntry(cache.map(), cache.sentinel(), cache_value, cache_flags);\n+        auto base_cache_coin{base_value == ABSENT ? MISSING : CoinEntry{base_value, CoinEntry::State::DIRTY}};\n+        WriteCoinsViewEntry(base, base_cache_coin);\n+        if (cache_coin) cache.usage() += InsertCoinsMapEntry(cache.map(), cache.sentinel(), *cache_coin);\n     }\n \n     CCoinsView root;\n     CCoinsViewCacheTest base{&root};\n     CCoinsViewCacheTest cache{&base};\n };\n \n-static void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckAccessCoin(CAmount base_value, const MaybeCoin& cache_coin, MaybeCoin expected)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n     test.cache.AccessCoin(OUTPOINT);\n     test.cache.SelfTest(/*sanity_check=*/false);\n-\n-    CAmount result_value;\n-    char result_flags;\n-    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+    BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected);\n }\n \n BOOST_AUTO_TEST_CASE(ccoins_access)\n {\n     /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, and checking the resulting entry in the cache after\n      * the access.\n-     *\n-     *               Base    Cache   Result  Cache        Result\n-     *               Value   Value   Value   Flags        Flags\n+     *                  Base        Cache               Expected\n      */\n-    CheckAccessCoin(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckAccessCoin(base_value, MISSING,            base_value == VALUE1 ? VALUE1_CLEAN : MISSING);\n+\n+        CheckAccessCoin(base_value, SPENT_CLEAN,        SPENT_CLEAN       );\n+        CheckAccessCoin(base_value, SPENT_FRESH,        SPENT_FRESH       );\n+        CheckAccessCoin(base_value, SPENT_DIRTY,        SPENT_DIRTY       );\n+        CheckAccessCoin(base_value, SPENT_DIRTY_FRESH,  SPENT_DIRTY_FRESH );\n+\n+        CheckAccessCoin(base_value, VALUE2_CLEAN,       VALUE2_CLEAN      );\n+        CheckAccessCoin(base_value, VALUE2_FRESH,       VALUE2_FRESH      );\n+        CheckAccessCoin(base_value, VALUE2_DIRTY,       VALUE2_DIRTY      );\n+        CheckAccessCoin(base_value, VALUE2_DIRTY_FRESH, VALUE2_DIRTY_FRESH);\n+    }\n }\n \n-static void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckSpendCoins(CAmount base_value, const MaybeCoin& cache_coin, MaybeCoin expected)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n     test.cache.SpendCoin(OUTPOINT);\n     test.cache.SelfTest();\n-\n-    CAmount result_value;\n-    char result_flags;\n-    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-};\n+    BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected);\n+}\n \n BOOST_AUTO_TEST_CASE(ccoins_spend)\n {\n     /* Check SpendCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, spending, and then checking\n      * the resulting entry in the cache after the modification.\n-     *\n-     *              Base    Cache   Result  Cache        Result\n-     *              Value   Value   Value   Flags        Flags\n+     *                  Base        Cache               Expected\n      */\n-    CheckSpendCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(ABSENT, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(ABSENT, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(ABSENT, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(ABSENT, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(SPENT , SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(SPENT , SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(SPENT , VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(SPENT , VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(SPENT , VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, ABSENT, SPENT , NO_ENTRY   , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(VALUE1, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(VALUE1, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckSpendCoins(base_value, MISSING,            base_value == VALUE1 ? SPENT_DIRTY : MISSING);\n+\n+        CheckSpendCoins(base_value, SPENT_CLEAN,        SPENT_DIRTY);\n+        CheckSpendCoins(base_value, SPENT_FRESH,        MISSING    );\n+        CheckSpendCoins(base_value, SPENT_DIRTY,        SPENT_DIRTY);\n+        CheckSpendCoins(base_value, SPENT_DIRTY_FRESH,  MISSING    );\n+\n+        CheckSpendCoins(base_value, VALUE2_CLEAN,       SPENT_DIRTY);\n+        CheckSpendCoins(base_value, VALUE2_FRESH,       MISSING    );\n+        CheckSpendCoins(base_value, VALUE2_DIRTY,       SPENT_DIRTY);\n+        CheckSpendCoins(base_value, VALUE2_DIRTY_FRESH, MISSING    );\n+    }\n }\n \n-static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+static void CheckAddCoin(CAmount base_value, CAmount modify_value, const MaybeCoin& cache_coin, const CoinOrError expected, bool coinbase)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n-\n-    CAmount result_value;\n-    char result_flags;\n-    try {\n-        CTxOut output;\n-        output.nValue = modify_value;\n-        test.cache.AddCoin(OUTPOINT, Coin(std::move(output), 1, coinbase), coinbase);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n+    bool possible_overwrite{coinbase};\n+    auto add_coin{[&]() { test.cache.AddCoin(OUTPOINT, Coin(CTxOut(modify_value, CScript()), 1, coinbase), possible_overwrite); }};\n+    if (auto* expected_coin{std::get_if<MaybeCoin>(&expected)}) {\n+        add_coin();\n         test.cache.SelfTest();\n-        GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    } catch (std::logic_error&) {\n-        result_value = FAIL;\n-        result_flags = NO_ENTRY;\n+        BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), *expected_coin);\n+    } else {\n+        BOOST_CHECK_EXCEPTION(add_coin(), std::logic_error, HasReason(std::get<std::string>(expected)));\n     }\n-\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-}\n-\n-// Simple wrapper for CheckAddCoinBase function above that loops through\n-// different possible base_values, making sure each one gives the same results.\n-// This wrapper lets the coins_add test below be shorter and less repetitive,\n-// while still verifying that the CoinsViewCache::AddCoin implementation\n-// ignores base values.\n-template <typename... Args>\n-static void CheckAddCoin(Args&&... args)\n-{\n-    for (const CAmount base_value : {ABSENT, SPENT, VALUE1})\n-        CheckAddCoinBase(base_value, std::forward<Args>(args)...);\n }\n \n BOOST_AUTO_TEST_CASE(ccoins_add)\n {\n     /* Check AddCoin behavior, requesting a new coin from a cache view,\n      * writing a modification to the coin, and then checking the resulting\n      * entry in the cache after the modification. Verify behavior with the\n-     * AddCoin possible_overwrite argument set to false, and to true.\n-     *\n-     *           Cache   Write   Result  Cache        Result       possible_overwrite\n-     *           Value   Value   Value   Flags        Flags\n+     * AddCoin coinbase argument set to false, and to true.\n+     *               Base        Write   Cache               Expected              Coinbase\n      */\n-    CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH, false);\n-    CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , 0          , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, 0          , DIRTY      , true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , FRESH      , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , DIRTY      , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , DIRTY|FRESH, NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckAddCoin(base_value, VALUE3, MISSING,            VALUE3_DIRTY_FRESH,   false);",
      "path": "src/test/coins_tests.cpp",
      "position": 370,
      "original_position": 364,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "1a89a97b1ab87c3be9629a49711c074127e4acd2",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can we just hardcode value3 for write? It's the same for every case here.",
      "created_at": "2024-09-22T17:05:39Z",
      "updated_at": "2024-09-22T17:09:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1770595622",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770595622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 761,
      "original_line": 761,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770597044",
      "pull_request_review_id": 2320891544,
      "id": 1770597044,
      "node_id": "PRRC_kwDOABII585piSq0",
      "diff_hunk": "@@ -589,314 +628,245 @@ static void SetCoinsValue(CAmount value, Coin& coin)\n     }\n }\n \n-static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, CAmount value, char flags)\n+static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, const CoinEntry& cache_coin)\n {\n-    if (value == ABSENT) {\n-        assert(flags == NO_ENTRY);\n-        return 0;\n-    }\n-    assert(flags != NO_ENTRY);\n     CCoinsCacheEntry entry;\n-    SetCoinsValue(value, entry.coin);\n-    auto inserted = map.emplace(OUTPOINT, std::move(entry));\n-    assert(inserted.second);\n-    inserted.first->second.AddFlags(flags, *inserted.first, sentinel);\n-    return inserted.first->second.coin.DynamicMemoryUsage();\n+    SetCoinsValue(cache_coin.value, entry.coin);\n+    auto [iter, inserted] = map.emplace(OUTPOINT, std::move(entry));\n+    assert(inserted);\n+    if (cache_coin.IsDirty()) iter->second.SetDirty(*iter, sentinel);\n+    if (cache_coin.IsFresh()) iter->second.SetFresh(*iter, sentinel);\n+    return iter->second.coin.DynamicMemoryUsage();\n }\n \n-void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags, const COutPoint& outp = OUTPOINT)\n+MaybeCoin GetCoinsMapEntry(const CCoinsMap& map, const COutPoint& outp = OUTPOINT)\n {\n-    auto it = map.find(outp);\n-    if (it == map.end()) {\n-        value = ABSENT;\n-        flags = NO_ENTRY;\n-    } else {\n-        if (it->second.coin.IsSpent()) {\n-            value = SPENT;\n-        } else {\n-            value = it->second.coin.out.nValue;\n-        }\n-        flags = it->second.GetFlags();\n-        assert(flags != NO_ENTRY);\n+    if (auto it{map.find(outp)}; it != map.end()) {\n+        return CoinEntry{\n+            it->second.coin.IsSpent() ? SPENT : it->second.coin.out.nValue,\n+            CoinEntry::ToState(it->second.IsDirty(), it->second.IsFresh())};\n     }\n+    return MISSING;\n }\n \n-void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+void WriteCoinsViewEntry(CCoinsView& view, const MaybeCoin& cache_coin)\n {\n     CoinsCachePair sentinel{};\n     sentinel.second.SelfRef(sentinel);\n     CCoinsMapMemoryResource resource;\n     CCoinsMap map{0, CCoinsMap::hasher{}, CCoinsMap::key_equal{}, &resource};\n-    auto usage{InsertCoinsMapEntry(map, sentinel, value, flags)};\n+    auto usage{cache_coin ? InsertCoinsMapEntry(map, sentinel, *cache_coin) : 0};\n     auto cursor{CoinsViewCacheCursor(usage, sentinel, map, /*will_erase=*/true)};\n     BOOST_CHECK(view.BatchWrite(cursor, {}));\n }\n \n class SingleEntryCacheTest\n {\n public:\n-    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    SingleEntryCacheTest(CAmount base_value, const MaybeCoin& cache_coin)\n     {\n-        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n-        cache.usage() += InsertCoinsMapEntry(cache.map(), cache.sentinel(), cache_value, cache_flags);\n+        auto base_cache_coin{base_value == ABSENT ? MISSING : CoinEntry{base_value, CoinEntry::State::DIRTY}};\n+        WriteCoinsViewEntry(base, base_cache_coin);\n+        if (cache_coin) cache.usage() += InsertCoinsMapEntry(cache.map(), cache.sentinel(), *cache_coin);\n     }\n \n     CCoinsView root;\n     CCoinsViewCacheTest base{&root};\n     CCoinsViewCacheTest cache{&base};\n };\n \n-static void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckAccessCoin(CAmount base_value, const MaybeCoin& cache_coin, MaybeCoin expected)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n     test.cache.AccessCoin(OUTPOINT);\n     test.cache.SelfTest(/*sanity_check=*/false);\n-\n-    CAmount result_value;\n-    char result_flags;\n-    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+    BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected);\n }\n \n BOOST_AUTO_TEST_CASE(ccoins_access)\n {\n     /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, and checking the resulting entry in the cache after\n      * the access.\n-     *\n-     *               Base    Cache   Result  Cache        Result\n-     *               Value   Value   Value   Flags        Flags\n+     *                  Base        Cache               Expected\n      */\n-    CheckAccessCoin(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckAccessCoin(base_value, MISSING,            base_value == VALUE1 ? VALUE1_CLEAN : MISSING);\n+\n+        CheckAccessCoin(base_value, SPENT_CLEAN,        SPENT_CLEAN       );\n+        CheckAccessCoin(base_value, SPENT_FRESH,        SPENT_FRESH       );\n+        CheckAccessCoin(base_value, SPENT_DIRTY,        SPENT_DIRTY       );\n+        CheckAccessCoin(base_value, SPENT_DIRTY_FRESH,  SPENT_DIRTY_FRESH );\n+\n+        CheckAccessCoin(base_value, VALUE2_CLEAN,       VALUE2_CLEAN      );\n+        CheckAccessCoin(base_value, VALUE2_FRESH,       VALUE2_FRESH      );\n+        CheckAccessCoin(base_value, VALUE2_DIRTY,       VALUE2_DIRTY      );\n+        CheckAccessCoin(base_value, VALUE2_DIRTY_FRESH, VALUE2_DIRTY_FRESH);\n+    }\n }\n \n-static void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckSpendCoins(CAmount base_value, const MaybeCoin& cache_coin, MaybeCoin expected)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n     test.cache.SpendCoin(OUTPOINT);\n     test.cache.SelfTest();\n-\n-    CAmount result_value;\n-    char result_flags;\n-    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-};\n+    BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected);\n+}\n \n BOOST_AUTO_TEST_CASE(ccoins_spend)\n {\n     /* Check SpendCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, spending, and then checking\n      * the resulting entry in the cache after the modification.\n-     *\n-     *              Base    Cache   Result  Cache        Result\n-     *              Value   Value   Value   Flags        Flags\n+     *                  Base        Cache               Expected\n      */\n-    CheckSpendCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(ABSENT, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(ABSENT, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(ABSENT, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(ABSENT, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(SPENT , SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(SPENT , SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(SPENT , VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(SPENT , VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(SPENT , VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, ABSENT, SPENT , NO_ENTRY   , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(VALUE1, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(VALUE1, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckSpendCoins(base_value, MISSING,            base_value == VALUE1 ? SPENT_DIRTY : MISSING);\n+\n+        CheckSpendCoins(base_value, SPENT_CLEAN,        SPENT_DIRTY);\n+        CheckSpendCoins(base_value, SPENT_FRESH,        MISSING    );\n+        CheckSpendCoins(base_value, SPENT_DIRTY,        SPENT_DIRTY);\n+        CheckSpendCoins(base_value, SPENT_DIRTY_FRESH,  MISSING    );\n+\n+        CheckSpendCoins(base_value, VALUE2_CLEAN,       SPENT_DIRTY);\n+        CheckSpendCoins(base_value, VALUE2_FRESH,       MISSING    );\n+        CheckSpendCoins(base_value, VALUE2_DIRTY,       SPENT_DIRTY);\n+        CheckSpendCoins(base_value, VALUE2_DIRTY_FRESH, MISSING    );\n+    }\n }\n \n-static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+static void CheckAddCoin(CAmount base_value, CAmount modify_value, const MaybeCoin& cache_coin, const CoinOrError expected, bool coinbase)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n-\n-    CAmount result_value;\n-    char result_flags;\n-    try {\n-        CTxOut output;\n-        output.nValue = modify_value;\n-        test.cache.AddCoin(OUTPOINT, Coin(std::move(output), 1, coinbase), coinbase);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n+    bool possible_overwrite{coinbase};\n+    auto add_coin{[&]() { test.cache.AddCoin(OUTPOINT, Coin(CTxOut(modify_value, CScript()), 1, coinbase), possible_overwrite); }};\n+    if (auto* expected_coin{std::get_if<MaybeCoin>(&expected)}) {\n+        add_coin();\n         test.cache.SelfTest();\n-        GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    } catch (std::logic_error&) {\n-        result_value = FAIL;\n-        result_flags = NO_ENTRY;\n+        BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), *expected_coin);\n+    } else {\n+        BOOST_CHECK_EXCEPTION(add_coin(), std::logic_error, HasReason(std::get<std::string>(expected)));\n     }\n-\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-}\n-\n-// Simple wrapper for CheckAddCoinBase function above that loops through\n-// different possible base_values, making sure each one gives the same results.\n-// This wrapper lets the coins_add test below be shorter and less repetitive,\n-// while still verifying that the CoinsViewCache::AddCoin implementation\n-// ignores base values.\n-template <typename... Args>\n-static void CheckAddCoin(Args&&... args)\n-{\n-    for (const CAmount base_value : {ABSENT, SPENT, VALUE1})\n-        CheckAddCoinBase(base_value, std::forward<Args>(args)...);\n }\n \n BOOST_AUTO_TEST_CASE(ccoins_add)\n {\n     /* Check AddCoin behavior, requesting a new coin from a cache view,\n      * writing a modification to the coin, and then checking the resulting\n      * entry in the cache after the modification. Verify behavior with the\n-     * AddCoin possible_overwrite argument set to false, and to true.\n-     *\n-     *           Cache   Write   Result  Cache        Result       possible_overwrite\n-     *           Value   Value   Value   Flags        Flags\n+     * AddCoin coinbase argument set to false, and to true.\n+     *               Base        Write   Cache               Expected              Coinbase\n      */\n-    CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH, false);\n-    CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , 0          , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, 0          , DIRTY      , true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , FRESH      , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , DIRTY      , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , DIRTY|FRESH, NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckAddCoin(base_value, VALUE3, MISSING,            VALUE3_DIRTY_FRESH,   false);",
      "path": "src/test/coins_tests.cpp",
      "position": 370,
      "original_position": 364,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "1a89a97b1ab87c3be9629a49711c074127e4acd2",
      "in_reply_to_id": 1770595622,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't that be inconsistent?\r\nIn every other case, the constant contained both values.",
      "created_at": "2024-09-22T17:15:37Z",
      "updated_at": "2024-09-22T17:15:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1770597044",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770597044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 761,
      "original_line": 761,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770598205",
      "pull_request_review_id": 2320892531,
      "id": 1770598205,
      "node_id": "PRRC_kwDOABII585piS89",
      "diff_hunk": "@@ -589,314 +628,245 @@ static void SetCoinsValue(CAmount value, Coin& coin)\n     }\n }\n \n-static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, CAmount value, char flags)\n+static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, const CoinEntry& cache_coin)\n {\n-    if (value == ABSENT) {\n-        assert(flags == NO_ENTRY);\n-        return 0;\n-    }\n-    assert(flags != NO_ENTRY);\n     CCoinsCacheEntry entry;\n-    SetCoinsValue(value, entry.coin);\n-    auto inserted = map.emplace(OUTPOINT, std::move(entry));\n-    assert(inserted.second);\n-    inserted.first->second.AddFlags(flags, *inserted.first, sentinel);\n-    return inserted.first->second.coin.DynamicMemoryUsage();\n+    SetCoinsValue(cache_coin.value, entry.coin);\n+    auto [iter, inserted] = map.emplace(OUTPOINT, std::move(entry));\n+    assert(inserted);\n+    if (cache_coin.IsDirty()) iter->second.SetDirty(*iter, sentinel);\n+    if (cache_coin.IsFresh()) iter->second.SetFresh(*iter, sentinel);\n+    return iter->second.coin.DynamicMemoryUsage();\n }\n \n-void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags, const COutPoint& outp = OUTPOINT)\n+MaybeCoin GetCoinsMapEntry(const CCoinsMap& map, const COutPoint& outp = OUTPOINT)\n {\n-    auto it = map.find(outp);\n-    if (it == map.end()) {\n-        value = ABSENT;\n-        flags = NO_ENTRY;\n-    } else {\n-        if (it->second.coin.IsSpent()) {\n-            value = SPENT;\n-        } else {\n-            value = it->second.coin.out.nValue;\n-        }\n-        flags = it->second.GetFlags();\n-        assert(flags != NO_ENTRY);\n+    if (auto it{map.find(outp)}; it != map.end()) {\n+        return CoinEntry{\n+            it->second.coin.IsSpent() ? SPENT : it->second.coin.out.nValue,\n+            CoinEntry::ToState(it->second.IsDirty(), it->second.IsFresh())};\n     }\n+    return MISSING;\n }\n \n-void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+void WriteCoinsViewEntry(CCoinsView& view, const MaybeCoin& cache_coin)\n {\n     CoinsCachePair sentinel{};\n     sentinel.second.SelfRef(sentinel);\n     CCoinsMapMemoryResource resource;\n     CCoinsMap map{0, CCoinsMap::hasher{}, CCoinsMap::key_equal{}, &resource};\n-    auto usage{InsertCoinsMapEntry(map, sentinel, value, flags)};\n+    auto usage{cache_coin ? InsertCoinsMapEntry(map, sentinel, *cache_coin) : 0};\n     auto cursor{CoinsViewCacheCursor(usage, sentinel, map, /*will_erase=*/true)};\n     BOOST_CHECK(view.BatchWrite(cursor, {}));\n }\n \n class SingleEntryCacheTest\n {\n public:\n-    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    SingleEntryCacheTest(CAmount base_value, const MaybeCoin& cache_coin)\n     {\n-        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n-        cache.usage() += InsertCoinsMapEntry(cache.map(), cache.sentinel(), cache_value, cache_flags);\n+        auto base_cache_coin{base_value == ABSENT ? MISSING : CoinEntry{base_value, CoinEntry::State::DIRTY}};\n+        WriteCoinsViewEntry(base, base_cache_coin);\n+        if (cache_coin) cache.usage() += InsertCoinsMapEntry(cache.map(), cache.sentinel(), *cache_coin);\n     }\n \n     CCoinsView root;\n     CCoinsViewCacheTest base{&root};\n     CCoinsViewCacheTest cache{&base};\n };\n \n-static void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckAccessCoin(CAmount base_value, const MaybeCoin& cache_coin, MaybeCoin expected)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n     test.cache.AccessCoin(OUTPOINT);\n     test.cache.SelfTest(/*sanity_check=*/false);\n-\n-    CAmount result_value;\n-    char result_flags;\n-    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+    BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected);\n }\n \n BOOST_AUTO_TEST_CASE(ccoins_access)\n {\n     /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, and checking the resulting entry in the cache after\n      * the access.\n-     *\n-     *               Base    Cache   Result  Cache        Result\n-     *               Value   Value   Value   Flags        Flags\n+     *                  Base        Cache               Expected\n      */\n-    CheckAccessCoin(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckAccessCoin(base_value, MISSING,            base_value == VALUE1 ? VALUE1_CLEAN : MISSING);\n+\n+        CheckAccessCoin(base_value, SPENT_CLEAN,        SPENT_CLEAN       );\n+        CheckAccessCoin(base_value, SPENT_FRESH,        SPENT_FRESH       );\n+        CheckAccessCoin(base_value, SPENT_DIRTY,        SPENT_DIRTY       );\n+        CheckAccessCoin(base_value, SPENT_DIRTY_FRESH,  SPENT_DIRTY_FRESH );\n+\n+        CheckAccessCoin(base_value, VALUE2_CLEAN,       VALUE2_CLEAN      );\n+        CheckAccessCoin(base_value, VALUE2_FRESH,       VALUE2_FRESH      );\n+        CheckAccessCoin(base_value, VALUE2_DIRTY,       VALUE2_DIRTY      );\n+        CheckAccessCoin(base_value, VALUE2_DIRTY_FRESH, VALUE2_DIRTY_FRESH);\n+    }\n }\n \n-static void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckSpendCoins(CAmount base_value, const MaybeCoin& cache_coin, MaybeCoin expected)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n     test.cache.SpendCoin(OUTPOINT);\n     test.cache.SelfTest();\n-\n-    CAmount result_value;\n-    char result_flags;\n-    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-};\n+    BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected);\n+}\n \n BOOST_AUTO_TEST_CASE(ccoins_spend)\n {\n     /* Check SpendCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, spending, and then checking\n      * the resulting entry in the cache after the modification.\n-     *\n-     *              Base    Cache   Result  Cache        Result\n-     *              Value   Value   Value   Flags        Flags\n+     *                  Base        Cache               Expected\n      */\n-    CheckSpendCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(ABSENT, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(ABSENT, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(ABSENT, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(ABSENT, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(SPENT , SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(SPENT , SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(SPENT , VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(SPENT , VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(SPENT , VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, ABSENT, SPENT , NO_ENTRY   , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(VALUE1, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(VALUE1, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckSpendCoins(base_value, MISSING,            base_value == VALUE1 ? SPENT_DIRTY : MISSING);\n+\n+        CheckSpendCoins(base_value, SPENT_CLEAN,        SPENT_DIRTY);\n+        CheckSpendCoins(base_value, SPENT_FRESH,        MISSING    );\n+        CheckSpendCoins(base_value, SPENT_DIRTY,        SPENT_DIRTY);\n+        CheckSpendCoins(base_value, SPENT_DIRTY_FRESH,  MISSING    );\n+\n+        CheckSpendCoins(base_value, VALUE2_CLEAN,       SPENT_DIRTY);\n+        CheckSpendCoins(base_value, VALUE2_FRESH,       MISSING    );\n+        CheckSpendCoins(base_value, VALUE2_DIRTY,       SPENT_DIRTY);\n+        CheckSpendCoins(base_value, VALUE2_DIRTY_FRESH, MISSING    );\n+    }\n }\n \n-static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+static void CheckAddCoin(CAmount base_value, CAmount modify_value, const MaybeCoin& cache_coin, const CoinOrError expected, bool coinbase)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n-\n-    CAmount result_value;\n-    char result_flags;\n-    try {\n-        CTxOut output;\n-        output.nValue = modify_value;\n-        test.cache.AddCoin(OUTPOINT, Coin(std::move(output), 1, coinbase), coinbase);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n+    bool possible_overwrite{coinbase};\n+    auto add_coin{[&]() { test.cache.AddCoin(OUTPOINT, Coin(CTxOut(modify_value, CScript()), 1, coinbase), possible_overwrite); }};\n+    if (auto* expected_coin{std::get_if<MaybeCoin>(&expected)}) {\n+        add_coin();\n         test.cache.SelfTest();\n-        GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    } catch (std::logic_error&) {\n-        result_value = FAIL;\n-        result_flags = NO_ENTRY;\n+        BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), *expected_coin);\n+    } else {\n+        BOOST_CHECK_EXCEPTION(add_coin(), std::logic_error, HasReason(std::get<std::string>(expected)));\n     }\n-\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-}\n-\n-// Simple wrapper for CheckAddCoinBase function above that loops through\n-// different possible base_values, making sure each one gives the same results.\n-// This wrapper lets the coins_add test below be shorter and less repetitive,\n-// while still verifying that the CoinsViewCache::AddCoin implementation\n-// ignores base values.\n-template <typename... Args>\n-static void CheckAddCoin(Args&&... args)\n-{\n-    for (const CAmount base_value : {ABSENT, SPENT, VALUE1})\n-        CheckAddCoinBase(base_value, std::forward<Args>(args)...);\n }\n \n BOOST_AUTO_TEST_CASE(ccoins_add)\n {\n     /* Check AddCoin behavior, requesting a new coin from a cache view,\n      * writing a modification to the coin, and then checking the resulting\n      * entry in the cache after the modification. Verify behavior with the\n-     * AddCoin possible_overwrite argument set to false, and to true.\n-     *\n-     *           Cache   Write   Result  Cache        Result       possible_overwrite\n-     *           Value   Value   Value   Flags        Flags\n+     * AddCoin coinbase argument set to false, and to true.\n+     *               Base        Write   Cache               Expected              Coinbase\n      */\n-    CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH, false);\n-    CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , 0          , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, 0          , DIRTY      , true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , FRESH      , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , DIRTY      , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , DIRTY|FRESH, NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckAddCoin(base_value, VALUE3, MISSING,            VALUE3_DIRTY_FRESH,   false);",
      "path": "src/test/coins_tests.cpp",
      "position": 370,
      "original_position": 364,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "1a89a97b1ab87c3be9629a49711c074127e4acd2",
      "in_reply_to_id": 1770595622,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I mean, if you look at the `Write` column, each value is `VALUE3`.",
      "created_at": "2024-09-22T17:22:55Z",
      "updated_at": "2024-09-22T17:22:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1770598205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770598205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 761,
      "original_line": 761,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771218843",
      "pull_request_review_id": 2321885054,
      "id": 1771218843,
      "node_id": "PRRC_kwDOABII585pkqeb",
      "diff_hunk": "@@ -589,314 +628,245 @@ static void SetCoinsValue(CAmount value, Coin& coin)\n     }\n }\n \n-static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, CAmount value, char flags)\n+static size_t InsertCoinsMapEntry(CCoinsMap& map, CoinsCachePair& sentinel, const CoinEntry& cache_coin)\n {\n-    if (value == ABSENT) {\n-        assert(flags == NO_ENTRY);\n-        return 0;\n-    }\n-    assert(flags != NO_ENTRY);\n     CCoinsCacheEntry entry;\n-    SetCoinsValue(value, entry.coin);\n-    auto inserted = map.emplace(OUTPOINT, std::move(entry));\n-    assert(inserted.second);\n-    inserted.first->second.AddFlags(flags, *inserted.first, sentinel);\n-    return inserted.first->second.coin.DynamicMemoryUsage();\n+    SetCoinsValue(cache_coin.value, entry.coin);\n+    auto [iter, inserted] = map.emplace(OUTPOINT, std::move(entry));\n+    assert(inserted);\n+    if (cache_coin.IsDirty()) iter->second.SetDirty(*iter, sentinel);\n+    if (cache_coin.IsFresh()) iter->second.SetFresh(*iter, sentinel);\n+    return iter->second.coin.DynamicMemoryUsage();\n }\n \n-void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags, const COutPoint& outp = OUTPOINT)\n+MaybeCoin GetCoinsMapEntry(const CCoinsMap& map, const COutPoint& outp = OUTPOINT)\n {\n-    auto it = map.find(outp);\n-    if (it == map.end()) {\n-        value = ABSENT;\n-        flags = NO_ENTRY;\n-    } else {\n-        if (it->second.coin.IsSpent()) {\n-            value = SPENT;\n-        } else {\n-            value = it->second.coin.out.nValue;\n-        }\n-        flags = it->second.GetFlags();\n-        assert(flags != NO_ENTRY);\n+    if (auto it{map.find(outp)}; it != map.end()) {\n+        return CoinEntry{\n+            it->second.coin.IsSpent() ? SPENT : it->second.coin.out.nValue,\n+            CoinEntry::ToState(it->second.IsDirty(), it->second.IsFresh())};\n     }\n+    return MISSING;\n }\n \n-void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+void WriteCoinsViewEntry(CCoinsView& view, const MaybeCoin& cache_coin)\n {\n     CoinsCachePair sentinel{};\n     sentinel.second.SelfRef(sentinel);\n     CCoinsMapMemoryResource resource;\n     CCoinsMap map{0, CCoinsMap::hasher{}, CCoinsMap::key_equal{}, &resource};\n-    auto usage{InsertCoinsMapEntry(map, sentinel, value, flags)};\n+    auto usage{cache_coin ? InsertCoinsMapEntry(map, sentinel, *cache_coin) : 0};\n     auto cursor{CoinsViewCacheCursor(usage, sentinel, map, /*will_erase=*/true)};\n     BOOST_CHECK(view.BatchWrite(cursor, {}));\n }\n \n class SingleEntryCacheTest\n {\n public:\n-    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    SingleEntryCacheTest(CAmount base_value, const MaybeCoin& cache_coin)\n     {\n-        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n-        cache.usage() += InsertCoinsMapEntry(cache.map(), cache.sentinel(), cache_value, cache_flags);\n+        auto base_cache_coin{base_value == ABSENT ? MISSING : CoinEntry{base_value, CoinEntry::State::DIRTY}};\n+        WriteCoinsViewEntry(base, base_cache_coin);\n+        if (cache_coin) cache.usage() += InsertCoinsMapEntry(cache.map(), cache.sentinel(), *cache_coin);\n     }\n \n     CCoinsView root;\n     CCoinsViewCacheTest base{&root};\n     CCoinsViewCacheTest cache{&base};\n };\n \n-static void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckAccessCoin(CAmount base_value, const MaybeCoin& cache_coin, MaybeCoin expected)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n     test.cache.AccessCoin(OUTPOINT);\n     test.cache.SelfTest(/*sanity_check=*/false);\n-\n-    CAmount result_value;\n-    char result_flags;\n-    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+    BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected);\n }\n \n BOOST_AUTO_TEST_CASE(ccoins_access)\n {\n     /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, and checking the resulting entry in the cache after\n      * the access.\n-     *\n-     *               Base    Cache   Result  Cache        Result\n-     *               Value   Value   Value   Flags        Flags\n+     *                  Base        Cache               Expected\n      */\n-    CheckAccessCoin(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , 0          , 0          );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckAccessCoin(base_value, MISSING,            base_value == VALUE1 ? VALUE1_CLEAN : MISSING);\n+\n+        CheckAccessCoin(base_value, SPENT_CLEAN,        SPENT_CLEAN       );\n+        CheckAccessCoin(base_value, SPENT_FRESH,        SPENT_FRESH       );\n+        CheckAccessCoin(base_value, SPENT_DIRTY,        SPENT_DIRTY       );\n+        CheckAccessCoin(base_value, SPENT_DIRTY_FRESH,  SPENT_DIRTY_FRESH );\n+\n+        CheckAccessCoin(base_value, VALUE2_CLEAN,       VALUE2_CLEAN      );\n+        CheckAccessCoin(base_value, VALUE2_FRESH,       VALUE2_FRESH      );\n+        CheckAccessCoin(base_value, VALUE2_DIRTY,       VALUE2_DIRTY      );\n+        CheckAccessCoin(base_value, VALUE2_DIRTY_FRESH, VALUE2_DIRTY_FRESH);\n+    }\n }\n \n-static void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckSpendCoins(CAmount base_value, const MaybeCoin& cache_coin, MaybeCoin expected)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n     test.cache.SpendCoin(OUTPOINT);\n     test.cache.SelfTest();\n-\n-    CAmount result_value;\n-    char result_flags;\n-    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-};\n+    BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), expected);\n+}\n \n BOOST_AUTO_TEST_CASE(ccoins_spend)\n {\n     /* Check SpendCoin behavior, requesting a coin from a cache view layered on\n      * top of a base view, spending, and then checking\n      * the resulting entry in the cache after the modification.\n-     *\n-     *              Base    Cache   Result  Cache        Result\n-     *              Value   Value   Value   Flags        Flags\n+     *                  Base        Cache               Expected\n      */\n-    CheckSpendCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(ABSENT, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(ABSENT, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(ABSENT, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(ABSENT, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(SPENT , SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(SPENT , SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(SPENT , VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(SPENT , VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(SPENT , VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(SPENT , VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, ABSENT, SPENT , NO_ENTRY   , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(VALUE1, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, SPENT , 0          , DIRTY      );\n-    CheckSpendCoins(VALUE1, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, SPENT , DIRTY      , DIRTY      );\n-    CheckSpendCoins(VALUE1, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckSpendCoins(base_value, MISSING,            base_value == VALUE1 ? SPENT_DIRTY : MISSING);\n+\n+        CheckSpendCoins(base_value, SPENT_CLEAN,        SPENT_DIRTY);\n+        CheckSpendCoins(base_value, SPENT_FRESH,        MISSING    );\n+        CheckSpendCoins(base_value, SPENT_DIRTY,        SPENT_DIRTY);\n+        CheckSpendCoins(base_value, SPENT_DIRTY_FRESH,  MISSING    );\n+\n+        CheckSpendCoins(base_value, VALUE2_CLEAN,       SPENT_DIRTY);\n+        CheckSpendCoins(base_value, VALUE2_FRESH,       MISSING    );\n+        CheckSpendCoins(base_value, VALUE2_DIRTY,       SPENT_DIRTY);\n+        CheckSpendCoins(base_value, VALUE2_DIRTY_FRESH, MISSING    );\n+    }\n }\n \n-static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+static void CheckAddCoin(CAmount base_value, CAmount modify_value, const MaybeCoin& cache_coin, const CoinOrError expected, bool coinbase)\n {\n-    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n-\n-    CAmount result_value;\n-    char result_flags;\n-    try {\n-        CTxOut output;\n-        output.nValue = modify_value;\n-        test.cache.AddCoin(OUTPOINT, Coin(std::move(output), 1, coinbase), coinbase);\n+    SingleEntryCacheTest test(base_value, cache_coin);\n+    bool possible_overwrite{coinbase};\n+    auto add_coin{[&]() { test.cache.AddCoin(OUTPOINT, Coin(CTxOut(modify_value, CScript()), 1, coinbase), possible_overwrite); }};\n+    if (auto* expected_coin{std::get_if<MaybeCoin>(&expected)}) {\n+        add_coin();\n         test.cache.SelfTest();\n-        GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    } catch (std::logic_error&) {\n-        result_value = FAIL;\n-        result_flags = NO_ENTRY;\n+        BOOST_CHECK_EQUAL(GetCoinsMapEntry(test.cache.map()), *expected_coin);\n+    } else {\n+        BOOST_CHECK_EXCEPTION(add_coin(), std::logic_error, HasReason(std::get<std::string>(expected)));\n     }\n-\n-    BOOST_CHECK_EQUAL(result_value, expected_value);\n-    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n-}\n-\n-// Simple wrapper for CheckAddCoinBase function above that loops through\n-// different possible base_values, making sure each one gives the same results.\n-// This wrapper lets the coins_add test below be shorter and less repetitive,\n-// while still verifying that the CoinsViewCache::AddCoin implementation\n-// ignores base values.\n-template <typename... Args>\n-static void CheckAddCoin(Args&&... args)\n-{\n-    for (const CAmount base_value : {ABSENT, SPENT, VALUE1})\n-        CheckAddCoinBase(base_value, std::forward<Args>(args)...);\n }\n \n BOOST_AUTO_TEST_CASE(ccoins_add)\n {\n     /* Check AddCoin behavior, requesting a new coin from a cache view,\n      * writing a modification to the coin, and then checking the resulting\n      * entry in the cache after the modification. Verify behavior with the\n-     * AddCoin possible_overwrite argument set to false, and to true.\n-     *\n-     *           Cache   Write   Result  Cache        Result       possible_overwrite\n-     *           Value   Value   Value   Flags        Flags\n+     * AddCoin coinbase argument set to false, and to true.\n+     *               Base        Write   Cache               Expected              Coinbase\n      */\n-    CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH, false);\n-    CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, false);\n-    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , 0          , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, 0          , DIRTY      , true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , FRESH      , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , DIRTY      , NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n-    CheckAddCoin(VALUE2, VALUE3, FAIL  , DIRTY|FRESH, NO_ENTRY   , false);\n-    CheckAddCoin(VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n+    for (auto base_value : {ABSENT, SPENT, VALUE1}) {\n+        CheckAddCoin(base_value, VALUE3, MISSING,            VALUE3_DIRTY_FRESH,   false);",
      "path": "src/test/coins_tests.cpp",
      "position": 370,
      "original_position": 364,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "1a89a97b1ab87c3be9629a49711c074127e4acd2",
      "in_reply_to_id": 1770595622,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought of that, but since it has to be different from `base_value`, seems weird to assume that in a different method instead of the call-site.\r\n```C++\r\nBase        Write   Cache        Expected      Coinbase\r\nbase_value, VALUE3, SPENT_DIRTY, VALUE3_DIRTY, false // VALUE3 + SPENT_DIRTY -> VALUE3_DIRTY\r\n```\r\nmakes more sense than\r\n```C++\r\nBase        Cache        Expected      Coinbase\r\nbase_value, SPENT_DIRTY, VALUE3_DIRTY, false // SPENT_DIRTY -> VALUE3_DIRTY???\r\n```\r\n\r\nBut I don't mind renaming `VALUE3` to `VAL3` if you're worried about verbosity.",
      "created_at": "2024-09-23T11:16:53Z",
      "updated_at": "2024-09-23T12:04:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1771218843",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771218843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 761,
      "original_line": 761,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771249650",
      "pull_request_review_id": 2321934830,
      "id": 1771249650,
      "node_id": "PRRC_kwDOABII585pkx_y",
      "diff_hunk": "@@ -562,20 +564,57 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+struct CoinEntry {\n+    enum class State { CLEAN, DIRTY, FRESH, DIRTY_FRESH };\n+\n+    const CAmount value;\n+    const State state;\n+\n+    CoinEntry(CAmount v, State s) : value(v), state(s) {}",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "1a89a97b1ab87c3be9629a49711c074127e4acd2",
      "in_reply_to_id": 1770589885,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks",
      "created_at": "2024-09-23T11:41:50Z",
      "updated_at": "2024-09-23T11:41:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1771249650",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771249650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 573,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1779311123",
      "pull_request_review_id": 2334816826,
      "id": 1779311123,
      "node_id": "PRRC_kwDOABII585qDiIT",
      "diff_hunk": "@@ -562,20 +564,57 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+struct CoinEntry {\n+    enum class State { CLEAN, DIRTY, FRESH, DIRTY_FRESH };\n+\n+    const CAmount value;\n+    const State state;\n+\n+    constexpr CoinEntry(CAmount v, State s) : value(v), state(s) {}\n+\n+    bool operator==(const CoinEntry& o) const = default;\n+    friend std::ostream& operator<<(std::ostream& os, const CoinEntry& e) { return os << e.value << e.state; }\n+\n+    constexpr bool IsDirtyFresh() const { return state == State::DIRTY_FRESH; }\n+    constexpr bool IsDirty() const { return state == State::DIRTY || IsDirtyFresh(); }\n+    constexpr bool IsFresh() const { return state == State::FRESH || IsDirtyFresh(); }\n+\n+    static constexpr CoinEntry::State ToState(bool is_dirty, bool is_fresh) {\n+        if (is_dirty && is_fresh) return CoinEntry::State::DIRTY_FRESH;\n+        if (is_dirty) return CoinEntry::State::DIRTY;\n+        if (is_fresh) return CoinEntry::State::FRESH;\n+        return CoinEntry::State::CLEAN;\n+    }\n+};\n+\n const static COutPoint OUTPOINT;\n-const static CAmount SPENT = -1;\n-const static CAmount ABSENT = -2;\n-const static CAmount FAIL = -3;\n-const static CAmount VALUE1 = 100;\n-const static CAmount VALUE2 = 200;\n-const static CAmount VALUE3 = 300;\n-const static char DIRTY = CCoinsCacheEntry::DIRTY;\n-const static char FRESH = CCoinsCacheEntry::FRESH;\n-const static char NO_ENTRY = -1;\n-\n-const static auto FLAGS = {char(0), FRESH, DIRTY, char(DIRTY | FRESH)};\n-const static auto CLEAN_FLAGS = {char(0), FRESH};\n-const static auto ABSENT_FLAGS = {NO_ENTRY};\n+constexpr CAmount SPENT = -1;\n+constexpr CAmount ABSENT = -2;\n+constexpr CAmount VALUE1 = 100;\n+constexpr CAmount VALUE2 = 200;\n+constexpr CAmount VALUE3 = 300;\n+\n+using MaybeCoin = std::optional<CoinEntry>;\n+using CoinOrError = std::variant<MaybeCoin, std::string>;\n+\n+constexpr MaybeCoin MISSING            = std::nullopt;\n+constexpr MaybeCoin SPENT_DIRTY        = CoinEntry{SPENT, CoinEntry::State::DIRTY};\n+constexpr MaybeCoin SPENT_DIRTY_FRESH  = CoinEntry{SPENT, CoinEntry::State::DIRTY_FRESH};\n+constexpr MaybeCoin SPENT_FRESH        = CoinEntry{SPENT, CoinEntry::State::FRESH};\n+constexpr MaybeCoin SPENT_CLEAN        = CoinEntry{SPENT, CoinEntry::State::CLEAN};\n+constexpr MaybeCoin VALUE1_DIRTY       = CoinEntry{VALUE1, CoinEntry::State::DIRTY};\n+constexpr MaybeCoin VALUE1_DIRTY_FRESH = CoinEntry{VALUE1, CoinEntry::State::DIRTY_FRESH};\n+constexpr MaybeCoin VALUE1_FRESH       = CoinEntry{VALUE1, CoinEntry::State::FRESH};\n+constexpr MaybeCoin VALUE1_CLEAN       = CoinEntry{VALUE1, CoinEntry::State::CLEAN};\n+constexpr MaybeCoin VALUE2_DIRTY       = CoinEntry{VALUE2, CoinEntry::State::DIRTY};\n+constexpr MaybeCoin VALUE2_DIRTY_FRESH = CoinEntry{VALUE2, CoinEntry::State::DIRTY_FRESH};\n+constexpr MaybeCoin VALUE2_FRESH       = CoinEntry{VALUE2, CoinEntry::State::FRESH};\n+constexpr MaybeCoin VALUE2_CLEAN       = CoinEntry{VALUE2, CoinEntry::State::CLEAN};\n+constexpr MaybeCoin VALUE3_DIRTY       = CoinEntry{VALUE3, CoinEntry::State::DIRTY};\n+constexpr MaybeCoin VALUE3_DIRTY_FRESH = CoinEntry{VALUE3, CoinEntry::State::DIRTY_FRESH};\n+\n+const static std::string EX_OVERWRITE_UNSPENT = \"Attempted to overwrite an unspent coin (when possible_overwrite is false)\";",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "1dd79a32c9c6e0c6cf4ecef00b56972574babced",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since #30921, we can now make these `constexpr string_view`.",
      "created_at": "2024-09-27T23:51:09Z",
      "updated_at": "2024-09-27T23:51:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1779311123",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1779311123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1779377188",
      "pull_request_review_id": 2334887904,
      "id": 1779377188,
      "node_id": "PRRC_kwDOABII585qDyQk",
      "diff_hunk": "@@ -562,20 +564,57 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+struct CoinEntry {\n+    enum class State { CLEAN, DIRTY, FRESH, DIRTY_FRESH };\n+\n+    const CAmount value;\n+    const State state;\n+\n+    constexpr CoinEntry(CAmount v, State s) : value(v), state(s) {}\n+\n+    bool operator==(const CoinEntry& o) const = default;\n+    friend std::ostream& operator<<(std::ostream& os, const CoinEntry& e) { return os << e.value << e.state; }\n+\n+    constexpr bool IsDirtyFresh() const { return state == State::DIRTY_FRESH; }\n+    constexpr bool IsDirty() const { return state == State::DIRTY || IsDirtyFresh(); }\n+    constexpr bool IsFresh() const { return state == State::FRESH || IsDirtyFresh(); }\n+\n+    static constexpr CoinEntry::State ToState(bool is_dirty, bool is_fresh) {\n+        if (is_dirty && is_fresh) return CoinEntry::State::DIRTY_FRESH;\n+        if (is_dirty) return CoinEntry::State::DIRTY;\n+        if (is_fresh) return CoinEntry::State::FRESH;\n+        return CoinEntry::State::CLEAN;\n+    }\n+};\n+\n const static COutPoint OUTPOINT;\n-const static CAmount SPENT = -1;\n-const static CAmount ABSENT = -2;\n-const static CAmount FAIL = -3;\n-const static CAmount VALUE1 = 100;\n-const static CAmount VALUE2 = 200;\n-const static CAmount VALUE3 = 300;\n-const static char DIRTY = CCoinsCacheEntry::DIRTY;\n-const static char FRESH = CCoinsCacheEntry::FRESH;\n-const static char NO_ENTRY = -1;\n-\n-const static auto FLAGS = {char(0), FRESH, DIRTY, char(DIRTY | FRESH)};\n-const static auto CLEAN_FLAGS = {char(0), FRESH};\n-const static auto ABSENT_FLAGS = {NO_ENTRY};\n+constexpr CAmount SPENT = -1;\n+constexpr CAmount ABSENT = -2;\n+constexpr CAmount VALUE1 = 100;\n+constexpr CAmount VALUE2 = 200;\n+constexpr CAmount VALUE3 = 300;\n+\n+using MaybeCoin = std::optional<CoinEntry>;\n+using CoinOrError = std::variant<MaybeCoin, std::string>;\n+\n+constexpr MaybeCoin MISSING            = std::nullopt;\n+constexpr MaybeCoin SPENT_DIRTY        = CoinEntry{SPENT, CoinEntry::State::DIRTY};\n+constexpr MaybeCoin SPENT_DIRTY_FRESH  = CoinEntry{SPENT, CoinEntry::State::DIRTY_FRESH};\n+constexpr MaybeCoin SPENT_FRESH        = CoinEntry{SPENT, CoinEntry::State::FRESH};\n+constexpr MaybeCoin SPENT_CLEAN        = CoinEntry{SPENT, CoinEntry::State::CLEAN};\n+constexpr MaybeCoin VALUE1_DIRTY       = CoinEntry{VALUE1, CoinEntry::State::DIRTY};\n+constexpr MaybeCoin VALUE1_DIRTY_FRESH = CoinEntry{VALUE1, CoinEntry::State::DIRTY_FRESH};\n+constexpr MaybeCoin VALUE1_FRESH       = CoinEntry{VALUE1, CoinEntry::State::FRESH};\n+constexpr MaybeCoin VALUE1_CLEAN       = CoinEntry{VALUE1, CoinEntry::State::CLEAN};\n+constexpr MaybeCoin VALUE2_DIRTY       = CoinEntry{VALUE2, CoinEntry::State::DIRTY};\n+constexpr MaybeCoin VALUE2_DIRTY_FRESH = CoinEntry{VALUE2, CoinEntry::State::DIRTY_FRESH};\n+constexpr MaybeCoin VALUE2_FRESH       = CoinEntry{VALUE2, CoinEntry::State::FRESH};\n+constexpr MaybeCoin VALUE2_CLEAN       = CoinEntry{VALUE2, CoinEntry::State::CLEAN};\n+constexpr MaybeCoin VALUE3_DIRTY       = CoinEntry{VALUE3, CoinEntry::State::DIRTY};\n+constexpr MaybeCoin VALUE3_DIRTY_FRESH = CoinEntry{VALUE3, CoinEntry::State::DIRTY_FRESH};\n+\n+const static std::string EX_OVERWRITE_UNSPENT = \"Attempted to overwrite an unspent coin (when possible_overwrite is false)\";",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "48047ce9204723bc6efa8814939ea25f2df4882f",
      "original_commit_id": "1dd79a32c9c6e0c6cf4ecef00b56972574babced",
      "in_reply_to_id": 1779311123,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Made it a `constexpr auto` (I don't want non-owning fields) https://github.com/bitcoin/bitcoin/compare/1dd79a32c9c6e0c6cf4ecef00b56972574babced..cb9be6729c4e27bf2d6d703c0d454a22cbcdb6e1",
      "created_at": "2024-09-28T06:33:04Z",
      "updated_at": "2024-09-28T06:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30906#discussion_r1779377188",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1779377188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30906"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 616,
      "side": "RIGHT"
    }
  ]
}