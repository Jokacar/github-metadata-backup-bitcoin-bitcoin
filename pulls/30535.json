{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535",
    "id": 1990010941,
    "node_id": "PR_kwDOABII5852nSg9",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30535",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30535.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30535.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1cc0d5475a578a8299c24c008c0080a6006cae28",
    "number": 30535,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "feefrac: add support for evaluating at given size",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The `FeeFrac` type represents a fraction, intended to be used for sats/vbyte or sats/WU. This PR adds functionality to evaluate that feerate for a given size, in order to obtain the fee it corresponds with (rounding down).\r\n\r\nThe motivation here is being able to do accurate feerate evaluations in cluster mempool block building heuristics, but in principle this makes it possible to use `FeeFrac` as a more accurate replacement for `CFeeRate`.\r\n\r\nUnit tests are included for known-correct values, plus a fuzz test that verifies the result using `arith_uint256`.",
    "labels": [],
    "created_at": "2024-07-26T19:34:23Z",
    "updated_at": "2024-07-31T20:58:59Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "b3764833d390618e1ea75f320bf717784b94548d",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sipa:202407_feefrac_eval",
      "ref": "202407_feefrac_eval",
      "sha": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 22,
        "stargazers_count": 86,
        "watchers_count": 86,
        "size": 243283,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-30T22:09:38Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2024-06-02T01:19:44Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "4c62f4b53561bce5b2eb8639cdc24d284be537eb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35688,
        "stargazers_count": 77426,
        "watchers_count": 77426,
        "size": 264006,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-31T20:27:36Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-07-31T20:39:40Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 263,
    "deletions": 59,
    "changed_files": 4,
    "commits": 6,
    "review_comments": 28,
    "comments": 7
  },
  "events": [
    {
      "event": "commented",
      "id": 2253351478,
      "node_id": "IC_kwDOABII586GT2o2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2253351478",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T19:34:25Z",
      "updated_at": "2024-07-31T20:36:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30535).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [paplorinc](https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2210747435) |\n| Concept ACK | [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2202748071), [tdb3](https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2203550219), [ceffikhan](https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2255356768), [glozow](https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2205359436) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2253351478",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13665925904,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMujXsQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13665925904",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T20:45:57Z"
    },
    {
      "event": "reviewed",
      "id": 2202748071,
      "node_id": "PRR_kwDOABII586DS0Sn",
      "url": null,
      "actor": null,
      "commit_id": "42ee8b474f0aea3c602144b2f057006b4864a4da",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI think we should also have  `GetFeePerK` or `GetFeePerS` method in `FeeFrac` similar to `CFeeRate`",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2202748071",
      "submitted_at": "2024-07-26T21:03:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "commented",
      "id": 2254263266,
      "node_id": "IC_kwDOABII586GXVPi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2254263266",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T21:52:47Z",
      "updated_at": "2024-07-27T21:52:47Z",
      "author_association": "MEMBER",
      "body": "@ismaelsadeeq It's a possibility, if we'd want to replace CFeeRate entirely. Another possibility is keeping CFeeRate and its interface, but make it be an encapsulated FeeFrac object (that e.g. on serialization converts to sats/kvb, but that otherwise keeps exact fractions).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2254263266",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 13669593603,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMuxXID",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13669593603",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T21:52:48Z"
    },
    {
      "event": "subscribed",
      "id": 13669593604,
      "node_id": "SE_lADOABII586RAm30zwAAAAMuxXIE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13669593604",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T21:52:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13671553870,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMu41tO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13671553870",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-28T15:25:20Z"
    },
    {
      "event": "reviewed",
      "id": 2203550219,
      "node_id": "PRR_kwDOABII586DV4IL",
      "url": null,
      "actor": null,
      "commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\nSeems like a helpful improvement.\r\nWould like to circle back to take a deeper look.\r\nOut of curiosity, why the adjustment from 0x200000004 to 0x200000000? (nothing immediately popped out to me)",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2203550219",
      "submitted_at": "2024-07-28T18:32:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "commented",
      "id": 2254607456,
      "node_id": "IC_kwDOABII586GYpRg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2254607456",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-28T18:41:17Z",
      "updated_at": "2024-07-28T18:41:17Z",
      "author_association": "MEMBER",
      "body": "@tdb3 0x200000004 is the more accurate number (it equals floor((2^64-1)/(2^31-1))) but 0x200000000 obviously also works, and:\n\n* It compiles to slightly simpler asm code (it computes fee >> 33, rather than comparing fee with a literal).\n* The difference is so small that it shouldn't matter.\n* I would think it's more obviously correct to a reviewer.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2254607456",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 13671898973,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMu6J9d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13671898973",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-28T18:41:18Z"
    },
    {
      "event": "subscribed",
      "id": 13671898976,
      "node_id": "SE_lADOABII586RAm30zwAAAAMu6J9g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13671898976",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-28T18:41:18Z"
    },
    {
      "event": "reviewed",
      "id": 2203559483,
      "node_id": "PRR_kwDOABII586DV6Y7",
      "url": null,
      "actor": null,
      "commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I think we could make the code more testable by extracting the 96 bit division like we did for the multiplication",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2203559483",
      "submitted_at": "2024-07-29T06:57:11Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "commented",
      "id": 2255356768,
      "node_id": "IC_kwDOABII586GbgNg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2255356768",
      "actor": {
        "login": "ceffikhan",
        "id": 170189412,
        "node_id": "U_kgDOCiTiZA",
        "avatar_url": "https://avatars.githubusercontent.com/u/170189412?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ceffikhan",
        "html_url": "https://github.com/ceffikhan",
        "followers_url": "https://api.github.com/users/ceffikhan/followers",
        "following_url": "https://api.github.com/users/ceffikhan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ceffikhan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ceffikhan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ceffikhan/subscriptions",
        "organizations_url": "https://api.github.com/users/ceffikhan/orgs",
        "repos_url": "https://api.github.com/users/ceffikhan/repos",
        "events_url": "https://api.github.com/users/ceffikhan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ceffikhan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T08:47:14Z",
      "updated_at": "2024-07-29T08:47:14Z",
      "author_association": "NONE",
      "body": "Concept ACK",
      "user": {
        "login": "ceffikhan",
        "id": 170189412,
        "node_id": "U_kgDOCiTiZA",
        "avatar_url": "https://avatars.githubusercontent.com/u/170189412?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ceffikhan",
        "html_url": "https://github.com/ceffikhan",
        "followers_url": "https://api.github.com/users/ceffikhan/followers",
        "following_url": "https://api.github.com/users/ceffikhan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ceffikhan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ceffikhan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ceffikhan/subscriptions",
        "organizations_url": "https://api.github.com/users/ceffikhan/orgs",
        "repos_url": "https://api.github.com/users/ceffikhan/repos",
        "events_url": "https://api.github.com/users/ceffikhan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ceffikhan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2255356768",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "commented",
      "id": 2255984388,
      "node_id": "IC_kwDOABII586Gd5cE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2255984388",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T13:41:49Z",
      "updated_at": "2024-07-29T13:41:49Z",
      "author_association": "MEMBER",
      "body": "> The motivation here is being able to do accurate feerate evaluations in cluster mempool block building heuristics\r\n\r\nfor end-of-block packing reasons I assume?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2255984388",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "reviewed",
      "id": 2205359436,
      "node_id": "PRR_kwDOABII586Dcx1M",
      "url": null,
      "actor": null,
      "commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK \r\n\r\nAlso concept ack to changing `CFeeRate` to use a `FeeFrac` internally. Did it locally to see what the quirks are - `CFeeRate` rounds up, is that maybe worth matching?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2205359436",
      "submitted_at": "2024-07-29T15:51:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNkMmQ2N2FhYTY4MzU2MTRiY2MwNTAxMmE4ZmViNTYyMGJmODQ5ZTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd2d67aaa6835614bcc05012a8feb5620bf849e9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cd2d67aaa6835614bcc05012a8feb5620bf849e9",
      "tree": {
        "sha": "38153da86038590d3de28ef3e608a3e6d84a8ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38153da86038590d3de28ef3e608a3e6d84a8ef6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f66738f79c79eb00332e64d0841937b7a1f2db0b",
          "sha": "f66738f79c79eb00332e64d0841937b7a1f2db0b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f66738f79c79eb00332e64d0841937b7a1f2db0b"
        }
      ],
      "message": "arith_uint256: modernize comparison operators",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T20:01:36Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T19:59:06Z"
      },
      "sha": "cd2d67aaa6835614bcc05012a8feb5620bf849e9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJjZjg3OTA1NmQ4NzFhMzk4ZjMzYzQzNmFhMzQ2MTc2NDJkOTM5MmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcf879056d871a398f33c436aa34617642d9392d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bcf879056d871a398f33c436aa34617642d9392d",
      "tree": {
        "sha": "f76b53eec288b2e8fc140b618c430734c4ce3ad0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f76b53eec288b2e8fc140b618c430734c4ce3ad0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd2d67aaa6835614bcc05012a8feb5620bf849e9",
          "sha": "cd2d67aaa6835614bcc05012a8feb5620bf849e9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cd2d67aaa6835614bcc05012a8feb5620bf849e9"
        }
      ],
      "message": "feefrac fuzz: use arith_uint256 instead of ad-hoc multiply",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T20:13:28Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T20:00:34Z"
      },
      "sha": "bcf879056d871a398f33c436aa34617642d9392d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY1ZmFmMWRjOGE4YTE3YjZlNDk0ZGVlMjhiZWJjOTBkY2ZhZDY0ODY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5faf1dc8a8a17b6e494dee28bebc90dcfad6486",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f5faf1dc8a8a17b6e494dee28bebc90dcfad6486",
      "tree": {
        "sha": "19dbff882a1ec2942e2c8cd41c0054f09acbe10f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19dbff882a1ec2942e2c8cd41c0054f09acbe10f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcf879056d871a398f33c436aa34617642d9392d",
          "sha": "bcf879056d871a398f33c436aa34617642d9392d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bcf879056d871a398f33c436aa34617642d9392d"
        }
      ],
      "message": "feefrac: rework comments around Mul/MulFallback",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T20:13:43Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T12:03:50Z"
      },
      "sha": "f5faf1dc8a8a17b6e494dee28bebc90dcfad6486"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13685887877,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMvvhOF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13685887877",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T20:19:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13685894516,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMvvi10",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13685894516",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T20:20:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13685903626,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMvvlEK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13685903626",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T20:21:13Z"
    },
    {
      "event": "commented",
      "id": 2257062432,
      "node_id": "IC_kwDOABII586GiAog",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257062432",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:57Z",
      "updated_at": "2024-07-29T21:43:57Z",
      "author_association": "MEMBER",
      "body": "I've made a number of changes, mostly in response to @paplorinc's [suggestion](https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694594826), which involves:\r\n* Rewriting all of `feefrac`'s fuzz tests to test against `arith_uint256` (rather than using its own ad-hoc 128-bit bigint logic), which also involved adding an `arith_uint256::operator<=>`.\r\n* Separating out a `FeeFrac::Div` (with `FeeFrac::DivFallback`, like `Mul`) for 96-bit division, which is tested directly.\r\n* Writing `FeeFrac::Evaluate` in terms of `FeeFrac::Div` and `FeeFrac::Mul`.\r\n\r\nIn addition, a bunch of comment change and code simplifications.\r\n\r\n---\r\n\r\n@instagibbs \r\n\r\n> > The motivation here is being able to do accurate feerate evaluations in cluster mempool block building heuristics\r\n> \r\n> for end-of-block packing reasons I assume?\r\n\r\nThe thing I have in mind, is the following algorithm for finding out an upper bound on the maximum fee a block template can gather (assuming optimally-linearized clusters):\r\n\r\n```python\r\nweight_left = 4000000\r\nfee_collected = 0\r\nfor chunk in sorted(mempool.all_chunks, by_decreasing_feerate):\r\n    if chunk.weight <= weight_left:\r\n        weight_left -= chunk.weight\r\n        fee_collected += chunk.fee\r\n    else:\r\n        fee_collected += chunk.Evaluate(weight)\r\n        break\r\n```\r\n\r\nAssuming optimally-linearized clusters, this gives a correct upper bound on total collectable fee, which may be useful in heuristics to determine whether it's worth spending time on searching more for example, or in statistics. It's really a super simple operation, but the multiplication being able to exceed 64-bit integers makes it a whole lot more complicated.\r\n\r\n---\r\n\r\n@glozow \r\n\r\n> Concept ACK\r\n> \r\n> Also concept ack to changing `CFeeRate` to use a `FeeFrac` internally. Did it locally to see what the quirks are - `CFeeRate` rounds up, is that maybe worth matching?\r\n\r\nHa, nice catch. See above why I do actually want rounding-down behavior here. Perhaps we'll need to add a boolean argument for controlling up/down rounding behavior?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2257062432",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 13687043851,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMvz7cL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043851",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "subscribed",
      "id": 13687043863,
      "node_id": "SE_lADOABII586RAm30zwAAAAMvz7cX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043863",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "mentioned",
      "id": 13687043882,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMvz7cq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043882",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "subscribed",
      "id": 13687043892,
      "node_id": "SE_lADOABII586RAm30zwAAAAMvz7c0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043892",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "mentioned",
      "id": 13687043910,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMvz7dG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043910",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "subscribed",
      "id": 13687043916,
      "node_id": "SE_lADOABII586RAm30zwAAAAMvz7dM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043916",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "labeled",
      "id": 13690854167,
      "node_id": "LE_lADOABII586RAm30zwAAAAMwCdsX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13690854167",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T06:48:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13695796313,
      "node_id": "UNLE_lADOABII586RAm30zwAAAAMwVURZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13695796313",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T13:10:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYzMjUxY2I0NmRhMmRjZjk3Zjc5NTVhZmE1ZGIyNjUyOThiZjg2NDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3251cb46da2dcf97f7955afa5db265298bf8646",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f3251cb46da2dcf97f7955afa5db265298bf8646",
      "tree": {
        "sha": "ed8619248b8432cd7ac71680ee3c0e621ca3ec17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed8619248b8432cd7ac71680ee3c0e621ca3ec17"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5faf1dc8a8a17b6e494dee28bebc90dcfad6486",
          "sha": "f5faf1dc8a8a17b6e494dee28bebc90dcfad6486",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f5faf1dc8a8a17b6e494dee28bebc90dcfad6486"
        }
      ],
      "message": "feefrac: add helper functions for 96-bit division",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-30T15:55:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-26T19:04:05Z"
      },
      "sha": "f3251cb46da2dcf97f7955afa5db265298bf8646"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgwNzExZWYwMWI3NjM5YzVlYWU2MGI4Nzk3OThjODk4MDg2MDg1OGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80711ef01b7639c5eae60b879798c8980860858c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/80711ef01b7639c5eae60b879798c8980860858c",
      "tree": {
        "sha": "c063ae46df6c3847a6ab31faaf00a5b9eb2697af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c063ae46df6c3847a6ab31faaf00a5b9eb2697af"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3251cb46da2dcf97f7955afa5db265298bf8646",
          "sha": "f3251cb46da2dcf97f7955afa5db265298bf8646",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f3251cb46da2dcf97f7955afa5db265298bf8646"
        }
      ],
      "message": "feefrac: add support for evaluating at given size",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-30T15:56:11Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T20:06:30Z"
      },
      "sha": "80711ef01b7639c5eae60b879798c8980860858c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFjYzBkNTQ3NWE1NzhhODI5OWMyNGMwMDhjMDA4MGE2MDA2Y2FlMjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cc0d5475a578a8299c24c008c0080a6006cae28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1cc0d5475a578a8299c24c008c0080a6006cae28",
      "tree": {
        "sha": "c1a178727ea653c53460c2fae64125429de46199",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1a178727ea653c53460c2fae64125429de46199"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80711ef01b7639c5eae60b879798c8980860858c",
          "sha": "80711ef01b7639c5eae60b879798c8980860858c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/80711ef01b7639c5eae60b879798c8980860858c"
        }
      ],
      "message": "feefrac: support both rounding up and down for Evaluate",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-30T15:56:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-30T15:48:32Z"
      },
      "sha": "1cc0d5475a578a8299c24c008c0080a6006cae28"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13698244217,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMwep55",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13698244217",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T16:00:17Z"
    },
    {
      "event": "commented",
      "id": 2258696371,
      "node_id": "IC_kwDOABII586GoPiz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258696371",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T16:01:28Z",
      "updated_at": "2024-07-30T16:01:28Z",
      "author_association": "MEMBER",
      "body": "I have added a commit that splits `FeeFrac::Evaluate` into an `EvaluateDown` and an `EvaluateUp`, corresponding to the rounding modes they implement (plus tests for both behaviors).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2258696371",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "reviewed",
      "id": 2210747435,
      "node_id": "PRR_kwDOABII586DxVQr",
      "url": null,
      "actor": null,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 1cc0d5475a578a8299c24c008c0080a6006cae28\r\n\r\nI left a few recommendations and questions, was really fun reviewing this change - though it took me a lot of time.\r\n\r\nIf you think our contributions have affected the change, please consider adding us as co-authors.",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2210747435",
      "submitted_at": "2024-07-31T20:36:42Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "review_requested",
      "id": 13715953964,
      "node_id": "RRE_lADOABII586RAm30zwAAAAMxiNks",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13715953964",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T20:36:46Z",
      "requested_reviewer": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 13715954303,
      "node_id": "RRE_lADOABII586RAm30zwAAAAMxiNp_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13715954303",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T20:36:46Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 13715954491,
      "node_id": "RRE_lADOABII586RAm30zwAAAAMxiNs7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13715954491",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T20:36:47Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694308284",
      "pull_request_review_id": 2203559483,
      "id": 1694308284,
      "node_id": "PRRC_kwDOABII585k_Re8",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This",
      "path": "src/util/feefrac.h",
      "position": 94,
      "original_position": 10,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: if you think the preconditions already stated in the Assumes is worth repeating in the comments, consider swapping their order to match the order in the code.",
      "created_at": "2024-07-28T19:14:59Z",
      "updated_at": "2024-07-29T06:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694308284",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694308284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694594826",
      "pull_request_review_id": 2203559483,
      "id": 1694594826,
      "node_id": "PRRC_kwDOABII585lAXcK",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(at_size >= 0);\n+        Assume(size > 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            return (uint64_t(fee) * at_size) / uint32_t(size);\n+        } else {\n+            // If not, use a custom 96-bit division.\n+\n+            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\n+            // as (low32 + high64 * 2**32) / this->size.\n+            auto [high64, low32] = MulFallback(fee, at_size);\n+            // Compute high64 / this->size, so the result becomes\n+            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\n+            int64_t high64_div = high64 / size;\n+            // Evaluate the parenthesized expression above, so the result becomes\n+            // low64 / this->size + (high64_div * 2**32)\n+            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;\n+            // Evaluate the division so the result becomes low64_div + high64_div * 2**32. We need\n+            // this division to round down however, while the / operator rounds towards zero. In\n+            // case low64 is negative and not a multiple of size, we thus need a correction.\n+            int64_t low64_div = low64 / size;\n+            low64_div -= (low64 % size) < 0;\n+            // Evaluate and return the result\n+            return (high64_div << 32) + low64_div;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would it make sense to extract this into a DivFallback - and test it independently, like we do with `MulFallback`? This would make it independently testable and we could extend it to 128 bit division seamlessly, e.g.:\r\n```patch\r\ndiff --git a/src/util/feefrac.h b/src/util/feefrac.h\r\n--- a/src/util/feefrac.h\t(revision 5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc)\r\n+++ b/src/util/feefrac.h\t(date 1722234628938)\r\n@@ -41,23 +41,56 @@\r\n      *\r\n      * Separate to permit testing on platforms where it isn't actually needed.\r\n      */\r\n-    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\r\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t high, int32_t low) noexcept\r\n     {\r\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\r\n-        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\r\n-        int64_t high = (a >> 32) * b;\r\n-        return {high + (low >> 32), static_cast<uint32_t>(low)};\r\n+        // Emulate 96-bit multiplication using two 64-bit multiplies.\r\n+        int64_t low_mul = int64_t{static_cast<uint32_t>(high)} * low;\r\n+        int64_t high_mul = (high >> 32) * low;\r\n+        return {high_mul + (low_mul >> 32), static_cast<uint32_t>(low_mul)};\r\n+    }\r\n+\r\n+    /** Fallback version for Div (see below).\r\n+     *\r\n+     * Separate to permit testing on platforms where it isn't actually needed.\r\n+     */\r\n+    static inline int64_t DivFallback(int64_t high, uint32_t low, int32_t divisor) noexcept\r\n+    {\r\n+        Assume(divisor != 0);\r\n+        // Compute high / divisor, so the result becomes\r\n+        // (low + (high - high_div * divisor) * 2**32) / divisor + (high_div * 2**32).\r\n+        int64_t high_div = high / divisor;\r\n+        // Evaluate the parenthesized expression above, so the result becomes\r\n+        // low64 / divisor + (high_div * 2**32)\r\n+        int64_t low64 = ((high - high_div * divisor) << 32) | low;\r\n+        // Evaluate the division so the result becomes low64_div + high_div * 2**32.\r\n+        int64_t low64_div = low64 / divisor;\r\n+        // Round towards negative infinity\r\n+        low64_div -= (low64 % divisor) < 0;\r\n+        return (high_div << 32) + low64_div;\r\n     }\r\n \r\n     // Compute a * b, returning an unspecified but totally ordered type.\r\n #ifdef __SIZEOF_INT128__\r\n     static inline __int128 Mul(int64_t a, int32_t b) noexcept\r\n     {\r\n-        // If __int128 is available, use 128-bit wide multiply.\r\n         return __int128{a} * b;\r\n     }\r\n+\r\n+    // Compute product / divisor, rounding towards negative infinity.\r\n+    static inline int64_t Div(__int128 product, int32_t divisor) noexcept\r\n+    {\r\n+        auto quotient = product / divisor;\r\n+        // Round towards negative infinity\r\n+        quotient -= (product % divisor) < 0;\r\n+        return quotient;\r\n+    }\r\n #else\r\n     static constexpr auto Mul = MulFallback;\r\n+    // Compute (high << 64 | low) / divisor, rounding towards negative infinity.\r\n+    static inline int64_t Div(std::pair<int64_t, uint32_t> product, int32_t divisor) noexcept\r\n+    {\r\n+        return DivFallback(product.first, product.second, divisor);\r\n+    }\r\n #endif\r\n \r\n     int64_t fee;\r\n@@ -162,23 +195,7 @@\r\n             return (uint64_t(fee) * at_size) / uint32_t(size);\r\n         } else {\r\n             // If not, use a custom 96-bit division.\r\n-\r\n-            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\r\n-            // as (low32 + high64 * 2**32) / this->size.\r\n-            auto [high64, low32] = MulFallback(fee, at_size);\r\n-            // Compute high64 / this->size, so the result becomes\r\n-            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\r\n-            int64_t high64_div = high64 / size;\r\n-            // Evaluate the parenthesized expression above, so the result becomes\r\n-            // low64 / this->size + (high64_div * 2**32)\r\n-            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;\r\n-            // Evaluate the division so the result becomes low64_div + high64_div * 2**32. We need\r\n-            // this division to round down however, while the / operator rounds towards zero. In\r\n-            // case low64 is negative and not a multiple of size, we thus need a correction.\r\n-            int64_t low64_div = low64 / size;\r\n-            low64_div -= (low64 % size) < 0;\r\n-            // Evaluate and return the result\r\n-            return (high64_div << 32) + low64_div;\r\n+            return Div(Mul(fee, at_size), size);\r\n         }\r\n     }\r\n };\r\n```",
      "created_at": "2024-07-29T05:43:11Z",
      "updated_at": "2024-07-29T06:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694594826",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694594826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": 169,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694626068",
      "pull_request_review_id": 2203559483,
      "id": 1694626068,
      "node_id": "PRRC_kwDOABII585lAfEU",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(at_size >= 0);\n+        Assume(size > 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            return (uint64_t(fee) * at_size) / uint32_t(size);\n+        } else {\n+            // If not, use a custom 96-bit division.\n+\n+            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\n+            // as (low32 + high64 * 2**32) / this->size.\n+            auto [high64, low32] = MulFallback(fee, at_size);\n+            // Compute high64 / this->size, so the result becomes\n+            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\n+            int64_t high64_div = high64 / size;\n+            // Evaluate the parenthesized expression above, so the result becomes\n+            // low64 / this->size + (high64_div * 2**32)\n+            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;\n+            // Evaluate the division so the result becomes low64_div + high64_div * 2**32. We need\n+            // this division to round down however, while the / operator rounds towards zero. In\n+            // case low64 is negative and not a multiple of size, we thus need a correction.\n+            int64_t low64_div = low64 / size;\n+            low64_div -= (low64 % size) < 0;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 36,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh, wow, I had to look at this twice :D",
      "created_at": "2024-07-29T06:11:53Z",
      "updated_at": "2024-07-29T06:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694626068",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694626068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694662631",
      "pull_request_review_id": 2203559483,
      "id": 1694662631,
      "node_id": "PRRC_kwDOABII585lAn_n",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(at_size >= 0);\n+        Assume(size > 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            return (uint64_t(fee) * at_size) / uint32_t(size);\n+        } else {\n+            // If not, use a custom 96-bit division.\n+\n+            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\n+            // as (low32 + high64 * 2**32) / this->size.\n+            auto [high64, low32] = MulFallback(fee, at_size);\n+            // Compute high64 / this->size, so the result becomes\n+            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\n+            int64_t high64_div = high64 / size;\n+            // Evaluate the parenthesized expression above, so the result becomes\n+            // low64 / this->size + (high64_div * 2**32)\n+            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 31,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: while the return value needs a `+`, I think this would work with a ` | low32` as well (which would provide better documentation about them not overlapping)",
      "created_at": "2024-07-29T06:41:17Z",
      "updated_at": "2024-07-29T06:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694662631",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694662631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694678834",
      "pull_request_review_id": 2203559483,
      "id": 1694678834,
      "node_id": "PRRC_kwDOABII585lAr8y",
      "diff_hunk": "@@ -17,6 +17,27 @@ BOOST_AUTO_TEST_CASE(feefrac_operators)\n     FeeFrac empty{0, 0};\n     FeeFrac zero_fee{0, 1}; // zero-fee allowed\n \n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(1), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(1000000), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(0x7fffffff), 0);\n+\n+    BOOST_CHECK_EQUAL(p1.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(1), 10);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(100000000), 1000000000);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(0x7fffffff), int64_t(0x7fffffff) * 10);\n+\n+    FeeFrac neg{-1001, 100};\n+    BOOST_CHECK_EQUAL(neg.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(neg.Evaluate(1), -11);",
      "path": "src/test/feefrac_tests.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "how often would we get negative fee in reality? If rounding towards negative infinity just a theoretical exercise or is it an important usecase?",
      "created_at": "2024-07-29T06:53:41Z",
      "updated_at": "2024-07-29T06:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694678834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694678834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695810620",
      "pull_request_review_id": 2205913700,
      "id": 1695810620,
      "node_id": "PRRC_kwDOABII585lFAQ8",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This",
      "path": "src/util/feefrac.h",
      "position": 94,
      "original_position": 10,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": 1694308284,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-07-29T20:21:16Z",
      "updated_at": "2024-07-29T20:21:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1695810620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695810620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695811930",
      "pull_request_review_id": 2205915925,
      "id": 1695811930,
      "node_id": "PRRC_kwDOABII585lFAla",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(at_size >= 0);\n+        Assume(size > 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            return (uint64_t(fee) * at_size) / uint32_t(size);\n+        } else {\n+            // If not, use a custom 96-bit division.\n+\n+            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\n+            // as (low32 + high64 * 2**32) / this->size.\n+            auto [high64, low32] = MulFallback(fee, at_size);\n+            // Compute high64 / this->size, so the result becomes\n+            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\n+            int64_t high64_div = high64 / size;\n+            // Evaluate the parenthesized expression above, so the result becomes\n+            // low64 / this->size + (high64_div * 2**32)\n+            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;\n+            // Evaluate the division so the result becomes low64_div + high64_div * 2**32. We need\n+            // this division to round down however, while the / operator rounds towards zero. In\n+            // case low64 is negative and not a multiple of size, we thus need a correction.\n+            int64_t low64_div = low64 / size;\n+            low64_div -= (low64 % size) < 0;\n+            // Evaluate and return the result\n+            return (high64_div << 32) + low64_div;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": 1694594826,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I didn't do something like this initially, as the `Evaluate` / `Div` operations are far less performance critical than `Mul`, but I've now adopted code like this (plus adding an `__int128`-based `Div` as well) for consistency and testability.",
      "created_at": "2024-07-29T20:22:40Z",
      "updated_at": "2024-07-29T20:22:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1695811930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695811930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": 169,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695813177",
      "pull_request_review_id": 2205917912,
      "id": 1695813177,
      "node_id": "PRRC_kwDOABII585lFA45",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(at_size >= 0);\n+        Assume(size > 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            return (uint64_t(fee) * at_size) / uint32_t(size);\n+        } else {\n+            // If not, use a custom 96-bit division.\n+\n+            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\n+            // as (low32 + high64 * 2**32) / this->size.\n+            auto [high64, low32] = MulFallback(fee, at_size);\n+            // Compute high64 / this->size, so the result becomes\n+            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\n+            int64_t high64_div = high64 / size;\n+            // Evaluate the parenthesized expression above, so the result becomes\n+            // low64 / this->size + (high64_div * 2**32)\n+            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 31,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": 1694662631,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd rather not. I find the use of bitwise operations with signed integers a bit unintuitive. ",
      "created_at": "2024-07-29T20:23:57Z",
      "updated_at": "2024-07-29T20:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1695813177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695813177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695821070",
      "pull_request_review_id": 2205927581,
      "id": 1695821070,
      "node_id": "PRRC_kwDOABII585lFC0O",
      "diff_hunk": "@@ -17,6 +17,27 @@ BOOST_AUTO_TEST_CASE(feefrac_operators)\n     FeeFrac empty{0, 0};\n     FeeFrac zero_fee{0, 1}; // zero-fee allowed\n \n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(1), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(1000000), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(0x7fffffff), 0);\n+\n+    BOOST_CHECK_EQUAL(p1.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(1), 10);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(100000000), 1000000000);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(0x7fffffff), int64_t(0x7fffffff) * 10);\n+\n+    FeeFrac neg{-1001, 100};\n+    BOOST_CHECK_EQUAL(neg.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(neg.Evaluate(1), -11);",
      "path": "src/test/feefrac_tests.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": 1694678834,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I only added the logic for rounding towards negative infinity because of consistency, not because of a hard requirement. I've added a comment too.\r\n\r\nBut just to clarify, without the correction step, the behavior is essentially arbitrary for negative fees. `low64` (now renamed to `n_low`) can be both positive or negative with negative `n` (positive when `n.second` is positive, and `n.first` is a multiple of `d`; negative when `n.first` is non-multiple of `d`). That's just too hard to specify and test.",
      "created_at": "2024-07-29T20:27:50Z",
      "updated_at": "2024-07-29T20:27:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1695821070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695821070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698863718",
      "pull_request_review_id": 2210747435,
      "id": 1698863718,
      "node_id": "PRRC_kwDOABII585lQppm",
      "diff_hunk": "@@ -37,27 +37,74 @@\n  */\n struct FeeFrac\n {\n-    /** Fallback version for Mul (see below).\n-     *\n-     * Separate to permit testing on platforms where it isn't actually needed.\n-     */\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a fallback version, separate so it can be tested on platforms where\n+     *  it isn't actually needed. */\n     static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n     {\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n         int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n         int64_t high = (a >> 32) * b;\n         return {high + (low >> 32), static_cast<uint32_t>(low)};\n     }\n \n-    // Compute a * b, returning an unspecified but totally ordered type.\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\n+     *  round_down) or positive infinity (if !round_down). This is a fallback version, separate so\n+     *  that it can be tested on platforms where it isn't actually needed.\n+     *\n+     * The exact behavior with negative n does not really matter, but this implementation chooses\n+     * to be consistent for testability reasons.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute quot_high = n.first / d, so the result becomes\n+        // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\n+        // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\n+        int64_t quot_high = n.first / d;\n+        // Evaluate the parenthesized expression above, so the result becomes\n+        // n_low / d + (quot_high * 2**32)\n+        int64_t n_low = ((n.first % d) << 32) + n.second;\n+        // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\n+        // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\n+        // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\n+        // correction.\n+        int64_t quot_low = n_low / d;\n+        int64_t mod_low = n_low % d;\n+        if (mod_low) [[likely]] {\n+            quot_low += (mod_low > 0) - round_down;",
      "path": "src/util/feefrac.h",
      "position": 45,
      "original_position": 45,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this isn't covered by dedicated tests - only by fuzz and on platforms where `!__SIZEOF_INT128__`, right?\r\n\r\nSince the rounding should be the same for both implementations, we could consider pulling the rounding into `Evaluate` to make sure these lines are always tested:\r\n```patch\r\ndiff --git a/src/util/feefrac.h b/src/util/feefrac.h\r\n--- a/src/util/feefrac.h\t(revision 1cc0d5475a578a8299c24c008c0080a6006cae28)\r\n+++ b/src/util/feefrac.h\t(date 1722450548560)\r\n@@ -55,7 +55,7 @@\r\n      * to be consistent for testability reasons.\r\n      *\r\n      * The result must fit in an int64_t, and d must be strictly positive. */\r\n-    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\r\n+    static inline std::pair<int64_t, int64_t> DivFallback(std::pair<int64_t, uint32_t> n, int32_t d) noexcept\r\n     {\r\n         Assume(d > 0);\r\n         // Compute quot_high = n.first / d, so the result becomes\r\n@@ -69,13 +69,7 @@\r\n         // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\r\n         // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\r\n         // correction.\r\n-        int64_t quot_low = n_low / d;\r\n-        int64_t mod_low = n_low % d;\r\n-        if (mod_low) [[likely]] {\r\n-            quot_low += (mod_low > 0) - round_down;\r\n-        }\r\n-        // Combine and return the result\r\n-        return (quot_high << 32) + quot_low;\r\n+        return {(quot_high << 32) + n_low / d, n_low % d};\r\n     }\r\n \r\n #ifdef __SIZEOF_INT128__\r\n@@ -90,17 +84,10 @@\r\n      *  version relying on __int128.\r\n      *\r\n      * The result must fit in an int64_t, and d must be strictly positive. */\r\n-    static inline int64_t Div(__int128 n, int32_t d, bool round_down) noexcept\r\n+    static inline std::pair<int64_t, int32_t> Div(__int128 n, int32_t d) noexcept\r\n     {\r\n         Assume(d > 0);\r\n-        // Compute the division.\r\n-        int64_t quot = n / d;\r\n-        int32_t mod = n % d;\r\n-        // Correct result if the / operator above rounded in the wrong direction.\r\n-        if (mod) [[likely]] {\r\n-            quot += (mod > 0) - round_down;\r\n-        }\r\n-        return quot;\r\n+        return {n / d, n % d};\r\n     }\r\n #else\r\n     static constexpr auto Mul = MulFallback;\r\n@@ -216,7 +203,9 @@\r\n             }\r\n         } else {\r\n             // Otherwise, use Mul and Div.\r\n-            return Div(Mul(fee, at_size), size, RoundDown);\r\n+            auto [quot, mod] = Div(Mul(fee, at_size), size);\r\n+            auto round = (mod > 0) - (mod && RoundDown);\r\n+            return quot + round;\r\n         }\r\n     }\r\n ```\r\n\r\n----\r\n\r\nIt seems to me both are already using combined division/modulo anyway (i.e. `__divmodti4` on gcc), so the performance should be similar https://godbolt.org/z/Es5o8b3qo.",
      "created_at": "2024-07-31T17:27:05Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1698863718",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698863718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698947273",
      "pull_request_review_id": 2210747435,
      "id": 1698947273,
      "node_id": "PRRC_kwDOABII585lQ-DJ",
      "diff_hunk": "@@ -37,27 +37,74 @@\n  */\n struct FeeFrac\n {\n-    /** Fallback version for Mul (see below).\n-     *\n-     * Separate to permit testing on platforms where it isn't actually needed.\n-     */\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a fallback version, separate so it can be tested on platforms where\n+     *  it isn't actually needed. */\n     static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n     {\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n         int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n         int64_t high = (a >> 32) * b;\n         return {high + (low >> 32), static_cast<uint32_t>(low)};\n     }\n \n-    // Compute a * b, returning an unspecified but totally ordered type.\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\n+     *  round_down) or positive infinity (if !round_down). This is a fallback version, separate so\n+     *  that it can be tested on platforms where it isn't actually needed.\n+     *\n+     * The exact behavior with negative n does not really matter, but this implementation chooses\n+     * to be consistent for testability reasons.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute quot_high = n.first / d, so the result becomes\n+        // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\n+        // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\n+        int64_t quot_high = n.first / d;\n+        // Evaluate the parenthesized expression above, so the result becomes\n+        // n_low / d + (quot_high * 2**32)\n+        int64_t n_low = ((n.first % d) << 32) + n.second;\n+        // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\n+        // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\n+        // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\n+        // correction.\n+        int64_t quot_low = n_low / d;\n+        int64_t mod_low = n_low % d;\n+        if (mod_low) [[likely]] {\n+            quot_low += (mod_low > 0) - round_down;\n+        }\n+        // Combine and return the result\n+        return (quot_high << 32) + quot_low;\n+    }\n+\n #ifdef __SIZEOF_INT128__\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a version relying on __int128. */\n     static inline __int128 Mul(int64_t a, int32_t b) noexcept\n     {\n-        // If __int128 is available, use 128-bit wide multiply.\n         return __int128{a} * b;\n     }\n+\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity. This is a\n+     *  version relying on __int128.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t Div(__int128 n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute the division.\n+        int64_t quot = n / d;\n+        int32_t mod = n % d;\n+        // Correct result if the / operator above rounded in the wrong direction.\n+        if (mod) [[likely]] {\n+            quot += (mod > 0) - round_down;\n+        }\n+        return quot;",
      "path": "src/util/feefrac.h",
      "position": 74,
      "original_position": 74,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we want to avoid branching  here, I think we can avoid the jump i.e.\r\n```ASM\r\n        test    eax, eax\r\n        je      .L4\r\n        setg    al\r\n        movzx   eax, al\r\n        sub     eax, ebx\r\n        cdqe\r\n        add     rbp, rax\r\n```\r\nby doing something like\r\n```suggestion\r\n        auto round = (mod > 0) - (mod && round_down);\r\n        return quot + round;\r\n```\r\nwhich looks like\r\n```ASM\r\n        test    eax, eax\r\n        setne   al\r\n        setg    bl\r\n        movzx   eax, al\r\n        and     eax, ecx\r\n        sub     ebx, eax\r\n        movsx   rbx, ebx\r\n        add     rbx, rdx\r\n```\r\n\r\n(see: https://godbolt.org/z/Es5o8b3qo)",
      "created_at": "2024-07-31T18:36:48Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1698947273",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698947273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 100,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699023683",
      "pull_request_review_id": 2210747435,
      "id": 1699023683,
      "node_id": "PRRC_kwDOABII585lRQtD",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 111,
      "original_position": 111,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "+1, `feefrac_tests` pass if I delete the first part of the if and use this for the small values as well! (would be nice if we could automate this)",
      "created_at": "2024-07-31T19:46:04Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699023683",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699023683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699026665",
      "pull_request_review_id": 2210747435,
      "id": 1699026665,
      "node_id": "PRRC_kwDOABII585lRRbp",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, a positive 31-bit\n+    // divisor, and a rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down or positive and we rounding up, the absolute value of the quotient is the\n+    // rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (prod_abs + div_abs - 1) / div_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 169,
      "original_position": 169,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: this is very useful way to test the big divisions - but it repeats the production code logic for the small ones.",
      "created_at": "2024-07-31T19:48:56Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699026665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699026665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699028624",
      "pull_request_review_id": 2210747435,
      "id": 1699028624,
      "node_id": "PRRC_kwDOABII585lRR6Q",
      "diff_hunk": "@@ -59,26 +48,20 @@ std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n     int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n     if (sign_a != sign_b) return sign_a <=> sign_b;\n \n-    // Compute absolute values.\n-    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n-    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n-    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n-    // intentional here.\n-    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n-    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n-    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n-    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+    // Compute absolute values of products.\n+    auto mul_abs_a = Abs256(a1) * Abs256(a2), mul_abs_b = Abs256(b1) * Abs256(b2);\n \n     // Compute products of absolute values.\n-    auto mul_abs_a = Mul128(abs_a1, abs_a2);\n-    auto mul_abs_b = Mul128(abs_b1, abs_b2);\n     if (sign_a < 0) {\n-        return compare_arrays(mul_abs_b, mul_abs_a);\n+        return mul_abs_b <=> mul_abs_a;\n     } else {\n-        return compare_arrays(mul_abs_a, mul_abs_b);\n+        return mul_abs_a <=> mul_abs_b;\n     }\n }\n \n+/** The maximum absolute value of an int64_t, as an arith_uint256 (2^63). */\n+const auto MAX_ABS_INT64 = arith_uint256{1} << 63;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 102,
      "original_position": 102,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can we move this to the top to make it available for `Abs256`?",
      "created_at": "2024-07-31T19:50:57Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699028624",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699028624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699028863",
      "pull_request_review_id": 2210747435,
      "id": 1699028863,
      "node_id": "PRRC_kwDOABII585lRR9_",
      "diff_hunk": "@@ -13,43 +14,31 @@\n \n namespace {\n \n-/** Compute a * b, represented in 4x32 bits, highest limb first. */\n-std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+/** Construct an arith_uint256 whose value equals abs(x). */\n+arith_uint256 Abs256(int64_t x)\n {\n-    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n-\n-    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n-    auto add_fn = [&](uint64_t v, int pos) {\n-        uint64_t accum{0};\n-        for (int i = 0; i + pos < 4; ++i) {\n-            // Add current value at limb pos in ret.\n-            accum += ret[3 - pos - i];\n-            // Add low or high half of v.\n-            if (i == 0) accum += v & 0xffffffff;\n-            if (i == 1) accum += v >> 32;\n-            // Store lower half of result in limb pos in ret.\n-            ret[3 - pos - i] = accum & 0xffffffff;\n-            // Leave carry in accum.\n-            accum >>= 32;\n-        }\n-        // Make sure no overflow.\n-        assert(accum == 0);\n-    };\n-\n-    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^32).\n-    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n-    add_fn((a >> 32) * (b & 0xffffffff), 1);\n-    add_fn((a & 0xffffffff) * (b >> 32), 1);\n-    add_fn((a >> 32) * (b >> 32), 2);\n-    return ret;\n+    if (x >= 0) {\n+        // For positive numbers, pass through the value.\n+        return arith_uint256{static_cast<uint64_t>(x)};\n+    } else if (x > std::numeric_limits<int64_t>::min()) {\n+        // For negative numbers, negate first.\n+        return arith_uint256{static_cast<uint64_t>(-x)};\n+    } else {\n+        // Special case for x == -2^63 (for which -x results in integer overflow).\n+        return arith_uint256{1} << 63;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 51,
      "original_position": 51,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        return MAX_ABS_INT64;\r\n```",
      "created_at": "2024-07-31T19:51:14Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699028863",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699028863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699033322",
      "pull_request_review_id": 2210747435,
      "id": 1699033322,
      "node_id": "PRRC_kwDOABII585lRTDq",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.",
      "path": "src/util/feefrac.h",
      "position": 88,
      "original_position": 88,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit (sounds a bit weird to me):\r\n```suggestion\r\n    /** Compute the fee for a given `at_size` using this object's feerate.\r\n```",
      "created_at": "2024-07-31T19:55:52Z",
      "updated_at": "2024-07-31T20:38:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699033322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699033322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 196,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699035586",
      "pull_request_review_id": 2210747435,
      "id": 1699035586,
      "node_id": "PRRC_kwDOABII585lRTnC",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 150,
      "original_position": 150,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "how are we testing both? Not on the same platform, right? And we're also testing the small value calculations here, right?",
      "created_at": "2024-07-31T19:58:09Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699035586",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699035586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 145,
      "original_start_line": 145,
      "start_side": "RIGHT",
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699037207",
      "pull_request_review_id": 2210747435,
      "id": 1699037207,
      "node_id": "PRRC_kwDOABII585lRUAX",
      "diff_hunk": "@@ -210,13 +211,8 @@ class base_uint\n     friend inline base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n     friend inline base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n     friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n-    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n-    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n-    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n-    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n-    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }\n+    friend inline std::strong_ordering operator<=>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <=> 0; }",
      "path": "src/arith_uint256.h",
      "position": 17,
      "original_position": 17,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nice!",
      "created_at": "2024-07-31T19:59:51Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699037207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699037207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699057136",
      "pull_request_review_id": 2210747435,
      "id": 1699057136,
      "node_id": "PRRC_kwDOABII585lRY3w",
      "diff_hunk": "@@ -59,23 +48,14 @@ std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n     int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n     if (sign_a != sign_b) return sign_a <=> sign_b;\n \n-    // Compute absolute values.\n-    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n-    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n-    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n-    // intentional here.\n-    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n-    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n-    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n-    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+    // Compute absolute values of products.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 86,
      "original_position": 86,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "bcf879056d871a398f33c436aa34617642d9392d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it important to distinguish the 0 values from the positive ones when comparing the signs?\r\nIf not, maybe we can simplify a bit:\r\n```C++\r\n    // Compute and compare signs.\r\n    int sign_a = (a1 < 0 ? -1 : 1) * (a2 < 0 ? -1 : 1);\r\n    int sign_b = (b1 < 0 ? -1 : 1) * (b2 < 0 ? -1 : 1);\r\n    if (sign_a != sign_b) return sign_a <=> sign_b;\r\n\r\n    auto result = Abs256(a1) * Abs256(a2) <=> Abs256(b1) * Abs256(b2);\r\n    return (sign_a >= 0) ? result : 0 <=> result;",
      "created_at": "2024-07-31T20:16:59Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699057136",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699057136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 49,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699072776",
      "pull_request_review_id": 2210747435,
      "id": 1699072776,
      "node_id": "PRRC_kwDOABII585lRcsI",
      "diff_hunk": "@@ -182,6 +182,27 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {",
      "path": "src/util/feefrac.h",
      "position": 102,
      "original_position": 17,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "80711ef01b7639c5eae60b879798c8980860858c",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would it make sense to add non-fuzz `0x1ffffffff`, `0x200000000` and `0x200000001` test cases for this boundary?",
      "created_at": "2024-07-31T20:32:55Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699072776",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699072776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 210,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699088984",
      "pull_request_review_id": 2211104916,
      "id": 1699088984,
      "node_id": "PRRC_kwDOABII585lRgpY",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, a positive 31-bit\n+    // divisor, and a rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down or positive and we rounding up, the absolute value of the quotient is the\n+    // rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (prod_abs + div_abs - 1) / div_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 169,
      "original_position": 169,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699026665,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand what you mean by big and small divisions.",
      "created_at": "2024-07-31T20:47:28Z",
      "updated_at": "2024-07-31T20:47:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699088984",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699088984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699093137",
      "pull_request_review_id": 2211112029,
      "id": 1699093137,
      "node_id": "PRRC_kwDOABII585lRhqR",
      "diff_hunk": "@@ -37,27 +37,74 @@\n  */\n struct FeeFrac\n {\n-    /** Fallback version for Mul (see below).\n-     *\n-     * Separate to permit testing on platforms where it isn't actually needed.\n-     */\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a fallback version, separate so it can be tested on platforms where\n+     *  it isn't actually needed. */\n     static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n     {\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n         int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n         int64_t high = (a >> 32) * b;\n         return {high + (low >> 32), static_cast<uint32_t>(low)};\n     }\n \n-    // Compute a * b, returning an unspecified but totally ordered type.\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\n+     *  round_down) or positive infinity (if !round_down). This is a fallback version, separate so\n+     *  that it can be tested on platforms where it isn't actually needed.\n+     *\n+     * The exact behavior with negative n does not really matter, but this implementation chooses\n+     * to be consistent for testability reasons.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute quot_high = n.first / d, so the result becomes\n+        // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\n+        // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\n+        int64_t quot_high = n.first / d;\n+        // Evaluate the parenthesized expression above, so the result becomes\n+        // n_low / d + (quot_high * 2**32)\n+        int64_t n_low = ((n.first % d) << 32) + n.second;\n+        // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\n+        // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\n+        // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\n+        // correction.\n+        int64_t quot_low = n_low / d;\n+        int64_t mod_low = n_low % d;\n+        if (mod_low) [[likely]] {\n+            quot_low += (mod_low > 0) - round_down;",
      "path": "src/util/feefrac.h",
      "position": 45,
      "original_position": 45,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1698863718,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Looks like this isn't covered by dedicated tests - only by fuzz and on platforms where !__SIZEOF_INT128__, right?\r\n\r\nThe `feefrac_mul_div` fuzz test tests this code on every platform (only for `n` inputs which are themselves the product of a 32-bit integer times a 64-bit integer, but given that those are the only ones that matter for production that seems sufficient to me).\r\n\r\nAlso note that we build fuzz corpora only on platforms that support libfuzzer, but the constructed fuzz inputs then do get tested (in CI even) on other test environments too.",
      "created_at": "2024-07-31T20:51:49Z",
      "updated_at": "2024-07-31T20:51:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699093137",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699093137"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699094186",
      "pull_request_review_id": 2211113728,
      "id": 1699094186,
      "node_id": "PRRC_kwDOABII585lRh6q",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 111,
      "original_position": 111,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699023683,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That is what the `feefrac_mul_div` test does effectively.",
      "created_at": "2024-07-31T20:52:54Z",
      "updated_at": "2024-07-31T20:52:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699094186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699094186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699095841",
      "pull_request_review_id": 2211116395,
      "id": 1699095841,
      "node_id": "PRRC_kwDOABII585lRiUh",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, a positive 31-bit\n+    // divisor, and a rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down or positive and we rounding up, the absolute value of the quotient is the\n+    // rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (prod_abs + div_abs - 1) / div_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 169,
      "original_position": 169,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699026665,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I meant that in https://github.com/bitcoin/bitcoin/pull/30535/files#diff-09e6cf871236bf03d32cca9405837d9b7927690b2296a2de17c9be6ea0e75959R215 we're using the same `A + (B - 1) / B` equation for rounding, i.e. the test and production code may be too similar.\r\nI think it's fine since the big fee rounding is the more complicated one.",
      "created_at": "2024-07-31T20:54:37Z",
      "updated_at": "2024-07-31T20:54:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699095841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699095841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699095973",
      "pull_request_review_id": 2211116638,
      "id": 1699095973,
      "node_id": "PRRC_kwDOABII585lRiWl",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 150,
      "original_position": 150,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699035586,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The test directly invokes both `Div(Mul(mul64, mul32), div)` and `DivFallback(MulFallback(mul64, mul32), div)`.",
      "created_at": "2024-07-31T20:54:46Z",
      "updated_at": "2024-07-31T20:54:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699095973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699095973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 145,
      "original_start_line": 145,
      "start_side": "RIGHT",
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699098055",
      "pull_request_review_id": 2211119892,
      "id": 1699098055,
      "node_id": "PRRC_kwDOABII585lRi3H",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, a positive 31-bit\n+    // divisor, and a rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down or positive and we rounding up, the absolute value of the quotient is the\n+    // rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (prod_abs + div_abs - 1) / div_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 169,
      "original_position": 169,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699026665,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I see, yes. I mean it's really the only way of implementing a rounding-up division that I know. And while conceptually the algorithm is the same, it is being done on `arith_uint256` rather than the types used in production.",
      "created_at": "2024-07-31T20:56:58Z",
      "updated_at": "2024-07-31T20:56:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699098055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699098055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699099507",
      "pull_request_review_id": 2211122360,
      "id": 1699099507,
      "node_id": "PRRC_kwDOABII585lRjNz",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 111,
      "original_position": 111,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699023683,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does it test `return Div(Mul(fee, at_size), size, RoundDown)` when `fee < 0x200000000`?\r\nI don't think that can happen in reality, I just tested it to make sure it's correct for small values as well.",
      "created_at": "2024-07-31T20:58:11Z",
      "updated_at": "2024-07-31T20:58:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699099507",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699099507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699100246",
      "pull_request_review_id": 2211123677,
      "id": 1699100246,
      "node_id": "PRRC_kwDOABII585lRjZW",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 150,
      "original_position": 150,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699035586,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My mistake, thanks for clarifying",
      "created_at": "2024-07-31T20:58:59Z",
      "updated_at": "2024-07-31T20:59:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699100246",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699100246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 145,
      "original_start_line": 145,
      "start_side": "RIGHT",
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    }
  ]
}