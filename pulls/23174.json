{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174",
    "id": 749004265,
    "node_id": "PR_kwDOABII584spOXp",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23174",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/23174.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/23174.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
    "number": 23174,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "validation: have LoadBlockIndex account for snapshot use",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is part of the [assumeutxo project](https://github.com/bitcoin/bitcoin/projects/11) (parent PR: #15606) \r\n\r\n---\r\n\r\nCurrently, `BlockManager::LoadBlockIndex` adds all blocks that have downloaded transactions to the active chain state's `setBlockIndexCandidates` set, ignoring the background chain state.\r\n\r\nThis PR changes ChainstateManager::LoadBlockIndex to update `setBlockIndexCandidates` in the background chain, not just the active chain. In the active chain, the same blocks are added as before. In the background chain, only blocks that have actually been validated, not blocks marked assumed-valid are added so the background chain will continue to download and validate assumed-valid blocks.",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "created_at": "2021-10-04T14:33:59Z",
    "updated_at": "2024-05-22T12:52:06Z",
    "closed_at": "2021-12-15T10:08:54Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-12-15T10:08:54Z",
    "merge_commit_sha": "b67115dd044d609559a40c27d159aeab3597b251",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jamesob:2021-10-au-loadblockindex",
      "ref": "2021-10-au-loadblockindex",
      "sha": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 42077031,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MjA3NzAzMQ==",
        "name": "bitcoin",
        "full_name": "jamesob/bitcoin",
        "owner": {
          "login": "jamesob",
          "id": 73197,
          "node_id": "MDQ6VXNlcjczMTk3",
          "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jamesob",
          "html_url": "https://github.com/jamesob",
          "followers_url": "https://api.github.com/users/jamesob/followers",
          "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
          "organizations_url": "https://api.github.com/users/jamesob/orgs",
          "repos_url": "https://api.github.com/users/jamesob/repos",
          "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jamesob/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jamesob/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jamesob/bitcoin",
        "archive_url": "https://api.github.com/repos/jamesob/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jamesob/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jamesob/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jamesob/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jamesob/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jamesob/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jamesob/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jamesob/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jamesob/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jamesob/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jamesob/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jamesob/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jamesob/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jamesob/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jamesob/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jamesob/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jamesob/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jamesob/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jamesob/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jamesob/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jamesob/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jamesob/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jamesob/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jamesob/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jamesob/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jamesob/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jamesob/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jamesob/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jamesob/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jamesob/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jamesob/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jamesob/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jamesob/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jamesob/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jamesob/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jamesob/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jamesob/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jamesob/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jamesob/bitcoin/hooks",
        "svn_url": "https://github.com/jamesob/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 3,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 271374,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-01-12T18:32:56Z",
        "created_at": "2015-09-07T22:18:03Z",
        "updated_at": "2024-03-26T20:20:47Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "5dd28e5cff8a8177b969181ecb58d045e7f80a72",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35426,
        "stargazers_count": 76487,
        "watchers_count": 76487,
        "size": 259027,
        "default_branch": "master",
        "open_issues_count": 686,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-22T12:43:37Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-05-22T12:43:42Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 157,
    "deletions": 18,
    "changed_files": 3,
    "commits": 3,
    "review_comments": 93,
    "comments": 10
  },
  "events": [
    {
      "event": "labeled",
      "id": 5405104445,
      "node_id": "LE_lADOABII5848g6nLzwAAAAFCK1k9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5405104445",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T16:06:40Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 934329907,
      "node_id": "IC_kwDOABII5843sL4z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934329907",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T11:40:15Z",
      "updated_at": "2021-12-02T15:18:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23581](https://github.com/bitcoin/bitcoin/pull/23581) (Move BlockManager to node/blockstorage by MarcoFalke)\n* [#23448](https://github.com/bitcoin/bitcoin/pull/23448) (refactor, consensus: remove calls to global `Params()` in validation layer by lsilva01)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-934329907",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T05:18:09Z",
      "updated_at": "2021-10-06T05:18:09Z",
      "source": {
        "issue": {
          "id": 694197606,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDgwNjEwMDYw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19888",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19888/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19888/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19888/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19888",
          "number": 19888,
          "state": "closed",
          "state_reason": null,
          "title": "rpc, test: Improve getblockstats for unspendables",
          "body": "Fixes #19885\r\n\r\nThe genesis block does not have undo data saved to disk so the RPC errored because of that.",
          "user": {
            "login": "fjahr",
            "id": 1322187,
            "node_id": "MDQ6VXNlcjEzMjIxODc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjahr",
            "html_url": "https://github.com/fjahr",
            "followers_url": "https://api.github.com/users/fjahr/followers",
            "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
            "organizations_url": "https://api.github.com/users/fjahr/orgs",
            "repos_url": "https://api.github.com/users/fjahr/repos",
            "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fjahr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19888",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19888",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19888.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19888.patch"
          },
          "closed_at": "2022-12-05T22:47:13Z",
          "created_at": "2020-09-05T22:25:38Z",
          "updated_at": "2023-12-05T12:20:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 937580719,
      "node_id": "IC_kwDOABII58434liv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937580719",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-07T08:42:00Z",
      "updated_at": "2021-10-07T08:42:00Z",
      "author_association": "MEMBER",
      "body": "(this PR is missing in the Assume UTXO project)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-937580719",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "commented",
      "id": 938101140,
      "node_id": "IC_kwDOABII58436kmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938101140",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-07T19:43:24Z",
      "updated_at": "2021-10-07T19:43:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-938101140",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-08T03:29:33Z",
      "updated_at": "2021-10-08T03:29:33Z",
      "source": {
        "issue": {
          "id": 954220384,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Njk4MTUwMTI0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22564",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22564/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22564/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22564/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22564",
          "number": 22564,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Move mutable globals cleared in `::UnloadBlockIndex` to `BlockManager`",
          "body": "Fixes #22964\r\n\r\n-----\r\n\r\nThis is a small part of the work to accomplish what I described in 972c5166ee685447a6d4bf5e501b07a0871fba85:\r\n```\r\nOver time, we should probably move these mutable global state variables\r\ninto ChainstateManager or CChainState so it's easier to reason about\r\ntheir lifecycles.\r\n```\r\n\r\n`::UnloadBlockIndex` manually resets a subset of our mutable globals in addition to unloading the `ChainstateManager` and clearing the mempool. The need for this manual reset (AFAICT) arises out of the fact that many of these globals are closely related to the block index (hence `::UnloadBlockIndex`), and need to be reset with it.\r\n\r\nI've shot this \"manual reset\" gun at my foot several times while doing the de-globalize chainman work.\r\n\r\nThankfully, now that we have a `BlockManager` class that owns the block index, these globals should be moved under that class so that they can live and die with the block index. These moves, along with making the block index non-heap-based, eliminates:\r\n1. https://github.com/bitcoin/bitcoin/commit/3585b521392c5b2c855c3ba6dc9b7d2a171b3710 The need to reason about when we need to manually call `::UnloadBlockIndex` (this decision can at times seem almost arbitrary)\r\n2. https://github.com/bitcoin/bitcoin/commit/f741623c25455c20bff9eb1ddd10a4ac84dc5655 The need to have an `::UnloadBlockIndex` or explicit `~ChainstateManager` at all",
          "user": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": true,
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22564",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22564",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22564.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22564.patch"
          },
          "closed_at": "2022-04-28T10:17:08Z",
          "created_at": "2021-07-27T19:58:39Z",
          "updated_at": "2023-04-28T09:59:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 775125236,
      "node_id": "PRR_kwDOABII584uM3j0",
      "url": null,
      "actor": null,
      "commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "After debug building rebased to master and an initial review, the code builds cleanly and makes sense, but I need to look more deeply and haven't yet checked if the change is covered by tests, so work-in-progress ACK 51e614fdbc6a23ade324e9bd01228bf97df9bc5d. A few minor comments, feel free to ignore.\r\n\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-775125236",
      "submitted_at": "2021-10-08T15:28:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "reviewed",
      "id": 778777785,
      "node_id": "PRR_kwDOABII584uazS5",
      "url": null,
      "actor": null,
      "commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 51e614fdbc6a23ade324e9bd01228bf97df9bc5d. I left a lot of suggestions and some questions, but this change seems like a step in right direction and it shouldn't change behavior in any noticeable way when there's no snapshot loaded.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-778777785",
      "submitted_at": "2021-10-19T20:05:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "commented",
      "id": 947075033,
      "node_id": "IC_kwDOABII5844czfZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947075033",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-19T20:20:54Z",
      "updated_at": "2021-10-19T20:20:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Forgot to post this earlier. I wrote up a description of this PR when I started reviewing it that may be useful to others (or helpful to me if I got something wrong):\r\n\r\nCurrently, `BlockManager::LoadBlockIndex` adds all blocks that have downloaded transactions to the _active_ chain state's `setBlockIndexCandidates` set, ignoring the _background_ chain state.\r\n\r\nThis PR changes `ChainstateManager::LoadBlockIndex` to:\r\n\r\n- Update `setBlockIndexCandidates` in the background chain, not just the active chain. In the active chain, all blocks are added as before. In the background chain, only blocks below the snapshot height are added so the background chain will continue to download and validate them.\r\n- Sets `pindex->nChainTx` of the snapshot block to the value from snapshot metadata instead of leaving it 0.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-947075033",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "reviewed",
      "id": 788689376,
      "node_id": "PRR_kwDOABII584vAnHg",
      "url": null,
      "actor": null,
      "commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, as highlighted by other reviewers would be good to have unit tests to assert correctness of the changes.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-788689376",
      "submitted_at": "2021-10-25T23:51:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5536869680,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFKBe0w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5536869680",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T21:23:06Z"
    },
    {
      "event": "commented",
      "id": 954242458,
      "node_id": "IC_kwDOABII58444JWa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/954242458",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T21:37:44Z",
      "updated_at": "2021-10-28T22:06:05Z",
      "author_association": "MEMBER",
      "body": "Hey, review works! Thanks to commentary from @ryanofsky @ariard, I've found that a lot of the original patch was unnecessary .I've pushed a much-simplified changeset that addresses the quandary I posted yesterday (https://github.com/bitcoin/bitcoin/pull/23174#discussion_r737666011). \r\n\r\nIt turns out that the earlier version of this patch contained some unnecessary code that was a vestige from before I was persisting changes to the block index during snapshot activation (added in #21526).  The new changeset just ensures that we don't add tip candidates which rely on assumed-valid blocks to the IBD chainstate. I think the changes are much more intuitive to follow, and a decent amount of code was dropped.\r\n\r\nFor anyone who was in doubt: reviewing code pays off!",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-954242458",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "mentioned",
      "id": 5536954478,
      "node_id": "MEE_lADOABII5848g6nLzwAAAAFKBzhu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5536954478",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T21:37:44Z"
    },
    {
      "event": "subscribed",
      "id": 5536954482,
      "node_id": "SE_lADOABII5848g6nLzwAAAAFKBzhy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5536954482",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T21:37:44Z"
    },
    {
      "event": "mentioned",
      "id": 5536954489,
      "node_id": "MEE_lADOABII5848g6nLzwAAAAFKBzh5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5536954489",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T21:37:44Z"
    },
    {
      "event": "subscribed",
      "id": 5536954496,
      "node_id": "SE_lADOABII5848g6nLzwAAAAFKBziA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5536954496",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T21:37:44Z"
    },
    {
      "event": "reviewed",
      "id": 792455220,
      "node_id": "PRR_kwDOABII584vO-g0",
      "url": null,
      "actor": null,
      "commit_id": "2d7ecfb6e9847a0f0d9072e659a743bd231381cd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-792455220",
      "submitted_at": "2021-10-28T21:43:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5537012090,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFKCBl6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5537012090",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T21:48:11Z"
    },
    {
      "event": "reviewed",
      "id": 795938311,
      "node_id": "PRR_kwDOABII584vcQ4H",
      "url": null,
      "actor": null,
      "commit_id": "cb1d4244806980d31ceaa2307431dd70e6c39fe9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK dbca47ece6b9a3a5e02969270bfab340fce286c0. Much simpler now and looks all good to me!\r\n\r\nIn the PR description https://github.com/bitcoin/bitcoin/pull/23174#issue-1015261643:\r\n\r\n> When reconnecting the block index on startup, we have to account for the fact that assumed-valid blocks (per the snapshot chainstate) do not have nTx values. We can't exclude blocks from inclusion in `setBlockIndexCandidates` on this basis or we will trip over an empty set in an assertion later in startup.\r\n\r\nI'm actually not sure what this is referring to, and it seems like it might not be applicable anymore according to https://github.com/bitcoin/bitcoin/pull/23174#discussion_r737666011 if nTx values are set and the previous code is now reverted\r\n\r\n> We also have to ensure that blocks past the snapshot base block (i.e. the end of the assumed-valid region of the chain) are not included in setBlockIndexCandidates for the background validation chainstate.\r\n\r\nThe way this is phrased makes it sound like this change avoids adding blocks, when actually it is adding more blocks. Would maybe try to make it clearer this is now adding blocks for the background chainstate. Feel free to steal PR description I posted earlier too https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-947075033 if that is useful",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-795938311",
      "submitted_at": "2021-11-02T23:13:44Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-06T10:12:11Z",
      "updated_at": "2021-11-06T10:12:11Z",
      "source": {
        "issue": {
          "id": 1046261062,
          "node_id": "PR_kwDOABII584uK3td",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23448",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23448/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23448/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23448/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23448",
          "number": 23448,
          "state": "closed",
          "state_reason": null,
          "title": "refactor, consensus: remove calls to global `Params()` in validation layer",
          "body": "This PR removes calls to global `Params()` in validation layer (except in the `CChainState` constructor).\r\n\r\nMotivation: Reducing the use of global variables makes code more predictable. \r\n\r\nRequires #23437 as it changes the visibility of `CChainState::m_params` to public.",
          "user": {
            "login": "lsilva01",
            "id": 84432093,
            "node_id": "MDQ6VXNlcjg0NDMyMDkz",
            "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lsilva01",
            "html_url": "https://github.com/lsilva01",
            "followers_url": "https://api.github.com/users/lsilva01/followers",
            "following_url": "https://api.github.com/users/lsilva01/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lsilva01/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lsilva01/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
            "organizations_url": "https://api.github.com/users/lsilva01/orgs",
            "repos_url": "https://api.github.com/users/lsilva01/repos",
            "events_url": "https://api.github.com/users/lsilva01/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lsilva01/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23448",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23448",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23448.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23448.patch"
          },
          "closed_at": "2022-06-14T08:31:50Z",
          "created_at": "2021-11-05T21:36:27Z",
          "updated_at": "2023-06-14T10:06:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5592884187,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFNXKPb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592884187",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T21:21:21Z"
    },
    {
      "event": "commented",
      "id": 964561176,
      "node_id": "IC_kwDOABII5845fgkY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964561176",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T21:24:41Z",
      "updated_at": "2021-11-09T21:24:41Z",
      "author_association": "MEMBER",
      "body": "Man this changeset keeps getting smaller and smaller. Thanks @ryanofsky!\r\n\r\nI've reverted back to doing a stateful approach for assumed-valid detection in LoadBlockIndex since the more holistic approach of scanning ancestors ended up being prohibitively slow when loading the main chain. This has allowed me to drop a few more changes from the original patch.\r\n\r\nThe only remaining item left is to write unittests for the contents of `setBlockIndexCandidates` after calling LoadBlockIndex, which I'll be working on shortly.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-964561176",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "mentioned",
      "id": 5592905057,
      "node_id": "MEE_lADOABII5848g6nLzwAAAAFNXPVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592905057",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T21:24:42Z"
    },
    {
      "event": "subscribed",
      "id": 5592905066,
      "node_id": "SE_lADOABII5848g6nLzwAAAAFNXPVq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592905066",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T21:24:42Z"
    },
    {
      "event": "reviewed",
      "id": 803118052,
      "node_id": "PRR_kwDOABII584v3pvk",
      "url": null,
      "actor": null,
      "commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 2833bd0277ac87cd07e98b0a23b73eed97a2e513. Changes since last review: Making PopulateAndValidateSnapshot loop from 1 instead of calling isGenesis. Also adding unit test. Making LoadBlockIndex use height comparison to determine assumed-valid blocks instead of traversing pprev.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/23174#issue-1015261643, https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-947075033\r\n\r\nI edited PR description to drop the part about nChainTx and stop referring to the snapshot height since implementation was changed to use first assumed-valid height, not last assumed-valid height. Previous description was:\r\n\r\n> This is part of the [assumeutxo project](https://github.com/bitcoin/bitcoin/projects/11) (parent PR: #15606)\r\n> \r\n> (PR description by ryanofsky)\r\n> \r\n> Currently, BlockManager::LoadBlockIndex adds all blocks that have downloaded transactions to the active chain state's setBlockIndexCandidates set, ignoring the background chain state.\r\n> \r\n> This PR changes ChainstateManager::LoadBlockIndex to:\r\n> \r\n> Update `setBlockIndexCandidates` in the background chain, not just the active chain. In the active chain, all blocks are added as before. In the background chain, only blocks below the snapshot height are added so the background chain will continue to download and validate them. Sets pindex->nChainTx of the snapshot block to the value from snapshot metadata instead of leaving it 0.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-803118052",
      "submitted_at": "2021-11-10T21:36:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5600129879,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFNyzNX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5600129879",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-10T21:36:52Z"
    },
    {
      "event": "commented",
      "id": 965766954,
      "node_id": "IC_kwDOABII5845kG8q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/965766954",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-10T21:37:22Z",
      "updated_at": "2021-11-10T21:37:22Z",
      "author_association": "MEMBER",
      "body": "@ryanofsky nice timing. I just pushed a unittest for `LoadBlockIndex()`/`setBlockIndexCandidates`.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-965766954",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "mentioned",
      "id": 5600132925,
      "node_id": "MEE_lADOABII5848g6nLzwAAAAFNyz89",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5600132925",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-10T21:37:22Z"
    },
    {
      "event": "subscribed",
      "id": 5600132933,
      "node_id": "SE_lADOABII5848g6nLzwAAAAFNyz9F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5600132933",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-10T21:37:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5600200888,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFNzEi4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5600200888",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-10T21:50:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5600207641,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFNzGMZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5600207641",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-10T21:51:38Z"
    },
    {
      "event": "reviewed",
      "id": 805023614,
      "node_id": "PRR_kwDOABII584v-69-",
      "url": null,
      "actor": null,
      "commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK e35d167682bc527fa9d8734f1cc7558f18d95b09. Main change since last review was just adding test. And some suggestions from the last review were also applied.\r\n\r\nThis PR is now a lot simpler than it was at previous points, so it should be pretty easy for previous reviewers to reack, or new reviewers to take a look at.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-805023614",
      "submitted_at": "2021-11-12T17:02:01Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "reviewed",
      "id": 805559521,
      "node_id": "PRR_kwDOABII584wA9zh",
      "url": null,
      "actor": null,
      "commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "The newly patchset is far simpler, just left few minor comments to confirm my understanding of the changes.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-805559521",
      "submitted_at": "2021-11-15T01:24:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5627530013,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFPbUsd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5627530013",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-16T20:22:48Z"
    },
    {
      "event": "reviewed",
      "id": 808091891,
      "node_id": "PRR_kwDOABII584wKoDz",
      "url": null,
      "actor": null,
      "commit_id": "b4919698ff3cc7183ae9ada7026d7300720f3fcc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK bc3288b0ba1d949f0004513e250bb21ddfb5b389. Only change since previous review was fixing up a code comment to be more clear about which chainstate it was referring to ",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-808091891",
      "submitted_at": "2021-11-17T04:05:40Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5641831334,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFQR4Om",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5641831334",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-18T22:26:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5647088119,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFQl7n3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5647088119",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-19T18:34:14Z"
    },
    {
      "event": "reviewed",
      "id": 814428093,
      "node_id": "PRR_kwDOABII584wiy-9",
      "url": null,
      "actor": null,
      "commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 7a576ba9d24308e36dcde2b48b34c0676de98daa. Only change since previous review is adding new asserts and some tweaks in the test",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-814428093",
      "submitted_at": "2021-11-24T04:45:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-24T14:17:08Z",
      "updated_at": "2021-11-24T14:17:08Z",
      "source": {
        "issue": {
          "id": 1061656433,
          "node_id": "PR_kwDOABII584u7R9T",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23581",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23581/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23581/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23581/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23581",
          "number": 23581,
          "state": "closed",
          "state_reason": null,
          "title": "Move BlockManager to node/blockstorage",
          "body": "`BlockManager` is responsible for reading and writing block(headers). So move it to the existing `blockstorage` module in `node`. Also, move validation code unrelated to block-storage out from `BlockManager`. ",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23581",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23581",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23581.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23581.patch"
          },
          "closed_at": "2022-01-04T02:50:10Z",
          "created_at": "2021-11-23T19:55:35Z",
          "updated_at": "2023-01-04T10:06:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 817231643,
      "node_id": "PRR_kwDOABII584wtfcb",
      "url": null,
      "actor": null,
      "commit_id": "e19253f2fd17b01e52950b9e78fcd10251e6e8c0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I reviewed the code and it looks very good to me with one potential optimization I suggested below.\r\n\r\nI also did some mutation testing on the changes and discovered that the test in the first commit doesn't seem to cover the change. Unless I made some error here myself, the test should probably be fixed before merging.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-817231643",
      "submitted_at": "2021-11-28T17:04:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "reviewed",
      "id": 817521177,
      "node_id": "PRR_kwDOABII584wumIZ",
      "url": null,
      "actor": null,
      "commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-817521177",
      "submitted_at": "2021-11-29T09:18:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5686145653,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFS67J1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5686145653",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-29T16:24:47Z"
    },
    {
      "event": "reviewed",
      "id": 818147353,
      "node_id": "PRR_kwDOABII584ww_AZ",
      "url": null,
      "actor": null,
      "commit_id": "709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e. Only change since last review is test change moving genesis not assume-valid check after the successful CreateAndActivateUTXOSnapshot call instead of before, so it is actually meaningful.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-818147353",
      "submitted_at": "2021-11-29T18:11:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "reviewed",
      "id": 819316081,
      "node_id": "PRR_kwDOABII584w1cVx",
      "url": null,
      "actor": null,
      "commit_id": "9be75f223577108bc573c2b04f2f8c67eefe88ef",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK 709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e, did not look at the last commit (test) 🥇\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nConcept ACK 709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e, did not look at the last commit (test) 🥇\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUggmQv+IHs5tQZR4a2VV+VvpfYa4GEdcIbiiJjRJqReLcICNClFReu5hpKfkKm4\r\n8VbU64iwXezNAeAzlJYUB7vWMKdGlHMMYX4V9fpJ6zwGkl38eL8Xq7kzHLUDH6iO\r\nFfC32v0nywoz2FcnT5sFtAodnTl8kR01lQOCZSUvsvHnrUiYh6TGZt0Xlt1lz8Sh\r\n2/Orx7mEYlmpR9lDPLrU6DJscUm12r5hE/PQnLC0iJ+nmc/kpKGV6S25fR08E0Id\r\nJfPUnpzetTdiJGgjx3Zi9fau0ROmadXYPRJw8LSLm5cWCTxAt32oo4OQnoQeILy2\r\npmp76uQGwEnnD4vytiPg4J2ZBQUIzYz+X3f1DhWJhbDplfAcR1pKHO/f1itCqUhu\r\nCUw5IbT1Wu4ocMepisosddMuoIuYSbb3Z3QXizXZHnD6E7WWKa1oNherTzX3IaFM\r\nRW+rKuEZ0n1Wa0Sv5NV8OxxPQYLDwPXopHHz1K9Mz4/DJV6eOE9Q5+l1RtkpH9mr\r\n0nul+aMW\r\n=nvxK\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-819316081",
      "submitted_at": "2021-11-30T18:04:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "reviewed",
      "id": 823911768,
      "node_id": "PRR_kwDOABII584xG-VY",
      "url": null,
      "actor": null,
      "commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK for the first commit 9be75f223577108bc573c2b04f2f8c67eefe88ef\r\n\r\nOne suggestion to make the second easier to review...",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-823911768",
      "submitted_at": "2021-12-06T12:57:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQwYzZlNjFmNWRkM2I2YWY4MTg0NTlkOWQwM2I3YmEzMTZjNWEzZjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7",
      "tree": {
        "sha": "f4067d5f4bbd4f5f673ee896f1a11f9d3e243d5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4067d5f4bbd4f5f673ee896f1a11f9d3e243d5f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f4067d5f4bbd4f5f673ee896f1a11f9d3e243d5f\nparent af4275e8dbde0fd85b590175f1e932164762d741\nauthor James O'Beirne <james.obeirne@pm.me> 1635448510 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1639421122 -0500\n\nvalidation: don't modify genesis during snapshot load\n\nAvoid modifying the genesis block index entry during snapshot load. This\nis because, in a future change that fixes LoadBlockIndex for UTXO\nsnapshots, we detect block index entries that are reliant on\nassumed-valid ancestors and treat them specially.\n\nSince the genesis block doesn't have BLOCK_VALID_SCRIPTS, it would be\nerroneously marked BLOCK_ASSUMED_VALID during snapshot load if we didn't\nskip it here. This would cause a \"setBlockIndexCandidates() empty\"\nassertion to be tripped since all block index entries would be marked\nassume-valid due to genesis, which is never re-validated.\n\nThere's probably no good reason to modify the genesis block index entry\nduring snapshot load anyway...\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmG3lMQACgkQepNdrbLE\nTwVIoRAAh8WQYMzOAXPV9SxdwawBHSrD01cUxgG1jTdr4CNrs9P36JcIC7k2bMIr\n4adlqPbVOgSCGz0Vixs/ao1nZiMGufP0I+rQVWQOD0qslW075niEtHohS86fVTbU\nNFxoz33y3I6wrh1z8a/0WnQ99gKSL4sKEcUUe90i+I4fUuGIi6djlcQKId5PlaeB\nv2bgJu7NlFtg1QzWdnHI2taavMP5jgqsduaxuoFMGNDpoZPaVZEoH5/vtsJu+Ks2\ntKQfr86CVN5lp0B5ygnYtAsAXlKkIwQXBC//NqVYSodLkPVUjD+4sGLi4CzTXpt7\nrerRarcjpZsMUFvY/8c9sR3WLvZ3gT6p4xjMK3dEqS8ANvG0SPYWe1mBzLUo3Om0\nuCmgqsF88KYCA8QNaLqDgOPR+kYNRuUPzkIATWOBrXxD/LjRMi7zsVvMfos+11a+\nPcMeCJJkVLdfxYMjTNXF9C4YcDCiCRHdYy6GmdIFotarTsmQMB8jnlIs4HQ93sOc\nm0gWeriOPvNe3tTUxnE7aH+gf35p7AApXExDJX2XP03NFchbjP9VXRuOX/oG45WI\nuDPfivQ0rkO0Irrba3PiijnDS+LWBSnkvVhQotTP0rkLSPadyzi/36aNxFKDIA7r\nypQ8s1NZiKD9Jn1sIR7HnXBcp1ZLlQSM7fjHYDVV2Y8BxIMhcy0=\n=Vgkl\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af4275e8dbde0fd85b590175f1e932164762d741",
          "sha": "af4275e8dbde0fd85b590175f1e932164762d741",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/af4275e8dbde0fd85b590175f1e932164762d741"
        }
      ],
      "message": "validation: don't modify genesis during snapshot load\n\nAvoid modifying the genesis block index entry during snapshot load. This\nis because, in a future change that fixes LoadBlockIndex for UTXO\nsnapshots, we detect block index entries that are reliant on\nassumed-valid ancestors and treat them specially.\n\nSince the genesis block doesn't have BLOCK_VALID_SCRIPTS, it would be\nerroneously marked BLOCK_ASSUMED_VALID during snapshot load if we didn't\nskip it here. This would cause a \"setBlockIndexCandidates() empty\"\nassertion to be tripped since all block index entries would be marked\nassume-valid due to genesis, which is never re-validated.\n\nThere's probably no good reason to modify the genesis block index entry\nduring snapshot load anyway...",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-12-13T18:45:22Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-28T19:15:10Z"
      },
      "sha": "d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBmZDU5OWE1MWE3MDBjMDI4ZDZmN2VkODA2N2QyZDlmNmU2YTA0YTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fd599a51a700c028d6f7ed8067d2d9f6e6a04a5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0fd599a51a700c028d6f7ed8067d2d9f6e6a04a5",
      "tree": {
        "sha": "b3f7e049a45d00dc3e849aea9c0f5fe7c53862ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3f7e049a45d00dc3e849aea9c0f5fe7c53862ed"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b3f7e049a45d00dc3e849aea9c0f5fe7c53862ed\nparent d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7\nauthor James O'Beirne <james.obeirne@pm.me> 1635451666 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1639421127 -0500\n\nvalidation: have LoadBlockIndex account for snapshot use\n\nEnsure that blocks past the snapshot base block (i.e. the end of the\nassumed-valid region of the chain) are not included in\nsetBlockIndexCandidates for the background validation chainstate. These\nblocks, while fully validated and lacking the BLOCK_ASSUMED_VALID flag,\n*rely* on blocks which are assumed-valid, and so shouldn't be added to\nthe IBD chainstate.\n\nCo-authored-by: Russ Yanofsky <russ@yanofsky.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmG3lMcACgkQepNdrbLE\nTwXnhQ//QYboRWo93Ine7A59HLwLJ6QS/0kV8f1NMfHN44gcmGnbCcdtXsKocUuY\n67uQXkCKOpUy6QYEHvRmjVBs7ISM+AUj4OQWF+VISBGDOqonHiwVo0GYyVq6gUvi\n//qbzqbNB5jJFratizwgdTYvCOXEL9fWMvRaQcKOZkAEuiaLFAroCF9Dn0ZgxJ8T\ndU7PeUxKoV47roJXTt7NBnfBCxLLr8w4USR2NFI1ixaGZ9i9SykReruurcvCEB1z\ntAKtj6E2om73XVrrchu+A5YfhttnPt0GPvvtYilqy0YnoEoMFkNX7DkpKi09qoOt\nCvbF38V1dIm5iXl+RpHi8YDIy2STBEUepwZrvyTn4Zq3hz+foF5m5rMDz2XaCZYQ\n+DP3mVOjmWdNvuiLyI8a6KTPERZ6xjCgZsFzzxrFdwiYrM6u0gO0sn1A7u/R9OFL\nEvrhvXfoIMLls2pLos4SIWnG1pG1OB8Y9Ipf/FcZ0Qo62j8HM6duXoyxoPBhPDSM\nb7/Q6eu0RUDS520qG9uEdXlJpnpfK1WtE2WnAdGJR9YRz0SFPfoXrICpGNO7jq/o\ngJgMmSy/0MJgjgFoYgBo1sy/HVDylpwK3pJFHdolSPDNi28/hq2nIBkEtFly69vI\nL0BMt/Ru0JlekGZyArWLKbN1RfVtu2/LRD+4X6ccI7k9CxnFxGA=\n=JFP+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7",
          "sha": "d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7"
        }
      ],
      "message": "validation: have LoadBlockIndex account for snapshot use\n\nEnsure that blocks past the snapshot base block (i.e. the end of the\nassumed-valid region of the chain) are not included in\nsetBlockIndexCandidates for the background validation chainstate. These\nblocks, while fully validated and lacking the BLOCK_ASSUMED_VALID flag,\n*rely* on blocks which are assumed-valid, and so shouldn't be added to\nthe IBD chainstate.\n\nCo-authored-by: Russ Yanofsky <russ@yanofsky.org>",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-12-13T18:45:27Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-28T20:07:46Z"
      },
      "sha": "0fd599a51a700c028d6f7ed8067d2d9f6e6a04a5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIyODNiOWNkMWVlMGZiZDFlOGViYzYxNjczYjFmZTc1OTYxOTlhMjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "tree": {
        "sha": "83f2c97a2affb4070e8fd246d3636063a7db139f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83f2c97a2affb4070e8fd246d3636063a7db139f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 83f2c97a2affb4070e8fd246d3636063a7db139f\nparent 0fd599a51a700c028d6f7ed8067d2d9f6e6a04a5\nauthor James O'Beirne <james.obeirne@pm.me> 1636580112 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1639421128 -0500\n\ntest: add tests for LoadBlockIndex when using multiple chainstates\n\nIncorporates feedback from Russ Yanofsky.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmG3lMgACgkQepNdrbLE\nTwURkA/9Hzjuo46OuO641y81sh7QqrchSEVyEkuqfXnjB2EyOLkZn5ucyerg8/97\n7IFNqo3Yx+z/UmL7WyLHt+gwFDzBqvu+cnSfyTzAUeR/sIBb7JTmez6qDBGR7+va\nlqeIjFMPwOu2zBKGlpSJR6X19Zedp4mu9Gho3JEeQBe5myUszcFOD1PlWtniD7xL\n1kjCRpTOC1tJaeRgPP0PD0r4JtjLJ2OxecVsroi8tG9aAt2fHMoppbwWuD41ySMR\nQ0o+NbgmDKl6reqQLMpIU6k1DxHaaGPGB81T45OBCrjH/Sm5OBNeyHnjI7pkFOPH\n66wcJ5Y02kbF4E0d2ITYplMcJhvwZAV+jUdGk+ybwW5fuIWEjBzCQecdov97IxPW\nb2eGZ1PBcfzfLdYkJB/wQ2yZkAc2GOctec1Q60CwHBngik6J/0wXQ6rrZ7+Z6pLt\n/2jr/4Ra0QhN3SldyZlpedMtcmJVLP3RcwRFv8vema4kZ8JHKts6SKVI012FDugg\n413Yb/NHYFPrGfb8jz8l9rcYE3Q3pbrY56u3Ym7YeBggsA1VuS4brXsmwPPX8K+N\nAvwtROmQHNiZfn7OovIwCsGbc/9jhAJgq5JIr9oH541gnly6xAgCOydptpSKktod\nvEyRnVHOFnRDIGfOvbEHBEY4HIWqvPYONW8sWO10ZDhSaHgCpEM=\n=0mmg\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fd599a51a700c028d6f7ed8067d2d9f6e6a04a5",
          "sha": "0fd599a51a700c028d6f7ed8067d2d9f6e6a04a5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0fd599a51a700c028d6f7ed8067d2d9f6e6a04a5"
        }
      ],
      "message": "test: add tests for LoadBlockIndex when using multiple chainstates\n\nIncorporates feedback from Russ Yanofsky.",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-12-13T18:45:28Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-10T21:35:12Z"
      },
      "sha": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5758963073,
      "node_id": "HRFPE_lADOABII5848g6nLzwAAAAFXQs2B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5758963073",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-13T18:46:58Z"
    },
    {
      "event": "reviewed",
      "id": 831036685,
      "node_id": "PRR_kwDOABII584xiJ0N",
      "url": null,
      "actor": null,
      "commit_id": "d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#pullrequestreview-831036685",
      "submitted_at": "2021-12-14T06:32:51Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
    },
    {
      "event": "commented",
      "id": 993473406,
      "node_id": "IC_kwDOABII5847NzN-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/993473406",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-14T12:04:57Z",
      "updated_at": "2021-12-14T12:04:57Z",
      "author_association": "MEMBER",
      "body": "Concept ACK 2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24 🤽\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nConcept ACK 2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24 🤽\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjnlQwAmzp6vV9GqCu06YyivJ9zxvJ3Wsv+L8FxehFxMsVm3GTST2sM0bSfPL1M\r\n6p9eBqXz3JgX6qwPaBsH8U5neWw75LkvpVMPMwmXQairRM3Odr9aGIyZJ5bOtCvv\r\nOIMgrPsRz+bVMu1xGKcwCc3MM92LYRluGBAaGVq8qQTXSxZUfQWAoemqC+Ubhaiq\r\nXXGJ9MPV02NOWD7ZK2qMTgNFsbPYM1zkVKX6r3kXVi0/jOBexZDrECJIcFvQZ/Ol\r\nwqfv338xZnBYq3EnGkZVAiReSVJhpz7O+oMS/yKoHrtYhV07VRY15wxbZBXWaLgU\r\nNlLqK5jZO49f2G5uaP2DgQ3CncMNbXEpG1lqJNxZy0bKUuuuio2GcgqJEWnSd7BN\r\nf38nMQtQ80T9yUpfMW4/LWjj68XKROGbn9xLswIH654t+7DxHq63FzLq6jMFFto/\r\n9K18qF1bEBwBpSX2sM9RxoTXT16W13sKxQnAjowcrA8HdAS5WXpVNGknyq01qEUE\r\nbPxW9jNk\r\n=FgfJ\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-993473406",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "commented",
      "id": 994600517,
      "node_id": "IC_kwDOABII5847SGZF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/994600517",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-15T09:56:54Z",
      "updated_at": "2021-12-15T09:56:54Z",
      "author_association": "MEMBER",
      "body": "It looks like this PR has had a good review cycle and there are no critical issues left. I think we should move toward a final round of ACKs and merge it. Smaller suggestions and nits that come up now can be addressed later.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-994600517",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "commented",
      "id": 994613470,
      "node_id": "IC_kwDOABII5847SJje",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/994613470",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-15T10:02:31Z",
      "updated_at": "2021-12-15T10:04:50Z",
      "author_association": "MEMBER",
      "body": "Ok, I'll open a follow-up next week or so, unless someone beats me to it.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-994613470",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23174"
    },
    {
      "event": "merged",
      "id": 5770189946,
      "node_id": "ME_lADOABII5848g6nLzwAAAAFX7hx6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5770189946",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b67115dd044d609559a40c27d159aeab3597b251",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b67115dd044d609559a40c27d159aeab3597b251",
      "created_at": "2021-12-15T10:08:54Z"
    },
    {
      "event": "closed",
      "id": 5770189973,
      "node_id": "CE_lADOABII5848g6nLzwAAAAFX7hyV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5770189973",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-15T10:08:55Z"
    },
    {
      "event": "referenced",
      "id": 5772673995,
      "node_id": "REFE_lADOABII5848g6nLzwAAAAFYFAPL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5772673995",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b32013c08db413a0d2b6f3d9d4c7483ad9aa2dde",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/b32013c08db413a0d2b6f3d9d4c7483ad9aa2dde",
      "created_at": "2021-12-15T16:43:25Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-28T20:04:37Z",
      "updated_at": "2022-06-28T20:04:37Z",
      "source": {
        "issue": {
          "id": 421531882,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjYxNTYxNTQ3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15606/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15606",
          "number": 15606,
          "state": "closed",
          "state_reason": null,
          "title": "assumeutxo",
          "body": "**See the proposal for assumeutxo [here](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal).**\r\n\r\nTesting instructions can be found below the \"Progress\" section.\r\n\r\n---\r\n\r\n### Progress\r\n\r\nAll items here have corresponding commits here, but are unchecked if they haven't been merged yet.\r\n\r\n- [x] **Chainstate interface**\r\n  - https://github.com/bitcoin/bitcoin/pull/15976\r\n- [x] **Localize chainstate data**\r\n  - https://github.com/bitcoin/bitcoin/pull/16443\r\n- [x] **Share block data**\r\n  - https://github.com/bitcoin/bitcoin/pull/16194\r\n- [x] **Deglobalize chainstate**\r\n  - https://github.com/bitcoin/bitcoin/pull/15948\r\n- [x] **UpdateTip/CheckBlockIndex** modifications\r\n  - https://github.com/bitcoin/bitcoin/pull/21526\r\n- [x] **ChainstateManager**\r\n  - https://github.com/bitcoin/bitcoin/pull/17737\r\n- [x] **Mempool**\r\n  - https://github.com/bitcoin/bitcoin/pull/22415\r\n- [x] **LoadBlockIndex**\r\n  - https://github.com/bitcoin/bitcoin/pull/23174\r\n- [x] **Init/teardown**\r\n  - https://github.com/bitcoin/bitcoin/pull/24232\r\n  - https://github.com/bitcoin/bitcoin/pull/25667\r\n  - https://github.com/bitcoin/bitcoin/pull/25740\r\n- [x] **Wallet**: includes avoiding rescans when assumed-valid block data is in use\r\n  - https://github.com/bitcoin/bitcoin/pull/23997\r\n  - https://github.com/bitcoin/bitcoin/pull/26282\r\n- [ ] **P2P**: minor changes are made to `init.cpp` and `net_processing.cpp` to make simultaneous IBD across multiple chainstates work.\r\n  - #24008 \r\n- [ ] **Pruning**: implement correct pruning behavior when using a background chainstate\r\n- [ ] **Blockfile separation**: to prevent \"fragmentation\" in blockfile storage, have background chainstates use separate blockfiles from active snapshot chainstates to avoid interleaving heights and impairing pruning.\r\n- [ ] **Indexing**: all existing `CValidationInterface` events are given with an additional parameter, ChainstateRole, and all indexers ignore events from ChainstateRole::ASSUMEDVALID so that indexation only happens sequentially.\r\n- [ ] Raise error when both `-reindex` and assumeutxo are in use.\r\n- [ ] **RPC**: introduce RPC commands `dumptxoutset`, `loadtxoutset`, and (the probably temporary) `monitorsnapshot`.\r\n  - https://github.com/bitcoin/bitcoin/pull/16899\r\n- [ ] **Release docs & first assumeutxo commitment**: add notes and a particular assumeutxo hash value for first AU-enabled release.\r\n  - This will complete the project and allow use of UTXO snapshots for faster node bootstrap.\r\n- [ ] *(optional)* **Coinscache optimization**: allow flushing chainstate data without emptying the coins cache; results in better performance after UTXO snapshot load.\r\n  - https://github.com/bitcoin/bitcoin/pull/17487\r\n  - https://github.com/bitcoin/bitcoin/pull/27008\r\n\r\n---\r\n\r\n### Testing\r\n\r\n#### For fun (~5min)\r\n\r\nIf you want to do a quick test, you can run `./contrib/devtools/test_utxo_snapshots.sh` and follow the instructions. This is mostly obviated by the functional tests, though.\r\n\r\n#### For real (longer)\r\n\r\nIf you'd like to experience a real usage of assumeutxo, you can do that too.\r\nI've cut a new snapshot at height 788'000 (http://img.jameso.be/utxo-788000.dat - but you can do it yourself with `./contrib/devtools/utxo_snapshot.sh` if you want). Download that, and then create a datadir for testing:\r\n```sh\r\n$ cd ~/src/bitcoin  # or whatever\r\n\r\n# get the snapshot\r\n$ curl http://img.jameso.be/utxo-788000.dat > utxo-788000.dat\r\n\r\n# you'll want to do this if you like copy/pasting \r\n$ export AU_DATADIR=/home/${USER}/au-test # or wherever\r\n\r\n$ mkdir ${AU_DATADIR}\r\n$ vim ${AU_DATADIR}/bitcoin.conf\r\n\r\ndbcache=8000  # or, you know, something high\r\nblockfilterindex=1\r\ncoinstatsindex=1\r\nprune=3000\r\nlogthreadnames=1\r\n```\r\nObtain this branch, build it, and then start bitcoind:\r\n```sh\r\n$ git remote add jamesob https://github.com/jamesob/bitcoin\r\n$ git fetch jamesob utxo-dumpload-compressed\r\n$ git checkout jamesob/utxo-dumpload-compressed\r\n\r\n$ ./configure $conf_args && make  # (whatever you like to do here)\r\n\r\n# start 'er up and watch the logs\r\n$ ./src/bitcoind -datadir=${AU_DATADIR}\r\n```\r\nThen, in some other window, load the snapshot\r\n```sh\r\n$ ./src/bitcoin-cli -datadir=${AU_DATADIR} loadtxoutset $(pwd)/utxo-788000.dat\r\n```\r\n\r\nYou'll see some log messages about headers retrieval and waiting to see the snapshot in the headers chain. Once you get the full headers chain, you'll spend a decent amount of time (~10min) loading the snapshot, checking it, and flushing it to disk. After all that happens, you should be syncing to tip in pretty short order, and you'll see the occasional `[background validation]` log message go by.\r\n\r\nIn yet another window, you can check out chainstate status with\r\n```sh\r\n$ ./src/bitcoin-cli -datadir=${AU_DATADIR} getchainstates\r\n```\r\nas well as usual favorites like `getblockchaininfo`.\r\n\r\n---\r\n\r\n### Original change description\r\n\r\nFor those unfamiliar with assumeutxo, here's a brief summary from [the issue](https://github.com/bitcoin/bitcoin/issues/15605) (where any conceptual discussion not specific to this implementation should happen):\r\n\r\n> assumeutxo would be a way to initialize a node using a headers chain and a serialized version of the UTXO state which was generated from another node at some block height. A client making use of this UTXO \"snapshot\" would specify a hash and expect the content of the resulting UTXO set to yield this hash after deserialization. \r\n> \r\n> This would allow users to bootstrap a usable pruned node & wallet far more quickly (and with less disk usage) than waiting for a full initial block download to complete, since we only have to sync blocks between the base of the snapshot and the current network tip. Needless to say this is at expense of accepting a different trust model, though how different this really ends up being from `assumevalid` in effect is worth debate.\r\n\r\nIn short, this is an interesting change because it would allow nodes to get up and running within minutes given a ~3GB file (at time of writing) under an almost identical trust model to assumevalid.\r\n\r\nIn this implementation, I add a few RPC commands: `dumptxoutset` creates a UTXO snapshot and writes it to disk, and `loadtxoutset` intakes a snapshot from disk, constructs and activates chainstate based on it, and continues a from-scratch initial block download in the background for the sole purpose of validating the snapshot. Once the snapshot is validated, we throw away the chainstate used for background validation.\r\n\r\nThe assumeutxo procedure as implemented is as follows:\r\n\r\n1. A UTXO snapshot is loaded with the `loadtxoutset <path>` RPC command.\r\n1. A new chainstate (`CChainState`) is initialized using `ChainstateManager::ActivateSnapshot()`:\r\n   1. The serialized UTXO data is read in and various sanity checks are performed, e.g. compare expected coin count, recompute the hash and compare it with assumeutxo hash in source code.\r\n   1. We \"fast forward\" `new_chainstate->m_chain` to have a tip at the base of the snapshot (with or without block data). Lacking block data, we fake the `nTx` counts of the constituent `CBlockIndex` entries.\r\n   1. `LoadChainTip()` is called on the new snapshot and it is installed as our active chainstate.\r\n1. The new assumed-valid chainstate is now our active, and so that enters IBD until it is synced to the network's tip. Presumably the snapshot would be taken relatively close to the current tip but far enough away to avoid meaningful reorgs, say 10,000 blocks deep.\r\n1. Once the active chainstate is out of IBD, our old validation chain continues IBD \"in the background\" while the active chainstate services requests from most of the system.\r\n1. Once the background validation chainstate reaches a height equal the base of the snapshot, we take the hash of its UTXO set and ensure it equals the expected hash based on the snapshot. If the hashes are equivalent, we delete the validation chainstate and move on without event; if they aren't, we log loudly and fall back to the validation chainstate (we should probably just shut down).\r\n\r\nThe implicit assumption is that the background validation chain will always be a subset of the assumed-valid snapshot chain while the latter is active. We don't properly handle reorgs that go deeper than the base of the snapshot.\r\n\r\n### Changes (already merged/outdated)\r\n\r\n![chainstate-beforeafter (1)](https://user-images.githubusercontent.com/73197/54435797-a16b0780-4707-11e9-89c3-c90b5686804d.png)\r\n \r\nThe crux of this change is in removing any assumptions in the codebase that there is a single chainstate, i.e. any references to global variables `chainActive`, `pcoinsTip`, et al. need to be replaced with functions that return the relevant chainstate data at that moment in time. This change also takes `CChainState` to its logical conclusion by making it more self-contained - any references to globals like `chainActive` are removed with class-local references (`m_chain`).\r\n\r\nA few minor notes on the implementation:\r\n\r\n- When we attempt to load a wallet with a BestBlock locator lower than the base of a snapshot and the snapshot has not yet been validated, we refuse to load the wallet.\r\n\r\n- For additional notes, see [the new assumeutxo docs](https://github.com/jamesob/bitcoin/blob/utxo-dumpload-compressed/doc/assumeutxo.md).",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 66,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15606",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15606",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15606.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15606.patch"
          },
          "closed_at": "2023-05-08T15:09:24Z",
          "created_at": "2019-03-15T13:58:22Z",
          "updated_at": "2024-05-07T12:46:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 7620671832,
      "node_id": "REFE_lADOABII5848g6nLzwAAAAHGOjlY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7620671832",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "be0f1881ef1267b191dfc920af9920e9fe96c565",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/be0f1881ef1267b191dfc920af9920e9fe96c565",
      "created_at": "2022-10-19T11:39:35Z"
    },
    {
      "event": "unsubscribed",
      "id": 9286216023,
      "node_id": "UE_lADOABII5848g6nLzwAAAAIpgGlX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9286216023",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-19T06:37:49Z"
    },
    {
      "event": "referenced",
      "id": 9517092063,
      "node_id": "REFE_lADOABII5848g6nLzwAAAAI3Q0zf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9517092063",
      "actor": {
        "login": "delta1",
        "id": 351403,
        "node_id": "MDQ6VXNlcjM1MTQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/351403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/delta1",
        "html_url": "https://github.com/delta1",
        "followers_url": "https://api.github.com/users/delta1/followers",
        "following_url": "https://api.github.com/users/delta1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/delta1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/delta1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/delta1/subscriptions",
        "organizations_url": "https://api.github.com/users/delta1/orgs",
        "repos_url": "https://api.github.com/users/delta1/repos",
        "events_url": "https://api.github.com/users/delta1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/delta1/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6179a5a04eb2bf7b8d4bec977b5511ffa895b9ca",
      "commit_url": "https://api.github.com/repos/delta1/elements/commits/6179a5a04eb2bf7b8d4bec977b5511ffa895b9ca",
      "created_at": "2023-06-13T14:24:27Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-16T23:01:09Z",
      "updated_at": "2023-06-16T23:01:09Z",
      "source": {
        "issue": {
          "id": 1724651759,
          "node_id": "PR_kwDOABII585RSIlY",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27746",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27746/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27746/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27746/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27746",
          "number": 27746,
          "state": "closed",
          "state_reason": null,
          "title": "Rework validation logic for assumeutxo",
          "body": "This PR proposes a clean up of the relationship between block storage and the chainstate objects, by moving the decision of whether to store a block on disk to something that is not chainstate-specific.  Philosophically, the decision of whether to store a block on disk is related to validation rules that do not require any UTXO state; for anti-DoS reasons we were using some chainstate-specific heuristics, and those have been reworked here to achieve the proposed separation.\r\n\r\nThis PR also fixes a bug in how a chainstate's `setBlockIndexCandidates` was being initialized; it should always have all the HAVE_DATA block index entries that have more work than the chain tip.  During startup, we were not fully populating `setBlockIndexCandidates` in some scenarios involving multiple chainstates.\r\n\r\nFurther, this PR establishes a concept that whenever we have 2 chainstates, that we always know the snapshotted chain's base block and the base block's hash must be an element of our block index. Given that, we can establish a new invariant that the background validation chainstate only needs to consider blocks leading to that snapshotted block entry as potential candidates for its tip. As a followup I would imagine that when writing net_processing logic to download blocks for the background chainstate, that we would use this concept to only download blocks towards the snapshotted entry as well.",
          "user": {
            "login": "sdaftuar",
            "id": 7463573,
            "node_id": "MDQ6VXNlcjc0NjM1NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sdaftuar",
            "html_url": "https://github.com/sdaftuar",
            "followers_url": "https://api.github.com/users/sdaftuar/followers",
            "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
            "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
            "repos_url": "https://api.github.com/users/sdaftuar/repos",
            "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27746",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27746",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27746.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27746.patch"
          },
          "closed_at": "2023-07-31T20:18:35Z",
          "created_at": "2023-05-24T19:57:32Z",
          "updated_at": "2023-09-11T17:56:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "locked",
      "id": 12894028211,
      "node_id": "LOE_lADOABII5848g6nLzwAAAAMAi0Gz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12894028211",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-22T12:52:06Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725089856",
      "pull_request_review_id": 775125236,
      "id": 725089856,
      "node_id": "PRRC_kwDOABII584rN_5A",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For `std::tie`\r\n```diff\r\n+++ b/src/validation.cpp\r\n@@ -58,6 +58,7 @@\r\n #include <numeric>\r\n #include <optional>\r\n #include <string>\r\n+#include <tuple>\r\n```\r\n",
      "created_at": "2021-10-08T15:02:56Z",
      "updated_at": "2021-10-08T15:28:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r725089856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725089856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725093367",
      "pull_request_review_id": 775125236,
      "id": 725093367,
      "node_id": "PRRC_kwDOABII584rOAv3",
      "diff_hunk": "@@ -3658,7 +3691,18 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                // If we're on an block index entry that is passed the end of the",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "- s/an block/a block/\r\n- s/passed the end/past the end/?\r\n\r\nmy editor auto-proposes this\r\n```diff\r\n-                // If we're on an block index entry that is passed the end of the\r\n-                // assumed-valid region of the chain, avoid\r\n-                // adding this as a candidate tip to the background validation\r\n-                // chain, since that would prevent background IBD from happening.\r\n+                // If we're on a block index entry that is past the end of the\r\n+                // assumed-valid region of the chain, avoid adding this as a\r\n+                // candidate tip to the background validation chain, since that\r\n+                // would prevent background IBD from happening.\r\n```\r\n",
      "created_at": "2021-10-08T15:07:35Z",
      "updated_at": "2021-10-08T15:28:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r725093367",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725093367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3695,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725093792",
      "pull_request_review_id": 775125236,
      "id": 725093792,
      "node_id": "PRRC_kwDOABII584rOA2g",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n+\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n+        //\n+        // Do not expect assumed-valid blocks to have nTx.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->HaveTxsDownloaded()) {\n+                bool is_assumedvalid_end =",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                const bool is_assumedvalid_end =\r\n```",
      "created_at": "2021-10-08T15:08:04Z",
      "updated_at": "2021-10-08T15:28:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r725093792",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725093792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725101183",
      "pull_request_review_id": 775125236,
      "id": 725101183,
      "node_id": "PRRC_kwDOABII584rOCp_",
      "diff_hunk": "@@ -1010,6 +1014,12 @@ class ChainstateManager\n     //! ResizeCoinsCaches() as needed.\n     void MaybeRebalanceCaches() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    //! If some region of the block index is assumed to be valid (as in the case of\n+    //! UTXO snapshot usage), return the last blockhash to be assumed valid (i.e. the\n+    //! base of the snapshot) and the correspondent nChainTx value associated with it.\n+    std::pair<std::optional<uint256>, unsigned int> getAssumedValidEnd()",
      "path": "src/validation.h",
      "position": null,
      "original_position": 52,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit, PascalCase unless there is some reason I'm not aware of here (same for the other `get...` functions introduced here) \r\n ```suggestion\r\n     std::pair<std::optional<uint256>, unsigned int> GetAssumedValidEnd()\r\n```",
      "created_at": "2021-10-08T15:18:03Z",
      "updated_at": "2021-10-08T15:30:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r725101183",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725101183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1020,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728209676",
      "pull_request_review_id": 778777785,
      "id": 728209676,
      "node_id": "PRRC_kwDOABII584rZ5kM",
      "diff_hunk": "@@ -1010,6 +1014,12 @@ class ChainstateManager\n     //! ResizeCoinsCaches() as needed.\n     void MaybeRebalanceCaches() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    //! If some region of the block index is assumed to be valid (as in the case of\n+    //! UTXO snapshot usage), return the last blockhash to be assumed valid (i.e. the\n+    //! base of the snapshot) and the correspondent nChainTx value associated with it.\n+    std::pair<std::optional<uint256>, unsigned int> getAssumedValidEnd()",
      "path": "src/validation.h",
      "position": null,
      "original_position": 52,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d):\r\n\r\nWould suggest changing `GetAssumedValidEnd` to `GetLastAssumedValid` because \"end\" does not seem right here. In c++ \"end\" usually refers to the first element after the range, not the last element in the range. \r\n\r\nAlso, it seems like whole return value should be optional, not just the first element of the pair (`optional<tuple<uint256, int>>` not `pair<optional<uint256>, int>`. Changing this would also avoid having having to return a dummy `0` nchaintx value in the implementation if there is no snapshot.",
      "created_at": "2021-10-13T15:49:04Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r728209676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728209676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1020,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728812760",
      "pull_request_review_id": 778777785,
      "id": 728812760,
      "node_id": "PRRC_kwDOABII584rcMzY",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nThis comment seems a little out of place since it's not describing these variables, but describing how they are used in code below. Would maybe suggest breaking this up and moving it to relevant places below.",
      "created_at": "2021-10-14T09:40:43Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r728812760",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728812760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732065458",
      "pull_request_review_id": 778777785,
      "id": 732065458,
      "node_id": "PRRC_kwDOABII584rom6y",
      "diff_hunk": "@@ -1010,6 +1014,12 @@ class ChainstateManager\n     //! ResizeCoinsCaches() as needed.\n     void MaybeRebalanceCaches() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    //! If some region of the block index is assumed to be valid (as in the case of\n+    //! UTXO snapshot usage), return the last blockhash to be assumed valid (i.e. the\n+    //! base of the snapshot) and the correspondent nChainTx value associated with it.\n+    std::pair<std::optional<uint256>, unsigned int> getAssumedValidEnd()",
      "path": "src/validation.h",
      "position": null,
      "original_position": 52,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": 725101183,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> style nit, PascalCase unless there is some reason I'm not aware of here (same for the other `get...` functions introduced here)\r\n\r\nI always liked the lower/upper method/function convention so you know if some random function call is going to implicitly have access to `*this` as a hidden parameter. Making members or private members lowercase is less verbose than prefixing method calls with `this->` and this convention is already followed other parts of code. Nice to see internal method calls made more obvious in new code, IMO.",
      "created_at": "2021-10-19T16:52:47Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732065458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732065458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1020,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732083694",
      "pull_request_review_id": 778777785,
      "id": 732083694,
      "node_id": "PRRC_kwDOABII584rorXu",
      "diff_hunk": "@@ -629,6 +625,10 @@ class CChainState\n      */\n     const std::optional<uint256> m_from_snapshot_blockhash;\n \n+    //! Return true if this chainstate relies on blocks that are assumed-valid. In\n+    //! practice this means it was created based on a UTXO snapshot.\n+    bool ReliesOnAssumeValid() { return m_from_snapshot_blockhash.has_value(); }",
      "path": "src/validation.h",
      "position": null,
      "original_position": 29,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nAnother naming nitpick. Feel free to ignore this naming suggestion and all the other ones, but might suggest inverting this function and calling it something like \"OnlyContainsAssumedValidBlocks\". This seems less handwavy than \"ReliesOnAssumeValid\" because it's not clear what \"relies\" mean or who is relying.",
      "created_at": "2021-10-19T17:16:13Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732083694",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732083694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 630,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732089256",
      "pull_request_review_id": 778777785,
      "id": 732089256,
      "node_id": "PRRC_kwDOABII584rosuo",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nAlso suggested this in another comment, but maybe consider `s/assumedvalid_end/last_assumed_valid/` throughout this function, because \"end\" in c++ usually refers to first element after the range, not the last element in the range",
      "created_at": "2021-10-19T17:23:19Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732089256",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732089256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3641,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732090717",
      "pull_request_review_id": 778777785,
      "id": 732090717,
      "node_id": "PRRC_kwDOABII584rotFd",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nCould use structured bindings to save space and avoid potentially dangerous type mismatches:\r\n\r\n```diff\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -3638,10 +3638,7 @@ bool BlockManager::LoadBlockIndex(\r\n     // setBlockIndexCandidates of the background chainstate.\r\n     bool saw_end_of_assumedvalid{false};\r\n \r\n-    std::optional<uint256> assumedvalid_end_blockhash;\r\n-    unsigned int assumedvalid_end_nchaintx;\r\n-    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\r\n-        chainman.getAssumedValidEnd();\r\n+    auto [assumedvalid_end_blockhash, assumedvalid_end_nchaintx] = chainman.getAssumedValidEnd();\r\n \r\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\r\n     {\r\n\r\n```\r\n\r\n",
      "created_at": "2021-10-19T17:25:18Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732090717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732090717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": 3641,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3644,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732122417",
      "pull_request_review_id": 778777785,
      "id": 732122417,
      "node_id": "PRRC_kwDOABII584ro00x",
      "diff_hunk": "@@ -3658,7 +3691,18 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                // If we're on an block index entry that is passed the end of the\n+                // assumed-valid region of the chain, avoid\n+                // adding this as a candidate tip to the background validation\n+                // chain, since that would prevent background IBD from happening.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nIt's not so clear why adding blocks to `setBlockIndexCandidates` would prevent IBD from happening. The negative \"avoid doing X so Y doesn't happen\" logic here is a bit twisty, so I would try to describe more positively what this is doing. Something like:\r\n\r\n```c++\r\n// If a chain only supposed to contain assume valid blocks (because it is\r\n// validating them in the background) avoid adding later validated blocks,\r\n// because these would prevent earlier blocks from being downloaded and\r\n// validated.\r\nif (!chainstate->OnlyContainsAssumeValidBlocks() || block_assumed_valid) {\r\n    chainstate->setBlockIndexCandidates.insert(pindex);\r\n}\r\n```",
      "created_at": "2021-10-19T18:07:48Z",
      "updated_at": "2021-10-19T20:07:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732122417",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732122417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3698,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732130569",
      "pull_request_review_id": 778777785,
      "id": 732130569,
      "node_id": "PRRC_kwDOABII584ro20J",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n+\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n+        //\n+        // Do not expect assumed-valid blocks to have nTx.\n         if (pindex->nTx > 0) {",
      "path": "src/validation.cpp",
      "position": 54,
      "original_position": 36,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nIs there a bug here? Comment is saying do not expect assumed valid blocks to have nTx, then the next line immediately skips assume valid logic if `nTx` is `0`",
      "created_at": "2021-10-19T18:19:21Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732130569",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732130569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3658,
      "original_line": 3658,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732132238",
      "pull_request_review_id": 778777785,
      "id": 732132238,
      "node_id": "PRRC_kwDOABII584ro3OO",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n+\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n+        //\n+        // Do not expect assumed-valid blocks to have nTx.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->HaveTxsDownloaded()) {\n+                bool is_assumedvalid_end =\n+                    assumedvalid_end_blockhash &&\n+                    pindex->GetBlockHash() == *assumedvalid_end_blockhash;\n+\n+                if (is_assumedvalid_end) {\n+                    // While starting up with an assumeutxo snapshot chain,\n+                    // we need to manually populate the nChainTx field of the\n+                    // base of the snapshot so that we can add assumed-valid\n+                    // candidate tips to setBlockIndexCandidates below.\n+                    //\n+                    // After the snapshot has completed validation, nChainTx\n+                    // values should compute normally.\n+                    assert(assumedvalid_end_nchaintx > 0);\n+                    pindex->nChainTx = assumedvalid_end_nchaintx;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nIt would be good to have a unit test that ensures the function is actually setting this.",
      "created_at": "2021-10-19T18:21:38Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732132238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732132238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3672,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732133664",
      "pull_request_review_id": 778777785,
      "id": 732133664,
      "node_id": "PRRC_kwDOABII584ro3kg",
      "diff_hunk": "@@ -3658,7 +3691,18 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                // If we're on an block index entry that is passed the end of the\n+                // assumed-valid region of the chain, avoid\n+                // adding this as a candidate tip to the background validation\n+                // chain, since that would prevent background IBD from happening.\n+                //\n+                // If there is no assumed-valid region of the chain,\n+                // !saw_end_of_assumedvalid will always be true.\n+                if (!saw_end_of_assumedvalid || chainstate->ReliesOnAssumeValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);\n+                }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nIt would be good to have a unit test that ensure the function is adding the right blocks as candidates in both chains.",
      "created_at": "2021-10-19T18:23:38Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732133664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732133664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": 3702,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732153494",
      "pull_request_review_id": 778777785,
      "id": 732153494,
      "node_id": "PRRC_kwDOABII584ro8aW",
      "diff_hunk": "@@ -5020,3 +5062,41 @@ void ChainstateManager::MaybeRebalanceCaches()\n         }\n     }\n }\n+\n+CBlockIndex* ChainstateManager::getSnapshotBaseBlock()\n+{\n+    auto blockhash_op = SnapshotBlockhash();\n+    if (!blockhash_op) return nullptr;\n+    return m_blockman.LookupBlockIndex(*blockhash_op);\n+}\n+\n+std::optional<int> ChainstateManager::getSnapshotHeight()\n+{\n+    CBlockIndex* base = getSnapshotBaseBlock();\n+    return base ? std::make_optional(base->nHeight) : std::nullopt;\n+}\n+\n+std::optional<unsigned int> ChainstateManager::getSnapshotNChainTx()\n+{\n+    auto height = getSnapshotHeight();\n+    if (!height) return std::nullopt;\n+\n+    auto au_data = ExpectedAssumeutxo(*height, ::Params());\n+    if (!au_data) {\n+        LogPrintf(\"%s: WARNING: no assumeutxo chainparams found for \" /* Continued */\n+            \"active snapshot (%s); something is wrong - please report this\\n\",\n+            __func__, (*this->SnapshotBlockhash()).ToString());\n+        return std::nullopt;\n+    }\n+\n+    return au_data->nChainTx;\n+}\n+\n+std::pair<std::optional<uint256>, unsigned int> ChainstateManager::getAssumedValidEnd()\n+{\n+    std::optional<uint256> snapshotblockhash = SnapshotBlockhash();\n+    std::optional<unsigned int> nchaintx = getSnapshotNChainTx();\n+\n+    if (!snapshotblockhash || !nchaintx) return {std::nullopt, 0};",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nMight write to assert when values are inconsistent:\r\n\r\n```c++\r\nif (nchaintx) {\r\n  assert(snapshotblockhash);\r\n  return {snapshotblockhash, *nchaintx};\r\n}\r\nreturn {nullopt, 0};\r\n```",
      "created_at": "2021-10-19T18:51:40Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732153494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732153494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732182831",
      "pull_request_review_id": 778777785,
      "id": 732182831,
      "node_id": "PRRC_kwDOABII584rpDkv",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n+\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n+        //\n+        // Do not expect assumed-valid blocks to have nTx.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->HaveTxsDownloaded()) {\n+                bool is_assumedvalid_end =\n+                    assumedvalid_end_blockhash &&\n+                    pindex->GetBlockHash() == *assumedvalid_end_blockhash;\n+\n+                if (is_assumedvalid_end) {\n+                    // While starting up with an assumeutxo snapshot chain,\n+                    // we need to manually populate the nChainTx field of the\n+                    // base of the snapshot so that we can add assumed-valid\n+                    // candidate tips to setBlockIndexCandidates below.\n+                    //\n+                    // After the snapshot has completed validation, nChainTx\n+                    // values should compute normally.\n+                    assert(assumedvalid_end_nchaintx > 0);\n+                    pindex->nChainTx = assumedvalid_end_nchaintx;\n+                    saw_end_of_assumedvalid = true;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\r\n\r\nThere can be multiple blocks at the same height in vSortedByHeight, right? If so, this behavior seems nondeterministic, because it's sorted by (height, pointer address), so blocks at the assume valid height with pointer addresses _less_ than the assume valid height will be added to `setBlockIndexCandidates` and blocks at the same height with _greater_ pointer addresses will not by added to `setBlockIndexCandidates`.\r\n\r\nHaving this mutable bool variable in the for loop makes this loop more stateful and complicated anyway. I think maybe ideally the GetAssumeValid method should return a (hash, height, nchaintx) tuple instead of a (hash, nchaintx) pair. So the height would be known in advance and the code could look something like:\r\n\r\n```c++\r\nconst auto last_assumed_valid_block = chainman.GetLastAssumedValid();\r\nfor (const auto& [height, pindex] : vSortedByHeight) {\r\n    // Update nChainTx the last assumed valid block\r\n    if (last_assumed_valid_block) {\r\n        const auto& [av_hash, av_height, av_chaintx] = *last_assumed_valid_block;\r\n        if (pindex->GetBlockHash() == av_hash) {\r\n            pindex->nChainTx = av_chaintx;\r\n        }\r\n    }\r\n    ....\r\n    // Add block to chain candidates lists, unless the block is after the assumed valid\r\n    // height and the chain is only supposed to contain assumed valid blocks (if it's a\r\n    // background chain supposed to download and validate them).\r\n    const int av_height = last_assumed_valid_block ? std::get<1>(*last_assumed_valid_block) : std::numeric_limits<int>::max();\r\n    if (!chainstate->OnlyContainsAssumedValidBlocks() || pindex->nHeight <= av_height) {\r\n         chainstate->setBlockIndexCandidates.insert(pindex);\r\n    }\r\n}\r\n```\r\n",
      "created_at": "2021-10-19T19:32:46Z",
      "updated_at": "2021-10-19T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732182831",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732182831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3673,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736021606",
      "pull_request_review_id": 788689376,
      "id": 736021606,
      "node_id": "PRRC_kwDOABII584r3sxm",
      "diff_hunk": "@@ -5020,3 +5062,41 @@ void ChainstateManager::MaybeRebalanceCaches()\n         }\n     }\n }\n+\n+CBlockIndex* ChainstateManager::getSnapshotBaseBlock()\n+{\n+    auto blockhash_op = SnapshotBlockhash();\n+    if (!blockhash_op) return nullptr;\n+    return m_blockman.LookupBlockIndex(*blockhash_op);\n+}\n+\n+std::optional<int> ChainstateManager::getSnapshotHeight()\n+{\n+    CBlockIndex* base = getSnapshotBaseBlock();\n+    return base ? std::make_optional(base->nHeight) : std::nullopt;\n+}\n+\n+std::optional<unsigned int> ChainstateManager::getSnapshotNChainTx()\n+{\n+    auto height = getSnapshotHeight();\n+    if (!height) return std::nullopt;\n+\n+    auto au_data = ExpectedAssumeutxo(*height, ::Params());\n+    if (!au_data) {\n+        LogPrintf(\"%s: WARNING: no assumeutxo chainparams found for \" /* Continued */\n+            \"active snapshot (%s); something is wrong - please report this\\n\",\n+            __func__, (*this->SnapshotBlockhash()).ToString());\n+        return std::nullopt;\n+    }\n+\n+    return au_data->nChainTx;\n+}\n+\n+std::pair<std::optional<uint256>, unsigned int> ChainstateManager::getAssumedValidEnd()\n+{\n+    std::optional<uint256> snapshotblockhash = SnapshotBlockhash();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can be `auto blockhash_op` ?",
      "created_at": "2021-10-25T22:50:51Z",
      "updated_at": "2021-10-25T23:51:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r736021606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736021606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5097,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736036940",
      "pull_request_review_id": 788689376,
      "id": 736036940,
      "node_id": "PRRC_kwDOABII584r3whM",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n+\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n+        //\n+        // Do not expect assumed-valid blocks to have nTx.\n         if (pindex->nTx > 0) {",
      "path": "src/validation.cpp",
      "position": 54,
      "original_position": 36,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": 732130569,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, I think if the new logic seeks to detect the last block of the assumed-valid range but assumed-valid blocks are expected to not have `nTx`, detection success cannot be reached if it's conditional on `nTx` > 0.",
      "created_at": "2021-10-25T23:30:06Z",
      "updated_at": "2021-10-25T23:51:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r736036940",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736036940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3658,
      "original_line": 3658,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736041983",
      "pull_request_review_id": 788689376,
      "id": 736041983,
      "node_id": "PRRC_kwDOABII584r3xv_",
      "diff_hunk": "@@ -3658,7 +3691,18 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                // If we're on an block index entry that is passed the end of the\n+                // assumed-valid region of the chain, avoid\n+                // adding this as a candidate tip to the background validation\n+                // chain, since that would prevent background IBD from happening.\n+                //\n+                // If there is no assumed-valid region of the chain,\n+                // !saw_end_of_assumedvalid will always be true.\n+                if (!saw_end_of_assumedvalid || chainstate->ReliesOnAssumeValid()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't the logical operator be an `&&` ?\r\n\r\nOtherwise I think if the end of the assumed-valid block region has been reached (`saw_end_of_assumevalid`=true) logic still enters this control flow.  And as such block index entries past the assumed-valid region of the chain are added to `setBlockIndexCandidates` (AFAIU from the comment just above).",
      "created_at": "2021-10-25T23:43:56Z",
      "updated_at": "2021-10-25T23:51:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r736041983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736041983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3702,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736042920",
      "pull_request_review_id": 788689376,
      "id": 736042920,
      "node_id": "PRRC_kwDOABII584r3x-o",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n+\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n+        //\n+        // Do not expect assumed-valid blocks to have nTx.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->HaveTxsDownloaded()) {\n+                bool is_assumedvalid_end =\n+                    assumedvalid_end_blockhash &&\n+                    pindex->GetBlockHash() == *assumedvalid_end_blockhash;\n+\n+                if (is_assumedvalid_end) {\n+                    // While starting up with an assumeutxo snapshot chain,\n+                    // we need to manually populate the nChainTx field of the\n+                    // base of the snapshot so that we can add assumed-valid",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see the causality between populating the `nChainTx` and adequately adding assumed-valid and assumed-valid _only_ blocks to `setBlockIndexCandidates` for snapshot chainstates ? I think conditional L3691 isn't pending on `nChainTx`.",
      "created_at": "2021-10-25T23:46:51Z",
      "updated_at": "2021-10-25T23:51:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r736042920",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736042920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3666,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737666011",
      "pull_request_review_id": 790914212,
      "id": 737666011,
      "node_id": "PRRC_kwDOABII584r9-Pb",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n+\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n+        //\n+        // Do not expect assumed-valid blocks to have nTx.\n         if (pindex->nTx > 0) {",
      "path": "src/validation.cpp",
      "position": 54,
      "original_position": 36,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": 732130569,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good points - this is a little confusing; my fault for not being clearer in commentary. `nTx = 1` is set for all block headers during snapshot activation (https://github.com/jamesob/bitcoin/blob/2021-10-au-loadblockindex/src/validation.cpp#L4966-L4970) so this code will be executed for all assumed-valid blocks.\r\n\r\nNow that you've raised the point, I'm wondering if this code is even necessary. The modifications here are redundant with the ones we do during snapshot activation (linked above), and I think I added these here in LoadBlockIndex as a matter of necessity before I [thought to set the entire blockindex to dirty](https://github.com/jamesob/bitcoin/blob/2021-10-au-loadblockindex/src/validation.cpp#L4987) in the activation routine (thereby persisting all changes during FlushStateToDisk).\r\n\r\nI was going to say that having this code here is still valuable, if not a little confusing, in case there is some kind of interruption when writing the block index immediately after snapshot load... but changes to the block index [are batched](https://github.com/jamesob/bitcoin/blob/2021-10-au-loadblockindex/src/validation.cpp#L2022-L2024), so if we fail to write the block index, none of the chain will be considered assumedvalid!\r\n\r\nSo: maybe some of these LoadBlockIndex changes are unnecessary? I'll work to determine this today.",
      "created_at": "2021-10-27T16:51:49Z",
      "updated_at": "2021-10-27T16:51:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r737666011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737666011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3658,
      "original_line": 3658,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738785918",
      "pull_request_review_id": 792442090,
      "id": 738785918,
      "node_id": "PRRC_kwDOABII584sCPp-",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n+\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n+        //\n+        // Do not expect assumed-valid blocks to have nTx.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->HaveTxsDownloaded()) {\n+                bool is_assumedvalid_end =\n+                    assumedvalid_end_blockhash &&\n+                    pindex->GetBlockHash() == *assumedvalid_end_blockhash;\n+\n+                if (is_assumedvalid_end) {\n+                    // While starting up with an assumeutxo snapshot chain,\n+                    // we need to manually populate the nChainTx field of the\n+                    // base of the snapshot so that we can add assumed-valid",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": 736042920,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point! Addressed in new changeset.",
      "created_at": "2021-10-28T21:24:39Z",
      "updated_at": "2021-10-28T21:24:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r738785918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738785918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3666,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738794750",
      "pull_request_review_id": 792453581,
      "id": 738794750,
      "node_id": "PRRC_kwDOABII584sCRz-",
      "diff_hunk": "@@ -3631,17 +3631,50 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // If we have a historical region of the chain that is assumed-valid, we should\n+    // mark the last assumed-valid block that we see, since we then have to populate\n+    // the final nChainTx as well as prevent inclusion of blocks after that in the\n+    // setBlockIndexCandidates of the background chainstate.\n+    bool saw_end_of_assumedvalid{false};\n+\n+    std::optional<uint256> assumedvalid_end_blockhash;\n+    unsigned int assumedvalid_end_nchaintx;\n+    std::tie(assumedvalid_end_blockhash, assumedvalid_end_nchaintx) =\n+        chainman.getAssumedValidEnd();\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n+\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n+        //\n+        // Do not expect assumed-valid blocks to have nTx.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->HaveTxsDownloaded()) {\n+                bool is_assumedvalid_end =\n+                    assumedvalid_end_blockhash &&\n+                    pindex->GetBlockHash() == *assumedvalid_end_blockhash;\n+\n+                if (is_assumedvalid_end) {\n+                    // While starting up with an assumeutxo snapshot chain,\n+                    // we need to manually populate the nChainTx field of the\n+                    // base of the snapshot so that we can add assumed-valid\n+                    // candidate tips to setBlockIndexCandidates below.\n+                    //\n+                    // After the snapshot has completed validation, nChainTx\n+                    // values should compute normally.\n+                    assert(assumedvalid_end_nchaintx > 0);\n+                    pindex->nChainTx = assumedvalid_end_nchaintx;\n+                    saw_end_of_assumedvalid = true;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": 732182831,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for this comment; this raises a really good point. The LoadBlockIndex() modifications are now no longer stateful, and instead we walk backwards for each pindex to see if any of its ancestors are assumed-valid (which is O(n**2) with chain size, but since LoadBlockIndex() happens once on startup that doesn't really matter).",
      "created_at": "2021-10-28T21:41:04Z",
      "updated_at": "2021-10-28T21:41:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r738794750",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738794750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3673,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738795942",
      "pull_request_review_id": 792455220,
      "id": 738795942,
      "node_id": "PRRC_kwDOABII584sCSGm",
      "diff_hunk": "@@ -3622,17 +3622,21 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n-        // We can link the chain of blocks for which we've received transactions at some point.\n+\n+        // We can link the chain of blocks for which we've received transactions at some point, or\n+        // blocks that are assumed-valid on the basis of snapshot load (see\n+        // PopulateAndValidateSnapshot()).\n         // Pruned nodes may have deleted the block.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->HaveTxsDownloaded()) {\n+                if (pindex->pprev->nChainTx > 0) {",
      "path": "src/validation.cpp",
      "position": 57,
      "original_position": 29,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2d7ecfb6e9847a0f0d9072e659a743bd231381cd",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note that this change is tautological, but done for clarity. `HaveTxsDownloaded()` should probably be removed since its name conflicts with assumed-valid blocks that have had their nChainTx value set during snapshot activation.",
      "created_at": "2021-10-28T21:43:30Z",
      "updated_at": "2021-10-28T21:43:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r738795942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738795942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3660,
      "original_line": 3660,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740230078",
      "pull_request_review_id": 794234225,
      "id": 740230078,
      "node_id": "PRRC_kwDOABII584sHwO-",
      "diff_hunk": "@@ -3658,7 +3691,18 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                // If we're on an block index entry that is passed the end of the",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "51e614fdbc6a23ade324e9bd01228bf97df9bc5d",
      "in_reply_to_id": 725093367,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2021-11-01T13:56:21Z",
      "updated_at": "2021-11-01T13:56:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r740230078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740230078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3695,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741479471",
      "pull_request_review_id": 795938311,
      "id": 741479471,
      "node_id": "PRRC_kwDOABII584sMhQv",
      "diff_hunk": "@@ -4912,6 +4912,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n     for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n         index = snapshot_chainstate.m_chain[i];\n \n+        if (index->isGenesis()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "cb1d4244806980d31ceaa2307431dd70e6c39fe9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: don't modify genesis during snapshot load\" (cb1d4244806980d31ceaa2307431dd70e6c39fe9)\r\n\r\nThe new comment here seems good, but I think it would be more direct and straightforward to write\r\n\r\n```diff\r\n-for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\r\n+for (int i = 1; i <= snapshot_chainstate.m_chain.Height(); ++i) {\r\n```\r\n\r\nabove than add this extra control flow and indirect `isGenesis()` height check.",
      "created_at": "2021-11-02T21:36:50Z",
      "updated_at": "2021-11-02T23:13:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741479471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741479471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741482214",
      "pull_request_review_id": 795938311,
      "id": 741482214,
      "node_id": "PRRC_kwDOABII584sMh7m",
      "diff_hunk": "@@ -4912,6 +4912,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n     for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n         index = snapshot_chainstate.m_chain[i];\n \n+        if (index->isGenesis()) {\n+            // Don't make any modifications to the genesis block.\n+            // This is especially important because we don't want to erroneously",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "cb1d4244806980d31ceaa2307431dd70e6c39fe9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: don't modify genesis during snapshot load\" (cb1d4244806980d31ceaa2307431dd70e6c39fe9)\r\n\r\nWould be good to have a unit test for this, if changing this could break things.",
      "created_at": "2021-11-02T21:41:52Z",
      "updated_at": "2021-11-02T23:13:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741482214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741482214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4917,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741486651",
      "pull_request_review_id": 795938311,
      "id": 741486651,
      "node_id": "PRRC_kwDOABII584sMjA7",
      "diff_hunk": "@@ -312,6 +312,10 @@ class CBlockIndex\n     //!   validated by a background chainstate.\n     bool IsAssumedValid() const { return nStatus & BLOCK_ASSUMED_VALID; }\n \n+    // Runtime: O(n) with chain length.\n+    // Returns true if the block specified relies on ancestors which are assumed-valid.\n+    bool reliesOnAssumedValid() const;",
      "path": "src/chain.h",
      "position": null,
      "original_position": 6,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "619ada31fdc90f079cb1a6c44df6b76f6a162c1e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add CBlockIndex reliesOnAssumeValid\" (619ada31fdc90f079cb1a6c44df6b76f6a162c1e)\r\n\r\nWould suggest calling method `HasAssumedValidAncestors()` instead of `reliesOnAssumedValid()` to avoid vague \"relies\", to be more consistent with other `IsAssumedValid()` and `GetAncestor()` method names, and to be less confusing in the place where `CBlockIndex::reliesOnAssumedValid` and `CChainState::reliesOnAssumedValid` are both called together.",
      "created_at": "2021-11-02T21:50:28Z",
      "updated_at": "2021-11-02T23:13:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741486651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741486651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741490463",
      "pull_request_review_id": 795938311,
      "id": 741490463,
      "node_id": "PRRC_kwDOABII584sMj8f",
      "diff_hunk": "@@ -337,7 +341,7 @@ class CBlockIndex\n     //! Build the skiplist pointer for this entry.\n     void BuildSkip();\n \n-    //! Efficiently find an ancestor of this block.\n+    //! Efficiently find an ancestor of this block. If nHeight is passed, this is returned.",
      "path": "src/chain.h",
      "position": null,
      "original_position": 16,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "619ada31fdc90f079cb1a6c44df6b76f6a162c1e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add CBlockIndex reliesOnAssumeValid\" (619ada31fdc90f079cb1a6c44df6b76f6a162c1e)\r\n\r\nI was confused what `nHeight` might be referring to, or if it might be a typo for `height`. Maybe say \"If current block height is passed\" or \"If this->nHeight is passed\" instead of \"If nHeight is passed\"",
      "created_at": "2021-11-02T21:57:52Z",
      "updated_at": "2021-11-02T23:13:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741490463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741490463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 344,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741509474",
      "pull_request_review_id": 795938311,
      "id": 741509474,
      "node_id": "PRRC_kwDOABII584sMoli",
      "diff_hunk": "@@ -3649,7 +3653,18 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                // Only add blocks which are assumed-valid to fitting chainstates, i.e. those\n+                // populated on the basis of a UTXO snapshot.\n+                if (pindex->reliesOnAssumedValid()) {\n+                    if (chainstate->reliesOnAssumedValid()) {\n+                        chainstate->setBlockIndexCandidates.insert(pindex);\n+                    }\n+                } else {\n+                    // When blockindex doesn't rely on assumedvalid blocks, add it to all chainstates.\n+                    chainstate->setBlockIndexCandidates.insert(pindex);\n+                }\n+            }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "dbca47ece6b9a3a5e02969270bfab340fce286c0",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (dbca47ece6b9a3a5e02969270bfab340fce286c0)\r\n\r\nI think I would suggest a few changes here:\r\n\r\n- Consolidate the insert calls, and just focus on one case where blocks shouldn't be added instead of branching for other cases.\r\n- Try to be less vague in comments (\"fitting chainstates\")\r\n- Be a little more efficient avoiding the O(n) pindex call, and mention it explicitly in comment to be clear that it's intentional.\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 4af1c7f07a0..eec27f63abb 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -3653,15 +3653,15 @@ bool BlockManager::LoadBlockIndex(\r\n         if (pindex->IsAssumedValid() ||\r\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\r\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\r\n+            // Following call is O(n), but should not be a significant slowdown.\r\n+            const bool has_assumed_valid_ancestors = pindex->reliesOnAssumedValid();\r\n+\r\n+            // Fill each chainstate's block candidate set. Add all blocks as\r\n+            // candidates if the chainstate is allowed to rely on assumed-valid\r\n+            // data. Otherwise avoid adding assumed-valid blocks so the\r\n+            // chainstate will download and validate all earlier blocks.\r\n             for (CChainState* chainstate : chainman.GetAll()) {\r\n-                // Only add blocks which are assumed-valid to fitting chainstates, i.e. those\r\n-                // populated on the basis of a UTXO snapshot.\r\n-                if (pindex->reliesOnAssumedValid()) {\r\n-                    if (chainstate->reliesOnAssumedValid()) {\r\n-                        chainstate->setBlockIndexCandidates.insert(pindex);\r\n-                    }\r\n-                } else {\r\n-                    // When blockindex doesn't rely on assumedvalid blocks, add it to all chainstates.\r\n+                if (chainstate->reliesOnAssumedValid() || !has_assumed_valid_ancestors) {\r\n                     chainstate->setBlockIndexCandidates.insert(pindex);\r\n                 }\r\n             }\r\n\r\n```\r\n\r\nAlso it would be good to have unit test coverage for this",
      "created_at": "2021-11-02T22:37:00Z",
      "updated_at": "2021-11-02T23:13:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741509474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741509474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": 3652,
      "start_side": "LEFT",
      "line": null,
      "original_line": 3706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741513665",
      "pull_request_review_id": 795938311,
      "id": 741513665,
      "node_id": "PRRC_kwDOABII584sMpnB",
      "diff_hunk": "@@ -119,6 +119,15 @@ void CBlockIndex::BuildSkip()\n         pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n }\n \n+bool CBlockIndex::reliesOnAssumedValid() const {",
      "path": "src/chain.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "619ada31fdc90f079cb1a6c44df6b76f6a162c1e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add CBlockIndex reliesOnAssumeValid\" (619ada31fdc90f079cb1a6c44df6b76f6a162c1e)\r\n\r\nWould be good and should be pretty easy add a simple unit test for this. If you want a template, `findearliestatleast_edge_test` is a simple existing test making a chain of blocks and checking some properties.",
      "created_at": "2021-11-02T22:47:00Z",
      "updated_at": "2021-11-02T23:13:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741513665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741513665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745109360",
      "pull_request_review_id": 800628374,
      "id": 745109360,
      "node_id": "PRRC_kwDOABII584saXdw",
      "diff_hunk": "@@ -119,6 +119,15 @@ void CBlockIndex::BuildSkip()\n         pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n }\n \n+bool CBlockIndex::reliesOnAssumedValid() const {",
      "path": "src/chain.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "619ada31fdc90f079cb1a6c44df6b76f6a162c1e",
      "in_reply_to_id": 741513665,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, will test this.\r\n\r\nAlso, this change is not mergeable as-is: it turns out invoking this for each CBlockIndex in the chain takes a really. long. time. making startup on mainnet appear as though it is hung. :cry: ",
      "created_at": "2021-11-08T21:33:41Z",
      "updated_at": "2021-11-08T21:33:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r745109360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745109360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056082",
      "pull_request_review_id": 801894915,
      "id": 746056082,
      "node_id": "PRRC_kwDOABII584sd-mS",
      "diff_hunk": "@@ -4912,6 +4912,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n     for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n         index = snapshot_chainstate.m_chain[i];\n \n+        if (index->isGenesis()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "cb1d4244806980d31ceaa2307431dd70e6c39fe9",
      "in_reply_to_id": 741479471,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-11-09T21:21:30Z",
      "updated_at": "2021-11-09T21:21:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056172",
      "pull_request_review_id": 801895010,
      "id": 746056172,
      "node_id": "PRRC_kwDOABII584sd-ns",
      "diff_hunk": "@@ -4912,6 +4912,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n     for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n         index = snapshot_chainstate.m_chain[i];\n \n+        if (index->isGenesis()) {\n+            // Don't make any modifications to the genesis block.\n+            // This is especially important because we don't want to erroneously",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "cb1d4244806980d31ceaa2307431dd70e6c39fe9",
      "in_reply_to_id": 741482214,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-11-09T21:21:37Z",
      "updated_at": "2021-11-09T21:21:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4917,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056309",
      "pull_request_review_id": 801895182,
      "id": 746056309,
      "node_id": "PRRC_kwDOABII584sd-p1",
      "diff_hunk": "@@ -312,6 +312,10 @@ class CBlockIndex\n     //!   validated by a background chainstate.\n     bool IsAssumedValid() const { return nStatus & BLOCK_ASSUMED_VALID; }\n \n+    // Runtime: O(n) with chain length.\n+    // Returns true if the block specified relies on ancestors which are assumed-valid.\n+    bool reliesOnAssumedValid() const;",
      "path": "src/chain.h",
      "position": null,
      "original_position": 6,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "619ada31fdc90f079cb1a6c44df6b76f6a162c1e",
      "in_reply_to_id": 741486651,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed this method altogether, so done.",
      "created_at": "2021-11-09T21:21:52Z",
      "updated_at": "2021-11-09T21:21:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056309",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056515",
      "pull_request_review_id": 801895474,
      "id": 746056515,
      "node_id": "PRRC_kwDOABII584sd-tD",
      "diff_hunk": "@@ -3649,7 +3653,18 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                // Only add blocks which are assumed-valid to fitting chainstates, i.e. those\n+                // populated on the basis of a UTXO snapshot.\n+                if (pindex->reliesOnAssumedValid()) {\n+                    if (chainstate->reliesOnAssumedValid()) {\n+                        chainstate->setBlockIndexCandidates.insert(pindex);\n+                    }\n+                } else {\n+                    // When blockindex doesn't rely on assumedvalid blocks, add it to all chainstates.\n+                    chainstate->setBlockIndexCandidates.insert(pindex);\n+                }\n+            }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "dbca47ece6b9a3a5e02969270bfab340fce286c0",
      "in_reply_to_id": 741509474,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed everything here aside from the unittest, which I will follow up with. ",
      "created_at": "2021-11-09T21:22:15Z",
      "updated_at": "2021-11-09T21:22:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": 3652,
      "start_side": "LEFT",
      "line": null,
      "original_line": 3706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056741",
      "pull_request_review_id": 801895737,
      "id": 746056741,
      "node_id": "PRRC_kwDOABII584sd-wl",
      "diff_hunk": "@@ -119,6 +119,15 @@ void CBlockIndex::BuildSkip()\n         pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n }\n \n+bool CBlockIndex::reliesOnAssumedValid() const {",
      "path": "src/chain.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "619ada31fdc90f079cb1a6c44df6b76f6a162c1e",
      "in_reply_to_id": 741513665,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed - nothing to test anymore.",
      "created_at": "2021-11-09T21:22:37Z",
      "updated_at": "2021-11-09T21:22:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056741",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746056741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746966753",
      "pull_request_review_id": 803118052,
      "id": 746966753,
      "node_id": "PRRC_kwDOABII584shc7h",
      "diff_hunk": "@@ -3622,17 +3622,29 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Have we yet seen a pindex->IsAssumedValid()? If so, account for the fact that all subsequent\n+    // index entries rely on assumed-valid ancestors.\n+    bool seen_assumed_valid{false};\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n-        // We can link the chain of blocks for which we've received transactions at some point.\n+\n+        if (!seen_assumed_valid && pindex->IsAssumedValid()) {\n+            seen_assumed_valid = true;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: don't modify genesis during snapshot load\" (86d48535198724c723370a447f73e134029331c2)\r\n\r\nI still don't think it is good that if there are two blocks at the same height and one is assumed valid, then how the other one is treated depends on whether its _pointer address_ is higher or lower than the assumed valid block pointer address. (Previous comment about this was https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732182831). I get that this only temporarily impacts validation state of the background chainstate, but I don't think validation behavior should be nondeterministic and treat blocks differently based on what addresses malloc returns. Would suggest just doing height comparison directly so order of vSortedByHeight entries with the same height won't matter:\r\n\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 02b0f76f7b5..119b9141706 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -3623,9 +3623,14 @@ bool BlockManager::LoadBlockIndex(\r\n     }\r\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\r\n \r\n-    // Have we yet seen a pindex->IsAssumedValid()? If so, account for the fact that all subsequent\r\n-    // index entries rely on assumed-valid ancestors.\r\n-    bool seen_assumed_valid{false};\r\n+    // Find start of assumed-valid region.\r\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\r\n+    for (const auto& [height, block] : vSortedByHeight) {\r\n+        if (block->IsAssumedValid()) {\r\n+            first_assumed_valid_height = height;\r\n+            break;\r\n+        }\r\n+    }\r\n \r\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\r\n     {\r\n@@ -3634,10 +3639,6 @@ bool BlockManager::LoadBlockIndex(\r\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\r\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\r\n \r\n-        if (!seen_assumed_valid && pindex->IsAssumedValid()) {\r\n-            seen_assumed_valid = true;\r\n-        }\r\n-\r\n         // We can link the chain of blocks for which we've received transactions at some point, or\r\n         // blocks that are assumed-valid on the basis of snapshot load (see\r\n         // PopulateAndValidateSnapshot()).\r\n@@ -3674,7 +3675,7 @@ bool BlockManager::LoadBlockIndex(\r\n             // happen because assumed-valid blocks are buried deeply in\r\n             // the valid chain.\r\n             for (CChainState* chainstate : chainman.GetAll()) {\r\n-                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\r\n+                if (chainstate->reliesOnAssumedValid() || pindex->nHeight < first_assumed_valid_height) {\r\n                     chainstate->setBlockIndexCandidates.insert(pindex);\r\n                 }\r\n             }\r\n\r\n```\r\n",
      "created_at": "2021-11-10T20:36:54Z",
      "updated_at": "2021-11-10T21:36:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746966753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746966753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": 3637,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746975622",
      "pull_request_review_id": 803118052,
      "id": 746975622,
      "node_id": "PRRC_kwDOABII584shfGG",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (2833bd0277ac87cd07e98b0a23b73eed97a2e513)\r\n\r\nI think this note is helpful but a little confusing:\r\n\r\n- It's vague where it refers to \"the way seen_assumed_valid works\" and what \" considering a block\"  means\r\n- It's unclear where the claim that this has to be a very deep fork comes from. IIUC, the fork just has to happen before the first assumed valid block height, and this could be anywhere in between the genesis block and the snapshot height. It could actually be very close to the snapshot height if the background chainstate is almost finished validating.\r\n- It isn't clear about why this behavior is safe. That last sentence \"In practice this will not happen\" seems to imply that this is safe just because the condition is unlikely to happen. But comment is ambiguous whether it is safe regardless. IIUC, it is safe regardless.\r\n\r\nMy attempt to describe this would be \"Note: This is considering all blocks whose height is greater or equal to the first assumed-valid block to be assumed-valid blocks, and excluding them from the background chainstate's setBlockIndexCandidates set. This does mean that some blocks which are not technically assumed-valid (later blocks on a fork beginning before the first assumed-valid block) might not get added to the the background chainstate, but this is ok, because they will still be attached to the active chainstate if they actually contain more work.\"",
      "created_at": "2021-11-10T20:50:47Z",
      "updated_at": "2021-11-10T21:36:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746975622",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746975622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": 3669,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3675,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746977365",
      "pull_request_review_id": 803118052,
      "id": 746977365,
      "node_id": "PRRC_kwDOABII584shfhV",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (2833bd0277ac87cd07e98b0a23b73eed97a2e513)\r\n\r\nI'd maybe swap these conditions and write this as `if (chainstate->reliesOnAssumedValid() || !seen_assumed_valid)` to match the description above \"Add all blocks as candidates if the chainstate is allowed to rely on assumed-valid blocks. Otherwise avoid adding assumed-valid blocks\"\r\n",
      "created_at": "2021-11-10T20:53:41Z",
      "updated_at": "2021-11-10T21:36:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746977365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746977365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3677,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746999259",
      "pull_request_review_id": 803118052,
      "id": 746999259,
      "node_id": "PRRC_kwDOABII584shk3b",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);",
      "path": "src/validation.cpp",
      "position": 93,
      "original_position": 60,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: have LoadBlockIndex account for snapshot use\" (2833bd0277ac87cd07e98b0a23b73eed97a2e513)\r\n\r\nI still think it would be really nice to call this function from a unit test and make sure this set is filled correctly. The logic here is fragile, and testing this part of `LoadBlockIndex` could make it easier to test other parts as well.\r\n\r\nEDIT: Sorry, I see you mentioned working on this in https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-964561176",
      "created_at": "2021-11-10T21:29:07Z",
      "updated_at": "2021-11-10T21:37:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746999259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746999259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3704,
      "original_line": 3704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747012968",
      "pull_request_review_id": 803181569,
      "id": 747012968,
      "node_id": "PRRC_kwDOABII584shoNo",
      "diff_hunk": "@@ -3622,17 +3622,29 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Have we yet seen a pindex->IsAssumedValid()? If so, account for the fact that all subsequent\n+    // index entries rely on assumed-valid ancestors.\n+    bool seen_assumed_valid{false};\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n-        // We can link the chain of blocks for which we've received transactions at some point.\n+\n+        if (!seen_assumed_valid && pindex->IsAssumedValid()) {\n+            seen_assumed_valid = true;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": 746966753,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great suggestions, all integrated. Thank you!",
      "created_at": "2021-11-10T21:50:11Z",
      "updated_at": "2021-11-10T21:50:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r747012968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747012968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": 3637,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748440394",
      "pull_request_review_id": 805023614,
      "id": 748440394,
      "node_id": "PRRC_kwDOABII584snEtK",
      "diff_hunk": "@@ -312,4 +312,81 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n         loaded_snapshot_blockhash);\n }\n \n+//! Test LoadBlockIndex behavior when multiple chainstates are in use.\n+//!\n+//! - First, verfiy that setBlockIndexCandidates is as expected when using a single,\n+//!   fully-validating chainstate.\n+//!\n+//! - Then mark a region of the chain BLOCK_ASSUMED_VALID and introduce a second chainstate\n+//!   that will tolerate assumed-valid blocks. Run LoadBlockIndex() and ensure that the first\n+//!   chainstate only contains fully validated blocks and the other chainstate contains all blocks,\n+//!   even those assumed-valid.\n+//!\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_loadblockindex, TestChain100Setup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+    CTxMemPool& mempool = *m_node.mempool;\n+    CChainState& cs1 = chainman.ActiveChainstate();\n+\n+    int num_indexes{0};\n+    int num_assumed_valid{0};\n+    int expected_assumed_valid{20};\n+    int last_assumed_valid_idx{40};\n+    int assumed_valid_start_idx = last_assumed_valid_idx - expected_assumed_valid;",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"test: add tests for LoadBlockIndex when using multiple chainstates\" (e35d167682bc527fa9d8734f1cc7558f18d95b09)\r\n\r\nDeclaring these const could make the test a little easier to grok",
      "created_at": "2021-11-12T16:52:41Z",
      "updated_at": "2021-11-12T17:02:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748440394",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748440394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": 331,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748441135",
      "pull_request_review_id": 805023614,
      "id": 748441135,
      "node_id": "PRRC_kwDOABII584snE4v",
      "diff_hunk": "@@ -312,4 +312,81 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n         loaded_snapshot_blockhash);\n }\n \n+//! Test LoadBlockIndex behavior when multiple chainstates are in use.\n+//!\n+//! - First, verfiy that setBlockIndexCandidates is as expected when using a single,\n+//!   fully-validating chainstate.\n+//!\n+//! - Then mark a region of the chain BLOCK_ASSUMED_VALID and introduce a second chainstate\n+//!   that will tolerate assumed-valid blocks. Run LoadBlockIndex() and ensure that the first\n+//!   chainstate only contains fully validated blocks and the other chainstate contains all blocks,\n+//!   even those assumed-valid.\n+//!\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_loadblockindex, TestChain100Setup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+    CTxMemPool& mempool = *m_node.mempool;\n+    CChainState& cs1 = chainman.ActiveChainstate();\n+\n+    int num_indexes{0};\n+    int num_assumed_valid{0};\n+    int expected_assumed_valid{20};\n+    int last_assumed_valid_idx{40};\n+    int assumed_valid_start_idx = last_assumed_valid_idx - expected_assumed_valid;\n+\n+    CBlockIndex* validated_tip{nullptr};\n+    CBlockIndex* assumed_tip{chainman.ActiveChain().Tip()};\n+\n+    auto reload_all_block_indexes = [&]() {\n+        for (CChainState* cs : chainman.GetAll()) {\n+            LOCK(::cs_main);\n+            cs->UnloadBlockIndex();\n+            BOOST_CHECK(cs->setBlockIndexCandidates.empty());\n+        }\n+\n+        WITH_LOCK(::cs_main, chainman.LoadBlockIndex());\n+    };\n+\n+    // Ensure that without any assumed-valid BlockIndex entries, all entries are considered\n+    // tip candidates.\n+    reload_all_block_indexes();\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.size(), cs1.m_chain.Height() + 1);\n+\n+    // Mark some region of the chain assumed-valid.\n+    for (int i = 0; i <= cs1.m_chain.Height(); ++i) {\n+        auto index = cs1.m_chain[i];\n+\n+        if (i < last_assumed_valid_idx && i >= (last_assumed_valid_idx - expected_assumed_valid)) {",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"test: add tests for LoadBlockIndex when using multiple chainstates\" (e35d167682bc527fa9d8734f1cc7558f18d95b09)\r\n\r\nCould simplify `last_assumed_valid_idx - expected_assumed_valid` as `assumed_valid_start_idx`",
      "created_at": "2021-11-12T16:53:49Z",
      "updated_at": "2021-11-12T17:02:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748441135",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748441135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748949388",
      "pull_request_review_id": 805559521,
      "id": 748949388,
      "node_id": "PRRC_kwDOABII584spA-M",
      "diff_hunk": "@@ -309,4 +312,81 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n         loaded_snapshot_blockhash);\n }\n \n+//! Test LoadBlockIndex behavior when multiple chainstates are in use.\n+//!\n+//! - First, verfiy that setBlockIndexCandidates is as expected when using a single,\n+//!   fully-validating chainstate.\n+//!\n+//! - Then mark a region of the chain BLOCK_ASSUMED_VALID and introduce a second chainstate\n+//!   that will tolerate assumed-valid blocks. Run LoadBlockIndex() and ensure that the first\n+//!   chainstate only contains fully validated blocks and the other chainstate contains all blocks,\n+//!   even those assumed-valid.\n+//!\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_loadblockindex, TestChain100Setup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+    CTxMemPool& mempool = *m_node.mempool;\n+    CChainState& cs1 = chainman.ActiveChainstate();\n+\n+    int num_indexes{0};\n+    int num_assumed_valid{0};\n+    int expected_assumed_valid{20};\n+    int last_assumed_valid_idx{40};\n+    int assumed_valid_start_idx = last_assumed_valid_idx - expected_assumed_valid;\n+\n+    CBlockIndex* validated_tip{nullptr};\n+    CBlockIndex* assumed_tip{chainman.ActiveChain().Tip()};\n+\n+    auto reload_all_block_indexes = [&]() {\n+        for (CChainState* cs : chainman.GetAll()) {\n+            LOCK(::cs_main);\n+            cs->UnloadBlockIndex();\n+            BOOST_CHECK(cs->setBlockIndexCandidates.empty());\n+        }\n+\n+        WITH_LOCK(::cs_main, chainman.LoadBlockIndex());\n+    };\n+\n+    // Ensure that without any assumed-valid BlockIndex entries, all entries are considered\n+    // tip candidates.\n+    reload_all_block_indexes();\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.size(), cs1.m_chain.Height() + 1);\n+\n+    // Mark some region of the chain assumed-valid.\n+    for (int i = 0; i <= cs1.m_chain.Height(); ++i) {\n+        auto index = cs1.m_chain[i];\n+\n+        if (i < last_assumed_valid_idx && i >= (last_assumed_valid_idx - expected_assumed_valid)) {\n+            index->nStatus = BlockStatus::BLOCK_VALID_TREE | BlockStatus::BLOCK_ASSUMED_VALID;\n+        }\n+\n+        ++num_indexes;\n+        if (index->IsAssumedValid()) ++num_assumed_valid;\n+\n+        // Note the last fully-validated block as the expected validated tip.\n+        if (i == (assumed_valid_start_idx - 1)) {\n+            validated_tip = index;\n+            BOOST_CHECK(!index->IsAssumedValid());\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(expected_assumed_valid, num_assumed_valid);\n+\n+    CChainState& cs2 = WITH_LOCK(::cs_main,\n+        return chainman.InitializeChainstate(&mempool, GetRandHash()));\n+\n+    reload_all_block_indexes();\n+\n+    // The fully validated chain only has candidates up to the start of the assumed-valid\n+    // blocks.\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(validated_tip), 1);\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(assumed_tip), 0);\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.size(), assumed_valid_start_idx);\n+\n+    // The assumed-valid tolerant chain has all blocks as candidates.\n+    BOOST_CHECK_EQUAL(cs2.setBlockIndexCandidates.count(validated_tip), 1);\n+    BOOST_CHECK_EQUAL(cs2.setBlockIndexCandidates.count(assumed_tip), 1);\n+    BOOST_CHECK_EQUAL(cs2.setBlockIndexCandidates.size(), num_indexes);",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 88,
      "original_position": 88,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIUC any fully validated block beyond the assumed-valid range of blocks shouldn't not be tolerated by the \"fully-validated\" chain, as they're relying on assumed-valid blocks ?\r\n\r\nIf so can you add a `BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(m_chain.Height()), 0)` to verify this expected behavior holds ?",
      "created_at": "2021-11-15T01:15:48Z",
      "updated_at": "2021-11-15T01:24:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748949388",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748949388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 389,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748949660",
      "pull_request_review_id": 805559521,
      "id": 748949660,
      "node_id": "PRRC_kwDOABII584spBCc",
      "diff_hunk": "@@ -3622,17 +3622,30 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            first_assumed_valid_height = height;",
      "path": "src/validation.cpp",
      "position": 37,
      "original_position": 18,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Maybe add a `assert(IsSnapshotActive()` as we shouldn't have assumed-valid blocks in the absence of a snapshot loaded ?",
      "created_at": "2021-11-15T01:17:19Z",
      "updated_at": "2021-11-15T01:24:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748949660",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748949660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3642,
      "original_line": 3642,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748950124",
      "pull_request_review_id": 805559521,
      "id": 748950124,
      "node_id": "PRRC_kwDOABII584spBJs",
      "diff_hunk": "@@ -3649,7 +3662,28 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the comment can be slightly modified to mention the descendants of assumed-valid blocks, like in the commit description.\r\n\r\n\"Otherwise avoid adding assumed-valid blocks and their fully-validated descendants therefore inducing the chainstate to download and validate all blocks earlier than the first assumed-valid block\".",
      "created_at": "2021-11-15T01:19:43Z",
      "updated_at": "2021-11-15T01:24:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748950124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748950124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3669,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750592969",
      "pull_request_review_id": 807741510,
      "id": 750592969,
      "node_id": "PRRC_kwDOABII584svSPJ",
      "diff_hunk": "@@ -309,4 +312,81 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n         loaded_snapshot_blockhash);\n }\n \n+//! Test LoadBlockIndex behavior when multiple chainstates are in use.\n+//!\n+//! - First, verfiy that setBlockIndexCandidates is as expected when using a single,\n+//!   fully-validating chainstate.\n+//!\n+//! - Then mark a region of the chain BLOCK_ASSUMED_VALID and introduce a second chainstate\n+//!   that will tolerate assumed-valid blocks. Run LoadBlockIndex() and ensure that the first\n+//!   chainstate only contains fully validated blocks and the other chainstate contains all blocks,\n+//!   even those assumed-valid.\n+//!\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_loadblockindex, TestChain100Setup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+    CTxMemPool& mempool = *m_node.mempool;\n+    CChainState& cs1 = chainman.ActiveChainstate();\n+\n+    int num_indexes{0};\n+    int num_assumed_valid{0};\n+    int expected_assumed_valid{20};\n+    int last_assumed_valid_idx{40};\n+    int assumed_valid_start_idx = last_assumed_valid_idx - expected_assumed_valid;\n+\n+    CBlockIndex* validated_tip{nullptr};\n+    CBlockIndex* assumed_tip{chainman.ActiveChain().Tip()};\n+\n+    auto reload_all_block_indexes = [&]() {\n+        for (CChainState* cs : chainman.GetAll()) {\n+            LOCK(::cs_main);\n+            cs->UnloadBlockIndex();\n+            BOOST_CHECK(cs->setBlockIndexCandidates.empty());\n+        }\n+\n+        WITH_LOCK(::cs_main, chainman.LoadBlockIndex());\n+    };\n+\n+    // Ensure that without any assumed-valid BlockIndex entries, all entries are considered\n+    // tip candidates.\n+    reload_all_block_indexes();\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.size(), cs1.m_chain.Height() + 1);\n+\n+    // Mark some region of the chain assumed-valid.\n+    for (int i = 0; i <= cs1.m_chain.Height(); ++i) {\n+        auto index = cs1.m_chain[i];\n+\n+        if (i < last_assumed_valid_idx && i >= (last_assumed_valid_idx - expected_assumed_valid)) {\n+            index->nStatus = BlockStatus::BLOCK_VALID_TREE | BlockStatus::BLOCK_ASSUMED_VALID;\n+        }\n+\n+        ++num_indexes;\n+        if (index->IsAssumedValid()) ++num_assumed_valid;\n+\n+        // Note the last fully-validated block as the expected validated tip.\n+        if (i == (assumed_valid_start_idx - 1)) {\n+            validated_tip = index;\n+            BOOST_CHECK(!index->IsAssumedValid());\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(expected_assumed_valid, num_assumed_valid);\n+\n+    CChainState& cs2 = WITH_LOCK(::cs_main,\n+        return chainman.InitializeChainstate(&mempool, GetRandHash()));\n+\n+    reload_all_block_indexes();\n+\n+    // The fully validated chain only has candidates up to the start of the assumed-valid\n+    // blocks.\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(validated_tip), 1);\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(assumed_tip), 0);\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.size(), assumed_valid_start_idx);\n+\n+    // The assumed-valid tolerant chain has all blocks as candidates.\n+    BOOST_CHECK_EQUAL(cs2.setBlockIndexCandidates.count(validated_tip), 1);\n+    BOOST_CHECK_EQUAL(cs2.setBlockIndexCandidates.count(assumed_tip), 1);\n+    BOOST_CHECK_EQUAL(cs2.setBlockIndexCandidates.size(), num_indexes);",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 88,
      "original_position": 88,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": 748949388,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did you mean `cs1.setBlockIndexCandidates.count(m_chain.Height())`? Because the set doesn't contain heights, it contains CBlockIndex*. Also which `m_chain` are you referring to? Because there's one for `c1` and `c2`. \r\n\r\nI think the check you want is already included in `BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(assumed_tip), 0);`.",
      "created_at": "2021-11-16T19:25:24Z",
      "updated_at": "2021-11-16T19:25:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r750592969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750592969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 389,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750594454",
      "pull_request_review_id": 807743475,
      "id": 750594454,
      "node_id": "PRRC_kwDOABII584svSmW",
      "diff_hunk": "@@ -3622,17 +3622,30 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            first_assumed_valid_height = height;",
      "path": "src/validation.cpp",
      "position": 37,
      "original_position": 18,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": 748949660,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Part of @ryanofsky's overarching (and good) feedback a few months earlier was to avoid leaking knowledge of the idea of \"UTXO snapshots\" in places where it doesn't need to be. Instead we should rely on more fundamental state (like the presence of assumed-valid block index entries). I think referencing snapshots here would be going the other direction.",
      "created_at": "2021-11-16T19:27:24Z",
      "updated_at": "2021-11-16T19:27:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r750594454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750594454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3642,
      "original_line": 3642,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750633848",
      "pull_request_review_id": 807797246,
      "id": 750633848,
      "node_id": "PRRC_kwDOABII584svcN4",
      "diff_hunk": "@@ -3649,7 +3662,28 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": 748950124,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure I follow your suggested comment, since fully-validated blocks should be added to both chainstates, but I've updated the comment to be try and be clearer.",
      "created_at": "2021-11-16T20:23:51Z",
      "updated_at": "2021-11-16T20:23:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r750633848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750633848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3669,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750865419",
      "pull_request_review_id": 808091891,
      "id": 750865419,
      "node_id": "PRRC_kwDOABII584swUwL",
      "diff_hunk": "@@ -3622,17 +3622,30 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            first_assumed_valid_height = height;",
      "path": "src/validation.cpp",
      "position": 37,
      "original_position": 18,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": 748949660,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748949660\r\n\r\n> nit: Maybe add a `assert(IsSnapshotActive()` as we shouldn't have assumed-valid blocks in the absence of a snapshot loaded ?\r\n\r\nI guess like James said I'd be a little disinclined to add an assert checking for assumeutxo snapshots in validation code that's dealing more abstractly with chainstates. But I could also see the assert being useful as a sanity check, so no strong opinion either way.\r\n\r\nAnother option would be to write the assert a more generically with something like:\r\n\r\n```c++\r\n\r\n// assert that the assumed valid blocks come from some assumed-valid chainstate.\r\nassert(any_of(chainstates, [](auto& chainstate) { return chainstate->reliesOnAssumedValid(); });\r\n\r\n// assert that the assumed valid blocks will be validated by some not assumed-valid chainstate\r\nassert(any_of(chainstates, [](auto& chainstate) { return !chainstate->reliesOnAssumedValid(); });\r\n```",
      "created_at": "2021-11-17T04:03:02Z",
      "updated_at": "2021-11-17T04:06:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r750865419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750865419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3642,
      "original_line": 3642,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752672520",
      "pull_request_review_id": 810519220,
      "id": 752672520,
      "node_id": "PRRC_kwDOABII584s3N8I",
      "diff_hunk": "@@ -312,4 +312,81 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n         loaded_snapshot_blockhash);\n }\n \n+//! Test LoadBlockIndex behavior when multiple chainstates are in use.\n+//!\n+//! - First, verfiy that setBlockIndexCandidates is as expected when using a single,\n+//!   fully-validating chainstate.\n+//!\n+//! - Then mark a region of the chain BLOCK_ASSUMED_VALID and introduce a second chainstate\n+//!   that will tolerate assumed-valid blocks. Run LoadBlockIndex() and ensure that the first\n+//!   chainstate only contains fully validated blocks and the other chainstate contains all blocks,\n+//!   even those assumed-valid.\n+//!\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_loadblockindex, TestChain100Setup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+    CTxMemPool& mempool = *m_node.mempool;\n+    CChainState& cs1 = chainman.ActiveChainstate();\n+\n+    int num_indexes{0};\n+    int num_assumed_valid{0};\n+    int expected_assumed_valid{20};\n+    int last_assumed_valid_idx{40};\n+    int assumed_valid_start_idx = last_assumed_valid_idx - expected_assumed_valid;",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": 748440394,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks",
      "created_at": "2021-11-18T22:26:17Z",
      "updated_at": "2021-11-18T22:26:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r752672520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752672520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": 331,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/753429531",
      "pull_request_review_id": 811541105,
      "id": 753429531,
      "node_id": "PRRC_kwDOABII584s6Gwb",
      "diff_hunk": "@@ -3622,17 +3622,30 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            first_assumed_valid_height = height;",
      "path": "src/validation.cpp",
      "position": 37,
      "original_position": 18,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e35d167682bc527fa9d8734f1cc7558f18d95b09",
      "in_reply_to_id": 748949660,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea! Added.",
      "created_at": "2021-11-19T18:34:30Z",
      "updated_at": "2021-11-19T18:34:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r753429531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/753429531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3642,
      "original_line": 3642,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757915350",
      "pull_request_review_id": 817231643,
      "id": 757915350,
      "node_id": "PRRC_kwDOABII584tLN7W",
      "diff_hunk": "@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return chainstate->reliesOnAssumedValid(); }));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e19253f2fd17b01e52950b9e78fcd10251e6e8c0",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, this feels a bit backwards to me. Couldn't we skip the whole loop if we first check that one of the chainstates relies on assume-valid?",
      "created_at": "2021-11-28T15:49:23Z",
      "updated_at": "2021-11-28T17:04:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r757915350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757915350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3635,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757922484",
      "pull_request_review_id": 817231643,
      "id": 757922484,
      "node_id": "PRRC_kwDOABII584tLPq0",
      "diff_hunk": "@@ -184,6 +184,9 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n     BOOST_CHECK(!chainman.ActiveChainstate().m_from_snapshot_blockhash);\n     BOOST_CHECK(!chainman.SnapshotBlockhash());\n \n+    // Ensure that the genesis block was not marked assumed-valid.\n+    BOOST_CHECK(!chainman.ActiveChain().Genesis()->IsAssumedValid());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "86d48535198724c723370a447f73e134029331c2",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this in the right place here? When I set `AFTER_GENESIS_START` to 0 this still doesn't fail for me.",
      "created_at": "2021-11-28T16:47:06Z",
      "updated_at": "2021-11-28T17:04:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r757922484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757922484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758160127",
      "pull_request_review_id": 817521177,
      "id": 758160127,
      "node_id": "PRRC_kwDOABII584tMJr_",
      "diff_hunk": "@@ -4909,7 +4952,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).",
      "path": "src/validation.cpp",
      "position": 131,
      "original_position": 115,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand this comment. If genesis isn't `BLOCK_VALID_SCRIPTS`, then `BLOCK_ASSUMED_VALID` wouldn't be applied, so the workaround isn't needed??",
      "created_at": "2021-11-29T09:12:16Z",
      "updated_at": "2021-11-29T09:18:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758160127",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758160127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4968,
      "original_line": 4968,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758505693",
      "pull_request_review_id": 817997457,
      "id": 758505693,
      "node_id": "PRRC_kwDOABII584tNeDd",
      "diff_hunk": "@@ -184,6 +184,9 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n     BOOST_CHECK(!chainman.ActiveChainstate().m_from_snapshot_blockhash);\n     BOOST_CHECK(!chainman.SnapshotBlockhash());\n \n+    // Ensure that the genesis block was not marked assumed-valid.\n+    BOOST_CHECK(!chainman.ActiveChain().Genesis()->IsAssumedValid());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "86d48535198724c723370a447f73e134029331c2",
      "in_reply_to_id": 757922484,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh yep, you're very right - we haven't actually yet activated the snapshot at this point in the test. Good find, thanks.",
      "created_at": "2021-11-29T16:01:54Z",
      "updated_at": "2021-11-29T16:01:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758505693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758505693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758506598",
      "pull_request_review_id": 817998710,
      "id": 758506598,
      "node_id": "PRRC_kwDOABII584tNeRm",
      "diff_hunk": "@@ -4909,7 +4952,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).",
      "path": "src/validation.cpp",
      "position": 131,
      "original_position": 115,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "in_reply_to_id": 758160127,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, *because* genesis isn't `BLOCK_VALID_SCRIPTS` we would apply `BLOCK_ASSUMED_VALID` unless we specifically skip it. The workaround is still desirable and necessary, I just bungled the unittest (see above).",
      "created_at": "2021-11-29T16:02:52Z",
      "updated_at": "2021-11-29T16:02:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758506598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758506598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4968,
      "original_line": 4968,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758517157",
      "pull_request_review_id": 818012842,
      "id": 758517157,
      "node_id": "PRRC_kwDOABII584tNg2l",
      "diff_hunk": "@@ -4909,7 +4952,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).",
      "path": "src/validation.cpp",
      "position": 131,
      "original_position": 115,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "in_reply_to_id": 758160127,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, and the code below is:\r\n\r\n```cpp\r\n        if (!index->IsValid(BLOCK_VALID_SCRIPTS)) {\r\n            // This flag will be removed once the block is fully validated by a\r\n            // background chainstate.\r\n            index->nStatus |= BLOCK_ASSUMED_VALID;\r\n        }\r\n```\r\n\r\nSo how could it be executed if `BLOCK_VALID_SCRIPTS` isn't set?",
      "created_at": "2021-11-29T16:13:46Z",
      "updated_at": "2021-11-29T16:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758517157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758517157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4968,
      "original_line": 4968,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758527196",
      "pull_request_review_id": 818026373,
      "id": 758527196,
      "node_id": "PRRC_kwDOABII584tNjTc",
      "diff_hunk": "@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return chainstate->reliesOnAssumedValid(); }));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e19253f2fd17b01e52950b9e78fcd10251e6e8c0",
      "in_reply_to_id": 757915350,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand your comment: these two asserts are only performed once if there is an assumed-valid block detected, and then the loop is broken out of (line 3642). We don't want to do the asserts if there is no assumed-valid block, so I don't see how or why we'd do them outside of the loop.",
      "created_at": "2021-11-29T16:24:21Z",
      "updated_at": "2021-11-29T16:24:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758527196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758527196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3635,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758556179",
      "pull_request_review_id": 818065014,
      "id": 758556179,
      "node_id": "PRRC_kwDOABII584tNqYT",
      "diff_hunk": "@@ -4909,7 +4952,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).",
      "path": "src/validation.cpp",
      "position": 131,
      "original_position": 115,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "in_reply_to_id": 758160127,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is only executed when `BLOCK_VALID_SCRIPTS` *isn't* set - are you by chance missing the `!` in the conditional?\r\nEdit: changed an \"is\" to \"isn't\" - the double negative got me!",
      "created_at": "2021-11-29T16:55:30Z",
      "updated_at": "2021-11-29T17:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758556179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758556179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4968,
      "original_line": 4968,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759226449",
      "pull_request_review_id": 818955219,
      "id": 759226449,
      "node_id": "PRRC_kwDOABII584tQOBR",
      "diff_hunk": "@@ -4909,7 +4952,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).",
      "path": "src/validation.cpp",
      "position": 131,
      "original_position": 115,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "in_reply_to_id": 758160127,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nvm, apparently I don't understand how negation works.",
      "created_at": "2021-11-30T12:24:13Z",
      "updated_at": "2021-11-30T12:24:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759226449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759226449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4968,
      "original_line": 4968,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759363877",
      "pull_request_review_id": 819148005,
      "id": 759363877,
      "node_id": "PRRC_kwDOABII584tQvkl",
      "diff_hunk": "@@ -4909,7 +4952,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).",
      "path": "src/validation.cpp",
      "position": 131,
      "original_position": 115,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "in_reply_to_id": 758160127,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is an argument for including Python's `not` operator in C++21. ;)",
      "created_at": "2021-11-30T14:59:51Z",
      "updated_at": "2021-11-30T14:59:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759363877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759363877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4968,
      "original_line": 4968,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759468928",
      "pull_request_review_id": 819293171,
      "id": 759468928,
      "node_id": "PRRC_kwDOABII584tRJOA",
      "diff_hunk": "@@ -4909,7 +4952,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).",
      "path": "src/validation.cpp",
      "position": 131,
      "original_position": 115,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "in_reply_to_id": 758160127,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This is an argument for including Python's `not` operator in C++21. ;)\r\n\r\nIt's actually already there, no need to wait https://en.cppreference.com/w/cpp/language/operator_alternative",
      "created_at": "2021-11-30T16:45:25Z",
      "updated_at": "2021-11-30T16:45:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759468928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759468928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4968,
      "original_line": 4968,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759476770",
      "pull_request_review_id": 819304116,
      "id": 759476770,
      "node_id": "PRRC_kwDOABII584tRLIi",
      "diff_hunk": "@@ -4909,7 +4952,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).",
      "path": "src/validation.cpp",
      "position": 131,
      "original_position": 115,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "7a576ba9d24308e36dcde2b48b34c0676de98daa",
      "in_reply_to_id": 758160127,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Pretty sure that `not` may fail on some compilers (on windows?).\r\n\r\nIn general I think if there is a way to avoid a negation, it might be preferable. In this case saying \"(since it apparently is lacking BLOCK_VALID_SCRIPTS)\" might work?",
      "created_at": "2021-11-30T16:53:58Z",
      "updated_at": "2021-11-30T16:53:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759476770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759476770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4968,
      "original_line": 4968,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759485558",
      "pull_request_review_id": 819316081,
      "id": 759485558,
      "node_id": "PRRC_kwDOABII584tRNR2",
      "diff_hunk": "@@ -4909,7 +4909,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).\n+    constexpr int AFTER_GENESIS_START{1};\n+\n+    for (int i = AFTER_GENESIS_START; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n         index = snapshot_chainstate.m_chain[i];\n \n         // Fake nTx so that LoadBlockIndex() loads assumed-valid CBlockIndex",
      "path": "src/validation.cpp",
      "position": 137,
      "original_position": 15,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "9be75f223577108bc573c2b04f2f8c67eefe88ef",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in the first commit (9be75f223577108bc573c2b04f2f8c67eefe88ef):\r\n\r\nAs the genesis block is the only block which doesn't have a previous block, it might be good to remove the dead code in this body now.\r\n\r\n`index->pprev` is always true now and can/should be removed. If you are worried about future logic bugs, you may use `Assert(index->pprev)->nChainTx` instead of `index->pprev->nChainTx`.",
      "created_at": "2021-11-30T17:03:29Z",
      "updated_at": "2021-11-30T18:04:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759485558",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759485558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4974,
      "original_line": 4974,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759503280",
      "pull_request_review_id": 819316081,
      "id": 759503280,
      "node_id": "PRRC_kwDOABII584tRRmw",
      "diff_hunk": "@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 36e2bc4275fdb0d72390215fcea4d499f8049701:\r\n\r\nCan you explain why this compiles? I always assumed that standard library helpers are only accessible in the `std::` namespace.",
      "created_at": "2021-11-30T17:24:29Z",
      "updated_at": "2021-11-30T18:04:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759503280",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759503280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3634,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759507823",
      "pull_request_review_id": 819316081,
      "id": 759507823,
      "node_id": "PRRC_kwDOABII584tRStv",
      "diff_hunk": "@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return chainstate->reliesOnAssumedValid(); }));\n+            // assert that the assumed valid blocks will be validated by some not assumed-valid\n+            // chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return !chainstate->reliesOnAssumedValid(); }));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 36e2bc4275fdb0d72390215fcea4d499f8049701:\r\n\r\nCan you explain the asserts a bit better? Currently it looks like they are asserting that two chainstates exist. This condition should be independent of the loop and could be moved outside?\r\n\r\n",
      "created_at": "2021-11-30T17:30:00Z",
      "updated_at": "2021-11-30T18:04:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759507823",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759507823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759533358",
      "pull_request_review_id": 819316081,
      "id": 759533358,
      "node_id": "PRRC_kwDOABII584tRY8u",
      "diff_hunk": "@@ -3649,7 +3673,28 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so that\n+            // non-assumed-valid chainstates will download and validate all earlier,\n+            // unvalidated blocks.\n+            //\n+            // Note: This is considering all blocks whose height is greater or\n+            // equal to the first assumed-valid block to be assumed-valid\n+            // blocks, and excluding them from the background chainstate's\n+            // setBlockIndexCandidates set. This does mean that some blocks\n+            // which are not technically assumed-valid (later blocks on a fork\n+            // beginning before the first assumed-valid block) might not get\n+            // added to the the background chainstate, but this is ok, because\n+            // they will still be attached to the active chainstate if they\n+            // actually contain more work.",
      "path": "src/validation.cpp",
      "position": 84,
      "original_position": 73,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 36e2bc4275fdb0d72390215fcea4d499f8049701:\r\n\r\nI don't understand why it is safe to not attach them. If the assumed valid block is sufficiently old, it may cost little POW to create an alternative fork up to that height, and confusing the background chainstate that it can't connect to the active chainstate?\r\n\r\nWhat is the reason for the if-condition in the first place? What would happen if both candidate sets are fully populated?",
      "created_at": "2021-11-30T18:02:47Z",
      "updated_at": "2021-11-30T18:04:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759533358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759533358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3695,
      "original_line": 3695,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759737914",
      "pull_request_review_id": 819659122,
      "id": 759737914,
      "node_id": "PRRC_kwDOABII584tSK46",
      "diff_hunk": "@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return chainstate->reliesOnAssumedValid(); }));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "e19253f2fd17b01e52950b9e78fcd10251e6e8c0",
      "in_reply_to_id": 757915350,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unless I have a misunderstanding here, what I meant: We only have blocks that are assumed valid if we have a chainstate that relies on assume valid, those two will always go together. We will probably have very few chain states and we have a lot of blocks. So it seems to me that it would be more efficient to first loop the chainstates and then the blocks.",
      "created_at": "2021-11-30T23:24:30Z",
      "updated_at": "2021-11-30T23:24:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759737914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759737914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3635,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762977516",
      "pull_request_review_id": 823911768,
      "id": 762977516,
      "node_id": "PRRC_kwDOABII584tehzs",
      "diff_hunk": "@@ -427,20 +427,16 @@ class BlockManager\n \n     std::unique_ptr<CBlockTreeDB> m_block_tree_db GUARDED_BY(::cs_main);\n \n-    bool LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    bool LoadBlockIndexDB(ChainstateManager& chainman) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);",
      "path": "src/validation.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "36e2bc4275fdb0d72390215fcea4d499f8049701: is it possible to spit this out as a refactor commit? IIUC `setBlockIndexCandidates` here is always just  `ActiveChainstate().setBlockIndexCandidates`.",
      "created_at": "2021-12-06T12:49:41Z",
      "updated_at": "2021-12-06T12:57:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r762977516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762977516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 430,
      "original_line": 430,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/767989074",
      "pull_request_review_id": 830568766,
      "id": 767989074,
      "node_id": "PRRC_kwDOABII584txpVS",
      "diff_hunk": "@@ -3649,7 +3673,28 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so that\n+            // non-assumed-valid chainstates will download and validate all earlier,\n+            // unvalidated blocks.\n+            //\n+            // Note: This is considering all blocks whose height is greater or\n+            // equal to the first assumed-valid block to be assumed-valid\n+            // blocks, and excluding them from the background chainstate's\n+            // setBlockIndexCandidates set. This does mean that some blocks\n+            // which are not technically assumed-valid (later blocks on a fork\n+            // beginning before the first assumed-valid block) might not get\n+            // added to the the background chainstate, but this is ok, because\n+            // they will still be attached to the active chainstate if they\n+            // actually contain more work.",
      "path": "src/validation.cpp",
      "position": 84,
      "original_position": 73,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": 759533358,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If both candidate sets are fully populated, when ActivateBestChain is called on the background validation chainstate, [`FindMostWorkChain()`](https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L2410-L2416) will return the assumed-valid block index entry as installed by snapshot activation, and it won't think it has to enter IBD to download and fully validate the chain up to the snapshot base block. I'll include this in the commentary above since people (myself included) seem to constantly forget why we need this conditional.",
      "created_at": "2021-12-13T17:52:08Z",
      "updated_at": "2021-12-13T17:52:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r767989074",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/767989074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3695,
      "original_line": 3695,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768000004",
      "pull_request_review_id": 830583811,
      "id": 768000004,
      "node_id": "PRRC_kwDOABII584txsAE",
      "diff_hunk": "@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return chainstate->reliesOnAssumedValid(); }));\n+            // assert that the assumed valid blocks will be validated by some not assumed-valid\n+            // chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return !chainstate->reliesOnAssumedValid(); }));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": 759507823,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This condition should be independent of the loop and could be moved outside?\r\n\r\nI don't see why you say that because (i) this condition should only be asserted if we encounter an assumed-valid block, which we need to loop through the index to find out, and (ii) the condition is only asserted once since we break immediately afterwards.",
      "created_at": "2021-12-13T18:06:28Z",
      "updated_at": "2021-12-13T18:06:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768000004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768000004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768027486",
      "pull_request_review_id": 830622685,
      "id": 768027486,
      "node_id": "PRRC_kwDOABII584txyte",
      "diff_hunk": "@@ -427,20 +427,16 @@ class BlockManager\n \n     std::unique_ptr<CBlockTreeDB> m_block_tree_db GUARDED_BY(::cs_main);\n \n-    bool LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    bool LoadBlockIndexDB(ChainstateManager& chainman) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);",
      "path": "src/validation.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": 762977516,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's possible, but I'm not going to do it because it creates too much intermediate churn (updating code that is changed anyway in the subsequent commit).",
      "created_at": "2021-12-13T18:46:03Z",
      "updated_at": "2021-12-13T18:46:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768027486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768027486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 430,
      "original_line": 430,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768029062",
      "pull_request_review_id": 830624810,
      "id": 768029062,
      "node_id": "PRRC_kwDOABII584txzGG",
      "diff_hunk": "@@ -3649,7 +3673,28 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so that\n+            // non-assumed-valid chainstates will download and validate all earlier,\n+            // unvalidated blocks.\n+            //\n+            // Note: This is considering all blocks whose height is greater or\n+            // equal to the first assumed-valid block to be assumed-valid\n+            // blocks, and excluding them from the background chainstate's\n+            // setBlockIndexCandidates set. This does mean that some blocks\n+            // which are not technically assumed-valid (later blocks on a fork\n+            // beginning before the first assumed-valid block) might not get\n+            // added to the the background chainstate, but this is ok, because\n+            // they will still be attached to the active chainstate if they\n+            // actually contain more work.",
      "path": "src/validation.cpp",
      "position": 84,
      "original_position": 73,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": 759533358,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> If the assumed valid block is sufficiently old, it may cost little POW to create an alternative fork up to that height, and confusing the background chainstate that it can't connect to the active chainstate?\r\n\r\nI'm confused by this because the background chainstate shouldn't be considering forks anyway; its purpose is to verify the assumed-valid blocks beneath the snapshot and it does not handle reorgs or forks.",
      "created_at": "2021-12-13T18:48:18Z",
      "updated_at": "2021-12-13T18:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768029062",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768029062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3695,
      "original_line": 3695,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768030110",
      "pull_request_review_id": 830626190,
      "id": 768030110,
      "node_id": "PRRC_kwDOABII584txzWe",
      "diff_hunk": "@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return chainstate->reliesOnAssumedValid(); }));\n+            // assert that the assumed valid blocks will be validated by some not assumed-valid\n+            // chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return !chainstate->reliesOnAssumedValid(); }));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": 759507823,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've refactored this code and updated the commentary; hopefully you find it more intuitive now.",
      "created_at": "2021-12-13T18:49:39Z",
      "updated_at": "2021-12-13T18:49:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768030110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768030110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768030246",
      "pull_request_review_id": 830626369,
      "id": 768030246,
      "node_id": "PRRC_kwDOABII584txzYm",
      "diff_hunk": "@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": 759503280,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-12-13T18:49:51Z",
      "updated_at": "2021-12-13T18:49:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768030246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768030246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3634,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768030319",
      "pull_request_review_id": 830626472,
      "id": 768030319,
      "node_id": "PRRC_kwDOABII584txzZv",
      "diff_hunk": "@@ -4909,7 +4909,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).\n+    constexpr int AFTER_GENESIS_START{1};\n+\n+    for (int i = AFTER_GENESIS_START; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n         index = snapshot_chainstate.m_chain[i];\n \n         // Fake nTx so that LoadBlockIndex() loads assumed-valid CBlockIndex",
      "path": "src/validation.cpp",
      "position": 137,
      "original_position": 15,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "9be75f223577108bc573c2b04f2f8c67eefe88ef",
      "in_reply_to_id": 759485558,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks.",
      "created_at": "2021-12-13T18:49:57Z",
      "updated_at": "2021-12-13T18:49:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768030319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768030319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4974,
      "original_line": 4974,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768332232",
      "pull_request_review_id": 831036685,
      "id": 768332232,
      "node_id": "PRRC_kwDOABII584ty9HI",
      "diff_hunk": "@@ -4918,7 +4925,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n             index->nTx = 1;\n         }\n         // Fake nChainTx so that GuessVerificationProgress reports accurately\n-        index->nChainTx = index->pprev ? index->pprev->nChainTx + index->nTx : 1;\n+        index->nChainTx = index->pprev->nChainTx + index->nTx;",
      "path": "src/validation.cpp",
      "position": 143,
      "original_position": 21,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d0c6e61f5dd3b6af818459d9d03b7ba316c5a3f7: I like @MarcoFalke's suggestion of using `Assert(index->pprev)` instead.",
      "created_at": "2021-12-14T05:41:31Z",
      "updated_at": "2021-12-14T06:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768332232",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768332232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4980,
      "original_line": 4928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768350804",
      "pull_request_review_id": 831036685,
      "id": 768350804,
      "node_id": "PRRC_kwDOABII584tzBpU",
      "diff_hunk": "@@ -312,4 +312,81 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n         loaded_snapshot_blockhash);\n }\n \n+//! Test LoadBlockIndex behavior when multiple chainstates are in use.\n+//!\n+//! - First, verfiy that setBlockIndexCandidates is as expected when using a single,\n+//!   fully-validating chainstate.\n+//!\n+//! - Then mark a region of the chain BLOCK_ASSUMED_VALID and introduce a second chainstate\n+//!   that will tolerate assumed-valid blocks. Run LoadBlockIndex() and ensure that the first\n+//!   chainstate only contains fully validated blocks and the other chainstate contains all blocks,\n+//!   even those assumed-valid.\n+//!\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_loadblockindex, TestChain100Setup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+    CTxMemPool& mempool = *m_node.mempool;\n+    CChainState& cs1 = chainman.ActiveChainstate();\n+\n+    int num_indexes{0};\n+    int num_assumed_valid{0};\n+    const int expected_assumed_valid{20};\n+    const int last_assumed_valid_idx{40};\n+    const int assumed_valid_start_idx = last_assumed_valid_idx - expected_assumed_valid;\n+\n+    CBlockIndex* validated_tip{nullptr};\n+    CBlockIndex* assumed_tip{chainman.ActiveChain().Tip()};\n+\n+    auto reload_all_block_indexes = [&]() {\n+        for (CChainState* cs : chainman.GetAll()) {\n+            LOCK(::cs_main);\n+            cs->UnloadBlockIndex();\n+            BOOST_CHECK(cs->setBlockIndexCandidates.empty());\n+        }\n+\n+        WITH_LOCK(::cs_main, chainman.LoadBlockIndex());\n+    };\n+\n+    // Ensure that without any assumed-valid BlockIndex entries, all entries are considered\n+    // tip candidates.\n+    reload_all_block_indexes();\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.size(), cs1.m_chain.Height() + 1);\n+\n+    // Mark some region of the chain assumed-valid.\n+    for (int i = 0; i <= cs1.m_chain.Height(); ++i) {\n+        auto index = cs1.m_chain[i];\n+\n+        if (i < last_assumed_valid_idx && i >= assumed_valid_start_idx) {\n+            index->nStatus = BlockStatus::BLOCK_VALID_TREE | BlockStatus::BLOCK_ASSUMED_VALID;",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 59,
      "original_position": 49,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add:\r\n```cpp\r\n    BOOST_CHECK(index->IsAssumedValid());\r\n} else {\r\n    BOOST_CHECK(index->!IsAssumedValid());\r\n```",
      "created_at": "2021-12-14T06:28:33Z",
      "updated_at": "2021-12-14T06:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768350804",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768350804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 360,
      "original_line": 360,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768555186",
      "pull_request_review_id": 831342484,
      "id": 768555186,
      "node_id": "PRRC_kwDOABII584tzziy",
      "diff_hunk": "@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return chainstate->reliesOnAssumedValid(); }));\n+            // assert that the assumed valid blocks will be validated by some not assumed-valid\n+            // chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return !chainstate->reliesOnAssumedValid(); }));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": 759507823,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "With \"condition\" I mean \"two chainstates exist\".\r\n\r\nThus a loop of the form:\r\n\r\n```py\r\nfor b in blocks:\r\n  if b.assumed:\r\n    assert len(chains())==2\r\n```\r\n\r\nCan be rewritten into:\r\n\r\n```py\r\nhave_two_chains = len(chains())==2\r\nfor b in blocks:\r\n  if b.assumed:\r\n    assert have_two_chains\r\n```\r\n\r\nObviously the performance should be the same here, but evaluating the condition outside the loop might be clearer. It would even allow to add additional checks. (Like asserting that *no* block is assumed if the number of chains is one?)",
      "created_at": "2021-12-14T11:05:02Z",
      "updated_at": "2021-12-14T11:05:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768555186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768555186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768600512",
      "pull_request_review_id": 831405996,
      "id": 768600512,
      "node_id": "PRRC_kwDOABII584tz-nA",
      "diff_hunk": "@@ -3649,7 +3673,28 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so that\n+            // non-assumed-valid chainstates will download and validate all earlier,\n+            // unvalidated blocks.\n+            //\n+            // Note: This is considering all blocks whose height is greater or\n+            // equal to the first assumed-valid block to be assumed-valid\n+            // blocks, and excluding them from the background chainstate's\n+            // setBlockIndexCandidates set. This does mean that some blocks\n+            // which are not technically assumed-valid (later blocks on a fork\n+            // beginning before the first assumed-valid block) might not get\n+            // added to the the background chainstate, but this is ok, because\n+            // they will still be attached to the active chainstate if they\n+            // actually contain more work.",
      "path": "src/validation.cpp",
      "position": 84,
      "original_position": 73,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "36e2bc4275fdb0d72390215fcea4d499f8049701",
      "in_reply_to_id": 759533358,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I guess I am missing context on how the download logic will be modified for assumevalid.\r\n\r\nIf the assumevalid chain is assumed to be always linear, then maybe a check that all assumed blocks are parents of the assumed tip block makes sense?",
      "created_at": "2021-12-14T12:08:08Z",
      "updated_at": "2021-12-14T12:08:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r768600512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768600512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3695,
      "original_line": 3695,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198450499",
      "pull_request_review_id": 1433645269,
      "id": 1198450499,
      "node_id": "PRRC_kwDOABII585HbudD",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);",
      "path": "src/validation.cpp",
      "position": 93,
      "original_position": 60,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": 746999259,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry for chiming in on what is now a very old PR, but I believe this block of code is incorrect. If we have a snapshot in place (and so some block index is marked IsAssumedValid), but we have downloaded blocks that haven't yet been activated (eg on the background-validation chainstate), this logic prevents us from adding those downloaded-but-not-yet verified blocks to `setBlockIndexCandidate` for the background chainstate. \r\n\r\nI ran into this while working on a download implementation for assumeutxo, and in some sequence of node restarts I got stuck in a state where my node had downloaded a bunch of blocks but never activated them, because they weren't in `setBlockIndexCandidates`.  I thought that restarting should fix the issue, but it didn't due to this block of code not doing the right thing...\r\n\r\nAdmittedly there is a lot of complicated interaction here but I think there's an invariant for `setBlockIndexCandidates` that is violated by this block of code, which is that if we have the data for a block and all its predecessors and it has more work than our tip, then it should be in `setBlockIndexCandidates`.  By excluding blocks that are marked IsAssumedValid() we violate this.",
      "created_at": "2023-05-19T01:10:00Z",
      "updated_at": "2023-05-19T01:10:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r1198450499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1198450499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3704,
      "original_line": 3704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202700402",
      "pull_request_review_id": 1440184827,
      "id": 1202700402,
      "node_id": "PRRC_kwDOABII585Hr8By",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);",
      "path": "src/validation.cpp",
      "position": 93,
      "original_position": 60,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": 746999259,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sdaftuar:\r\n\r\n> If we have a snapshot in place (and so some block index is marked IsAssumedValid), but we have downloaded blocks that haven't yet been activated (eg on the background-validation chainstate), this logic prevents us from adding those downloaded-but-not-yet verified blocks to setBlockIndexCandidate for the background chainstate\r\n\r\nI'm having a hard time following how this could happen. If the bg chainstate has some downloaded-but-not-activated blocks, they are definitionally beneath the `first_assumed_valid_height` (since we don't attach blocks above that height to the bg chainstate). So any of those blocks should be added by this code to the bg chainstate's `setBlockIndexCandidates`. Have you seen an example where you're sure that a downloaded block on the bg chain is excluded by this code?\r\n\r\nI don't doubt that you're seeing an issue though... I wonder if there might be a problem with how `m_best_header` is set below? I.e. that state isn't qualified per chainstate. That's something I'll investigate now.\r\n\r\nI'd also be curious if anyone else has seen this issue when testing the assumeutxo tracking branch (https://github.com/bitcoin/bitcoin/pull/27596). Is there a chance some code you've added is causing this?\r\n\r\n> By excluding blocks that are marked IsAssumedValid() we violate this.\r\n\r\nNote that we're only excluding blocks marked assumedvalid (by way of the height check) for the bg chainstate, which still seems sensible to me. All blocks, assumedvalid or not, are added to the snapshot chainstate (or \"regular\" chain if no snapshot is in use).",
      "created_at": "2023-05-23T16:46:00Z",
      "updated_at": "2023-05-23T16:46:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r1202700402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202700402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3704,
      "original_line": 3704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202781921",
      "pull_request_review_id": 1440282277,
      "id": 1202781921,
      "node_id": "PRRC_kwDOABII585HsP7h",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);",
      "path": "src/validation.cpp",
      "position": 93,
      "original_position": 60,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": 746999259,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> they are definitionally beneath the first_assumed_valid_height (since we don't attach blocks above that height to the bg chainstate)\r\n\r\nI don't believe this is true; after we download a block and before we validate the block, the CBlockIndex entry for that block will have the AssumedValid bit set to true.  This means that if you were to download a bunch of blocks and then shutdown prior to those blocks being validated on the bg chainstate, that when you restart you'll be in this state.",
      "created_at": "2023-05-23T17:50:36Z",
      "updated_at": "2023-05-23T17:50:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r1202781921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202781921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3704,
      "original_line": 3704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202808054",
      "pull_request_review_id": 1440313809,
      "id": 1202808054,
      "node_id": "PRRC_kwDOABII585HsWT2",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);",
      "path": "src/validation.cpp",
      "position": 93,
      "original_position": 60,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": 746999259,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But it's no problem for them to have the ASSUMED_VALID bit set to true; since they're beneath the snapshot base height, they'll be added to the setBlockIndexCandidates.",
      "created_at": "2023-05-23T18:11:50Z",
      "updated_at": "2023-05-23T18:11:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r1202808054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202808054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3704,
      "original_line": 3704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202821267",
      "pull_request_review_id": 1440328792,
      "id": 1202821267,
      "node_id": "PRRC_kwDOABII585HsZiT",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);",
      "path": "src/validation.cpp",
      "position": 93,
      "original_position": 60,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": 746999259,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The code here isn't comparing with the snapshot base height; it's just checking if a block index entry is below the `first_assumed_valid_height`, and only in that case does it get added to `setBlockIndexCandidates`.  [I don't believe there's any other logic elsewhere that will do what you are describing, of adding entries below the snapshot base height to `setBlockIndexCandidates`?]",
      "created_at": "2023-05-23T18:22:52Z",
      "updated_at": "2023-05-23T18:22:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r1202821267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202821267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3704,
      "original_line": 3704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202825049",
      "pull_request_review_id": 1440333120,
      "id": 1202825049,
      "node_id": "PRRC_kwDOABII585HsadZ",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);",
      "path": "src/validation.cpp",
      "position": 93,
      "original_position": 60,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": 746999259,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "More generally: I think that we don't need to worry at all about whether the assumed-valid bit is set when adding entries to `setBlockIndexCandidates`. We always validate a block when it gets connected, so the only invariant we need on entries in `setBlockIndexCandidates` is whether they have enough work to be worth considering.  (We used to have a hard requirement that we always HAVE_DATA for such entries, but after pruning we had to relax that a bit, as there are edge-case scenarios where you might HAVE_DATA for such an entry and then prune it before you try to connect it, so we handle that case by (re-)adding such entries to `mapBlocksUnlinked` when they occur. But I digress...) ",
      "created_at": "2023-05-23T18:26:03Z",
      "updated_at": "2023-05-23T18:29:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r1202825049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202825049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3704,
      "original_line": 3704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202835874",
      "pull_request_review_id": 1440345677,
      "id": 1202835874,
      "node_id": "PRRC_kwDOABII585HsdGi",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);",
      "path": "src/validation.cpp",
      "position": 93,
      "original_position": 60,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": 746999259,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> The code here isn't comparing with the snapshot base height; it's just checking if a block index entry is below the first_assumed_valid_height\r\n\r\nOops, total misread on my part. You're right; `first_assumed_valid_height` will be the block after the tip of the background chain.",
      "created_at": "2023-05-23T18:35:04Z",
      "updated_at": "2023-05-23T18:35:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r1202835874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202835874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3704,
      "original_line": 3704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202842452",
      "pull_request_review_id": 1440353159,
      "id": 1202842452,
      "node_id": "PRRC_kwDOABII585HsetU",
      "diff_hunk": "@@ -3649,7 +3661,23 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so the\n+            // chainstate will download and validate all earlier blocks.\n+            //\n+            // Note: given the loop over `vSortedByHeight` and the way\n+            // `seen_assumed_valid` works, it is (in general) possible that we\n+            // are considering a block which has a height higher than the\n+            // assumed-valid region but is not itself reliant on assumed-valid\n+            // ancestors (i.e. a very deep fork). In practice this will not\n+            // happen because assumed-valid blocks are buried deeply in\n+            // the valid chain.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!seen_assumed_valid || chainstate->reliesOnAssumedValid()) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);",
      "path": "src/validation.cpp",
      "position": 93,
      "original_position": 60,
      "commit_id": "2283b9cd1ee0fbd1e8ebc61673b1fe7596199a24",
      "original_commit_id": "2833bd0277ac87cd07e98b0a23b73eed97a2e513",
      "in_reply_to_id": 746999259,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The logic here does seem confusing.\r\n\r\nCode comment says background candidate set needs to exclude BLOCK_ASSUMED_VALID blocks because otherwise ActivateBestChain \"would add assumed-valid blocks to the chain\". But that seems like exactly what it should do? (after validating them)\r\n\r\nCommit message says background candidate set needs to exclude blocks after the snapshot height that don't have BLOCK_ASSUMED_VALID, but depend on blocks that do have BLOCK_ASSUMED_VALID. That idea does make sense, but does not seem to be what is implemented.\r\n\r\nTaking another a step back, it seems like all of this would be simpler if background ActivateBestChain function just skipped calling FindMostWorkChain and tried to connect blocks up to the base of the snapshot.",
      "created_at": "2023-05-23T18:40:22Z",
      "updated_at": "2023-05-23T18:40:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23174#discussion_r1202842452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1202842452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23174"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3704,
      "original_line": 3704,
      "side": "RIGHT"
    }
  ]
}