{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385",
    "id": 1499078513,
    "node_id": "PR_kwDOABII585ZWh9x",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28385",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28385.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28385.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
    "number": 28385,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "[refactor] rewrite DisconnectedBlockTransactions to not use boost",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Motivation\r\n- I think it's preferable to use stdlib data structures instead of depending on boost if we can achieve the same thing.\r\n- Also see #28335 for further context/motivation. This PR simplifies that one.\r\n\r\nThings done in this PR:\r\n- Add a bench for `DisconnectedBlockTransactions` where we reorg and the new chain has {100%, 90%, 10%} of the same transactions. AFAIU in practice, it's usually close to 100%.\r\n- Rewrite `DisconnectedBlockTransactions` as a `std::list` + `unordered_map` instead of a boost multi index container.\r\n  - On my machine, the bench suggests the performance is very similar.\r\n- Move `DisconnectedBlockTransactions` from txmempool.h to its own kernel/disconnected_transactions.h. This struct isn't used by txmempool and doesn't have much to do with txmempool. My guess is that it's been living there for convenience since the boost includes are there.\r\n",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2023-09-01T15:52:38Z",
    "updated_at": "2023-09-13T08:38:38Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "4d8e502c5acb9c431b47901b823d3d3bc8757467",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "glozow:2023-09-unboost-disconnectedtxns-listonly",
      "ref": "2023-09-unboost-disconnectedtxns-listonly",
      "sha": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 10,
        "watchers_count": 10,
        "size": 230994,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-13T08:42:28Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2023-08-30T16:39:28Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "8f7b9eb8711fdb32e8bdb59d2a7462a46c7a8086",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35667,
        "stargazers_count": 71307,
        "watchers_count": 71307,
        "size": 239360,
        "default_branch": "master",
        "open_issues_count": 688,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-13T08:57:15Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-09-13T08:44:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 402,
    "deletions": 129,
    "changed_files": 11,
    "commits": 7,
    "review_comments": 84,
    "comments": 11
  },
  "events": [
    {
      "event": "labeled",
      "id": 10258786900,
      "node_id": "LE_lADOABII585v6tugzwAAAAJjeKpU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10258786900",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-01T15:52:38Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "commented",
      "id": 1702965783,
      "node_id": "IC_kwDOABII585lgTIX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1702965783",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-01T15:52:42Z",
      "updated_at": "2023-09-07T13:46:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [fanquake](https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1706343369), [instagibbs](https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1706993248), [theuni](https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1611340310), [stickies-v](https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1611163652) |\n| Approach ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1611253884) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28335](https://github.com/bitcoin/bitcoin/pull/28335) (RFC: Remove boost usage from kernel api / headers by TheCharlatan)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1702965783",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10258927179,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJjes5L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10258927179",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-01T16:07:33Z"
    },
    {
      "event": "labeled",
      "id": 10258929323,
      "node_id": "LE_lADOABII585v6tugzwAAAAJjetar",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10258929323",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-01T16:07:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10258978176,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJje5WA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10258978176",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-01T16:12:50Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-01T16:24:24Z",
      "updated_at": "2023-09-01T16:24:24Z",
      "source": {
        "issue": {
          "id": 1864447692,
          "node_id": "PR_kwDOABII585YqB5K",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28335",
          "number": 28335,
          "state": "open",
          "state_reason": null,
          "title": "RFC: Remove boost usage from kernel api / headers",
          "body": "Similarly to #28327 I wanted to open this PR to receive some opinions and better approaches.\r\n\r\nThe kernel library is currently at the stage where unwanted headers are removed from its set of headers. In practice, this means we are reducing the number of includes that are required for compiling the experimental `bitcoin-chainstate` binary. This is described in stage 1 step 3 of the [project tracking issue](https://github.com/bitcoin/bitcoin/issues/27587).\r\n\r\nCurrently the mempool is part of the kernel library. The mempool headers include the boost multi index headers. Thus any application wanting to use the kernel library and its headers will have to include the boost headers too. This is not only undesirable because of the sheer size of these headers, but also might lead to conflicts if the including application uses a different boost version.\r\n\r\nIn the approach laid out by this PR, mempool member variables and methods are declared in the header without having to include boost by either wrapping them in a struct and [pimpling](https://en.cppreference.com/w/cpp/language/pimpl) them, or making methods static implementation functions. The boost definitions are gathered into separate header (`mempool_set_definitions.h`) that is only included by implementation files that require definitions of the boost types. This allows us to retain the current architecture with roughly the same interfaces. \r\n\r\nThe approach laid out by this PR also has some, albeit small, compilation speed and size benefits. Averaged over a few of compilation runs I consistently observe faster compilation by a couple of seconds and some smaller pre-processed and compiled object sizes. The main detractor of this method is obviously the number of lines touched. However it also has the benefit of inventorizing all the files that require direct access to the mempool data structures as well getting rid of boost multi index includes in non-kernel implementation files that include the mempool, but don't directly manipulate its data structures (e.g. wallet.cpp).\r\n\r\nA much simpler alternative approach, at least on the surface, would be removing all `txmempool.h` includes from kernel library headers (see [this branch](https://github.com/TheCharlatan/bitcoin/tree/mempoolBoostSimple)). Currently this is only `validation.h`.  Due to the mutex member of `CTxMemPool` and the correspondingly defined lock decorators on the chainstate methods this becomes a bit more complicated though and I am not sure how this might be possible with the current architecture.\r\n\r\nA discussion of how and if to remove the mempool from the kernel library has so far been intentionally punted to the next stage of the kernel library development. Pimpling the mempool itself precludes this discussion, since the library could never be shipped with the `CTxMemPool` headers. Pimpling the mempool members (like done in this PR) might also make a future splitting of block and mempool validation logic into separate compilation units easier.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28335",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28335",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28335.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28335.patch"
          },
          "created_at": "2023-08-24T05:46:16Z",
          "updated_at": "2023-09-11T21:35:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 10259654431,
      "node_id": "UNLE_lADOABII585v6tugzwAAAAJjhecf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10259654431",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-01T17:45:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1607651664,
      "node_id": "PRR_kwDOABII585f0tFQ",
      "url": null,
      "actor": null,
      "commit_id": "0c356aaafad6a45cd5a6c52d2a561f392751533a",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "bitcoinfinancier",
        "id": 134175231,
        "node_id": "U_kgDOB_9Z_w",
        "avatar_url": "https://avatars.githubusercontent.com/u/134175231?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinfinancier",
        "html_url": "https://github.com/bitcoinfinancier",
        "followers_url": "https://api.github.com/users/bitcoinfinancier/followers",
        "following_url": "https://api.github.com/users/bitcoinfinancier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinfinancier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinfinancier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinfinancier/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinfinancier/orgs",
        "repos_url": "https://api.github.com/users/bitcoinfinancier/repos",
        "events_url": "https://api.github.com/users/bitcoinfinancier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinfinancier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1607651664",
      "submitted_at": "2023-09-01T20:46:40Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "reviewed",
      "id": 1607967957,
      "node_id": "PRR_kwDOABII585f16TV",
      "url": null,
      "actor": null,
      "commit_id": "0c356aaafad6a45cd5a6c52d2a561f392751533a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1607967957",
      "submitted_at": "2023-09-02T07:00:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-02T09:47:53Z",
      "updated_at": "2023-09-02T09:47:53Z",
      "source": {
        "issue": {
          "id": 1878544434,
          "node_id": "PR_kwDOABII585ZZZg8",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28391",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28391/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28391/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28391/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28391",
          "number": 28391,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Simplify CTxMempool/BlockAssembler fields, remove some external mapTx access",
          "body": "Motivation\r\n* It seems preferable to use stdlib data structures instead of boost if they can achieve close to the same thing.\r\n* Code external to mempool should ideally use its public helper methods instead of accessing `mapTx` directly.\r\n* Reduce the number of complex boost multi index type interactions\r\n* Also see #28335 for further context/motivation. This PR together with #28385 simplifies that one.\r\n\r\nOverview of things done in this PR:\r\n* Make `vTxHashes` a vector of transaction references instead of a pair of transaction hash and iterator. The trade off here is that the iterator is retrieved on the fly with `get_iter_from_wtxid` instead of being cached in `vTxHashes`.\r\n* Replace `mapTx` access with `CTxMemPool` helper methods\r\n  * Please note when reviewing that `infoAll` is already in other places that grab all mempool transactions as well, such as in net_processing when responding to bip35 messages.\r\n* Simplify `checkChainLimits` call in `node/interfaces.cpp`\r\n* Make `MiniMinerMempoolEntry` ctor more explicit\r\n* Make `CTxMemPoolEntry`s `lockPoints`mutable such that they can be changed with a const iterator directly instead of going through `mapTx`\r\n* Make `BlockAssembler`'s `inBlock` and `failedTx` sets of transaction hashes.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28391",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28391",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28391.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28391.patch"
          },
          "created_at": "2023-09-02T09:47:53Z",
          "updated_at": "2023-09-11T21:25:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 10265874913,
      "node_id": "LE_lADOABII585v6tugzwAAAAJj5NHh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10265874913",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-03T11:22:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10272212810,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJkRYdK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10272212810",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-04T10:18:04Z"
    },
    {
      "event": "renamed",
      "id": 10272229456,
      "node_id": "RTE_lADOABII585v6tugzwAAAAJkRchQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10272229456",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-04T10:19:44Z",
      "rename": {
        "from": "[refactor] rewrite DisconnectedblockTransactions to not use boost, remove some external mapTx accesses",
        "to": "[refactor] rewrite DisconnectedblockTransactions to not use boost"
      }
    },
    {
      "event": "renamed",
      "id": 10272230854,
      "node_id": "RTE_lADOABII585v6tugzwAAAAJkRc3G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10272230854",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-04T10:19:53Z",
      "rename": {
        "from": "[refactor] rewrite DisconnectedblockTransactions to not use boost",
        "to": "[refactor] rewrite DisconnectedBlockTransactions to not use boost"
      }
    },
    {
      "event": "commented",
      "id": 1705008336,
      "node_id": "IC_kwDOABII585loFzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1705008336",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-04T10:23:47Z",
      "updated_at": "2023-09-04T10:23:47Z",
      "author_association": "MEMBER",
      "body": "- Dropped last 2 commits since they're now in #28391\r\n- Switched to the list + map implementation. I thought about it more over the weekend and it feels more similar to the current impl + would be more performant in the average case.\r\n- Addressed https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1313753384\r\n- Improved the bench a little, reduced some duplicate code",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1705008336",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "reviewed",
      "id": 1609499811,
      "node_id": "PRR_kwDOABII585f7wSj",
      "url": null,
      "actor": null,
      "commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1609499811",
      "submitted_at": "2023-09-04T12:56:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "reviewed",
      "id": 1609794532,
      "node_id": "PRR_kwDOABII585f84Pk",
      "url": null,
      "actor": null,
      "commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK, this approach with `std::list` seems elegant and reduces dependency on boost.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1609794532",
      "submitted_at": "2023-09-04T17:24:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "commented",
      "id": 1706343369,
      "node_id": "IC_kwDOABII585ltLvJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1706343369",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T10:18:31Z",
      "updated_at": "2023-09-05T10:18:31Z",
      "author_association": "MEMBER",
      "body": "Concept ACK - great stuff.\r\n\r\n> I think it's preferable to use stdlib data structures instead of depending on boost if we can achieve the same thing.\r\n\r\n+1",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1706343369",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10283579593,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJk8vjJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10283579593",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T13:15:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10283633819,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJk88yb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10283633819",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T13:19:35Z"
    },
    {
      "event": "reviewed",
      "id": 1611195190,
      "node_id": "PRR_kwDOABII585gCOM2",
      "url": null,
      "actor": null,
      "commit_id": "0409dbcc9d5394d310da50e0ca326fb132b6d1e2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1611195190",
      "submitted_at": "2023-09-05T14:26:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "reviewed",
      "id": 1611196988,
      "node_id": "PRR_kwDOABII585gCOo8",
      "url": null,
      "actor": null,
      "commit_id": "0409dbcc9d5394d310da50e0ca326fb132b6d1e2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1611196988",
      "submitted_at": "2023-09-05T14:29:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "reviewed",
      "id": 1611253884,
      "node_id": "PRR_kwDOABII585gCch8",
      "url": null,
      "actor": null,
      "commit_id": "0409dbcc9d5394d310da50e0ca326fb132b6d1e2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 0409dbcc9d5394d310da50e0ca326fb132b6d1e2",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1611253884",
      "submitted_at": "2023-09-05T14:52:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10284856362,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJlBnQq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10284856362",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T14:58:26Z"
    },
    {
      "event": "commented",
      "id": 1706815246,
      "node_id": "IC_kwDOABII585lu-8O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1706815246",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T15:14:06Z",
      "updated_at": "2023-09-05T15:14:06Z",
      "author_association": "MEMBER",
      "body": "@theuni you'll probably want to take a look here.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1706815246",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "mentioned",
      "id": 10285047092,
      "node_id": "MEE_lADOABII585v6tugzwAAAAJlCV00",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10285047092",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T15:14:07Z"
    },
    {
      "event": "subscribed",
      "id": 10285047112,
      "node_id": "SE_lADOABII585v6tugzwAAAAJlCV1I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10285047112",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T15:14:07Z"
    },
    {
      "event": "unlabeled",
      "id": 10286028636,
      "node_id": "UNLE_lADOABII585v6tugzwAAAAJlGFdc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10286028636",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T17:00:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1706993248,
      "node_id": "IC_kwDOABII585lvqZg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1706993248",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T17:07:00Z",
      "updated_at": "2023-09-05T17:07:00Z",
      "author_association": "MEMBER",
      "body": "approach ACK\r\n\r\niiuc we're looking at constant time access to oldest element, or any via txid, with constant time deletion/insertion for arbitrary elements. This accounts for deleting the oldest when busting allotted memory for the pool, or deleting transactions found in new blocks",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1706993248",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "reviewed",
      "id": 1611340310,
      "node_id": "PRR_kwDOABII585gCxoW",
      "url": null,
      "actor": null,
      "commit_id": "c19f4aabb608302ba7bb68b52a4e7592ccd5e34f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, though I'm concerned about the public `queuedTx` staying in sync with the private `iters_by_txid`.\r\n\r\nFor example: [here queuedTx is cleared without clearing iters_by_txid](https://github.com/bitcoin/bitcoin/blob/c19f4aabb608302ba7bb68b52a4e7592ccd5e34f/src/validation.cpp#L320). That looks like a bug to me?",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1611340310",
      "submitted_at": "2023-09-05T17:47:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "commented",
      "id": 1707054141,
      "node_id": "IC_kwDOABII585lv5Q9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1707054141",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T17:53:40Z",
      "updated_at": "2023-09-05T17:53:40Z",
      "author_association": "MEMBER",
      "body": "Really appreciate the added bench for this btw. It makes experimenting with this much easier.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1707054141",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "commented",
      "id": 1707165785,
      "node_id": "IC_kwDOABII585lwUhZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1707165785",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T19:02:19Z",
      "updated_at": "2023-09-05T19:02:19Z",
      "author_association": "MEMBER",
      "body": "> Concept ACK, though I'm concerned about the public `queuedTx` staying in sync with the private `iters_by_txid`.\r\n> \r\n> For example: [here queuedTx is cleared without clearing iters_by_txid](https://github.com/bitcoin/bitcoin/blob/c19f4aabb608302ba7bb68b52a4e7592ccd5e34f/src/validation.cpp#L320). That looks like a bug to me?\r\n\r\nQuick POC commit which adds full encapsulation here: https://github.com/theuni/bitcoin/commit/98c0b86d7cb8455e3252c264ec7133d1ebc2305a (only validation fixed up, not tests/benches).",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1707165785",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "commented",
      "id": 1708154619,
      "node_id": "IC_kwDOABII585l0F77",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1708154619",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T11:22:16Z",
      "updated_at": "2023-09-06T11:22:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Quick POC commit which adds full encapsulation here: [theuni@98c0b86](https://github.com/theuni/bitcoin/commit/98c0b86d7cb8455e3252c264ec7133d1ebc2305a) (only validation fixed up, not tests/benches).\r\n\r\nOh yes, strong approach ACK for this (left a few comments on the branch), nice!",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1708154619",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "referenced",
      "id": 10295725165,
      "node_id": "REFE_lADOABII585v6tugzwAAAAJlrExt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10295725165",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "98c0b86d7cb8455e3252c264ec7133d1ebc2305a",
      "commit_url": "https://api.github.com/repos/theuni/bitcoin/commits/98c0b86d7cb8455e3252c264ec7133d1ebc2305a",
      "created_at": "2023-09-06T13:05:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10296109477,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJlsiml",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10296109477",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T13:37:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10296303181,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJltR5N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10296303181",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T13:52:59Z"
    },
    {
      "event": "labeled",
      "id": 10296304384,
      "node_id": "LE_lADOABII585v6tugzwAAAAJltSMA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10296304384",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T13:53:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10296487894,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJlt-_W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10296487894",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T14:07:52Z"
    },
    {
      "event": "commented",
      "id": 1708502411,
      "node_id": "IC_kwDOABII585l1a2L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1708502411",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T14:38:52Z",
      "updated_at": "2023-09-06T14:38:52Z",
      "author_association": "MEMBER",
      "body": "> > Quick POC commit which adds full encapsulation here: [theuni@98c0b86](https://github.com/theuni/bitcoin/commit/98c0b86d7cb8455e3252c264ec7133d1ebc2305a) (only validation fixed up, not tests/benches).\r\n> \r\n> Oh yes, strong approach ACK for this (left a few comments on the branch), nice!\r\n\r\nAfter looking at that some more, I realized that the memory management was also not encapsulated. I took a quick run at a _completely_ encapsulated `DisconnectedBlockTransactions` [on that branch](https://github.com/theuni/bitcoin/commits/28385). One nice advantage there is that the max memory size is no longer hard-coded, so it should be possible to test/bench/fuzz much more effectively. (I switched to using CBlock for tx batches which was probably a mistake though, so just ignore that :).\r\n\r\n@glozow I know you wanted to keep the size of this diff down, so I suspect you won't want to take a cleaned up version of that here. But IMO we should do something like it soon after this.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1708502411",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "mentioned",
      "id": 10296886814,
      "node_id": "MEE_lADOABII585v6tugzwAAAAJlvgYe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10296886814",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T14:38:52Z"
    },
    {
      "event": "subscribed",
      "id": 10296886831,
      "node_id": "SE_lADOABII585v6tugzwAAAAJlvgYv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10296886831",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T14:38:52Z"
    },
    {
      "event": "commented",
      "id": 1708524648,
      "node_id": "IC_kwDOABII585l1gRo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1708524648",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T14:51:14Z",
      "updated_at": "2023-09-06T14:51:14Z",
      "author_association": "MEMBER",
      "body": "> For example: [here queuedTx is cleared without clearing iters_by_txid](https://github.com/bitcoin/bitcoin/blob/c19f4aabb608302ba7bb68b52a4e7592ccd5e34f/src/validation.cpp#L320). That looks like a bug to me?\r\n\r\n> Quick POC commit which adds full encapsulation here: https://github.com/theuni/bitcoin/commit/98c0b86d7cb8455e3252c264ec7133d1ebc2305a (only validation fixed up, not tests/benches).\r\n\r\nDefinitely prefer this, thanks! It looks like we've been using the wrong `clear()` for a while :scream: https://github.com/bitcoin/bitcoin/pull/9208/files#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R578\r\n\r\n> After looking at that some more, I realized that the memory management was also not encapsulated. I took a quick run at a completely encapsulated DisconnectedBlockTransactions [on that branch](https://github.com/theuni/bitcoin/commits/28385). One nice advantage there is that the max memory size is no longer hard-coded, so it should be possible to test/bench/fuzz much more effectively.\r\n\r\n> @glozow I know you wanted to keep the size of this diff down, so I suspect you won't want to take a cleaned up version of that here.\r\n\r\nI mean, this is pretty easy to add and I like it. I really don't mind if people are willing to review :P I only tried to keep this small as I wasn't sure if people would be interested in it.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1708524648",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "mentioned",
      "id": 10297059702,
      "node_id": "MEE_lADOABII585v6tugzwAAAAJlwKl2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10297059702",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T14:51:15Z"
    },
    {
      "event": "subscribed",
      "id": 10297059719,
      "node_id": "SE_lADOABII585v6tugzwAAAAJlwKmH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10297059719",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T14:51:15Z"
    },
    {
      "event": "commented",
      "id": 1708530094,
      "node_id": "IC_kwDOABII585l1hmu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1708530094",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T14:54:01Z",
      "updated_at": "2023-09-06T14:54:01Z",
      "author_association": "MEMBER",
      "body": "> I mean, this is pretty easy to add and I like it. I really don't mind if people are willing to review :P I only tried to keep this small as I wasn't sure if people would be interested in it.\r\n\r\nIn that case, feel free to clean it up as you see fit and take it :)\r\n\r\nDon't worry about trying to keep the commits, I was just poking around.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#issuecomment-1708530094",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28385"
    },
    {
      "event": "unlabeled",
      "id": 10297747576,
      "node_id": "UNLE_lADOABII585v6tugzwAAAAJlyyh4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10297747576",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T15:46:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1613811028,
      "node_id": "PRR_kwDOABII585gMM1U",
      "url": null,
      "actor": null,
      "commit_id": "a1f378adbe00f82ccb76a108d49d38721698089f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good to me. My benchmarks show we're a little slower in the 10% case, and a little faster in the others.\r\n\r\nMy only hesitation is that as @stickies-v points out, this is likely to change mempool behavior somewhat because of the space difference. It seems like it could only be better, but the memusage trigger behavior has not tested as far as I can see. It'd be nice to have (read: bonus) some dead-simple tests for `DisconnectedBlockTransactions::DynamicMemoryUsage()`against hard-coded sizes before/after the boost swap, just as a sanity check that we're calculating what we think we are.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1613811028",
      "submitted_at": "2023-09-06T17:42:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "reviewed",
      "id": 1613974575,
      "node_id": "PRR_kwDOABII585gM0wv",
      "url": null,
      "actor": null,
      "commit_id": "a1f378adbe00f82ccb76a108d49d38721698089f",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "bitcoinfinancier",
        "id": 134175231,
        "node_id": "U_kgDOB_9Z_w",
        "avatar_url": "https://avatars.githubusercontent.com/u/134175231?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinfinancier",
        "html_url": "https://github.com/bitcoinfinancier",
        "followers_url": "https://api.github.com/users/bitcoinfinancier/followers",
        "following_url": "https://api.github.com/users/bitcoinfinancier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinfinancier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinfinancier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinfinancier/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinfinancier/orgs",
        "repos_url": "https://api.github.com/users/bitcoinfinancier/repos",
        "events_url": "https://api.github.com/users/bitcoinfinancier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinfinancier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1613974575",
      "submitted_at": "2023-09-06T18:31:31Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10305906153,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJmR6Xp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10305906153",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-07T10:55:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10305975478,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJmSLS2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10305975478",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-07T11:02:38Z"
    },
    {
      "event": "labeled",
      "id": 10305976361,
      "node_id": "LE_lADOABII585v6tugzwAAAAJmSLgp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10305976361",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-07T11:02:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1615230239,
      "node_id": "PRR_kwDOABII585gRnUf",
      "url": null,
      "actor": null,
      "commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> It seems like it could only be better, but the memusage trigger behavior has not tested as far as I can see. It'd be nice to have (read: bonus) some dead-simple tests for DisconnectedBlockTransactions::DynamicMemoryUsage()against hard-coded sizes before/after the boost swap, just as a sanity check that we're calculating what we think we are.\r\n\r\nAdded some basic unit tests after the unboosting changes.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1615230239",
      "submitted_at": "2023-09-07T11:37:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "reviewed",
      "id": 1611163652,
      "node_id": "PRR_kwDOABII585gCGgE",
      "url": null,
      "actor": null,
      "commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach re-ACK. Big fan of this new interface.\r\n\r\nHaven't looked at the tests and memusage stuff properly yet but everything else LGTM. Will do full review once CI is green.\r\n\r\nWorth adding a `kernel/disconnected_transactions.cpp`? We've got a lot of implementations in the header now.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1611163652",
      "submitted_at": "2023-09-07T13:45:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkyNWJiNzIzY2E3MWFhNzYzODBiNzY5ZDg5MjZjN2MyYWQ5YmJiN2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/925bb723ca71aa76380b769d8926c7c2ad9bbb7b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/925bb723ca71aa76380b769d8926c7c2ad9bbb7b",
      "tree": {
        "sha": "d440f284dbf57a30b226de638a6f7c1dac6bb237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d440f284dbf57a30b226de638a6f7c1dac6bb237"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5666966dffeb620b4a628679d667346e02fd3b19",
          "sha": "5666966dffeb620b4a628679d667346e02fd3b19",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5666966dffeb620b4a628679d667346e02fd3b19"
        }
      ],
      "message": "[refactor] batch-add transactions to DisconnectedBlockTransactions\n\nNo behavior change.\nIn a future commit, we can optimize by reserving vtx.size().",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-07T17:55:44Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-06T10:24:42Z"
      },
      "sha": "925bb723ca71aa76380b769d8926c7c2ad9bbb7b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI4NDZlYjhjYzYyMTA4NDI4NjI3NjgwODZhYzFhN2ZkZmQ2MWJhMWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b846eb8cc6210842862768086ac1a7fdfd61ba1d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b846eb8cc6210842862768086ac1a7fdfd61ba1d",
      "tree": {
        "sha": "7ee1e96aec266c75e7c328c696ec8f8934ded23f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ee1e96aec266c75e7c328c696ec8f8934ded23f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/925bb723ca71aa76380b769d8926c7c2ad9bbb7b",
          "sha": "925bb723ca71aa76380b769d8926c7c2ad9bbb7b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/925bb723ca71aa76380b769d8926c7c2ad9bbb7b"
        }
      ],
      "message": "[bench] DisconnectedBlockTransactions",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-07T17:55:45Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-01T10:58:23Z"
      },
      "sha": "b846eb8cc6210842862768086ac1a7fdfd61ba1d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRkYTgzMmRmZWU5ODhlNGMwYWVmNTEzN2Y5NjAxZDkxOTg5NWI2YmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dda832dfee988e4c0aef5137f9601d919895b6bd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dda832dfee988e4c0aef5137f9601d919895b6bd",
      "tree": {
        "sha": "1d005a76841fd3f865f7560916862a66aa08cfad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d005a76841fd3f865f7560916862a66aa08cfad"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b846eb8cc6210842862768086ac1a7fdfd61ba1d",
          "sha": "b846eb8cc6210842862768086ac1a7fdfd61ba1d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b846eb8cc6210842862768086ac1a7fdfd61ba1d"
        }
      ],
      "message": "add std::list to memusage",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-07T17:55:45Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-06T09:49:31Z"
      },
      "sha": "dda832dfee988e4c0aef5137f9601d919895b6bd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE5ZTY4MjE5NGFmM2IyZTg4OGM5Y2E3NGNlMWQxZTM2NWVhNzdlYjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9e682194af3b2e888c9ca74ce1d1e365ea77eb7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a9e682194af3b2e888c9ca74ce1d1e365ea77eb7",
      "tree": {
        "sha": "61b1d2665e757c372e2e0d267a82e98109ddb3aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61b1d2665e757c372e2e0d267a82e98109ddb3aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dda832dfee988e4c0aef5137f9601d919895b6bd",
          "sha": "dda832dfee988e4c0aef5137f9601d919895b6bd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dda832dfee988e4c0aef5137f9601d919895b6bd"
        }
      ],
      "message": "rewrite DisconnectedBlockTransactions as a list + map\n\nAnd encapsulate underlying data structures to avoid misuse.\nIt's better to use stdlib instead of boost when we can achieve the same thing.\n\nCo-authored-by: Cory Fields <cory-nospam-@coryfields.com>",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-07T17:56:54Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-25T15:26:22Z"
      },
      "sha": "a9e682194af3b2e888c9ca74ce1d1e365ea77eb7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUzYjYyM2QxYjIzNjIxZGJjMjhlNmQzYjFkMTQyODQ0YzY1MWY5YmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3b623d1b23621dbc28e6d3b1d142844c651f9bc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b623d1b23621dbc28e6d3b1d142844c651f9bc",
      "tree": {
        "sha": "714f24003834ee7b870dac9f555693e6c6ea31aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/714f24003834ee7b870dac9f555693e6c6ea31aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9e682194af3b2e888c9ca74ce1d1e365ea77eb7",
          "sha": "a9e682194af3b2e888c9ca74ce1d1e365ea77eb7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a9e682194af3b2e888c9ca74ce1d1e365ea77eb7"
        }
      ],
      "message": "MOVEONLY: DisconnectedBlockTransactions to its own file\n\nThis struct is only used in validation + tests and has very little to do\nwith txmempool.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-07T17:56:55Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-05T12:45:09Z"
      },
      "sha": "e3b623d1b23621dbc28e6d3b1d142844c651f9bc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkzNTZmNjRiMTkwN2U3YWZlZGUzNzFkN2M3ZjM0NjU1MjZlNTdhNjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9356f64b1907e7afede371d7c7f3465526e57a65",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9356f64b1907e7afede371d7c7f3465526e57a65",
      "tree": {
        "sha": "0ff1f2a730e4dc3cac19273d10fa8c5b23680dd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ff1f2a730e4dc3cac19273d10fa8c5b23680dd2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3b623d1b23621dbc28e6d3b1d142844c651f9bc",
          "sha": "e3b623d1b23621dbc28e6d3b1d142844c651f9bc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b623d1b23621dbc28e6d3b1d142844c651f9bc"
        }
      ],
      "message": "make DisconnectedBlockTransactions responsible for its own memory management\n\nCo-authored-by: Cory Fields <cory-nospam-@coryfields.com>",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-07T17:59:27Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-06T15:25:15Z"
      },
      "sha": "9356f64b1907e7afede371d7c7f3465526e57a65"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10310323379,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJmiwyz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10310323379",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-07T17:59:42Z"
    },
    {
      "event": "reviewed",
      "id": 1616001879,
      "node_id": "PRR_kwDOABII585gUjtX",
      "url": null,
      "actor": null,
      "commit_id": "a9e682194af3b2e888c9ca74ce1d1e365ea77eb7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1616001879",
      "submitted_at": "2023-09-07T18:14:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "reviewed",
      "id": 1618648240,
      "node_id": "PRR_kwDOABII585gepyw",
      "url": null,
      "actor": null,
      "commit_id": "a9e682194af3b2e888c9ca74ce1d1e365ea77eb7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1618648240",
      "submitted_at": "2023-09-09T14:21:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlkY2VmNDdlNGQ1MmIxNWZmZTg4YmU3ZGRmNWVhNjI2MTIxZTVmMGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "tree": {
        "sha": "2d5fe3b609b76e78871370878657c6ce77fa553b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d5fe3b609b76e78871370878657c6ce77fa553b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9356f64b1907e7afede371d7c7f3465526e57a65",
          "sha": "9356f64b1907e7afede371d7c7f3465526e57a65",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9356f64b1907e7afede371d7c7f3465526e57a65"
        }
      ],
      "message": "[test] DisconnectedBlockTransactions::DynamicMemoryUsage",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-11T08:56:24Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-07T07:40:34Z"
      },
      "sha": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10331233089,
      "node_id": "HRFPE_lADOABII585v6tugzwAAAAJnyhtB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10331233089",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-11T08:58:34Z"
    },
    {
      "event": "unlabeled",
      "id": 10332454817,
      "node_id": "UNLE_lADOABII585v6tugzwAAAAJn3L-h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10332454817",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-11T10:45:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1622008442,
      "node_id": "PRR_kwDOABII585greJ6",
      "url": null,
      "actor": null,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Review on 9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d. Mostly focused on the memory usage stuff in this review round, because I found it interesting and some things stood out to me. I know it's not core to this PR and that it's not critical for the calculations to be 100% accurate, so I'm okay dealing with this in a follow-up too if this is slowing down progress - I haven't seen any showstoppers.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1622008442",
      "submitted_at": "2023-09-12T12:36:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    },
    {
      "event": "reviewed",
      "id": 1622272669,
      "node_id": "PRR_kwDOABII585gseqd",
      "url": null,
      "actor": null,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Finished review at 9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d.\r\n\r\nI'll review the unit test again after the other underlying comments are addressed because I think it needs some changing, but other than that and outstanding comments I think I won't have too many more comments coming up.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#pullrequestreview-1622272669",
      "submitted_at": "2023-09-12T15:51:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1313753384",
      "pull_request_review_id": 1607967957,
      "id": 1313753384,
      "node_id": "PRRC_kwDOABII585OTkko",
      "diff_hunk": "@@ -301,8 +301,8 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     // Iterate disconnectpool in reverse, so that we add transactions",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 1,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "0c356aaafad6a45cd5a6c52d2a561f392751533a",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The comment here about `insertion_order` needs updating.",
      "created_at": "2023-09-02T07:00:09Z",
      "updated_at": "2023-09-02T07:00:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1313753384",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1313753384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314742050",
      "pull_request_review_id": 1609235600,
      "id": 1314742050,
      "node_id": "PRRC_kwDOABII585OXV8i",
      "diff_hunk": "@@ -301,8 +301,8 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     // Iterate disconnectpool in reverse, so that we add transactions",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 1,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "0c356aaafad6a45cd5a6c52d2a561f392751533a",
      "in_reply_to_id": 1313753384,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks",
      "created_at": "2023-09-04T10:23:53Z",
      "updated_at": "2023-09-04T10:23:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1314742050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314742050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314917018",
      "pull_request_review_id": 1609499811,
      "id": 1314917018,
      "node_id": "PRRC_kwDOABII585OYAqa",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {",
      "path": "src/validation.h",
      "position": null,
      "original_position": 18,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is only used in `validation.cpp`, and one unit test, so I wonder if it makes sense to move it to a separate header? ",
      "created_at": "2023-09-04T12:56:15Z",
      "updated_at": "2023-09-04T12:56:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1314917018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314917018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314920227",
      "pull_request_review_id": 1609504968,
      "id": 1314920227,
      "node_id": "PRRC_kwDOABII585OYBcj",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {",
      "path": "src/validation.h",
      "position": null,
      "original_position": 18,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1314917018,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "makes sense to me. kernel/disconnected_transactions.h?",
      "created_at": "2023-09-04T12:59:17Z",
      "updated_at": "2023-09-04T12:59:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1314920227",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314920227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315098713",
      "pull_request_review_id": 1609794532,
      "id": 1315098713,
      "node_id": "PRRC_kwDOABII585OYtBZ",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 51,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would suggest reserving to avoid rehashing the set\r\n```suggestion\r\n        std::unordered_set<uint256, SaltedTxidHasher> txids;\r\n        txids.reserve(vtx.size());\r\n```",
      "created_at": "2023-09-04T16:16:48Z",
      "updated_at": "2023-09-04T17:24:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315098713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315098713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315106643",
      "pull_request_review_id": 1609794532,
      "id": 1315106643,
      "node_id": "PRRC_kwDOABII585OYu9T",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;\n+        std::transform(vtx.cbegin(), vtx.cend(), std::inserter(txids, txids.end()), [](const auto& tx) { return tx->GetHash(); });\n+        // Iterate through entire list once, removing any transactions in the block.\n+        auto it = queuedTx.begin();\n+        while (it != queuedTx.end()) {\n+            auto it_next = std::next(it);\n+            if (txids.count((*it)->GetHash()) > 0) {\n+                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n+                queuedTx.erase(it);\n+            }\n+            it = it_next;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 61,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could avoid creating `it_next`\r\n```suggestion\r\n            if (txids.count((*it)->GetHash()) > 0) {\r\n                cachedInnerUsage -= RecursiveDynamicUsage(*it);\r\n                it = queuedTx.erase(it);\r\n            } else {\r\n                ++it;\r\n            }\r\n```",
      "created_at": "2023-09-04T16:27:33Z",
      "updated_at": "2023-09-04T17:24:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315106643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315106643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 288,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315116227",
      "pull_request_review_id": 1609794532,
      "id": 1315116227,
      "node_id": "PRRC_kwDOABII585OYxTD",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;\n+        std::transform(vtx.cbegin(), vtx.cend(), std::inserter(txids, txids.end()), [](const auto& tx) { return tx->GetHash(); });\n+        // Iterate through entire list once, removing any transactions in the block.\n+        auto it = queuedTx.begin();\n+        while (it != queuedTx.end()) {\n+            auto it_next = std::next(it);\n+            if (txids.count((*it)->GetHash()) > 0) {\n+                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n+                queuedTx.erase(it);\n+            }\n+            it = it_next;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 61,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315106643,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Or actually, could use `std::list::remove_if`. Quickly conveys the intent of the code imo, and looks like it speeds up the bench a tiny bit, going from \r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        7,204,642.33 |              138.80 |    0.2% |      0.87 | `AddAndRemoveDisconnectedBlockTransactions10`\r\n|        5,293,310.64 |              188.92 |    0.4% |      0.64 | `AddAndRemoveDisconnectedBlockTransactions100`\r\n|        6,931,825.73 |              144.26 |    0.9% |      0.84 | `AddAndRemoveDisconnectedBlockTransactions90`\r\n\r\nto\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        6,971,191.70 |              143.45 |    0.8% |      0.84 | `AddAndRemoveDisconnectedBlockTransactions10`\r\n|        4,991,280.27 |              200.35 |    0.7% |      0.60 | `AddAndRemoveDisconnectedBlockTransactions100`\r\n|        6,632,837.50 |              150.77 |    0.6% |      0.80 | `AddAndRemoveDisconnectedBlockTransactions90`\r\n\r\n<details>\r\n<summary>git diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/validation.h b/src/validation.h\r\nindex 3e1a024d09..c81331f950 100644\r\n--- a/src/validation.h\r\n+++ b/src/validation.h\r\n@@ -283,15 +283,13 @@ struct DisconnectedBlockTransactions {\r\n         std::unordered_set<uint256, SaltedTxidHasher> txids;\r\n         std::transform(vtx.cbegin(), vtx.cend(), std::inserter(txids, txids.end()), [](const auto& tx) { return tx->GetHash(); });\r\n         // Iterate through entire list once, removing any transactions in the block.\r\n-        auto it = queuedTx.begin();\r\n-        while (it != queuedTx.end()) {\r\n-            auto it_next = std::next(it);\r\n-            if (txids.count((*it)->GetHash()) > 0) {\r\n-                cachedInnerUsage -= RecursiveDynamicUsage(*it);\r\n-                queuedTx.erase(it);\r\n+        queuedTx.remove_if([&](const CTransactionRef& tx) {\r\n+            if (txids.count(tx->GetHash()) > 0) {\r\n+                cachedInnerUsage -= RecursiveDynamicUsage(tx);\r\n+                return true;\r\n             }\r\n-            it = it_next;\r\n-        }\r\n+            return false;\r\n+        });\r\n     }\r\n \r\n     // Remove the earliest-inserted transaction.\r\n\r\n```\r\n</details>",
      "created_at": "2023-09-04T16:46:39Z",
      "updated_at": "2023-09-04T17:24:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315116227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315116227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 288,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315120053",
      "pull_request_review_id": 1609794532,
      "id": 1315120053,
      "node_id": "PRRC_kwDOABII585OYyO1",
      "diff_hunk": "@@ -2726,9 +2726,9 @@ bool Chainstate::DisconnectTip(BlockValidationState& state, DisconnectedBlockTra\n         }\n         while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since the dynamic memory usage of `queuedTx` now changed, I think this is behaviour change as we'll be dropping entries less frequently?",
      "created_at": "2023-09-04T16:54:45Z",
      "updated_at": "2023-09-04T17:24:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315120053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315120053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2726,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315121992",
      "pull_request_review_id": 1609794532,
      "id": 1315121992,
      "node_id": "PRRC_kwDOABII585OYytI",
      "diff_hunk": "@@ -2726,9 +2726,9 @@ bool Chainstate::DisconnectTip(BlockValidationState& state, DisconnectedBlockTra\n         }\n         while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n             // Drop the earliest entry, and remove its children from the mempool.\n-            auto it = disconnectpool->queuedTx.get<insertion_order>().begin();\n-            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n-            disconnectpool->removeEntry(it);\n+            auto ptx = disconnectpool->queuedTx.front();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps worth adding an `assert(!disconnectpool->queuedTx.empty())` here? I know we already assume that's the case because `disconnectpool` is non-nullptr and because of the dynamic memory usage check, but i think adding an assertion may make this more robust, since for an empty vector we have UB here and two lines down.",
      "created_at": "2023-09-04T16:59:13Z",
      "updated_at": "2023-09-04T17:24:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315121992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315121992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2730,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315126680",
      "pull_request_review_id": 1609794532,
      "id": 1315126680,
      "node_id": "PRRC_kwDOABII585OYz2Y",
      "diff_hunk": "@@ -301,8 +301,8 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     // Iterate disconnectpool in reverse, so that we add transactions\n     // back to the mempool starting with the earliest transaction that had\n     // been previously seen in a block.\n-    auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n-    while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n+    auto it = disconnectpool.queuedTx.rbegin();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[this comment](https://github.com/bitcoin/bitcoin/pull/28385/files#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98L298) still needs updating",
      "created_at": "2023-09-04T17:10:35Z",
      "updated_at": "2023-09-04T17:24:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315126680",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315126680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315700650",
      "pull_request_review_id": 1610734123,
      "id": 1315700650,
      "node_id": "PRRC_kwDOABII585Oa_-q",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;\n+        std::transform(vtx.cbegin(), vtx.cend(), std::inserter(txids, txids.end()), [](const auto& tx) { return tx->GetHash(); });\n+        // Iterate through entire list once, removing any transactions in the block.\n+        auto it = queuedTx.begin();\n+        while (it != queuedTx.end()) {\n+            auto it_next = std::next(it);\n+            if (txids.count((*it)->GetHash()) > 0) {\n+                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n+                queuedTx.erase(it);\n+            }\n+            it = it_next;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 61,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315106643,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`remove_if` doesn't change the size of the container, so your patch is incomplete, no?",
      "created_at": "2023-09-05T10:27:25Z",
      "updated_at": "2023-09-05T10:27:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315700650",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315700650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 288,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315715972",
      "pull_request_review_id": 1610758430,
      "id": 1315715972,
      "node_id": "PRRC_kwDOABII585ObDuE",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;\n+        std::transform(vtx.cbegin(), vtx.cend(), std::inserter(txids, txids.end()), [](const auto& tx) { return tx->GetHash(); });\n+        // Iterate through entire list once, removing any transactions in the block.\n+        auto it = queuedTx.begin();\n+        while (it != queuedTx.end()) {\n+            auto it_next = std::next(it);\n+            if (txids.count((*it)->GetHash()) > 0) {\n+                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n+                queuedTx.erase(it);\n+            }\n+            it = it_next;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 61,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315106643,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`queuedTx` is not a vector but a list, so I think just removing it from the list is sufficient?",
      "created_at": "2023-09-05T10:42:47Z",
      "updated_at": "2023-09-05T10:42:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315715972",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315715972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 288,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315721974",
      "pull_request_review_id": 1610768061,
      "id": 1315721974,
      "node_id": "PRRC_kwDOABII585ObFL2",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;\n+        std::transform(vtx.cbegin(), vtx.cend(), std::inserter(txids, txids.end()), [](const auto& tx) { return tx->GetHash(); });\n+        // Iterate through entire list once, removing any transactions in the block.\n+        auto it = queuedTx.begin();\n+        while (it != queuedTx.end()) {\n+            auto it_next = std::next(it);\n+            if (txids.count((*it)->GetHash()) > 0) {\n+                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n+                queuedTx.erase(it);\n+            }\n+            it = it_next;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 61,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315106643,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why would the container make a difference? If I print `std::list::size()`, it remains unchanged.\r\n\r\n\r\n```cpp\r\n#include <algorithm>\r\n#include <iostream>\r\n#include <list>\r\n  \r\nint main()\r\n{\r\n    std::list<char> str1 {'T', ' ', 't'};\r\n\r\n \r\n    auto noSpaceEnd = std::remove(str1.begin(), str1.end(), ' ');\r\n \r\n         std::cout  << \" size: \" << str1.size() << '\\n';\r\n\r\n    str1.erase(noSpaceEnd, str1.end());\r\n \r\n     std::cout  << \" size: \" << str1.size() << '\\n';\r\n \r\n  \r\n}\r\n```\r\n\r\n```\r\n size: 3\r\n\r\n size: 2",
      "created_at": "2023-09-05T10:49:01Z",
      "updated_at": "2023-09-05T10:49:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315721974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315721974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 288,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315735924",
      "pull_request_review_id": 1610789611,
      "id": 1315735924,
      "node_id": "PRRC_kwDOABII585ObIl0",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;\n+        std::transform(vtx.cbegin(), vtx.cend(), std::inserter(txids, txids.end()), [](const auto& tx) { return tx->GetHash(); });\n+        // Iterate through entire list once, removing any transactions in the block.\n+        auto it = queuedTx.begin();\n+        while (it != queuedTx.end()) {\n+            auto it_next = std::next(it);\n+            if (txids.count((*it)->GetHash()) > 0) {\n+                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n+                queuedTx.erase(it);\n+            }\n+            it = it_next;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 61,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315106643,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, sorry, you are using `std::list::remove_if`, not `std::remove_if`.",
      "created_at": "2023-09-05T11:02:16Z",
      "updated_at": "2023-09-05T11:02:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315735924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315735924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 288,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315745332",
      "pull_request_review_id": 1610805064,
      "id": 1315745332,
      "node_id": "PRRC_kwDOABII585ObK40",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;\n+        std::transform(vtx.cbegin(), vtx.cend(), std::inserter(txids, txids.end()), [](const auto& tx) { return tx->GetHash(); });\n+        // Iterate through entire list once, removing any transactions in the block.\n+        auto it = queuedTx.begin();\n+        while (it != queuedTx.end()) {\n+            auto it_next = std::next(it);\n+            if (txids.count((*it)->GetHash()) > 0) {\n+                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n+                queuedTx.erase(it);\n+            }\n+            it = it_next;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 61,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315106643,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I didn't realize they behaved differently but with `std::list::remove_if` the items are indeed removed from the container, as opposed to just shifted:\r\n\r\n```\r\n#include <algorithm>\r\n#include <iostream>\r\n#include <list>\r\n  \r\nint main()\r\n{\r\n    std::list<char> str1 {'T', ' ', 't'};\r\n\r\n    str1.remove(' ');\r\n         std::cout  << \" size: \" << str1.size() << '\\n';\r\n  \r\n}\r\n```\r\n \r\n```\r\nsize: 2\r\n```",
      "created_at": "2023-09-05T11:12:17Z",
      "updated_at": "2023-09-05T11:12:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315745332",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315745332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 288,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315818643",
      "pull_request_review_id": 1610928529,
      "id": 1315818643,
      "node_id": "PRRC_kwDOABII585ObcyT",
      "diff_hunk": "@@ -2726,9 +2726,9 @@ bool Chainstate::DisconnectTip(BlockValidationState& state, DisconnectedBlockTra\n         }\n         while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315120053,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps (I think it's negligible compared to the transactions themselves), and would probably be an improvement.",
      "created_at": "2023-09-05T12:23:10Z",
      "updated_at": "2023-09-05T12:23:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315818643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315818643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2726,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315830894",
      "pull_request_review_id": 1610948591,
      "id": 1315830894,
      "node_id": "PRRC_kwDOABII585Obfxu",
      "diff_hunk": "@@ -301,8 +301,8 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     // Iterate disconnectpool in reverse, so that we add transactions\n     // back to the mempool starting with the earliest transaction that had\n     // been previously seen in a block.\n-    auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n-    while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n+    auto it = disconnectpool.queuedTx.rbegin();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315126680,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wow, I just realized I was pushing changes to the wrong branch 🤦 \r\nI have changed this now",
      "created_at": "2023-09-05T12:33:46Z",
      "updated_at": "2023-09-05T13:15:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315830894",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315830894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315877339",
      "pull_request_review_id": 1610948591,
      "id": 1315877339,
      "node_id": "PRRC_kwDOABII585ObrHb",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 51,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315098713,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line went away with the list + map approach so marking as resolved",
      "created_at": "2023-09-05T13:11:10Z",
      "updated_at": "2023-09-05T13:15:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315877339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315877339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315877657",
      "pull_request_review_id": 1610948591,
      "id": 1315877657,
      "node_id": "PRRC_kwDOABII585ObrMZ",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n+\n+    size_t DynamicMemoryUsage() const {\n+        // std::list uses 3 pointers per entry.\n+        return memusage::MallocUsage(sizeof(CTransactionRef) + 3 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+    }\n+\n+    void addTransaction(const CTransactionRef& tx)\n+    {\n+        queuedTx.push_back(tx);\n+        cachedInnerUsage += RecursiveDynamicUsage(tx);\n+    }\n+\n+    // Remove entries by txid, and update memory usage.\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        // Create a set of all block txids.\n+        std::unordered_set<uint256, SaltedTxidHasher> txids;\n+        std::transform(vtx.cbegin(), vtx.cend(), std::inserter(txids, txids.end()), [](const auto& tx) { return tx->GetHash(); });\n+        // Iterate through entire list once, removing any transactions in the block.\n+        auto it = queuedTx.begin();\n+        while (it != queuedTx.end()) {\n+            auto it_next = std::next(it);\n+            if (txids.count((*it)->GetHash()) > 0) {\n+                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n+                queuedTx.erase(it);\n+            }\n+            it = it_next;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 61,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315106643,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line went away with the list + map approach so marking as resolved\r\n",
      "created_at": "2023-09-05T13:11:27Z",
      "updated_at": "2023-09-05T13:15:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315877657",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315877657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 288,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315880225",
      "pull_request_review_id": 1610948591,
      "id": 1315880225,
      "node_id": "PRRC_kwDOABII585Obr0h",
      "diff_hunk": "@@ -233,6 +233,81 @@ struct PackageMempoolAcceptResult\n         : m_tx_results{ {wtxid, result} } {}\n };\n \n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {",
      "path": "src/validation.h",
      "position": null,
      "original_position": 18,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1314917018,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-09-05T13:13:26Z",
      "updated_at": "2023-09-05T13:15:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315880225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315880225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315880709",
      "pull_request_review_id": 1610948591,
      "id": 1315880709,
      "node_id": "PRRC_kwDOABII585Obr8F",
      "diff_hunk": "@@ -2726,9 +2726,9 @@ bool Chainstate::DisconnectTip(BlockValidationState& state, DisconnectedBlockTra\n         }\n         while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n             // Drop the earliest entry, and remove its children from the mempool.\n-            auto it = disconnectpool->queuedTx.get<insertion_order>().begin();\n-            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n-            disconnectpool->removeEntry(it);\n+            auto ptx = disconnectpool->queuedTx.front();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "17c2f91fcadceb698067d5edc9204e4e5b17aa8b",
      "in_reply_to_id": 1315121992,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added in the while loop condition, feels a bit more robust than crashing",
      "created_at": "2023-09-05T13:13:48Z",
      "updated_at": "2023-09-05T13:15:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315880709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315880709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2730,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315982561",
      "pull_request_review_id": 1611195190,
      "id": 1315982561,
      "node_id": "PRRC_kwDOABII585OcEzh",
      "diff_hunk": "@@ -18,6 +18,7 @@\n #include <kernel/chainparams.h>\n #include <kernel/chainstatemanager_opts.h>\n #include <kernel/cs_main.h> // IWYU pragma: export\n+#include <kernel/disconnected_transactions.h>",
      "path": "src/validation.h",
      "position": null,
      "original_position": 4,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "0409dbcc9d5394d310da50e0ca326fb132b6d1e2",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this should be included in `validation.cpp` instead.",
      "created_at": "2023-09-05T14:26:38Z",
      "updated_at": "2023-09-05T14:26:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315982561",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315982561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315983675",
      "pull_request_review_id": 1611196988,
      "id": 1315983675,
      "node_id": "PRRC_kwDOABII585OcFE7",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+constexpr size_t BLOCK_VTX_COUNT{4000};\n+constexpr size_t BLOCK_VTX_COUNT_10PERCENT{400};\n+\n+using BlockTxns = decltype(CBlock::vtx);\n+\n+/** Reorg where 1 block is disconnected and 2 blocks are connected. */\n+struct ReorgTxns {\n+    /** Disconnected block. */\n+    BlockTxns disconnected_txns;\n+    /** First connected block. */\n+    BlockTxns connected_txns_1;\n+    /** Second connected block, new chain tip. Has no overlap with disconnected_txns. */\n+    BlockTxns connected_txns_2;\n+    /** Transactions shared between disconnected_txns and connected_txns_1. */\n+    size_t num_shared;\n+};\n+\n+static BlockTxns CreateRandomTransactions(size_t num_txns, uint32_t unique_set_num)\n+{\n+    FastRandomContext det_rand{true};\n+    // The unique_set_num trick won't work otherwise. It assumes that there's a different\n+    // unique_set_num each time we call CreateRandomTransactions and each batch is <= 4000.\n+    assert(num_txns <= BLOCK_VTX_COUNT);\n+\n+    BlockTxns txns;\n+    txns.reserve(num_txns);\n+    // Simplest spk for every tx\n+    CScript spk = CScript() << OP_TRUE;\n+    for (uint32_t i = 0; i < num_txns; ++i) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        // We should get a different prevout hash every time. But just to be sure, change the index\n+        // as well to ensure every tx has a different txid.\n+        tx.vin.emplace_back(CTxIn{COutPoint{det_rand.rand256(), uint32_t(i + BLOCK_VTX_COUNT * unique_set_num)}});",
      "path": "src/bench/disconnected_transactions.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "5a1233c098cb093e50ee31a77bb12aa53de545cf",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 5a1233c0:\r\n\r\nSmall idea: what about having an always increasing `lock_time` number?. It will ensure different tx ids and let you remove the `unique_set_num` as well as the fast RNG for the prevout hash which doesn't seems to be used anywhere.\r\n\r\nE.g.\r\n```c++\r\nstatic BlockTxns CreateRandomTransactions(size_t num_txns)\r\n{\r\n    static uint32_t next_locktime{0};\r\n\r\n    BlockTxns txns;\r\n    txns.reserve(num_txns);\r\n    // Simplest spk for every tx\r\n    CScript spk = CScript() << OP_TRUE;\r\n    for (uint32_t i = 0; i < num_txns; ++i) {\r\n        CMutableTransaction tx;\r\n        tx.vin.resize(1);\r\n        tx.vout.resize(1);\r\n        tx.vout.emplace_back(CTxOut{CENT, spk});\r\n        tx.nLockTime = next_locktime++;\r\n        txns.emplace_back(MakeTransactionRef(tx));\r\n    }\r\n    return txns;\r\n}\r\n```",
      "created_at": "2023-09-05T14:27:26Z",
      "updated_at": "2023-09-05T14:29:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315983675",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315983675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315985759",
      "pull_request_review_id": 1611196988,
      "id": 1315985759,
      "node_id": "PRRC_kwDOABII585OcFlf",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+constexpr size_t BLOCK_VTX_COUNT{4000};\n+constexpr size_t BLOCK_VTX_COUNT_10PERCENT{400};\n+\n+using BlockTxns = decltype(CBlock::vtx);\n+\n+/** Reorg where 1 block is disconnected and 2 blocks are connected. */\n+struct ReorgTxns {\n+    /** Disconnected block. */\n+    BlockTxns disconnected_txns;\n+    /** First connected block. */\n+    BlockTxns connected_txns_1;\n+    /** Second connected block, new chain tip. Has no overlap with disconnected_txns. */\n+    BlockTxns connected_txns_2;\n+    /** Transactions shared between disconnected_txns and connected_txns_1. */\n+    size_t num_shared;\n+};\n+\n+static BlockTxns CreateRandomTransactions(size_t num_txns, uint32_t unique_set_num)\n+{\n+    FastRandomContext det_rand{true};\n+    // The unique_set_num trick won't work otherwise. It assumes that there's a different\n+    // unique_set_num each time we call CreateRandomTransactions and each batch is <= 4000.\n+    assert(num_txns <= BLOCK_VTX_COUNT);\n+\n+    BlockTxns txns;\n+    txns.reserve(num_txns);\n+    // Simplest spk for every tx\n+    CScript spk = CScript() << OP_TRUE;\n+    for (uint32_t i = 0; i < num_txns; ++i) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        // We should get a different prevout hash every time. But just to be sure, change the index\n+        // as well to ensure every tx has a different txid.\n+        tx.vin.emplace_back(CTxIn{COutPoint{det_rand.rand256(), uint32_t(i + BLOCK_VTX_COUNT * unique_set_num)}});\n+        tx.vout.resize(1);\n+        tx.vout.emplace_back(CTxOut{CENT, spk});\n+        txns.emplace_back(MakeTransactionRef(tx));\n+    }\n+    return txns;\n+}\n+\n+/** Creates 2 blocks with BLOCK_VTX_COUNT transactions each. There will be num_not_shared\n+ * transactions that are different, all other transactions the exact same. This is to simulate a\n+ * reorg in which all but num_not_shared transactions are confirmed in the new chain. */\n+static ReorgTxns CreateBlocks(TestChain100Setup& testing_setup, size_t num_not_shared)",
      "path": "src/bench/disconnected_transactions.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "5a1233c098cb093e50ee31a77bb12aa53de545cf",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In In 5a1233c0:\r\n\r\nUnused `testing_setup` arg",
      "created_at": "2023-09-05T14:28:55Z",
      "updated_at": "2023-09-05T14:29:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1315985759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1315985759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316032835",
      "pull_request_review_id": 1611275586,
      "id": 1316032835,
      "node_id": "PRRC_kwDOABII585OcRFD",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+constexpr size_t BLOCK_VTX_COUNT{4000};\n+constexpr size_t BLOCK_VTX_COUNT_10PERCENT{400};\n+\n+using BlockTxns = decltype(CBlock::vtx);\n+\n+/** Reorg where 1 block is disconnected and 2 blocks are connected. */\n+struct ReorgTxns {\n+    /** Disconnected block. */\n+    BlockTxns disconnected_txns;\n+    /** First connected block. */\n+    BlockTxns connected_txns_1;\n+    /** Second connected block, new chain tip. Has no overlap with disconnected_txns. */\n+    BlockTxns connected_txns_2;\n+    /** Transactions shared between disconnected_txns and connected_txns_1. */\n+    size_t num_shared;\n+};\n+\n+static BlockTxns CreateRandomTransactions(size_t num_txns, uint32_t unique_set_num)\n+{\n+    FastRandomContext det_rand{true};\n+    // The unique_set_num trick won't work otherwise. It assumes that there's a different\n+    // unique_set_num each time we call CreateRandomTransactions and each batch is <= 4000.\n+    assert(num_txns <= BLOCK_VTX_COUNT);\n+\n+    BlockTxns txns;\n+    txns.reserve(num_txns);\n+    // Simplest spk for every tx\n+    CScript spk = CScript() << OP_TRUE;\n+    for (uint32_t i = 0; i < num_txns; ++i) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        // We should get a different prevout hash every time. But just to be sure, change the index\n+        // as well to ensure every tx has a different txid.\n+        tx.vin.emplace_back(CTxIn{COutPoint{det_rand.rand256(), uint32_t(i + BLOCK_VTX_COUNT * unique_set_num)}});",
      "path": "src/bench/disconnected_transactions.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "5a1233c098cb093e50ee31a77bb12aa53de545cf",
      "in_reply_to_id": 1315983675,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point about using a static var. I've simplified this but instead of using locktime or prevout `n`, I'm just having each tx spend the previous one. Should be sufficient to ensure we don't get any duplicates, so that gets rid of unique_set_num and the rng.",
      "created_at": "2023-09-05T15:02:56Z",
      "updated_at": "2023-09-05T15:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1316032835",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316032835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316033115",
      "pull_request_review_id": 1611275885,
      "id": 1316033115,
      "node_id": "PRRC_kwDOABII585OcRJb",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+constexpr size_t BLOCK_VTX_COUNT{4000};\n+constexpr size_t BLOCK_VTX_COUNT_10PERCENT{400};\n+\n+using BlockTxns = decltype(CBlock::vtx);\n+\n+/** Reorg where 1 block is disconnected and 2 blocks are connected. */\n+struct ReorgTxns {\n+    /** Disconnected block. */\n+    BlockTxns disconnected_txns;\n+    /** First connected block. */\n+    BlockTxns connected_txns_1;\n+    /** Second connected block, new chain tip. Has no overlap with disconnected_txns. */\n+    BlockTxns connected_txns_2;\n+    /** Transactions shared between disconnected_txns and connected_txns_1. */\n+    size_t num_shared;\n+};\n+\n+static BlockTxns CreateRandomTransactions(size_t num_txns, uint32_t unique_set_num)\n+{\n+    FastRandomContext det_rand{true};\n+    // The unique_set_num trick won't work otherwise. It assumes that there's a different\n+    // unique_set_num each time we call CreateRandomTransactions and each batch is <= 4000.\n+    assert(num_txns <= BLOCK_VTX_COUNT);\n+\n+    BlockTxns txns;\n+    txns.reserve(num_txns);\n+    // Simplest spk for every tx\n+    CScript spk = CScript() << OP_TRUE;\n+    for (uint32_t i = 0; i < num_txns; ++i) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        // We should get a different prevout hash every time. But just to be sure, change the index\n+        // as well to ensure every tx has a different txid.\n+        tx.vin.emplace_back(CTxIn{COutPoint{det_rand.rand256(), uint32_t(i + BLOCK_VTX_COUNT * unique_set_num)}});\n+        tx.vout.resize(1);\n+        tx.vout.emplace_back(CTxOut{CENT, spk});\n+        txns.emplace_back(MakeTransactionRef(tx));\n+    }\n+    return txns;\n+}\n+\n+/** Creates 2 blocks with BLOCK_VTX_COUNT transactions each. There will be num_not_shared\n+ * transactions that are different, all other transactions the exact same. This is to simulate a\n+ * reorg in which all but num_not_shared transactions are confirmed in the new chain. */\n+static ReorgTxns CreateBlocks(TestChain100Setup& testing_setup, size_t num_not_shared)",
      "path": "src/bench/disconnected_transactions.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "5a1233c098cb093e50ee31a77bb12aa53de545cf",
      "in_reply_to_id": 1315985759,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "deleted",
      "created_at": "2023-09-05T15:03:01Z",
      "updated_at": "2023-09-05T15:03:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1316033115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316033115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316033288",
      "pull_request_review_id": 1611276149,
      "id": 1316033288,
      "node_id": "PRRC_kwDOABII585OcRMI",
      "diff_hunk": "@@ -18,6 +18,7 @@\n #include <kernel/chainparams.h>\n #include <kernel/chainstatemanager_opts.h>\n #include <kernel/cs_main.h> // IWYU pragma: export\n+#include <kernel/disconnected_transactions.h>",
      "path": "src/validation.h",
      "position": null,
      "original_position": 4,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "0409dbcc9d5394d310da50e0ca326fb132b6d1e2",
      "in_reply_to_id": 1315982561,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "moved",
      "created_at": "2023-09-05T15:03:05Z",
      "updated_at": "2023-09-05T15:03:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1316033288",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316033288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316074161",
      "pull_request_review_id": 1611340310,
      "id": 1316074161,
      "node_id": "PRRC_kwDOABII585OcbKx",
      "diff_hunk": "@@ -851,27 +851,11 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n  * that are included in blocks in the new chain, and then process the remaining\n  * still-unconfirmed transactions at the end.\n  */\n-\n-// multi_index tag names\n-struct txid_index {};\n-struct insertion_order {};\n-\n struct DisconnectedBlockTransactions {\n-    typedef boost::multi_index_container<\n-        CTransactionRef,\n-        boost::multi_index::indexed_by<\n-            // sorted by txid\n-            boost::multi_index::hashed_unique<\n-                boost::multi_index::tag<txid_index>,\n-                mempoolentry_txid,\n-                SaltedTxidHasher\n-            >,\n-            // sorted by order in the blockchain\n-            boost::multi_index::sequenced<\n-                boost::multi_index::tag<insertion_order>\n-            >\n-        >\n-    > indexed_disconnected_transactions;\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+    using Queue = decltype(queuedTx);",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 27,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "565247aec4e2c70e88f30a9074296dce7489d6b6",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see how this happened here, but calling this list a `Queue` is super confusing :)",
      "created_at": "2023-09-05T15:33:28Z",
      "updated_at": "2023-09-05T17:47:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1316074161",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316074161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 857,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316079931",
      "pull_request_review_id": 1611340310,
      "id": 1316079931,
      "node_id": "PRRC_kwDOABII585Occk7",
      "diff_hunk": "@@ -883,47 +867,49 @@ struct DisconnectedBlockTransactions {\n     // reorg, besides draining this object).\n     ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n \n-    indexed_disconnected_transactions queuedTx;\n-    uint64_t cachedInnerUsage = 0;\n-\n-    // Estimate the overhead of queuedTx to be 6 pointers + an allocation, as\n-    // no exact formula for boost::multi_index_contained is implemented.\n     size_t DynamicMemoryUsage() const {\n-        return memusage::MallocUsage(sizeof(CTransactionRef) + 6 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+        // std::list has 3 pointers per entry\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::MallocUsage(3 * sizeof(void*)) * queuedTx.size();",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 44,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "565247aec4e2c70e88f30a9074296dce7489d6b6",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason not to add `std::list` to `memusage.h` instead?",
      "created_at": "2023-09-05T15:37:52Z",
      "updated_at": "2023-09-05T17:47:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1316079931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316079931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 872,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316117892",
      "pull_request_review_id": 1611340310,
      "id": 1316117892,
      "node_id": "PRRC_kwDOABII585Ocl2E",
      "diff_hunk": "@@ -883,47 +867,49 @@ struct DisconnectedBlockTransactions {\n     // reorg, besides draining this object).\n     ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n \n-    indexed_disconnected_transactions queuedTx;\n-    uint64_t cachedInnerUsage = 0;\n-\n-    // Estimate the overhead of queuedTx to be 6 pointers + an allocation, as\n-    // no exact formula for boost::multi_index_contained is implemented.\n     size_t DynamicMemoryUsage() const {\n-        return memusage::MallocUsage(sizeof(CTransactionRef) + 6 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+        // std::list has 3 pointers per entry\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::MallocUsage(3 * sizeof(void*)) * queuedTx.size();\n     }\n \n     void addTransaction(const CTransactionRef& tx)\n     {\n-        queuedTx.insert(tx);\n+        // Add new transactions to the end.\n+        auto it = queuedTx.insert(queuedTx.end(), tx);\n+        iters_by_txid.emplace(tx->GetHash(), it);\n         cachedInnerUsage += RecursiveDynamicUsage(tx);\n     }\n \n-    // Remove entries based on txid_index, and update memory usage.\n+    // Remove entries that are in this block.\n     void removeForBlock(const std::vector<CTransactionRef>& vtx)\n     {\n         // Short-circuit in the common case of a block being added to the tip\n         if (queuedTx.empty()) {\n             return;\n         }\n-        for (auto const &tx : vtx) {\n-            auto it = queuedTx.find(tx->GetHash());\n-            if (it != queuedTx.end()) {\n-                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n-                queuedTx.erase(it);\n+        for (const auto& tx : vtx) {\n+            auto iter = iters_by_txid.find(tx->GetHash());",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 70,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "565247aec4e2c70e88f30a9074296dce7489d6b6",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~This could look a little cleaner using `extract()`~.\r\n```c++\r\nfor (const auto& tx : vtx) {\r\n    if (auto node = iters_by_txid.extract(tx->GetHash())) {\r\n        auto& list_iter = node.mapped();\r\n        cachedInnerUsage -= RecursiveDynamicUsage(*list_iter);\r\n        queuedTx.erase(list_iter);\r\n    }\r\n}\r\n```\r\nEdit: Ignore this. I benched and performance is worse.",
      "created_at": "2023-09-05T16:05:51Z",
      "updated_at": "2023-09-05T17:47:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1316117892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316117892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316195386",
      "pull_request_review_id": 1611340310,
      "id": 1316195386,
      "node_id": "PRRC_kwDOABII585Oc4w6",
      "diff_hunk": "@@ -883,47 +867,49 @@ struct DisconnectedBlockTransactions {\n     // reorg, besides draining this object).\n     ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n \n-    indexed_disconnected_transactions queuedTx;\n-    uint64_t cachedInnerUsage = 0;\n-\n-    // Estimate the overhead of queuedTx to be 6 pointers + an allocation, as\n-    // no exact formula for boost::multi_index_contained is implemented.\n     size_t DynamicMemoryUsage() const {\n-        return memusage::MallocUsage(sizeof(CTransactionRef) + 6 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+        // std::list has 3 pointers per entry\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::MallocUsage(3 * sizeof(void*)) * queuedTx.size();\n     }\n \n     void addTransaction(const CTransactionRef& tx)",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 47,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "565247aec4e2c70e88f30a9074296dce7489d6b6",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, why no `addTransactions(const std::vector<CTransactionRef>& vtx)` to match `removeForBlock()` ?\r\n\r\nIs it because the tx order needs to be reversed?\r\n\r\nThat would allow a `iters_by_txid.reserve(vtx.size());` which gets me a ~10% speedup in the benches.\r\n\r\nEdit: removed snark after finding the comment I needed.\r\n\r\nEdit2: I suppose this is a potential optimization unrelated to this PR, but  an `addTransactionsForBlock(const CBlock&)` would be unambiguous as to tx order if this is interesting.",
      "created_at": "2023-09-05T17:34:45Z",
      "updated_at": "2023-09-06T02:30:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1316195386",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1316195386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 875,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317301214",
      "pull_request_review_id": 1613366676,
      "id": 1317301214,
      "node_id": "PRRC_kwDOABII585OhGve",
      "diff_hunk": "@@ -851,27 +851,11 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n  * that are included in blocks in the new chain, and then process the remaining\n  * still-unconfirmed transactions at the end.\n  */\n-\n-// multi_index tag names\n-struct txid_index {};\n-struct insertion_order {};\n-\n struct DisconnectedBlockTransactions {\n-    typedef boost::multi_index_container<\n-        CTransactionRef,\n-        boost::multi_index::indexed_by<\n-            // sorted by txid\n-            boost::multi_index::hashed_unique<\n-                boost::multi_index::tag<txid_index>,\n-                mempoolentry_txid,\n-                SaltedTxidHasher\n-            >,\n-            // sorted by order in the blockchain\n-            boost::multi_index::sequenced<\n-                boost::multi_index::tag<insertion_order>\n-            >\n-        >\n-    > indexed_disconnected_transactions;\n+    uint64_t cachedInnerUsage = 0;\n+    std::list<CTransactionRef> queuedTx;\n+    using Queue = decltype(queuedTx);",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 27,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "565247aec4e2c70e88f30a9074296dce7489d6b6",
      "in_reply_to_id": 1316074161,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":sweat_smile: renamed to List",
      "created_at": "2023-09-06T13:38:17Z",
      "updated_at": "2023-09-06T13:38:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1317301214",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317301214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 857,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317305323",
      "pull_request_review_id": 1613373391,
      "id": 1317305323,
      "node_id": "PRRC_kwDOABII585OhHvr",
      "diff_hunk": "@@ -883,47 +867,49 @@ struct DisconnectedBlockTransactions {\n     // reorg, besides draining this object).\n     ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n \n-    indexed_disconnected_transactions queuedTx;\n-    uint64_t cachedInnerUsage = 0;\n-\n-    // Estimate the overhead of queuedTx to be 6 pointers + an allocation, as\n-    // no exact formula for boost::multi_index_contained is implemented.\n     size_t DynamicMemoryUsage() const {\n-        return memusage::MallocUsage(sizeof(CTransactionRef) + 6 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+        // std::list has 3 pointers per entry\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::MallocUsage(3 * sizeof(void*)) * queuedTx.size();\n     }\n \n     void addTransaction(const CTransactionRef& tx)",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 47,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "565247aec4e2c70e88f30a9074296dce7489d6b6",
      "in_reply_to_id": 1316195386,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Hmm, why no addTransactions(const std::vector<CTransactionRef>& vtx) to match removeForBlock() ?\r\n\r\nI had been trying to keep the diff as small as possible\r\n\r\n> That would allow a iters_by_txid.reserve(vtx.size()); which gets me a ~10% speedup in the benches.\r\n\r\nThis is worth it though, so I've done this now - thanks!\r\n\r\n> Edit: removed snark after finding the comment I needed.\r\n\r\nAdded a comment as I agree it wasn't super obvious why we reverse vtx",
      "created_at": "2023-09-06T13:41:03Z",
      "updated_at": "2023-09-06T13:41:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1317305323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317305323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 875,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317578852",
      "pull_request_review_id": 1613811028,
      "id": 1317578852,
      "node_id": "PRRC_kwDOABII585OiKhk",
      "diff_hunk": "@@ -881,58 +873,68 @@ struct DisconnectedBlockTransactions {\n     // to be refactored such that this assumption is no longer true (for\n     // instance if there was some other way we cleaned up the mempool after a\n     // reorg, besides draining this object).\n-    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n-\n-    indexed_disconnected_transactions queuedTx;\n-    uint64_t cachedInnerUsage = 0;\n+    ~DisconnectedBlockTransactions() {\n+        assert(queuedTx.empty());\n+        assert(iters_by_txid.empty());\n+        assert(cachedInnerUsage == 0);\n+    }\n \n-    // Estimate the overhead of queuedTx to be 6 pointers + an allocation, as\n-    // no exact formula for boost::multi_index_contained is implemented.\n     size_t DynamicMemoryUsage() const {\n-        return memusage::MallocUsage(sizeof(CTransactionRef) + 6 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::DynamicUsage(queuedTx);\n     }\n \n-\t// Add transactions from the block, in reverse order.\n+    // Add transactions from the block, in reverse order.\n     void AddTransactionsFromBlock(const std::vector<CTransactionRef>& vtx)\n     {\n         // Blocks are disconnected in descending order by block height. Within each block, add\n         // transactions in reverse order so that transactions with dependencies on other\n         // transactions (if any) are at the beginning. If this data structure grows too large, we\n-        // will trim transactions from the front. Transactions with fewer dependencies should be\n-        // removed first.\n+        // will trim transactions from the front, and should avoid removing transactions that other\n+        // ones depend on.\n+        iters_by_txid.reserve(iters_by_txid.size() + vtx.size());",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 73,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "fc8372947853c105508da5fac6db29512bc1e611",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for catching my problem here!",
      "created_at": "2023-09-06T16:54:53Z",
      "updated_at": "2023-09-06T17:42:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1317578852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317578852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 894,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317582393",
      "pull_request_review_id": 1613811028,
      "id": 1317582393,
      "node_id": "PRRC_kwDOABII585OiLY5",
      "diff_hunk": "@@ -316,7 +317,6 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n         }\n         ++it;\n     }\n-    disconnectpool.queuedTx.clear();",
      "path": "src/validation.cpp",
      "position": 42,
      "original_position": 24,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "fc8372947853c105508da5fac6db29512bc1e611",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I realize this came from my patch but..\r\n\r\nI think we still want to `disconnectpool.clear()` here just in case. Otherwise it's potentially a change of behavior as we're keeping these tx's alive longer (until `disconnectpool` goes out of scope) than before.",
      "created_at": "2023-09-06T16:58:23Z",
      "updated_at": "2023-09-06T17:42:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1317582393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317582393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317596348",
      "pull_request_review_id": 1613811028,
      "id": 1317596348,
      "node_id": "PRRC_kwDOABII585OiOy8",
      "diff_hunk": "@@ -541,7 +541,7 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_init, SnapshotTestSetup)\n     {\n         LOCK2(::cs_main, bg_chainstate.MempoolMutex());\n         BOOST_CHECK(bg_chainstate.DisconnectTip(unused_state, &unused_pool));\n-        unused_pool.clear();  // to avoid queuedTx assertion errors on teardown\n+        unused_pool.take();  // to avoid queuedTx assertion errors on teardown",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "fc8372947853c105508da5fac6db29512bc1e611",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why prefer `take()` here? Seems like that's relying on the side-effect, as opposed to `clear()` which does the thing we want.",
      "created_at": "2023-09-06T17:09:23Z",
      "updated_at": "2023-09-06T17:42:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1317596348",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317596348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 544,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317598419",
      "pull_request_review_id": 1613811028,
      "id": 1317598419,
      "node_id": "PRRC_kwDOABII585OiPTT",
      "diff_hunk": "@@ -851,28 +851,20 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n  * that are included in blocks in the new chain, and then process the remaining\n  * still-unconfirmed transactions at the end.\n  */\n-\n-// multi_index tag names\n-struct txid_index {};\n-struct insertion_order {};\n-\n struct DisconnectedBlockTransactions {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 9,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "fc8372947853c105508da5fac6db29512bc1e611",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: With private members and a ctor, I'd call this a `class` now. But that's arbitrary and I don't think we have any guidelines for it.",
      "created_at": "2023-09-06T17:11:31Z",
      "updated_at": "2023-09-06T17:42:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1317598419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317598419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 854,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317618061",
      "pull_request_review_id": 1613811028,
      "id": 1317618061,
      "node_id": "PRRC_kwDOABII585OiUGN",
      "diff_hunk": "@@ -73,6 +80,15 @@ struct DisconnectedBlockTransactions {\n             iters_by_txid.emplace((*block_it)->GetHash(), it);\n             cachedInnerUsage += RecursiveDynamicUsage(*block_it);\n         }\n+\n+        // Trim the earliest-added entries until we are within memory bounds.\n+        while (!queuedTx.empty() && DynamicMemoryUsage() > m_max_mem_usage) {\n+            evicted.emplace_back(queuedTx.front());",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 55,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "a1f378adbe00f82ccb76a108d49d38721698089f",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could potentially be done more efficiently by iterating to find the number to evict, then doing a single `splice()` rather than multiple `emplace_back()`. I doubt it's worth the code complexity though.",
      "created_at": "2023-09-06T17:31:32Z",
      "updated_at": "2023-09-06T17:42:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1317618061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317618061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317663782",
      "pull_request_review_id": 1613954142,
      "id": 1317663782,
      "node_id": "PRRC_kwDOABII585OifQm",
      "diff_hunk": "@@ -316,7 +317,6 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n         }\n         ++it;\n     }\n-    disconnectpool.queuedTx.clear();",
      "path": "src/validation.cpp",
      "position": 42,
      "original_position": 24,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "fc8372947853c105508da5fac6db29512bc1e611",
      "in_reply_to_id": 1317582393,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "disconnectpool is cleared as part of `take()` though?",
      "created_at": "2023-09-06T18:17:27Z",
      "updated_at": "2023-09-06T18:17:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1317663782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317663782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317668240",
      "pull_request_review_id": 1613961098,
      "id": 1317668240,
      "node_id": "PRRC_kwDOABII585OigWQ",
      "diff_hunk": "@@ -316,7 +317,6 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n         }\n         ++it;\n     }\n-    disconnectpool.queuedTx.clear();",
      "path": "src/validation.cpp",
      "position": 42,
      "original_position": 24,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "fc8372947853c105508da5fac6db29512bc1e611",
      "in_reply_to_id": 1317582393,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, sorry! I meant `queuedTx.clear()`.",
      "created_at": "2023-09-06T18:22:22Z",
      "updated_at": "2023-09-06T18:22:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1317668240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317668240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318353039",
      "pull_request_review_id": 1611163652,
      "id": 1318353039,
      "node_id": "PRRC_kwDOABII585OlHiP",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;\n+    const size_t m_max_mem_usage;\n+    std::list<CTransactionRef> queuedTx;\n+    using List = decltype(queuedTx);\n+    std::unordered_map<uint256, List::iterator, SaltedTxidHasher> iters_by_txid;",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 38,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "a1f378adbe00f82ccb76a108d49d38721698089f",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `TxList` seems like a more appropriate name. But I'd be equally happy just inlining it, just as readable imo.\r\n\r\n```suggestion\r\n    std::unordered_map<uint256, decltype(queuedTx)::iterator, SaltedTxidHasher> iters_by_txid;\r\n```",
      "created_at": "2023-09-07T09:38:10Z",
      "updated_at": "2023-09-07T13:45:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318353039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318353039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 37,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318436895",
      "pull_request_review_id": 1615168174,
      "id": 1318436895,
      "node_id": "PRRC_kwDOABII585OlcAf",
      "diff_hunk": "@@ -541,7 +541,7 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_init, SnapshotTestSetup)\n     {\n         LOCK2(::cs_main, bg_chainstate.MempoolMutex());\n         BOOST_CHECK(bg_chainstate.DisconnectTip(unused_state, &unused_pool));\n-        unused_pool.clear();  // to avoid queuedTx assertion errors on teardown\n+        unused_pool.take();  // to avoid queuedTx assertion errors on teardown",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "fc8372947853c105508da5fac6db29512bc1e611",
      "in_reply_to_id": 1317596348,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It just seemed like slightly more realistic usage but that doesn't seem to be a concern here, so changed to `clear()` now.",
      "created_at": "2023-09-07T10:56:23Z",
      "updated_at": "2023-09-07T10:56:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318436895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318436895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 544,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318437314",
      "pull_request_review_id": 1615168752,
      "id": 1318437314,
      "node_id": "PRRC_kwDOABII585OlcHC",
      "diff_hunk": "@@ -851,28 +851,20 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n  * that are included in blocks in the new chain, and then process the remaining\n  * still-unconfirmed transactions at the end.\n  */\n-\n-// multi_index tag names\n-struct txid_index {};\n-struct insertion_order {};\n-\n struct DisconnectedBlockTransactions {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 9,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "fc8372947853c105508da5fac6db29512bc1e611",
      "in_reply_to_id": 1317598419,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "True, changed",
      "created_at": "2023-09-07T10:56:47Z",
      "updated_at": "2023-09-07T10:56:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318437314",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318437314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 854,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318458796",
      "pull_request_review_id": 1611163652,
      "id": 1318458796,
      "node_id": "PRRC_kwDOABII585OlhWs",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+class DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;\n+    const size_t m_max_mem_usage;\n+    std::list<CTransactionRef> queuedTx;\n+    using List = decltype(queuedTx);\n+    std::unordered_map<uint256, List::iterator, SaltedTxidHasher> iters_by_txid;\n+\n+public:\n+    DisconnectedBlockTransactions(size_t max_mem_usage) : m_max_mem_usage{max_mem_usage} {}\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() {\n+        assert(queuedTx.empty());\n+        assert(iters_by_txid.empty());\n+        assert(cachedInnerUsage == 0);\n+    }\n+\n+    size_t DynamicMemoryUsage() const {\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::DynamicUsage(queuedTx);\n+    }\n+\n+    // Add transactions from the block, in reverse order. We assume that callers will never give us\n+    // multiple transactions with the same txid, otherwise things can go very wrong in\n+    // removeForBlock due to queuedTx containing an item without a corresponding entry in iters_by_txid.\n+    // Returns vector of transactions that were evicted for size-limiting.\n+    [[nodiscard]] std::vector<CTransactionRef> AddTransactionsFromBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        std::vector<CTransactionRef> evicted;\n+        // Blocks are disconnected in descending order by block height. Within each block, add",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 68,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"Blocks are disconnected in descending order by block height.\" I think this should be in the function docstring as it's not an implementation detail but an important part of its interface? We expect the caller to:\r\n- call this function for the outermost/highest block first\r\n- keep `vtx` in the same order as they appear in the block _(the reversion is an implementation detail and not relevant for this function's docstring imo, although we do want to document `take`'s behaviour as per my other comment)_\r\n- ensure all tx ids provided are unique, even across multiple calls\r\n\r\n(ideally using structured \"pre\" doxygen tags?)",
      "created_at": "2023-09-07T11:19:07Z",
      "updated_at": "2023-09-07T13:45:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318458796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318458796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318476721",
      "pull_request_review_id": 1615230239,
      "id": 1318476721,
      "node_id": "PRRC_kwDOABII585Ollux",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <test/util/setup_common.h>\n+#include <kernel/disconnected_transactions.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(disconnected_transactions, TestChain100Setup)\n+\n+//! Tests that DisconnectedBlockTransactions limits its own memory properly\n+BOOST_AUTO_TEST_CASE(disconnectpool_memory_limits)\n+{\n+    // Use the coinbase transactions from TestChain100Setup. It doesn't matter whether these\n+    // transactions would realistically be in a block together, they just need distinct txids for\n+    // this test to work.\n+    std::vector<CTransactionRef> block_vtx(m_coinbase_txns);\n+\n+    size_t usage_full{0};\n+    // DisconnectedBlockTransactions with a comfortable maximum memory usage s.t. nothing is evicted.\n+    {\n+        DisconnectedBlockTransactions disconnectpool{MAX_DISCONNECTED_TX_POOL_SIZE * 1000};\n+        auto evicted_txns = disconnectpool.AddTransactionsFromBlock(block_vtx);\n+        BOOST_CHECK_EQUAL(evicted_txns.size(), 0);\n+        BOOST_CHECK(disconnectpool.DynamicMemoryUsage() <= MAX_DISCONNECTED_TX_POOL_SIZE * 1000);\n+\n+        usage_full = disconnectpool.DynamicMemoryUsage();\n+\n+        disconnectpool.clear();\n+    }\n+\n+    // DisconnectedBlockTransactions that's just a little too small for all of the transactions.\n+    {\n+        const size_t MAX_MEMUSAGE_99{usage_full - sizeof(void*)};\n+        DisconnectedBlockTransactions disconnectpool{MAX_MEMUSAGE_99};\n+        auto evicted_txns = disconnectpool.AddTransactionsFromBlock(block_vtx);\n+        BOOST_CHECK(disconnectpool.DynamicMemoryUsage() <= MAX_MEMUSAGE_99);\n+\n+        // Only 1 transaction needed to be evicted\n+        BOOST_CHECK_EQUAL(1, evicted_txns.size());\n+\n+        // Transactions are added from back to front and eviction is FIFO.\n+        // The last transaction of block_vtx should be the first to be evicted.\n+        BOOST_CHECK_EQUAL(block_vtx.back(), evicted_txns.front());\n+\n+        disconnectpool.clear();\n+    }\n+}\n+\n+//! Sanity checks for DisconnectedBlockTransactions::DynamicMemoryUsage.\n+BOOST_AUTO_TEST_CASE(disconnectpool_memusage)\n+{\n+    if (sizeof(void*) != 8) {\n+        BOOST_TEST_MESSAGE(\"Exiting DisconnectedBlockTransactions memusage tests early due to unsupported arch\");\n+    }\n+\n+    // Use the coinbase transactions from TestChain100Setup as they all have the same size and it\n+    // doesn't matter whether these transactions would realistically be in a block together. They\n+    // just need distinct txids for this test to work.\n+    std::vector<CTransactionRef> block_vtx(m_coinbase_txns);\n+\n+    // Sanity check the sizes are as expected. If setup_common changes the size of coinbase\n+    // transactions, update COINBASE_TX_USAGE.\n+    const size_t COINBASE_TX_USAGE{640};\n+    BOOST_CHECK_EQUAL(block_vtx.size(), 100);\n+    for (const auto& tx : block_vtx) {\n+        BOOST_CHECK_EQUAL(RecursiveDynamicUsage(tx), COINBASE_TX_USAGE);\n+    }\n+\n+    // Test DisconnectedBlockTransactions::DynamicMemoryUsage() for 100 transactions\n+    const size_t EXPECTED_USAGE_100{77648};\n+    {\n+        const size_t MAX_MEMUSAGE_100{EXPECTED_USAGE_100};\n+        DisconnectedBlockTransactions disconnectpool{MAX_MEMUSAGE_100};\n+        auto evicted_txns = disconnectpool.AddTransactionsFromBlock(block_vtx);\n+        BOOST_CHECK_EQUAL(evicted_txns.size(), 0);\n+        BOOST_CHECK_EQUAL(disconnectpool.DynamicMemoryUsage(), EXPECTED_USAGE_100);\n+        disconnectpool.clear();\n+    }\n+\n+    // Test DisconnectedBlockTransactions::DynamicMemoryUsage() for 1 transaction\n+    const size_t EXPECTED_USAGE_1{800};",
      "path": "src/test/disconnected_transactions.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note: `DynamicMemoryUsage` in the boost implementation was returning a fixed estimate (+80B) for usage per entry, so the \"before\" size here would be 720 for 1 tx, 72000 for 100 (I'm not sure how accurate this is but those are the numbers).\r\n\r\nThis means the number has increased so we'd drop more stuff now than before (in the rare case of a multi-block reorg).",
      "created_at": "2023-09-07T11:35:45Z",
      "updated_at": "2023-09-07T11:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318476721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318476721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318587592",
      "pull_request_review_id": 1611163652,
      "id": 1318587592,
      "node_id": "PRRC_kwDOABII585OmAzI",
      "diff_hunk": "@@ -295,28 +294,31 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool->cs);\n     std::vector<uint256> vHashUpdate;\n-    // disconnectpool's insertion_order index sorts the entries from\n-    // oldest to newest, but the oldest entry will be the last tx from the\n+    // disconnectpool sorts the entries from\n+    // oldest to newest. The oldest entry will be the last tx from the\n     // latest mined block that was disconnected.\n     // Iterate disconnectpool in reverse, so that we add transactions\n     // back to the mempool starting with the earliest transaction that had\n     // been previously seen in a block.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe I'm misunderstanding things, but I find this language quite unintuitive and if my understanding is correct - misleading. Assume we have a chaintip at height 100, and we reorged the last 2 blocks, i.e. 100 and 99 (in that order) are disconnected.\r\n- \"from oldest to newest\": I would call a tx in block 99 older than a tx in block 100, but disconnectpool.take() returns txs from block 100 before block 99\r\n- \"the latest mined block that was disconnected\" could mean (and this was my first intuition) \"the latest block _that was disconnected_\", i.e. block 99, or \"the highest of the block(s) that were disconnected\", i.e. the previous chaintip, which I think is what is meant here.\r\n\r\nSuggested rephrasing, which (imo) removes that ambiguity and also highlights the intent a bit more:\r\n```suggestion\r\n    // disconnectpool.take() returns entries first sorted by descending blockheight (i.e. txs from\r\n    // the previous chaintip appear first) and then by reversed in-block order.\r\n    // For example, if blocks 100 and 99 are disconnected, disconnectpool.take() returns \r\n    // [100:n, 100:n-1, ..., 100:0, 99:m, 99:m-1, ..., 99:0]\r\n    // Iterate disconnectpool.take(( in reverse, so that we ensure first adding parent transactions\r\n    // before children are added (if any).\r\n```\r\n\r\nActually, I think moving the first lines that describe the .take() return value to the `DisconnectedBlockTransactions::take` docstring makes probably more sense, and then just reference that here?",
      "created_at": "2023-09-07T13:15:27Z",
      "updated_at": "2023-09-07T13:45:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318587592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318587592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 297,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318589322",
      "pull_request_review_id": 1611163652,
      "id": 1318589322,
      "node_id": "PRRC_kwDOABII585OmBOK",
      "diff_hunk": "@@ -295,28 +294,31 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool->cs);\n     std::vector<uint256> vHashUpdate;\n-    // disconnectpool's insertion_order index sorts the entries from\n-    // oldest to newest, but the oldest entry will be the last tx from the\n+    // disconnectpool sorts the entries from\n+    // oldest to newest. The oldest entry will be the last tx from the\n     // latest mined block that was disconnected.\n     // Iterate disconnectpool in reverse, so that we add transactions\n     // back to the mempool starting with the earliest transaction that had\n     // been previously seen in a block.\n-    auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n-    while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n-        // ignore validation errors in resurrected transactions\n-        if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(*this, *it, GetTime(),\n-                /*bypass_limits=*/true, /*test_accept=*/false).m_result_type !=\n-                    MempoolAcceptResult::ResultType::VALID) {\n-            // If the transaction doesn't make it in to the mempool, remove any\n-            // transactions that depend on it (which would now be orphans).\n-            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n-        } else if (m_mempool->exists(GenTxid::Txid((*it)->GetHash()))) {\n-            vHashUpdate.push_back((*it)->GetHash());\n-        }\n-        ++it;\n-    }\n-    disconnectpool.queuedTx.clear();\n+    {\n+        std::list<CTransactionRef> queuedTx = disconnectpool.take();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: can be const\r\n```suggestion\r\n        const auto queuedTx = disconnectpool.take();\r\n```",
      "created_at": "2023-09-07T13:16:30Z",
      "updated_at": "2023-09-07T13:45:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318589322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318589322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318618551",
      "pull_request_review_id": 1611163652,
      "id": 1318618551,
      "node_id": "PRRC_kwDOABII585OmIW3",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+class DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;\n+    const size_t m_max_mem_usage;\n+    std::list<CTransactionRef> queuedTx;\n+    using List = decltype(queuedTx);\n+    std::unordered_map<uint256, List::iterator, SaltedTxidHasher> iters_by_txid;\n+\n+public:\n+    DisconnectedBlockTransactions(size_t max_mem_usage) : m_max_mem_usage{max_mem_usage} {}\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() {\n+        assert(queuedTx.empty());\n+        assert(iters_by_txid.empty());\n+        assert(cachedInnerUsage == 0);\n+    }\n+\n+    size_t DynamicMemoryUsage() const {\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::DynamicUsage(queuedTx);\n+    }\n+\n+    // Add transactions from the block, in reverse order. We assume that callers will never give us\n+    // multiple transactions with the same txid, otherwise things can go very wrong in\n+    // removeForBlock due to queuedTx containing an item without a corresponding entry in iters_by_txid.\n+    // Returns vector of transactions that were evicted for size-limiting.\n+    [[nodiscard]] std::vector<CTransactionRef> AddTransactionsFromBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        std::vector<CTransactionRef> evicted;\n+        // Blocks are disconnected in descending order by block height. Within each block, add\n+        // transactions in reverse order so that transactions with dependencies on other\n+        // transactions (if any) are at the beginning. If this data structure grows too large, we\n+        // will trim transactions from the front, and should avoid removing transactions that other\n+        // ones depend on.\n+        iters_by_txid.reserve(iters_by_txid.size() + vtx.size());\n+        for (auto block_it = vtx.rbegin(); block_it != vtx.rend(); ++block_it) {\n+            auto it = queuedTx.insert(queuedTx.end(), *block_it);\n+            iters_by_txid.emplace((*block_it)->GetHash(), it);\n+            cachedInnerUsage += RecursiveDynamicUsage(*block_it);\n+        }\n+\n+        // Trim the earliest-added entries until we are within memory bounds.\n+        while (!queuedTx.empty() && DynamicMemoryUsage() > m_max_mem_usage) {\n+            evicted.emplace_back(queuedTx.front());\n+            cachedInnerUsage -= RecursiveDynamicUsage(queuedTx.front());\n+            iters_by_txid.erase(queuedTx.front()->GetHash());\n+            queuedTx.pop_front();\n+        }\n+        return evicted;",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 87,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For readability, would you consider moving this to its own private function?\r\n\r\n<details>\r\n<summary>git diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/kernel/disconnected_transactions.h b/src/kernel/disconnected_transactions.h\r\nindex 6e12059874..d1a8b5e989 100644\r\n--- a/src/kernel/disconnected_transactions.h\r\n+++ b/src/kernel/disconnected_transactions.h\r\n@@ -37,6 +37,20 @@ private:\r\n     using List = decltype(queuedTx);\r\n     std::unordered_map<uint256, List::iterator, SaltedTxidHasher> iters_by_txid;\r\n \r\n+    // Trim and return the earliest-added entries until we are within memory bounds.\r\n+    std::vector<CTransactionRef> EvictTransactionsIfNeeded()\r\n+    {\r\n+        std::vector<CTransactionRef> evicted;\r\n+        while (!queuedTx.empty() && DynamicMemoryUsage() > m_max_mem_usage) {\r\n+            evicted.emplace_back(queuedTx.front());\r\n+            cachedInnerUsage -= RecursiveDynamicUsage(queuedTx.front());\r\n+            iters_by_txid.erase(queuedTx.front()->GetHash());\r\n+            queuedTx.pop_front();\r\n+        }\r\n+\r\n+        return evicted;\r\n+    }\r\n+\r\n public:\r\n     DisconnectedBlockTransactions(size_t max_mem_usage) : m_max_mem_usage{max_mem_usage} {}\r\n \r\n@@ -64,7 +78,6 @@ public:\r\n     // Returns vector of transactions that were evicted for size-limiting.\r\n     [[nodiscard]] std::vector<CTransactionRef> AddTransactionsFromBlock(const std::vector<CTransactionRef>& vtx)\r\n     {\r\n-        std::vector<CTransactionRef> evicted;\r\n         // Blocks are disconnected in descending order by block height. Within each block, add\r\n         // transactions in reverse order so that transactions with dependencies on other\r\n         // transactions (if any) are at the beginning. If this data structure grows too large, we\r\n@@ -77,13 +90,7 @@ public:\r\n             cachedInnerUsage += RecursiveDynamicUsage(*block_it);\r\n         }\r\n \r\n-        // Trim the earliest-added entries until we are within memory bounds.\r\n-        while (!queuedTx.empty() && DynamicMemoryUsage() > m_max_mem_usage) {\r\n-            evicted.emplace_back(queuedTx.front());\r\n-            cachedInnerUsage -= RecursiveDynamicUsage(queuedTx.front());\r\n-            iters_by_txid.erase(queuedTx.front()->GetHash());\r\n-            queuedTx.pop_front();\r\n-        }\r\n+        const auto evicted{EvictTransactionsIfNeeded()};\r\n         return evicted;\r\n     }\r\n \r\n```\r\n</details>",
      "created_at": "2023-09-07T13:34:11Z",
      "updated_at": "2023-09-07T13:45:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318618551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318618551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 80,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318623000",
      "pull_request_review_id": 1611163652,
      "id": 1318623000,
      "node_id": "PRRC_kwDOABII585OmJcY",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 17,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit\r\n```suggestion\r\nstatic const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20'000;\r\n```",
      "created_at": "2023-09-07T13:37:19Z",
      "updated_at": "2023-09-07T13:45:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318623000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318623000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318625980",
      "pull_request_review_id": 1611163652,
      "id": 1318625980,
      "node_id": "PRRC_kwDOABII585OmKK8",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <test/util/setup_common.h>\n+#include <kernel/disconnected_transactions.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(disconnected_transactions, TestChain100Setup)\n+\n+//! Tests that DisconnectedBlockTransactions limits its own memory properly\n+BOOST_AUTO_TEST_CASE(disconnectpool_memory_limits)\n+{\n+    // Use the coinbase transactions from TestChain100Setup. It doesn't matter whether these\n+    // transactions would realistically be in a block together, they just need distinct txids for\n+    // this test to work.\n+    std::vector<CTransactionRef> block_vtx(m_coinbase_txns);\n+\n+    size_t usage_full{0};\n+    // DisconnectedBlockTransactions with a comfortable maximum memory usage s.t. nothing is evicted.",
      "path": "src/test/disconnected_transactions.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: less abbreviations if not necessary\r\n```suggestion\r\n    // DisconnectedBlockTransactions with a comfortable maximum memory usage so that nothing is evicted.\r\n```",
      "created_at": "2023-09-07T13:38:51Z",
      "updated_at": "2023-09-07T13:45:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318625980",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318625980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318935899",
      "pull_request_review_id": 1615957811,
      "id": 1318935899,
      "node_id": "PRRC_kwDOABII585OnV1b",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 17,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": 1318623000,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-09-07T17:43:41Z",
      "updated_at": "2023-09-11T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318935899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318935899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318936085",
      "pull_request_review_id": 1615957811,
      "id": 1318936085,
      "node_id": "PRRC_kwDOABII585OnV4V",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+struct DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;\n+    const size_t m_max_mem_usage;\n+    std::list<CTransactionRef> queuedTx;\n+    using List = decltype(queuedTx);\n+    std::unordered_map<uint256, List::iterator, SaltedTxidHasher> iters_by_txid;",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 38,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "a1f378adbe00f82ccb76a108d49d38721698089f",
      "in_reply_to_id": 1318353039,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "called it `TxList`",
      "created_at": "2023-09-07T17:43:53Z",
      "updated_at": "2023-09-11T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318936085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318936085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 37,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318936420",
      "pull_request_review_id": 1615957811,
      "id": 1318936420,
      "node_id": "PRRC_kwDOABII585OnV9k",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+class DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;\n+    const size_t m_max_mem_usage;\n+    std::list<CTransactionRef> queuedTx;\n+    using List = decltype(queuedTx);\n+    std::unordered_map<uint256, List::iterator, SaltedTxidHasher> iters_by_txid;\n+\n+public:\n+    DisconnectedBlockTransactions(size_t max_mem_usage) : m_max_mem_usage{max_mem_usage} {}\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() {\n+        assert(queuedTx.empty());\n+        assert(iters_by_txid.empty());\n+        assert(cachedInnerUsage == 0);\n+    }\n+\n+    size_t DynamicMemoryUsage() const {\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::DynamicUsage(queuedTx);\n+    }\n+\n+    // Add transactions from the block, in reverse order. We assume that callers will never give us\n+    // multiple transactions with the same txid, otherwise things can go very wrong in\n+    // removeForBlock due to queuedTx containing an item without a corresponding entry in iters_by_txid.\n+    // Returns vector of transactions that were evicted for size-limiting.\n+    [[nodiscard]] std::vector<CTransactionRef> AddTransactionsFromBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        std::vector<CTransactionRef> evicted;\n+        // Blocks are disconnected in descending order by block height. Within each block, add",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 68,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": 1318458796,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added notes about order of queuedTx in the class description and stated that the callers should go descending order by block height in the comment for this function.",
      "created_at": "2023-09-07T17:44:17Z",
      "updated_at": "2023-09-11T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318936420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318936420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318940266",
      "pull_request_review_id": 1615957811,
      "id": 1318940266,
      "node_id": "PRRC_kwDOABII585OnW5q",
      "diff_hunk": "@@ -73,6 +80,15 @@ struct DisconnectedBlockTransactions {\n             iters_by_txid.emplace((*block_it)->GetHash(), it);\n             cachedInnerUsage += RecursiveDynamicUsage(*block_it);\n         }\n+\n+        // Trim the earliest-added entries until we are within memory bounds.\n+        while (!queuedTx.empty() && DynamicMemoryUsage() > m_max_mem_usage) {\n+            evicted.emplace_back(queuedTx.front());",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 55,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "a1f378adbe00f82ccb76a108d49d38721698089f",
      "in_reply_to_id": 1317618061,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Didn't end up doing this as it requires knowing how much the memory usage will change and I'm not sure if I'd implement it 100% accurately...",
      "created_at": "2023-09-07T17:48:19Z",
      "updated_at": "2023-09-11T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318940266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318940266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318940427",
      "pull_request_review_id": 1615957811,
      "id": 1318940427,
      "node_id": "PRRC_kwDOABII585OnW8L",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ */\n+class DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;\n+    const size_t m_max_mem_usage;\n+    std::list<CTransactionRef> queuedTx;\n+    using List = decltype(queuedTx);\n+    std::unordered_map<uint256, List::iterator, SaltedTxidHasher> iters_by_txid;\n+\n+public:\n+    DisconnectedBlockTransactions(size_t max_mem_usage) : m_max_mem_usage{max_mem_usage} {}\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() {\n+        assert(queuedTx.empty());\n+        assert(iters_by_txid.empty());\n+        assert(cachedInnerUsage == 0);\n+    }\n+\n+    size_t DynamicMemoryUsage() const {\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::DynamicUsage(queuedTx);\n+    }\n+\n+    // Add transactions from the block, in reverse order. We assume that callers will never give us\n+    // multiple transactions with the same txid, otherwise things can go very wrong in\n+    // removeForBlock due to queuedTx containing an item without a corresponding entry in iters_by_txid.\n+    // Returns vector of transactions that were evicted for size-limiting.\n+    [[nodiscard]] std::vector<CTransactionRef> AddTransactionsFromBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        std::vector<CTransactionRef> evicted;\n+        // Blocks are disconnected in descending order by block height. Within each block, add\n+        // transactions in reverse order so that transactions with dependencies on other\n+        // transactions (if any) are at the beginning. If this data structure grows too large, we\n+        // will trim transactions from the front, and should avoid removing transactions that other\n+        // ones depend on.\n+        iters_by_txid.reserve(iters_by_txid.size() + vtx.size());\n+        for (auto block_it = vtx.rbegin(); block_it != vtx.rend(); ++block_it) {\n+            auto it = queuedTx.insert(queuedTx.end(), *block_it);\n+            iters_by_txid.emplace((*block_it)->GetHash(), it);\n+            cachedInnerUsage += RecursiveDynamicUsage(*block_it);\n+        }\n+\n+        // Trim the earliest-added entries until we are within memory bounds.\n+        while (!queuedTx.empty() && DynamicMemoryUsage() > m_max_mem_usage) {\n+            evicted.emplace_back(queuedTx.front());\n+            cachedInnerUsage -= RecursiveDynamicUsage(queuedTx.front());\n+            iters_by_txid.erase(queuedTx.front()->GetHash());\n+            queuedTx.pop_front();\n+        }\n+        return evicted;",
      "path": "src/kernel/disconnected_transactions.h",
      "position": null,
      "original_position": 87,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": 1318618551,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, moved",
      "created_at": "2023-09-07T17:48:31Z",
      "updated_at": "2023-09-11T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318940427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318940427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 80,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318941541",
      "pull_request_review_id": 1615957811,
      "id": 1318941541,
      "node_id": "PRRC_kwDOABII585OnXNl",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <test/util/setup_common.h>\n+#include <kernel/disconnected_transactions.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(disconnected_transactions, TestChain100Setup)\n+\n+//! Tests that DisconnectedBlockTransactions limits its own memory properly\n+BOOST_AUTO_TEST_CASE(disconnectpool_memory_limits)\n+{\n+    // Use the coinbase transactions from TestChain100Setup. It doesn't matter whether these\n+    // transactions would realistically be in a block together, they just need distinct txids for\n+    // this test to work.\n+    std::vector<CTransactionRef> block_vtx(m_coinbase_txns);\n+\n+    size_t usage_full{0};\n+    // DisconnectedBlockTransactions with a comfortable maximum memory usage s.t. nothing is evicted.",
      "path": "src/test/disconnected_transactions.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": 1318625980,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2023-09-07T17:49:37Z",
      "updated_at": "2023-09-11T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318941541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318941541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318942435",
      "pull_request_review_id": 1615957811,
      "id": 1318942435,
      "node_id": "PRRC_kwDOABII585OnXbj",
      "diff_hunk": "@@ -295,28 +294,31 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool->cs);\n     std::vector<uint256> vHashUpdate;\n-    // disconnectpool's insertion_order index sorts the entries from\n-    // oldest to newest, but the oldest entry will be the last tx from the\n+    // disconnectpool sorts the entries from\n+    // oldest to newest. The oldest entry will be the last tx from the\n     // latest mined block that was disconnected.\n     // Iterate disconnectpool in reverse, so that we add transactions\n     // back to the mempool starting with the earliest transaction that had\n     // been previously seen in a block.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": 1318587592,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Er, I found this a bit hard to parse too, so I've reworded the comment but a bit differently.",
      "created_at": "2023-09-07T17:50:32Z",
      "updated_at": "2023-09-11T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318942435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318942435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 297,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318943402",
      "pull_request_review_id": 1615957811,
      "id": 1318943402,
      "node_id": "PRRC_kwDOABII585OnXqq",
      "diff_hunk": "@@ -316,7 +317,6 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n         }\n         ++it;\n     }\n-    disconnectpool.queuedTx.clear();",
      "path": "src/validation.cpp",
      "position": 42,
      "original_position": 24,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "fc8372947853c105508da5fac6db29512bc1e611",
      "in_reply_to_id": 1317582393,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a local scope for `queuedTx` to go out of",
      "created_at": "2023-09-07T17:51:37Z",
      "updated_at": "2023-09-11T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318943402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318943402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318943493",
      "pull_request_review_id": 1615957811,
      "id": 1318943493,
      "node_id": "PRRC_kwDOABII585OnXsF",
      "diff_hunk": "@@ -295,28 +294,31 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool->cs);\n     std::vector<uint256> vHashUpdate;\n-    // disconnectpool's insertion_order index sorts the entries from\n-    // oldest to newest, but the oldest entry will be the last tx from the\n+    // disconnectpool sorts the entries from\n+    // oldest to newest. The oldest entry will be the last tx from the\n     // latest mined block that was disconnected.\n     // Iterate disconnectpool in reverse, so that we add transactions\n     // back to the mempool starting with the earliest transaction that had\n     // been previously seen in a block.\n-    auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n-    while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n-        // ignore validation errors in resurrected transactions\n-        if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(*this, *it, GetTime(),\n-                /*bypass_limits=*/true, /*test_accept=*/false).m_result_type !=\n-                    MempoolAcceptResult::ResultType::VALID) {\n-            // If the transaction doesn't make it in to the mempool, remove any\n-            // transactions that depend on it (which would now be orphans).\n-            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n-        } else if (m_mempool->exists(GenTxid::Txid((*it)->GetHash()))) {\n-            vHashUpdate.push_back((*it)->GetHash());\n-        }\n-        ++it;\n-    }\n-    disconnectpool.queuedTx.clear();\n+    {\n+        std::list<CTransactionRef> queuedTx = disconnectpool.take();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "88dcf22abff266fd86b50838a41a0233dfd560af",
      "in_reply_to_id": 1318589322,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2023-09-07T17:51:43Z",
      "updated_at": "2023-09-11T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318943493",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318943493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318965303",
      "pull_request_review_id": 1616001879,
      "id": 1318965303,
      "node_id": "PRRC_kwDOABII585OndA3",
      "diff_hunk": "@@ -295,28 +295,30 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool->cs);\n     std::vector<uint256> vHashUpdate;\n-    // disconnectpool's insertion_order index sorts the entries from\n-    // oldest to newest, but the oldest entry will be the last tx from the\n-    // latest mined block that was disconnected.\n-    // Iterate disconnectpool in reverse, so that we add transactions\n-    // back to the mempool starting with the earliest transaction that had\n-    // been previously seen in a block.\n-    auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n-    while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n-        // ignore validation errors in resurrected transactions\n-        if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(*this, *it, GetTime(),\n-                /*bypass_limits=*/true, /*test_accept=*/false).m_result_type !=\n-                    MempoolAcceptResult::ResultType::VALID) {\n-            // If the transaction doesn't make it in to the mempool, remove any\n-            // transactions that depend on it (which would now be orphans).\n-            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n-        } else if (m_mempool->exists(GenTxid::Txid((*it)->GetHash()))) {\n-            vHashUpdate.push_back((*it)->GetHash());\n-        }\n-        ++it;\n-    }\n-    disconnectpool.queuedTx.clear();\n+    {",
      "path": "src/validation.cpp",
      "position": 43,
      "original_position": 26,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "a9e682194af3b2e888c9ca74ce1d1e365ea77eb7",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes!",
      "created_at": "2023-09-07T18:14:47Z",
      "updated_at": "2023-09-07T18:14:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1318965303",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318965303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 297,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320576421",
      "pull_request_review_id": 1618648240,
      "id": 1320576421,
      "node_id": "PRRC_kwDOABII585OtmWl",
      "diff_hunk": "@@ -881,59 +873,78 @@ struct DisconnectedBlockTransactions {\n     // to be refactored such that this assumption is no longer true (for\n     // instance if there was some other way we cleaned up the mempool after a\n     // reorg, besides draining this object).\n-    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n-\n-    indexed_disconnected_transactions queuedTx;\n-    uint64_t cachedInnerUsage = 0;\n+    ~DisconnectedBlockTransactions() {\n+        assert(queuedTx.empty());\n+        assert(iters_by_txid.empty());\n+        assert(cachedInnerUsage == 0);\n+    }\n \n-    // Estimate the overhead of queuedTx to be 6 pointers + an allocation, as\n-    // no exact formula for boost::multi_index_contained is implemented.\n     size_t DynamicMemoryUsage() const {\n-        return memusage::MallocUsage(sizeof(CTransactionRef) + 6 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::DynamicUsage(queuedTx);\n     }\n \n-\t/** Add transactions from the block, iterating through vtx in reverse order. Callers should call\n+    /** Add transactions from the block, iterating through vtx in reverse order. Callers should call\n      * this function for blocks in descending order by block height.\n      * We assume that callers never pass multiple transactions with the same txid, otherwise things\n      * can go very wrong in removeForBlock due to queuedTx containing an item without a\n      * corresponding entry in iters_by_txid.\n      */\n     void AddTransactionsFromBlock(const std::vector<CTransactionRef>& vtx)\n     {\n+        iters_by_txid.reserve(iters_by_txid.size() + vtx.size());\n         for (auto block_it = vtx.rbegin(); block_it != vtx.rend(); ++block_it) {\n-            queuedTx.insert(*block_it);\n+            auto it = queuedTx.insert(queuedTx.end(), *block_it);\n+            iters_by_txid.emplace((*block_it)->GetHash(), it);\n             cachedInnerUsage += RecursiveDynamicUsage(*block_it);\n         }\n     }\n \n-    // Remove entries based on txid_index, and update memory usage.\n+    /** Remove any entries that are in this block. */\n     void removeForBlock(const std::vector<CTransactionRef>& vtx)\n     {\n         // Short-circuit in the common case of a block being added to the tip\n         if (queuedTx.empty()) {\n             return;\n         }\n-        for (auto const &tx : vtx) {\n-            auto it = queuedTx.find(tx->GetHash());\n-            if (it != queuedTx.end()) {\n-                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n-                queuedTx.erase(it);\n+        for (const auto& tx : vtx) {\n+            auto iter = iters_by_txid.find(tx->GetHash());\n+            if (iter != iters_by_txid.end()) {\n+                auto list_iter = iter->second;\n+                iters_by_txid.erase(iter);\n+                cachedInnerUsage -= RecursiveDynamicUsage(*list_iter);\n+                queuedTx.erase(list_iter);",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 101,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "a9e682194af3b2e888c9ca74ce1d1e365ea77eb7",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Here `list_iter` can never be [deduced](https://en.cppreference.com/w/cpp/language/auto) as a reference to `iter->second` which would then be erased right?\r\n\r\nAn alternative to avoid having to ask this question could be to simply erase from `iters_by_txid` last:\r\n```cpp\r\ncachedInnerUsage -= RecursiveDynamicUsage(*iter->second);\r\nqueuedTx.erase(iter->second);\r\niters_by_txid.erase(iter);\r\n```",
      "created_at": "2023-09-09T14:21:14Z",
      "updated_at": "2023-09-09T14:21:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1320576421",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320576421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": 912,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322889291",
      "pull_request_review_id": 1622008442,
      "id": 1322889291,
      "node_id": "PRRC_kwDOABII585O2bBL",
      "diff_hunk": "@@ -148,6 +149,21 @@ static inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n     return p ? MallocUsage(sizeof(X)) + MallocUsage(sizeof(stl_shared_counter)) : 0;\n }\n \n+template<typename X>\n+struct list_node : private X\n+{\n+private:\n+    void* ptr_next;\n+    void* ptr_prev;\n+    void* ptr_val;",
      "path": "src/memusage.h",
      "position": 18,
      "original_position": 18,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Currently, by inheriting from X, we're accounting for the size of X (as this will be included in `sizeof(list_node<X>)`. I think that makes sense - X is owned by the list.\r\n\r\nI'm not familiar with std::list implementations, but I'm not sure if accounting for both `X` as well as `void* ptr_val` makes sense. I think the node owning X is plenty, I don't see the need for an additional pointer?\r\n\r\nFinally, by inheriting from `private X` we cannot use this on non-class/struct types, e.g. it wouldn't work for `std::list<int>`. A suggestion to address both problems (and it seems the same approach was taken for e.g. `stl_tree_node`:\r\n\r\n```suggestion\r\nstruct list_node\r\n{\r\nprivate:\r\n    void* ptr_next;\r\n    void* ptr_prev;\r\n    X val;\r\n```",
      "created_at": "2023-09-12T11:19:01Z",
      "updated_at": "2023-09-12T12:36:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1322889291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322889291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": 153,
      "original_start_line": 153,
      "start_side": "RIGHT",
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322892874",
      "pull_request_review_id": 1622008442,
      "id": 1322892874,
      "node_id": "PRRC_kwDOABII585O2b5K",
      "diff_hunk": "@@ -148,6 +149,21 @@ static inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n     return p ? MallocUsage(sizeof(X)) + MallocUsage(sizeof(stl_shared_counter)) : 0;\n }\n \n+template<typename X>\n+struct list_node : private X\n+{\n+private:\n+    void* ptr_next;\n+    void* ptr_prev;\n+    void* ptr_val;\n+};\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const std::list<X>& l)\n+{\n+    return MallocUsage(sizeof(list_node<X>)) * l.size();",
      "path": "src/memusage.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we not also need to account for `sizeof(l)` for the list overhead?\r\n```suggestion\r\n    return MallocUsage(sizeof(l)) + MallocUsage(sizeof(list_node<X>)) * l.size();\r\n```",
      "created_at": "2023-09-12T11:22:29Z",
      "updated_at": "2023-09-12T12:36:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1322892874",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322892874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322948452",
      "pull_request_review_id": 1622008442,
      "id": 1322948452,
      "node_id": "PRRC_kwDOABII585O2pdk",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20'000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ *\n+ * Order of queuedTx:\n+ * The front of the list should be the most recently-confirmed transactions (transactions at the\n+ * end of vtx of blocks closer to the tip). If memory usage grows too large, we trim from the front\n+ * of the list. After trimming, transactions can be re-added to the mempool from the back of the\n+ * list to the front without running into missing inputs.\n+ */\n+class DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;\n+    const size_t m_max_mem_usage;\n+    std::list<CTransactionRef> queuedTx;\n+    using TxList = decltype(queuedTx);\n+    std::unordered_map<uint256, TxList::iterator, SaltedTxidHasher> iters_by_txid;\n+\n+    /** Trim the earliest-added entries until we are within memory bounds. */\n+    std::vector<CTransactionRef> LimitMemoryUsage()\n+    {\n+        std::vector<CTransactionRef> evicted;\n+\n+        while (!queuedTx.empty() && DynamicMemoryUsage() > m_max_mem_usage) {\n+            evicted.emplace_back(queuedTx.front());\n+            cachedInnerUsage -= RecursiveDynamicUsage(queuedTx.front());",
      "path": "src/kernel/disconnected_transactions.h",
      "position": 53,
      "original_position": 53,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `cachedInnerUsage` shouldn't account for the memory usage of the `shared_ptr<CTransaction>`, only for the `CTransaction`. We already account for the `shared_ptr` in `DisconnectedBlockTransactions::DynamicMemoryUsage` (as I think it should be).\r\n\r\n<details>\r\n<summary>git diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/kernel/disconnected_transactions.h b/src/kernel/disconnected_transactions.h\r\nindex 0c170e7a4b..a3bc77b6fc 100644\r\n--- a/src/kernel/disconnected_transactions.h\r\n+++ b/src/kernel/disconnected_transactions.h\r\n@@ -50,7 +50,7 @@ private:\r\n \r\n         while (!queuedTx.empty() && DynamicMemoryUsage() > m_max_mem_usage) {\r\n             evicted.emplace_back(queuedTx.front());\r\n-            cachedInnerUsage -= RecursiveDynamicUsage(queuedTx.front());\r\n+            cachedInnerUsage -= RecursiveDynamicUsage(*queuedTx.front());\r\n             iters_by_txid.erase(queuedTx.front()->GetHash());\r\n             queuedTx.pop_front();\r\n         }\r\n@@ -91,7 +91,7 @@ public:\r\n         for (auto block_it = vtx.rbegin(); block_it != vtx.rend(); ++block_it) {\r\n             auto it = queuedTx.insert(queuedTx.end(), *block_it);\r\n             iters_by_txid.emplace((*block_it)->GetHash(), it);\r\n-            cachedInnerUsage += RecursiveDynamicUsage(*block_it);\r\n+            cachedInnerUsage += RecursiveDynamicUsage(**block_it);\r\n         }\r\n         return LimitMemoryUsage();\r\n     }\r\n@@ -108,7 +108,7 @@ public:\r\n             if (iter != iters_by_txid.end()) {\r\n                 auto list_iter = iter->second;\r\n                 iters_by_txid.erase(iter);\r\n-                cachedInnerUsage -= RecursiveDynamicUsage(*list_iter);\r\n+                cachedInnerUsage -= RecursiveDynamicUsage(**list_iter);\r\n                 queuedTx.erase(list_iter);\r\n             }\r\n         }\r\n\r\n```\r\n</details>\r\n\r\n",
      "created_at": "2023-09-12T12:15:37Z",
      "updated_at": "2023-09-12T12:39:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1322948452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322948452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322958591",
      "pull_request_review_id": 1622008442,
      "id": 1322958591,
      "node_id": "PRRC_kwDOABII585O2r7_",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20'000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ *\n+ * Order of queuedTx:\n+ * The front of the list should be the most recently-confirmed transactions (transactions at the\n+ * end of vtx of blocks closer to the tip). If memory usage grows too large, we trim from the front\n+ * of the list. After trimming, transactions can be re-added to the mempool from the back of the\n+ * list to the front without running into missing inputs.\n+ */\n+class DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;",
      "path": "src/kernel/disconnected_transactions.h",
      "position": 40,
      "original_position": 40,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: A docstring would be helpful I think:\r\n\r\n```suggestion\r\n    //! Memory usage of the CTransaction objects to which queuedTx holds references\r\n    uint64_t cachedInnerUsage = 0;\r\n```",
      "created_at": "2023-09-12T12:24:19Z",
      "updated_at": "2023-09-12T15:51:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1322958591",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322958591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323054738",
      "pull_request_review_id": 1622272669,
      "id": 1323054738,
      "node_id": "PRRC_kwDOABII585O3DaS",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <kernel/disconnected_transactions.h>\n+#include <primitives/block.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+constexpr size_t BLOCK_VTX_COUNT{4000};\n+constexpr size_t BLOCK_VTX_COUNT_10PERCENT{400};\n+\n+using BlockTxns = decltype(CBlock::vtx);\n+\n+/** Reorg where 1 block is disconnected and 2 blocks are connected. */\n+struct ReorgTxns {\n+    /** Disconnected block. */\n+    BlockTxns disconnected_txns;\n+    /** First connected block. */\n+    BlockTxns connected_txns_1;\n+    /** Second connected block, new chain tip. Has no overlap with disconnected_txns. */\n+    BlockTxns connected_txns_2;\n+    /** Transactions shared between disconnected_txns and connected_txns_1. */\n+    size_t num_shared;\n+};\n+\n+static BlockTxns CreateRandomTransactions(size_t num_txns)\n+{\n+    // Ensure every transaction has a different txid by having each one spend the previous one.\n+    static uint256 prevout_hash{uint256::ZERO};\n+\n+    BlockTxns txns;\n+    txns.reserve(num_txns);\n+    // Simplest spk for every tx\n+    CScript spk = CScript() << OP_TRUE;\n+    for (uint32_t i = 0; i < num_txns; ++i) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);",
      "path": "src/bench/disconnected_transactions.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the purpose of these resizes? Do we want two vins and two vouts?",
      "created_at": "2023-09-12T13:34:14Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323054738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323054738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323069039",
      "pull_request_review_id": 1622272669,
      "id": 1323069039,
      "node_id": "PRRC_kwDOABII585O3G5v",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <kernel/disconnected_transactions.h>\n+#include <primitives/block.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+constexpr size_t BLOCK_VTX_COUNT{4000};\n+constexpr size_t BLOCK_VTX_COUNT_10PERCENT{400};\n+\n+using BlockTxns = decltype(CBlock::vtx);\n+\n+/** Reorg where 1 block is disconnected and 2 blocks are connected. */\n+struct ReorgTxns {\n+    /** Disconnected block. */\n+    BlockTxns disconnected_txns;\n+    /** First connected block. */\n+    BlockTxns connected_txns_1;\n+    /** Second connected block, new chain tip. Has no overlap with disconnected_txns. */\n+    BlockTxns connected_txns_2;\n+    /** Transactions shared between disconnected_txns and connected_txns_1. */\n+    size_t num_shared;\n+};\n+\n+static BlockTxns CreateRandomTransactions(size_t num_txns)\n+{\n+    // Ensure every transaction has a different txid by having each one spend the previous one.\n+    static uint256 prevout_hash{uint256::ZERO};\n+\n+    BlockTxns txns;\n+    txns.reserve(num_txns);\n+    // Simplest spk for every tx\n+    CScript spk = CScript() << OP_TRUE;\n+    for (uint32_t i = 0; i < num_txns; ++i) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vin.emplace_back(CTxIn{COutPoint{prevout_hash, 0}});\n+        tx.vout.resize(1);\n+        tx.vout.emplace_back(CTxOut{CENT, spk});\n+        auto ptx{MakeTransactionRef(tx)};\n+        txns.emplace_back(ptx);\n+        prevout_hash = ptx->GetHash();\n+    }\n+    return txns;\n+}\n+\n+/** Creates 2 blocks with BLOCK_VTX_COUNT transactions each. There will be num_not_shared\n+ * transactions that are different, all other transactions the exact same. This is to simulate a\n+ * reorg in which all but num_not_shared transactions are confirmed in the new chain. */",
      "path": "src/bench/disconnected_transactions.cpp",
      "position": 52,
      "original_position": 52,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit\r\n```suggestion\r\n/** Creates 1 disconnected block and 2 connected blocks, each with BLOCK_VTX_COUNT transactions. Between the disconnected and the first connected block, there will be num_not_shared\r\n * transactions that are different, all other transactions the exact same. This is to simulate a\r\n * reorg in which all but num_not_shared transactions are confirmed in the new chain. */\r\n```",
      "created_at": "2023-09-12T13:44:16Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323069039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323069039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": 50,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323091031",
      "pull_request_review_id": 1622272669,
      "id": 1323091031,
      "node_id": "PRRC_kwDOABII585O3MRX",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <kernel/disconnected_transactions.h>\n+#include <primitives/block.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+constexpr size_t BLOCK_VTX_COUNT{4000};\n+constexpr size_t BLOCK_VTX_COUNT_10PERCENT{400};\n+\n+using BlockTxns = decltype(CBlock::vtx);\n+\n+/** Reorg where 1 block is disconnected and 2 blocks are connected. */\n+struct ReorgTxns {\n+    /** Disconnected block. */\n+    BlockTxns disconnected_txns;\n+    /** First connected block. */\n+    BlockTxns connected_txns_1;\n+    /** Second connected block, new chain tip. Has no overlap with disconnected_txns. */\n+    BlockTxns connected_txns_2;\n+    /** Transactions shared between disconnected_txns and connected_txns_1. */\n+    size_t num_shared;\n+};\n+\n+static BlockTxns CreateRandomTransactions(size_t num_txns)\n+{\n+    // Ensure every transaction has a different txid by having each one spend the previous one.\n+    static uint256 prevout_hash{uint256::ZERO};\n+\n+    BlockTxns txns;\n+    txns.reserve(num_txns);\n+    // Simplest spk for every tx\n+    CScript spk = CScript() << OP_TRUE;\n+    for (uint32_t i = 0; i < num_txns; ++i) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vin.emplace_back(CTxIn{COutPoint{prevout_hash, 0}});\n+        tx.vout.resize(1);\n+        tx.vout.emplace_back(CTxOut{CENT, spk});\n+        auto ptx{MakeTransactionRef(tx)};\n+        txns.emplace_back(ptx);\n+        prevout_hash = ptx->GetHash();\n+    }\n+    return txns;\n+}\n+\n+/** Creates 2 blocks with BLOCK_VTX_COUNT transactions each. There will be num_not_shared\n+ * transactions that are different, all other transactions the exact same. This is to simulate a\n+ * reorg in which all but num_not_shared transactions are confirmed in the new chain. */\n+static ReorgTxns CreateBlocks(size_t num_not_shared)\n+{\n+    auto num_shared{BLOCK_VTX_COUNT - num_not_shared};\n+    const auto shared_txns{CreateRandomTransactions(/*num_txns=*/num_shared)};\n+\n+    // Create different sets of transactions...\n+    auto disconnected_block_txns{CreateRandomTransactions(/*num_txns=*/num_not_shared)};\n+    std::copy(shared_txns.begin(), shared_txns.end(), std::back_inserter(disconnected_block_txns));\n+\n+    auto connected_block_txns{CreateRandomTransactions(/*num_txns=*/num_not_shared)};\n+    std::copy(shared_txns.begin(), shared_txns.end(), std::back_inserter(connected_block_txns));\n+\n+    assert(disconnected_block_txns.size() == BLOCK_VTX_COUNT);\n+    assert(connected_block_txns.size() == BLOCK_VTX_COUNT);\n+\n+    return ReorgTxns{/*disconnected_txns=*/disconnected_block_txns,\n+                     /*connected_txns_1=*/connected_block_txns,\n+                     /*connected_txns_2=*/CreateRandomTransactions(BLOCK_VTX_COUNT),\n+                     /*num_shared=*/num_shared};\n+}\n+\n+static void Reorg(const ReorgTxns& reorg)\n+{\n+    DisconnectedBlockTransactions disconnectpool{MAX_DISCONNECTED_TX_POOL_SIZE * 1000};\n+    // Disconnect block\n+    const auto evicted = disconnectpool.AddTransactionsFromBlock(reorg.disconnected_txns);\n+    assert(evicted.empty());\n+\n+    // Connect first block\n+    disconnectpool.removeForBlock(reorg.connected_txns_1);\n+    // Connect new tip\n+    disconnectpool.removeForBlock(reorg.connected_txns_2);\n+\n+    // Sanity Check\n+    assert(disconnectpool.size() == BLOCK_VTX_COUNT - reorg.num_shared);\n+\n+    disconnectpool.clear();\n+}\n+\n+/** Add transactions from DisconnectedBlockTransactions, remove all of them, and then pop from the front until empty. */",
      "path": "src/bench/disconnected_transactions.cpp",
      "position": 92,
      "original_position": 92,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: docstrings seems to be from a previous version of this PR. Would suggest updating to e.g.:\r\n\r\n```suggestion\r\n/** Reorg scenario where all of the transactions in the newly connected block existed in the disconnected block. */\r\n```",
      "created_at": "2023-09-12T13:59:18Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323091031",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323091031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323108081",
      "pull_request_review_id": 1622272669,
      "id": 1323108081,
      "node_id": "PRRC_kwDOABII585O3Qbx",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20'000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ *\n+ * Order of queuedTx:\n+ * The front of the list should be the most recently-confirmed transactions (transactions at the\n+ * end of vtx of blocks closer to the tip). If memory usage grows too large, we trim from the front\n+ * of the list. After trimming, transactions can be re-added to the mempool from the back of the\n+ * list to the front without running into missing inputs.\n+ */\n+class DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;\n+    const size_t m_max_mem_usage;\n+    std::list<CTransactionRef> queuedTx;\n+    using TxList = decltype(queuedTx);\n+    std::unordered_map<uint256, TxList::iterator, SaltedTxidHasher> iters_by_txid;\n+\n+    /** Trim the earliest-added entries until we are within memory bounds. */\n+    std::vector<CTransactionRef> LimitMemoryUsage()\n+    {\n+        std::vector<CTransactionRef> evicted;\n+\n+        while (!queuedTx.empty() && DynamicMemoryUsage() > m_max_mem_usage) {\n+            evicted.emplace_back(queuedTx.front());\n+            cachedInnerUsage -= RecursiveDynamicUsage(queuedTx.front());\n+            iters_by_txid.erase(queuedTx.front()->GetHash());\n+            queuedTx.pop_front();\n+        }\n+        return evicted;\n+    }\n+\n+public:\n+    DisconnectedBlockTransactions(size_t max_mem_usage) : m_max_mem_usage{max_mem_usage} {}\n+\n+    // It's almost certainly a logic bug if we don't clear out queuedTx before\n+    // destruction, as we add to it while disconnecting blocks, and then we\n+    // need to re-process remaining transactions to ensure mempool consistency.\n+    // For now, assert() that we've emptied out this object on destruction.\n+    // This assert() can always be removed if the reorg-processing code were\n+    // to be refactored such that this assumption is no longer true (for\n+    // instance if there was some other way we cleaned up the mempool after a\n+    // reorg, besides draining this object).\n+    ~DisconnectedBlockTransactions() {\n+        assert(queuedTx.empty());\n+        assert(iters_by_txid.empty());\n+        assert(cachedInnerUsage == 0);\n+    }\n+\n+    size_t DynamicMemoryUsage() const {\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::DynamicUsage(queuedTx);\n+    }\n+\n+    /** Add transactions from the block, iterating through vtx in reverse order. Callers should call\n+     * this function for blocks in descending order by block height.\n+     * We assume that callers never pass multiple transactions with the same txid, otherwise things\n+     * can go very wrong in removeForBlock due to queuedTx containing an item without a\n+     * corresponding entry in iters_by_txid.\n+     * @returns vector of transactions that were evicted for size-limiting.\n+     */\n+    [[nodiscard]] std::vector<CTransactionRef> AddTransactionsFromBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        iters_by_txid.reserve(iters_by_txid.size() + vtx.size());\n+        for (auto block_it = vtx.rbegin(); block_it != vtx.rend(); ++block_it) {\n+            auto it = queuedTx.insert(queuedTx.end(), *block_it);\n+            iters_by_txid.emplace((*block_it)->GetHash(), it);\n+            cachedInnerUsage += RecursiveDynamicUsage(*block_it);\n+        }\n+        return LimitMemoryUsage();\n+    }\n+\n+    /** Remove any entries that are in this block. */\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx)\n+    {\n+        // Short-circuit in the common case of a block being added to the tip\n+        if (queuedTx.empty()) {\n+            return;\n+        }\n+        for (const auto& tx : vtx) {\n+            auto iter = iters_by_txid.find(tx->GetHash());\n+            if (iter != iters_by_txid.end()) {\n+                auto list_iter = iter->second;\n+                iters_by_txid.erase(iter);\n+                cachedInnerUsage -= RecursiveDynamicUsage(*list_iter);\n+                queuedTx.erase(list_iter);\n+            }\n+        }\n+    }\n+\n+    size_t size() const { return queuedTx.size(); }\n+\n+    void clear()\n+    {\n+        cachedInnerUsage = 0;\n+        iters_by_txid.clear();\n+        queuedTx.clear();\n+    }\n+\n+    /** Clear all data structures and return the list of transactions. */\n+    std::list<CTransactionRef> take() {",
      "path": "src/kernel/disconnected_transactions.h",
      "position": 127,
      "original_position": 127,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tidy nit\r\n```suggestion\r\n    std::list<CTransactionRef> take()\r\n    {\r\n```",
      "created_at": "2023-09-12T14:11:14Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323108081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323108081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 127,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323140597",
      "pull_request_review_id": 1622272669,
      "id": 1323140597,
      "node_id": "PRRC_kwDOABII585O3YX1",
      "diff_hunk": "@@ -881,59 +873,78 @@ struct DisconnectedBlockTransactions {\n     // to be refactored such that this assumption is no longer true (for\n     // instance if there was some other way we cleaned up the mempool after a\n     // reorg, besides draining this object).\n-    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }\n-\n-    indexed_disconnected_transactions queuedTx;\n-    uint64_t cachedInnerUsage = 0;\n+    ~DisconnectedBlockTransactions() {\n+        assert(queuedTx.empty());\n+        assert(iters_by_txid.empty());\n+        assert(cachedInnerUsage == 0);\n+    }\n \n-    // Estimate the overhead of queuedTx to be 6 pointers + an allocation, as\n-    // no exact formula for boost::multi_index_contained is implemented.\n     size_t DynamicMemoryUsage() const {\n-        return memusage::MallocUsage(sizeof(CTransactionRef) + 6 * sizeof(void*)) * queuedTx.size() + cachedInnerUsage;\n+        return cachedInnerUsage + memusage::DynamicUsage(iters_by_txid) + memusage::DynamicUsage(queuedTx);\n     }\n \n-\t/** Add transactions from the block, iterating through vtx in reverse order. Callers should call\n+    /** Add transactions from the block, iterating through vtx in reverse order. Callers should call\n      * this function for blocks in descending order by block height.\n      * We assume that callers never pass multiple transactions with the same txid, otherwise things\n      * can go very wrong in removeForBlock due to queuedTx containing an item without a\n      * corresponding entry in iters_by_txid.\n      */\n     void AddTransactionsFromBlock(const std::vector<CTransactionRef>& vtx)\n     {\n+        iters_by_txid.reserve(iters_by_txid.size() + vtx.size());\n         for (auto block_it = vtx.rbegin(); block_it != vtx.rend(); ++block_it) {\n-            queuedTx.insert(*block_it);\n+            auto it = queuedTx.insert(queuedTx.end(), *block_it);\n+            iters_by_txid.emplace((*block_it)->GetHash(), it);\n             cachedInnerUsage += RecursiveDynamicUsage(*block_it);\n         }\n     }\n \n-    // Remove entries based on txid_index, and update memory usage.\n+    /** Remove any entries that are in this block. */\n     void removeForBlock(const std::vector<CTransactionRef>& vtx)\n     {\n         // Short-circuit in the common case of a block being added to the tip\n         if (queuedTx.empty()) {\n             return;\n         }\n-        for (auto const &tx : vtx) {\n-            auto it = queuedTx.find(tx->GetHash());\n-            if (it != queuedTx.end()) {\n-                cachedInnerUsage -= RecursiveDynamicUsage(*it);\n-                queuedTx.erase(it);\n+        for (const auto& tx : vtx) {\n+            auto iter = iters_by_txid.find(tx->GetHash());\n+            if (iter != iters_by_txid.end()) {\n+                auto list_iter = iter->second;\n+                iters_by_txid.erase(iter);\n+                cachedInnerUsage -= RecursiveDynamicUsage(*list_iter);\n+                queuedTx.erase(list_iter);\n             }\n         }\n     }\n \n-    // Remove an entry by insertion_order index, and update memory usage.\n-    void removeEntry(indexed_disconnected_transactions::index<insertion_order>::type::iterator entry)\n+    /** Remove the first entry and update memory usage. */\n+    CTransactionRef take_first()",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 109,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "a9e682194af3b2e888c9ca74ce1d1e365ea77eb7",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think adding `take_first()` and then removing it in the next non-move commit is not ideal and seems like it could be avoided by moving the memory management commit to come before the boost removal commit, but (I didn't check) it's probably not worth the rebase hell.",
      "created_at": "2023-09-12T14:33:23Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323140597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323140597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 921,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323146048",
      "pull_request_review_id": 1622272669,
      "id": 1323146048,
      "node_id": "PRRC_kwDOABII585O3ZtA",
      "diff_hunk": "@@ -2720,15 +2721,10 @@ bool Chainstate::DisconnectTip(BlockValidationState& state, DisconnectedBlockTra\n     }\n \n     if (disconnectpool && m_mempool) {\n-        // Save transactions to re-add to mempool at end of reorg\n-        for (auto it = block.vtx.rbegin(); it != block.vtx.rend(); ++it) {\n-            disconnectpool->addTransaction(*it);\n-        }\n-        while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n-            // Drop the earliest entry, and remove its children from the mempool.\n-            auto it = disconnectpool->queuedTx.get<insertion_order>().begin();\n-            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n-            disconnectpool->removeEntry(it);\n+        // Save transactions to re-add to mempool at end of reorg. If any entries are dropped,\n+        // remove their descendants from the mempool.\n+        for (auto&& ptx : disconnectpool->AddTransactionsFromBlock(block.vtx)) {\n+            m_mempool->removeRecursive(*ptx, MemPoolRemovalReason::REORG);\n         }",
      "path": "src/validation.cpp",
      "position": 87,
      "original_position": 87,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit\r\n```suggestion\r\n        // Save transactions to re-add to mempool at end of reorg. If any entries are evicted for exceeding memory limits,\r\n        // remove them and their descendants from the mempool.\r\n        for (auto&& evicted_tx : disconnectpool->AddTransactionsFromBlock(block.vtx)) {\r\n            m_mempool->removeRecursive(*evicted_tx, MemPoolRemovalReason::REORG);\r\n        }\r\n```",
      "created_at": "2023-09-12T14:37:12Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323146048",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323146048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": 2724,
      "original_start_line": 2724,
      "start_side": "RIGHT",
      "line": 2728,
      "original_line": 2728,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323151846",
      "pull_request_review_id": 1622272669,
      "id": 1323151846,
      "node_id": "PRRC_kwDOABII585O3bHm",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+#define BITCOIN_KERNEL_DISCONNECTED_TRANSACTIONS_H\n+\n+#include <core_memusage.h>\n+#include <memusage.h>\n+#include <primitives/transaction.h>\n+#include <util/hasher.h>\n+\n+#include <list>\n+#include <unordered_map>\n+\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20'000;\n+/**\n+ * DisconnectedBlockTransactions\n+\n+ * During the reorg, it's desirable to re-add previously confirmed transactions\n+ * to the mempool, so that anything not re-confirmed in the new chain is\n+ * available to be mined. However, it's more efficient to wait until the reorg\n+ * is complete and process all still-unconfirmed transactions at that time,\n+ * since we expect most confirmed transactions to (typically) still be\n+ * confirmed in the new chain, and re-accepting to the memory pool is expensive\n+ * (and therefore better to not do in the middle of reorg-processing).\n+ * Instead, store the disconnected transactions (in order!) as we go, remove any\n+ * that are included in blocks in the new chain, and then process the remaining\n+ * still-unconfirmed transactions at the end.\n+ *\n+ * Order of queuedTx:\n+ * The front of the list should be the most recently-confirmed transactions (transactions at the\n+ * end of vtx of blocks closer to the tip). If memory usage grows too large, we trim from the front\n+ * of the list. After trimming, transactions can be re-added to the mempool from the back of the\n+ * list to the front without running into missing inputs.\n+ */\n+class DisconnectedBlockTransactions {\n+private:\n+    uint64_t cachedInnerUsage = 0;\n+    const size_t m_max_mem_usage;\n+    std::list<CTransactionRef> queuedTx;\n+    using TxList = decltype(queuedTx);\n+    std::unordered_map<uint256, TxList::iterator, SaltedTxidHasher> iters_by_txid;\n+\n+    /** Trim the earliest-added entries until we are within memory bounds. */\n+    std::vector<CTransactionRef> LimitMemoryUsage()",
      "path": "src/kernel/disconnected_transactions.h",
      "position": 47,
      "original_position": 47,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `#include <vector>`",
      "created_at": "2023-09-12T14:41:11Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323151846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323151846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323225091",
      "pull_request_review_id": 1622272669,
      "id": 1323225091,
      "node_id": "PRRC_kwDOABII585O3tAD",
      "diff_hunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <test/util/setup_common.h>\n+#include <kernel/disconnected_transactions.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(disconnected_transactions, TestChain100Setup)\n+\n+//! Tests that DisconnectedBlockTransactions limits its own memory properly\n+BOOST_AUTO_TEST_CASE(disconnectpool_memory_limits)\n+{\n+    if (sizeof(void*) != 8) {\n+        BOOST_TEST_MESSAGE(\"Exiting disconnected_transactions memory usage test early due to unsupported arch\");\n+    }\n+\n+    // Use the coinbase transactions from TestChain100Setup. It doesn't matter whether these\n+    // transactions would realistically be in a block together, they just need distinct txids and\n+    // uniform size for this test to work.\n+    std::vector<CTransactionRef> block_vtx(m_coinbase_txns);\n+    BOOST_CHECK_EQUAL(block_vtx.size(), 100);\n+\n+    // Roughly estimate sizes to sanity check that DisconnectedBlockTransactions::DynamicMemoryUsage\n+    // is within an expected range.\n+\n+    // Overhead for the hashmap depends on number of buckets\n+    std::unordered_map<uint256, CTransaction*, SaltedTxidHasher> temp_map;\n+    temp_map.reserve(2);\n+    const size_t MAP_2{memusage::DynamicUsage(temp_map)};\n+    temp_map.reserve(100);\n+    const size_t MAP_100{memusage::DynamicUsage(temp_map)};",
      "path": "src/test/disconnected_transactions.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is correct. `reserve` makes sure the buckets are allocated, but the map's `size` remains unchanged. So `MAP_100` significantly underestimates the dynamic usage I think?",
      "created_at": "2023-09-12T15:32:08Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323225091",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323225091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323228444",
      "pull_request_review_id": 1622272669,
      "id": 1323228444,
      "node_id": "PRRC_kwDOABII585O3t0c",
      "diff_hunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <test/util/setup_common.h>\n+#include <kernel/disconnected_transactions.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(disconnected_transactions, TestChain100Setup)\n+\n+//! Tests that DisconnectedBlockTransactions limits its own memory properly\n+BOOST_AUTO_TEST_CASE(disconnectpool_memory_limits)\n+{\n+    if (sizeof(void*) != 8) {\n+        BOOST_TEST_MESSAGE(\"Exiting disconnected_transactions memory usage test early due to unsupported arch\");\n+    }\n+\n+    // Use the coinbase transactions from TestChain100Setup. It doesn't matter whether these\n+    // transactions would realistically be in a block together, they just need distinct txids and\n+    // uniform size for this test to work.\n+    std::vector<CTransactionRef> block_vtx(m_coinbase_txns);\n+    BOOST_CHECK_EQUAL(block_vtx.size(), 100);\n+\n+    // Roughly estimate sizes to sanity check that DisconnectedBlockTransactions::DynamicMemoryUsage\n+    // is within an expected range.\n+\n+    // Overhead for the hashmap depends on number of buckets\n+    std::unordered_map<uint256, CTransaction*, SaltedTxidHasher> temp_map;\n+    temp_map.reserve(2);\n+    const size_t MAP_2{memusage::DynamicUsage(temp_map)};\n+    temp_map.reserve(100);\n+    const size_t MAP_100{memusage::DynamicUsage(temp_map)};\n+\n+    const size_t TX_USAGE{RecursiveDynamicUsage(block_vtx.front())};\n+    for (const auto& tx : block_vtx) BOOST_CHECK_EQUAL(RecursiveDynamicUsage(tx), TX_USAGE);\n+\n+    const size_t ENTRY_USAGE_OVERESTIMATE{TX_USAGE + 16 * memusage::MallocUsage(sizeof(void*))};\n+\n+    // DisconnectedBlockTransactions that's just big enough for 1 transaction.\n+    {\n+        DisconnectedBlockTransactions disconnectpool{MAP_2 + ENTRY_USAGE_OVERESTIMATE};\n+        // Just 2 transactions because the allocation depends on the number of txns passed in.\n+        std::vector<CTransactionRef> two_txns({block_vtx.at(0), block_vtx.at(1)});\n+        auto evicted_txns = disconnectpool.AddTransactionsFromBlock(two_txns);\n+        BOOST_CHECK(disconnectpool.DynamicMemoryUsage() <= MAP_2 + ENTRY_USAGE_OVERESTIMATE);\n+\n+        // Only 1 transaction can be kept",
      "path": "src/test/disconnected_transactions.cpp",
      "position": 48,
      "original_position": 48,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not immediately obvious to me why this is expected behaviour, when we instantiated `disconnectpool` to the memory usage of a map of 2 + overhead. At the moment, I think this is the case because (as per my previous comment) the `MAP_x` vars don't include the map nodes, but that seems unintuitive/unexpected?",
      "created_at": "2023-09-12T15:34:27Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323228444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323228444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323243772",
      "pull_request_review_id": 1622272669,
      "id": 1323243772,
      "node_id": "PRRC_kwDOABII585O3xj8",
      "diff_hunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <test/util/setup_common.h>\n+#include <kernel/disconnected_transactions.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(disconnected_transactions, TestChain100Setup)\n+\n+//! Tests that DisconnectedBlockTransactions limits its own memory properly\n+BOOST_AUTO_TEST_CASE(disconnectpool_memory_limits)\n+{\n+    if (sizeof(void*) != 8) {\n+        BOOST_TEST_MESSAGE(\"Exiting disconnected_transactions memory usage test early due to unsupported arch\");\n+    }\n+\n+    // Use the coinbase transactions from TestChain100Setup. It doesn't matter whether these\n+    // transactions would realistically be in a block together, they just need distinct txids and\n+    // uniform size for this test to work.\n+    std::vector<CTransactionRef> block_vtx(m_coinbase_txns);\n+    BOOST_CHECK_EQUAL(block_vtx.size(), 100);\n+\n+    // Roughly estimate sizes to sanity check that DisconnectedBlockTransactions::DynamicMemoryUsage\n+    // is within an expected range.\n+\n+    // Overhead for the hashmap depends on number of buckets\n+    std::unordered_map<uint256, CTransaction*, SaltedTxidHasher> temp_map;",
      "path": "src/test/disconnected_transactions.cpp",
      "position": 29,
      "original_position": 29,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not use CTransactionRef here so we can better estimate the shared_ptr overhead?\r\n```suggestion\r\n    std::unordered_map<uint256, CTransactionRef, SaltedTxidHasher> temp_map;\r\n```",
      "created_at": "2023-09-12T15:46:24Z",
      "updated_at": "2023-09-12T15:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323243772",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323243772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323354371",
      "pull_request_review_id": 1622771205,
      "id": 1323354371,
      "node_id": "PRRC_kwDOABII585O4MkD",
      "diff_hunk": "@@ -148,6 +149,21 @@ static inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n     return p ? MallocUsage(sizeof(X)) + MallocUsage(sizeof(stl_shared_counter)) : 0;\n }\n \n+template<typename X>\n+struct list_node : private X\n+{\n+private:\n+    void* ptr_next;\n+    void* ptr_prev;\n+    void* ptr_val;",
      "path": "src/memusage.h",
      "position": 18,
      "original_position": 18,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": 1322889291,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was looking into this yesterday and arrived at both of the same conclusions.\r\n\r\nPoked at libstdc++'s impl with gdb:\r\n\r\n`(gdb) print -pretty off -raw-values -- queuedTx`\r\n`... _M_node = {<std::__detail::_List_node_base> = {_M_next = 0x55555556aeb0, _M_prev = 0x55555556aed0}, _M_size = 2}}} ...`\r\n\r\nWhich agrees with (on 64bit):\r\n```\r\n(gdb) print sizeof(queuedTx)\r\n$7 = 24\r\n```\r\nSo it appears to me that in general a list will be:\r\nA structure with pointer to its head and tail nodes, plus an additional int for size.\r\nPlus for each node: a pointer to prev, next, and the data itself.\r\n\r\nI'm still working on confirming those numbers fully with an implementation though.",
      "created_at": "2023-09-12T17:27:29Z",
      "updated_at": "2023-09-12T17:27:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1323354371",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323354371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": 153,
      "original_start_line": 153,
      "start_side": "RIGHT",
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324161832",
      "pull_request_review_id": 1623984616,
      "id": 1324161832,
      "node_id": "PRRC_kwDOABII585O7Rso",
      "diff_hunk": "@@ -148,6 +149,21 @@ static inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n     return p ? MallocUsage(sizeof(X)) + MallocUsage(sizeof(stl_shared_counter)) : 0;\n }\n \n+template<typename X>\n+struct list_node : private X\n+{\n+private:\n+    void* ptr_next;\n+    void* ptr_prev;\n+    void* ptr_val;\n+};\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const std::list<X>& l)\n+{\n+    return MallocUsage(sizeof(list_node<X>)) * l.size();",
      "path": "src/memusage.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": 1322892874,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that part is dynamically allocated...?",
      "created_at": "2023-09-13T08:26:23Z",
      "updated_at": "2023-09-13T08:26:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1324161832",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324161832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324177176",
      "pull_request_review_id": 1624008337,
      "id": 1324177176,
      "node_id": "PRRC_kwDOABII585O7VcY",
      "diff_hunk": "@@ -148,6 +149,21 @@ static inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n     return p ? MallocUsage(sizeof(X)) + MallocUsage(sizeof(stl_shared_counter)) : 0;\n }\n \n+template<typename X>\n+struct list_node : private X\n+{\n+private:\n+    void* ptr_next;\n+    void* ptr_prev;\n+    void* ptr_val;\n+};\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const std::list<X>& l)\n+{\n+    return MallocUsage(sizeof(list_node<X>)) * l.size();",
      "path": "src/memusage.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "original_commit_id": "9dcef47e4d52b15ffe88be7ddf5ea626121e5f0d",
      "in_reply_to_id": 1322892874,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah yes the hint is in the function name, woops 🙃",
      "created_at": "2023-09-13T08:38:38Z",
      "updated_at": "2023-09-13T08:38:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1324177176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324177176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    }
  ]
}